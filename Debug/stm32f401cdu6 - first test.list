
stm32f401cdu6 - first test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004994  080079c8  080079c8  000179c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c35c  0800c35c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c35c  0800c35c  0001c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c364  0800c364  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c364  0800c364  0001c364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c368  0800c368  0001c368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800c36c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001d4  0800c540  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800c540  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009203  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d32  00000000  00000000  0002944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b0  00000000  00000000  0002b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000672  00000000  00000000  0002ba30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017288  00000000  00000000  0002c0a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000acc3  00000000  00000000  0004332a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00088543  00000000  00000000  0004dfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000336c  00000000  00000000  000d6530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000d989c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079ac 	.word	0x080079ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080079ac 	.word	0x080079ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <tft_write_bus>:
GPIO_TypeDef* PORT_NAME_ARR[]={D0_PORT,D1_PORT,D2_PORT,D3_PORT,D4_PORT,D5_PORT,D6_PORT,D7_PORT,D8_PORT,D9_PORT,D10_PORT,D11_PORT,D12_PORT,D13_PORT,D14_PORT,D15_PORT};
uint16_t      PIN_NAME_ARR[]={D0_PIN,D1_PIN,D2_PIN,D3_PIN,D4_PIN,D5_PIN,D6_PIN,D7_PIN,D8_PIN,D9_PIN,D10_PIN,D11_PIN,D12_PIN,D13_PIN,D14_PIN,D15_PIN};


void tft_write_bus(uint8_t high_byte,uint8_t low_byte)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71bb      	strb	r3, [r7, #6]
    else
    {
      pin_low(PORT_NAME_ARR[i],PIN_NAME_ARR[i]);
    }
  }*/
	PORTA->ODR = (PORTA->ODR & 0xffffff00) | low_byte;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <tft_write_bus+0x54>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <tft_write_bus+0x54>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	614b      	str	r3, [r1, #20]
	PORTB->ODR = (PORTB->ODR & 0xffffff00) | high_byte;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <tft_write_bus+0x58>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	490b      	ldr	r1, [pc, #44]	; (8000f0c <tft_write_bus+0x58>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	614b      	str	r3, [r1, #20]
	asm("nop");
 8000ee4:	bf00      	nop
	pin_low(WR_PORT,WR_PIN);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <tft_write_bus+0x58>)
 8000eee:	f002 fe51 	bl	8003b94 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <tft_write_bus+0x58>)
 8000efa:	f002 fe4b 	bl	8003b94 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400

08000f10 <Lcd_Write_Data>:



void Lcd_Write_Data(uint16_t data)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]

  tft_write_bus(data>>8,data&0x00ff);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffc3 	bl	8000eb4 <tft_write_bus>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <Lcd_Write_Cmd+0x40>)
 8000f4a:	f002 fe23 	bl	8003b94 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffa9 	bl	8000eb4 <tft_write_bus>
  pin_high(RS_PORT,RS_PIN);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <Lcd_Write_Cmd+0x40>)
 8000f6a:	f002 fe13 	bl	8003b94 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020000 	.word	0x40020000

08000f7c <Lcd_SetArea>:


void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	80fb      	strh	r3, [r7, #6]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80bb      	strh	r3, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]
 8000f96:	4613      	mov	r3, r2
 8000f98:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 8000f9a:	202a      	movs	r0, #42	; 0x2a
 8000f9c:	f7ff ffcc 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffb2 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffac 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffa6 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffa0 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 8000fd0:	202b      	movs	r0, #43	; 0x2b
 8000fd2:	f7ff ffb1 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff97 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff91 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8000fee:	883b      	ldrh	r3, [r7, #0]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff8b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 8000ffa:	883b      	ldrh	r3, [r7, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff85 	bl	8000f10 <Lcd_Write_Data>
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <Lcd_SetPixel>:
                }
	}
}

void Lcd_SetPixel(int16_t x, int16_t y, int16_t color)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	460b      	mov	r3, r1
 800101a:	80bb      	strh	r3, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	807b      	strh	r3, [r7, #2]
Lcd_SetArea(x, x, y, y);
 8001020:	88f8      	ldrh	r0, [r7, #6]
 8001022:	88f9      	ldrh	r1, [r7, #6]
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	f7ff ffa8 	bl	8000f7c <Lcd_SetArea>
Lcd_Write_Cmd(0x2c);
 800102c:	202c      	movs	r0, #44	; 0x2c
 800102e:	f7ff ff83 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(color);
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff6b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Cmd(0x0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff7c 	bl	8000f38 <Lcd_Write_Cmd>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Init_SSD1963>:



void Init_SSD1963(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

	pin_high(CS_PORT,CS_PIN);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4875      	ldr	r0, [pc, #468]	; (8001228 <Init_SSD1963+0x1e0>)
 8001054:	f002 fd9e 	bl	8003b94 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105e:	4873      	ldr	r0, [pc, #460]	; (800122c <Init_SSD1963+0x1e4>)
 8001060:	f002 fd98 	bl	8003b94 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106a:	4870      	ldr	r0, [pc, #448]	; (800122c <Init_SSD1963+0x1e4>)
 800106c:	f002 fd92 	bl	8003b94 <HAL_GPIO_WritePin>
	pin_low(REST_PORT,REST_PIN);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	486c      	ldr	r0, [pc, #432]	; (8001228 <Init_SSD1963+0x1e0>)
 8001078:	f002 fd8c 	bl	8003b94 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 800107c:	2014      	movs	r0, #20
 800107e:	f002 facf 	bl	8003620 <HAL_Delay>
	pin_high(REST_PORT,REST_PIN);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	4867      	ldr	r0, [pc, #412]	; (8001228 <Init_SSD1963+0x1e0>)
 800108a:	f002 fd83 	bl	8003b94 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800108e:	2014      	movs	r0, #20
 8001090:	f002 fac6 	bl	8003620 <HAL_Delay>
	pin_low(CS_PORT,CS_PIN);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109a:	4863      	ldr	r0, [pc, #396]	; (8001228 <Init_SSD1963+0x1e0>)
 800109c:	f002 fd7a 	bl	8003b94 <HAL_GPIO_WritePin>


Lcd_Write_Cmd(0xE2);		//PLL multiplier, set PLL clock to 120M
 80010a0:	20e2      	movs	r0, #226	; 0xe2
 80010a2:	f7ff ff49 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 80010a6:	2023      	movs	r0, #35	; 0x23
 80010a8:	f7ff ff32 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x02);
 80010ac:	2002      	movs	r0, #2
 80010ae:	f7ff ff2f 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x04);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff ff2c 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Cmd(0xE0);		// PLL enable
 80010b8:	20e0      	movs	r0, #224	; 0xe0
 80010ba:	f7ff ff3d 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff ff26 	bl	8000f10 <Lcd_Write_Data>
HAL_Delay(10);
 80010c4:	200a      	movs	r0, #10
 80010c6:	f002 faab 	bl	8003620 <HAL_Delay>
Lcd_Write_Cmd(0xE0);
 80010ca:	20e0      	movs	r0, #224	; 0xe0
 80010cc:	f7ff ff34 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff ff1d 	bl	8000f10 <Lcd_Write_Data>
HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f002 faa2 	bl	8003620 <HAL_Delay>
Lcd_Write_Cmd(0x01);		// software reset
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ff2b 	bl	8000f38 <Lcd_Write_Cmd>
HAL_Delay(100);
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f002 fa9c 	bl	8003620 <HAL_Delay>
Lcd_Write_Cmd(0xE6);		//PLL setting for PCLK, depends on resolution
 80010e8:	20e6      	movs	r0, #230	; 0xe6
 80010ea:	f7ff ff25 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x04);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f7ff ff0e 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x93);
 80010f4:	2093      	movs	r0, #147	; 0x93
 80010f6:	f7ff ff0b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xE0);
 80010fa:	20e0      	movs	r0, #224	; 0xe0
 80010fc:	f7ff ff08 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB0);		//LCD SPECIFICATION
 8001100:	20b0      	movs	r0, #176	; 0xb0
 8001102:	f7ff ff19 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x00);		// 0x24
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ff02 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff feff 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x03);		//Set HDP	799
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fefc 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x1F);
 8001118:	201f      	movs	r0, #31
 800111a:	f7ff fef9 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//Set VDP	479
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fef6 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xDF);
 8001124:	20df      	movs	r0, #223	; 0xdf
 8001126:	f7ff fef3 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fef0 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB4);		//HSYNC
 8001130:	20b4      	movs	r0, #180	; 0xb4
 8001132:	f7ff ff01 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);		//Set HT	928
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff feea 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xA0);
 800113c:	20a0      	movs	r0, #160	; 0xa0
 800113e:	f7ff fee7 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set HPS	46
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fee4 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x2E);
 8001148:	202e      	movs	r0, #46	; 0x2e
 800114a:	f7ff fee1 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x30);		//Set HPW	48
 800114e:	2030      	movs	r0, #48	; 0x30
 8001150:	f7ff fede 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set LPS	15
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fedb 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x0F);
 800115a:	200f      	movs	r0, #15
 800115c:	f7ff fed8 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fed5 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB6);		//VSYNC
 8001166:	20b6      	movs	r0, #182	; 0xb6
 8001168:	f7ff fee6 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x02);		//Set VT	525
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fecf 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x0D);
 8001172:	200d      	movs	r0, #13
 8001174:	f7ff fecc 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set VPS	16
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fec9 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x10);
 800117e:	2010      	movs	r0, #16
 8001180:	f7ff fec6 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x10);		//Set VPW	16
 8001184:	2010      	movs	r0, #16
 8001186:	f7ff fec3 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set FPS	8
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fec0 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x08);
 8001190:	2008      	movs	r0, #8
 8001192:	f7ff febd 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xBA);
 8001196:	20ba      	movs	r0, #186	; 0xba
 8001198:	f7ff fece 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x05);		//GPIO[3:0] out 1
 800119c:	2005      	movs	r0, #5
 800119e:	f7ff feb7 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB8);
 80011a2:	20b8      	movs	r0, #184	; 0xb8
 80011a4:	f7ff fec8 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x07);	    //GPIO3=input, GPIO[2:0]=output
 80011a8:	2007      	movs	r0, #7
 80011aa:	f7ff feb1 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//GPIO0 normal
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff feae 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xba);		//rotation
 80011b4:	20ba      	movs	r0, #186	; 0xba
 80011b6:	f7ff febf 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fea8 	bl	8000f10 <Lcd_Write_Data>


Lcd_Write_Cmd(0xF0);		//pixel data interface
 80011c0:	20f0      	movs	r0, #240	; 0xf0
 80011c2:	f7ff feb9 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff fea2 	bl	8000f10 <Lcd_Write_Data>


HAL_Delay(10);
 80011cc:	200a      	movs	r0, #10
 80011ce:	f002 fa27 	bl	8003620 <HAL_Delay>

Lcd_SetArea(0, 0, 799, 479);
 80011d2:	f240 13df 	movw	r3, #479	; 0x1df
 80011d6:	f240 321f 	movw	r2, #799	; 0x31f
 80011da:	2100      	movs	r1, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fecd 	bl	8000f7c <Lcd_SetArea>
Lcd_Write_Cmd(0x29);		//display on
 80011e2:	2029      	movs	r0, #41	; 0x29
 80011e4:	f7ff fea8 	bl	8000f38 <Lcd_Write_Cmd>

Lcd_Write_Cmd(0xBE);		//set PWM for B/L
 80011e8:	20be      	movs	r0, #190	; 0xbe
 80011ea:	f7ff fea5 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x06);
 80011ee:	2006      	movs	r0, #6
 80011f0:	f7ff fe8e 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 80011f4:	20f0      	movs	r0, #240	; 0xf0
 80011f6:	f7ff fe8b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x01);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff fe88 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 8001200:	20f0      	movs	r0, #240	; 0xf0
 8001202:	f7ff fe85 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fe82 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fe7f 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xD0);
 8001212:	20d0      	movs	r0, #208	; 0xd0
 8001214:	f7ff fe90 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x0D);
 8001218:	200d      	movs	r0, #13
 800121a:	f7ff fe79 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0x2C);
 800121e:	202c      	movs	r0, #44	; 0x2c
 8001220:	f7ff fe8a 	bl	8000f38 <Lcd_Write_Cmd>

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <TFT_Set_X>:



void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	4613      	mov	r3, r2
 800123e:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002A);
 8001240:	202a      	movs	r0, #42	; 0x2a
 8001242:	f7ff fe79 	bl	8000f38 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_x>>8);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe5f 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(start_x&0x00ff);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe59 	bl	8000f10 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_x>>8);
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe53 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(end_x&0x00ff);
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe4d 	bl	8000f10 <Lcd_Write_Data>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <TFT_Set_Y>:


void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	460a      	mov	r2, r1
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	4613      	mov	r3, r2
 800128c:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002B);
 800128e:	202b      	movs	r0, #43	; 0x2b
 8001290:	f7ff fe52 	bl	8000f38 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_y>>8);
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe38 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(start_y&0x00ff);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe32 	bl	8000f10 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_y>>8);
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe2c 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(end_y&0x00ff);
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe26 	bl	8000f10 <Lcd_Write_Data>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <TFT_Set_Work_Area>:
}



void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]
 80012e6:	4613      	mov	r3, r2
 80012e8:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff98 	bl	8001230 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	4413      	add	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	3b01      	subs	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ffb4 	bl	800127e <TFT_Set_Y>
	Lcd_Write_Cmd(0x2C);
 8001316:	202c      	movs	r0, #44	; 0x2c
 8001318:	f7ff fe0e 	bl	8000f38 <Lcd_Write_Cmd>
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <TFT_Clear_Screen>:




void TFT_Clear_Screen(uint16_t color)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 8001332:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001336:	f44f 7248 	mov.w	r2, #800	; 0x320
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffc5 	bl	80012cc <TFT_Set_Work_Area>

	for(i=0; i < 384000; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e00c      	b.n	8001362 <TFT_Clear_Screen+0x3e>
	{
		  tft_write_bus(color>>8,color&0x00ff);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29b      	uxth	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	88fa      	ldrh	r2, [r7, #6]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdac 	bl	8000eb4 <tft_write_bus>
	for(i=0; i < 384000; i++)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <TFT_Clear_Screen+0x50>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d9ee      	bls.n	8001348 <TFT_Clear_Screen+0x24>
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0005dbff 	.word	0x0005dbff

08001378 <TFT_Draw_HLine>:
	}
}


void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	4603      	mov	r3, r0
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
 8001392:	4613      	mov	r3, r2
 8001394:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	88b9      	ldrh	r1, [r7, #4]
 80013a0:	88f8      	ldrh	r0, [r7, #6]
 80013a2:	f7ff ff93 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	81fb      	strh	r3, [r7, #14]
 80013aa:	e006      	b.n	80013ba <TFT_Draw_HLine+0x42>
	Lcd_Write_Data(color);
 80013ac:	8c3b      	ldrh	r3, [r7, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fdae 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	3301      	adds	r3, #1
 80013b8:	81fb      	strh	r3, [r7, #14]
 80013ba:	89fa      	ldrh	r2, [r7, #14]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	8839      	ldrh	r1, [r7, #0]
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf1      	blt.n	80013ac <TFT_Draw_HLine+0x34>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <TFT_Set_Read_Area>:

void TFT_Set_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80013d2:	b590      	push	{r4, r7, lr}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4604      	mov	r4, r0
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4623      	mov	r3, r4
 80013e2:	80fb      	strh	r3, [r7, #6]
 80013e4:	4603      	mov	r3, r0
 80013e6:	80bb      	strh	r3, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	4413      	add	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff15 	bl	8001230 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 8001406:	88ba      	ldrh	r2, [r7, #4]
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff31 	bl	800127e <TFT_Set_Y>
	Lcd_Write_Cmd(0x2E);
 800141c:	202e      	movs	r0, #46	; 0x2e
 800141e:	f7ff fd8b 	bl	8000f38 <Lcd_Write_Cmd>
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}

0800142a <TFT_Draw_List>:

uint16_t TFT_Draw_List(uint16_t x, uint16_t y, uint16_t width, char *title, char * options,  uint16_t *save, const GFXfont *p_font)
{
 800142a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142e:	b093      	sub	sp, #76	; 0x4c
 8001430:	af04      	add	r7, sp, #16
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4603      	mov	r3, r0
 8001436:	82fb      	strh	r3, [r7, #22]
 8001438:	460b      	mov	r3, r1
 800143a:	82bb      	strh	r3, [r7, #20]
 800143c:	4613      	mov	r3, r2
 800143e:	827b      	strh	r3, [r7, #18]
 8001440:	466b      	mov	r3, sp
 8001442:	60bb      	str	r3, [r7, #8]
	uint16_t height=47+1+34;
 8001444:	2352      	movs	r3, #82	; 0x52
 8001446:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t counter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t start=0;
 800144c:	2300      	movs	r3, #0
 800144e:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t line_y_pos=y+48;
 8001450:	8abb      	ldrh	r3, [r7, #20]
 8001452:	3330      	adds	r3, #48	; 0x30
 8001454:	867b      	strh	r3, [r7, #50]	; 0x32

	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 8001456:	2300      	movs	r3, #0
 8001458:	863b      	strh	r3, [r7, #48]	; 0x30
 800145a:	e00b      	b.n	8001474 <TFT_Draw_List+0x4a>
	{
		if (options[text_pos ]== ' ')
 800145c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800145e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b20      	cmp	r3, #32
 8001466:	d102      	bne.n	800146e <TFT_Draw_List+0x44>
			counter+=1;
 8001468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800146a:	3301      	adds	r3, #1
 800146c:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 800146e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001470:	3301      	adds	r3, #1
 8001472:	863b      	strh	r3, [r7, #48]	; 0x30
 8001474:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8001476:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001478:	f7fe ff02 	bl	8000280 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	429c      	cmp	r4, r3
 8001480:	d3ec      	bcc.n	800145c <TFT_Draw_List+0x32>
	}

	height+=35*counter;
 8001482:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001484:	461a      	mov	r2, r3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4413      	add	r3, r2
 800148a:	461a      	mov	r2, r3
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001494:	4413      	add	r3, r2
 8001496:	85bb      	strh	r3, [r7, #44]	; 0x2c
	lcd_Read_Area(x, y, width, height, save);
 8001498:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 800149a:	8a7a      	ldrh	r2, [r7, #18]
 800149c:	8ab9      	ldrh	r1, [r7, #20]
 800149e:	8af8      	ldrh	r0, [r7, #22]
 80014a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4623      	mov	r3, r4
 80014a6:	f000 f937 	bl	8001718 <lcd_Read_Area>
	TFT_Draw_Fill_Round_Rect (x, y, width, height, 20,  0xDEDB);
 80014aa:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 80014ac:	8a7a      	ldrh	r2, [r7, #18]
 80014ae:	8ab9      	ldrh	r1, [r7, #20]
 80014b0:	8af8      	ldrh	r0, [r7, #22]
 80014b2:	f64d 63db 	movw	r3, #57051	; 0xdedb
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2314      	movs	r3, #20
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	f000 fb06 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	LCD_centered_Font (x, y+23,  width, title, p_font, 2,  BLACK);
 80014c2:	8abb      	ldrh	r3, [r7, #20]
 80014c4:	3317      	adds	r3, #23
 80014c6:	b299      	uxth	r1, r3
 80014c8:	8a7a      	ldrh	r2, [r7, #18]
 80014ca:	8af8      	ldrh	r0, [r7, #22]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f000 fc12 	bl	8001d02 <LCD_centered_Font>
	TFT_Draw_HLine(x, line_y_pos, width,  1, 	0xB5B6);
 80014de:	8a7a      	ldrh	r2, [r7, #18]
 80014e0:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80014e2:	8af8      	ldrh	r0, [r7, #22]
 80014e4:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	f7ff ff44 	bl	8001378 <TFT_Draw_HLine>
	while(counter>0)
 80014f0:	e00e      	b.n	8001510 <TFT_Draw_List+0xe6>
	{
		line_y_pos+=35;
 80014f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80014f4:	3323      	adds	r3, #35	; 0x23
 80014f6:	867b      	strh	r3, [r7, #50]	; 0x32
		TFT_Draw_HLine(x, line_y_pos, width,  1, 	0xB5B6);
 80014f8:	8a7a      	ldrh	r2, [r7, #18]
 80014fa:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80014fc:	8af8      	ldrh	r0, [r7, #22]
 80014fe:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	f7ff ff37 	bl	8001378 <TFT_Draw_HLine>
		counter-=1;
 800150a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800150c:	3b01      	subs	r3, #1
 800150e:	86fb      	strh	r3, [r7, #54]	; 0x36
	while(counter>0)
 8001510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ed      	bne.n	80014f2 <TFT_Draw_List+0xc8>
	}
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 8001516:	2300      	movs	r3, #0
 8001518:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800151a:	e061      	b.n	80015e0 <TFT_Draw_List+0x1b6>
	{
		if (options[text_pos ]== ' ')
 800151c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b20      	cmp	r3, #32
 8001526:	d158      	bne.n	80015da <TFT_Draw_List+0x1b0>
		{
 8001528:	466b      	mov	r3, sp
 800152a:	461c      	mov	r4, r3
/*			char temp[50];
			strncpy(temp, options + start, text_pos - start);
			temp[text_pos - start] = '\0'; // Dodanie zakończenia ciągu
			 LCD_centered_Font(x, y + 47 + 17 + counter * 35, width, temp, p_font, 1,  BLACK);*/
			char newString[text_pos-start];
 800152c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800152e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001530:	1ad1      	subs	r1, r2, r3
 8001532:	1e4b      	subs	r3, r1, #1
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	460a      	mov	r2, r1
 8001538:	2300      	movs	r3, #0
 800153a:	4615      	mov	r5, r2
 800153c:	461e      	mov	r6, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	00f3      	lsls	r3, r6, #3
 8001548:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800154c:	00ea      	lsls	r2, r5, #3
 800154e:	460a      	mov	r2, r1
 8001550:	2300      	movs	r3, #0
 8001552:	603a      	str	r2, [r7, #0]
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	00c3      	lsls	r3, r0, #3
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	00c2      	lsls	r2, r0, #3
 800156c:	460b      	mov	r3, r1
 800156e:	3307      	adds	r3, #7
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	ebad 0d03 	sub.w	sp, sp, r3
 8001578:	ab04      	add	r3, sp, #16
 800157a:	3300      	adds	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
			memcpy(newString, options+start*sizeof(char), text_pos-start);
 800157e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001582:	18d1      	adds	r1, r2, r3
 8001584:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001586:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	461a      	mov	r2, r3
 800158c:	69f8      	ldr	r0, [r7, #28]
 800158e:	f004 fa58 	bl	8005a42 <memcpy>
			newString[text_pos - start] = '\0';
 8001592:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001594:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	2100      	movs	r1, #0
 800159c:	54d1      	strb	r1, [r2, r3]
		    LCD_centered_Font (x, y+47+17+counter*35,  width, newString, p_font, 1,  BLACK);
 800159e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015a0:	461a      	mov	r2, r3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	00d2      	lsls	r2, r2, #3
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8abb      	ldrh	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3340      	adds	r3, #64	; 0x40
 80015b6:	b299      	uxth	r1, r3
 80015b8:	8a7a      	ldrh	r2, [r7, #18]
 80015ba:	8af8      	ldrh	r0, [r7, #22]
 80015bc:	2300      	movs	r3, #0
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f000 fb9a 	bl	8001d02 <LCD_centered_Font>
			start=text_pos;
 80015ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015d0:	86bb      	strh	r3, [r7, #52]	; 0x34
			counter+=1;
 80015d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015d4:	3301      	adds	r3, #1
 80015d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80015d8:	46a5      	mov	sp, r4
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 80015da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015dc:	3301      	adds	r3, #1
 80015de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015e0:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80015e2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015e4:	f7fe fe4c 	bl	8000280 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	429c      	cmp	r4, r3
 80015ec:	d396      	bcc.n	800151c <TFT_Draw_List+0xf2>
		}
	}
	char newString[strlen(options)-start];
 80015ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015f0:	f7fe fe46 	bl	8000280 <strlen>
 80015f4:	4602      	mov	r2, r0
 80015f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015f8:	1ad1      	subs	r1, r2, r3
 80015fa:	460b      	mov	r3, r1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001600:	2300      	movs	r3, #0
 8001602:	468a      	mov	sl, r1
 8001604:	469b      	mov	fp, r3
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001612:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800161a:	2300      	movs	r3, #0
 800161c:	4688      	mov	r8, r1
 800161e:	4699      	mov	r9, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800162c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001634:	1dcb      	adds	r3, r1, #7
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	ebad 0d03 	sub.w	sp, sp, r3
 800163e:	ab04      	add	r3, sp, #16
 8001640:	3300      	adds	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(newString, options+start*sizeof(char), strlen(options)-start);
 8001644:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001648:	18d4      	adds	r4, r2, r3
 800164a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800164c:	f7fe fe18 	bl	8000280 <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	461a      	mov	r2, r3
 8001658:	4621      	mov	r1, r4
 800165a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800165c:	f004 f9f1 	bl	8005a42 <memcpy>
	newString[strlen(options) - start] = '\0';
 8001660:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001662:	f7fe fe0d 	bl	8000280 <strlen>
 8001666:	4602      	mov	r2, r0
 8001668:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	2100      	movs	r1, #0
 8001670:	54d1      	strb	r1, [r2, r3]
    LCD_centered_Font (x, y+47+17+counter*35,  width, newString, p_font, 1,  BLACK);
 8001672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001674:	461a      	mov	r2, r3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	00d2      	lsls	r2, r2, #3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29a      	uxth	r2, r3
 8001682:	8abb      	ldrh	r3, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	3340      	adds	r3, #64	; 0x40
 800168a:	b299      	uxth	r1, r3
 800168c:	8a7a      	ldrh	r2, [r7, #18]
 800168e:	8af8      	ldrh	r0, [r7, #22]
 8001690:	2300      	movs	r3, #0
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2301      	movs	r3, #1
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f000 fb30 	bl	8001d02 <LCD_centered_Font>
	//LCD_centered_Font (x, y+47+17+counter*35,  length, memcopy(options, start, strlen(options)), p_font, 1,  BLACK);

	return counter;
 80016a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016a4:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	373c      	adds	r7, #60	; 0x3c
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080016b2 <TFT_Restore_Area>:
    LCD_centered_Font (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2)+80,  length,  text, p_font, 1,  BLACK);

}

void TFT_Restore_Area (uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 80016b2:	b590      	push	{r4, r7, lr}
 80016b4:	b085      	sub	sp, #20
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	4604      	mov	r4, r0
 80016ba:	4608      	mov	r0, r1
 80016bc:	4611      	mov	r1, r2
 80016be:	461a      	mov	r2, r3
 80016c0:	4623      	mov	r3, r4
 80016c2:	80fb      	strh	r3, [r7, #6]
 80016c4:	4603      	mov	r3, r0
 80016c6:	80bb      	strh	r3, [r7, #4]
 80016c8:	460b      	mov	r3, r1
 80016ca:	807b      	strh	r3, [r7, #2]
 80016cc:	4613      	mov	r3, r2
 80016ce:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(x, y, length, width);
 80016d4:	883b      	ldrh	r3, [r7, #0]
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	88b9      	ldrh	r1, [r7, #4]
 80016da:	88f8      	ldrh	r0, [r7, #6]
 80016dc:	f7ff fdf6 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	e00a      	b.n	80016fc <TFT_Restore_Area+0x4a>
	{
		Lcd_Write_Data(save[i]);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	6a3a      	ldr	r2, [r7, #32]
 80016ec:	4413      	add	r3, r2
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fc0d 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	883a      	ldrh	r2, [r7, #0]
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	461a      	mov	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4293      	cmp	r3, r2
 800170a:	d3ec      	bcc.n	80016e6 <TFT_Restore_Area+0x34>
	}
}
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
	...

08001718 <lcd_Read_Area>:

void lcd_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 8001718:	b590      	push	{r4, r7, lr}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4623      	mov	r3, r4
 8001728:	80fb      	strh	r3, [r7, #6]
 800172a:	4603      	mov	r3, r0
 800172c:	80bb      	strh	r3, [r7, #4]
 800172e:	460b      	mov	r3, r1
 8001730:	807b      	strh	r3, [r7, #2]
 8001732:	4613      	mov	r3, r2
 8001734:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
	TFT_Set_Read_Area(x, y, length, width);
 800173a:	883b      	ldrh	r3, [r7, #0]
 800173c:	887a      	ldrh	r2, [r7, #2]
 800173e:	88b9      	ldrh	r1, [r7, #4]
 8001740:	88f8      	ldrh	r0, [r7, #6]
 8001742:	f7ff fe46 	bl	80013d2 <TFT_Set_Read_Area>
	PORTA->MODER = (PORTA->MODER & 0xffff0000);
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <lcd_Read_Area+0x9c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <lcd_Read_Area+0x9c>)
 800174c:	0c1b      	lsrs	r3, r3, #16
 800174e:	041b      	lsls	r3, r3, #16
 8001750:	6013      	str	r3, [r2, #0]
	PORTB->MODER = (PORTB->MODER & 0xffff0000);
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <lcd_Read_Area+0xa0>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <lcd_Read_Area+0xa0>)
 8001758:	0c1b      	lsrs	r3, r3, #16
 800175a:	041b      	lsls	r3, r3, #16
 800175c:	6013      	str	r3, [r2, #0]


	for(i=0; i < length*width; i++)
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e00a      	b.n	800177a <lcd_Read_Area+0x62>
	{
		save[i] = lcd_Read_bus();
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	6a3a      	ldr	r2, [r7, #32]
 800176a:	18d4      	adds	r4, r2, r3
 800176c:	f000 f826 	bl	80017bc <lcd_Read_bus>
 8001770:	4603      	mov	r3, r0
 8001772:	8023      	strh	r3, [r4, #0]
	for(i=0; i < length*width; i++)
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	887b      	ldrh	r3, [r7, #2]
 800177c:	883a      	ldrh	r2, [r7, #0]
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	461a      	mov	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4293      	cmp	r3, r2
 8001788:	d3ec      	bcc.n	8001764 <lcd_Read_Area+0x4c>
	}

	PORTA->MODER = (PORTA->MODER | 0x00005555);
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <lcd_Read_Area+0x9c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a09      	ldr	r2, [pc, #36]	; (80017b4 <lcd_Read_Area+0x9c>)
 8001790:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001794:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001798:	6013      	str	r3, [r2, #0]
	PORTB->MODER = (PORTB->MODER | 0x00005555);
 800179a:	4b07      	ldr	r3, [pc, #28]	; (80017b8 <lcd_Read_Area+0xa0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <lcd_Read_Area+0xa0>)
 80017a0:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 80017a4:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80017a8:	6013      	str	r3, [r2, #0]
}
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd90      	pop	{r4, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400

080017bc <lcd_Read_bus>:

uint16_t lcd_Read_bus()
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

	pin_low(RD_PORT,RD_PIN);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <lcd_Read_bus+0x44>)
 80017ca:	f002 f9e3 	bl	8003b94 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017d4:	480a      	ldr	r0, [pc, #40]	; (8001800 <lcd_Read_bus+0x44>)
 80017d6:	f002 f9dd 	bl	8003b94 <HAL_GPIO_WritePin>
	uint8_t high_byte =PORTB->IDR ;
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <lcd_Read_bus+0x44>)
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	71fb      	strb	r3, [r7, #7]
	uint8_t low_byte =PORTA->IDR ;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <lcd_Read_bus+0x48>)
 80017e2:	691b      	ldr	r3, [r3, #16]
 80017e4:	71bb      	strb	r3, [r7, #6]


/*	uint8_t low_byte =0 ;
	uint8_t high_byte =0 ;*/

	return ((high_byte<<8)|low_byte);
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	b21a      	sxth	r2, r3
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	b21b      	sxth	r3, r3
 80017f0:	4313      	orrs	r3, r2
 80017f2:	b21b      	sxth	r3, r3
 80017f4:	b29b      	uxth	r3, r3
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020400 	.word	0x40020400
 8001804:	40020000 	.word	0x40020000

08001808 <TFT_Draw_Bitmap_Without_Background>:

void TFT_Draw_Bitmap_Without_Background(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t *array)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	4604      	mov	r4, r0
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	4603      	mov	r3, r0
 800181c:	80bb      	strh	r3, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
 8001822:	4613      	mov	r3, r2
 8001824:	803b      	strh	r3, [r7, #0]
	uint16_t color, color_R, color_G, color_B;
	for(int i =0;i<height;i+=1)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e03e      	b.n	80018aa <TFT_Draw_Bitmap_Without_Background+0xa2>
	{
		for(int b =0;b<width;b+=1)
 800182c:	2300      	movs	r3, #0
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	e034      	b.n	800189c <TFT_Draw_Bitmap_Without_Background+0x94>
		{
			color=array[i*width+b];
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	fb03 f202 	mul.w	r2, r3, r2
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4413      	add	r3, r2
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001842:	4413      	add	r3, r2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	81fb      	strh	r3, [r7, #14]
			color_R=(0xF800&color)>>11;
 8001848:	89fb      	ldrh	r3, [r7, #14]
 800184a:	0adb      	lsrs	r3, r3, #11
 800184c:	81bb      	strh	r3, [r7, #12]
			color_G=(0x7E0&color)>>5;
 800184e:	89fb      	ldrh	r3, [r7, #14]
 8001850:	095b      	lsrs	r3, r3, #5
 8001852:	b29b      	uxth	r3, r3
 8001854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001858:	817b      	strh	r3, [r7, #10]
			color_B=0x1F&color;
 800185a:	89fb      	ldrh	r3, [r7, #14]
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	813b      	strh	r3, [r7, #8]
			if (!(color_R>26&&color_G>53&&color_B>26))
 8001862:	89bb      	ldrh	r3, [r7, #12]
 8001864:	2b1a      	cmp	r3, #26
 8001866:	d905      	bls.n	8001874 <TFT_Draw_Bitmap_Without_Background+0x6c>
 8001868:	897b      	ldrh	r3, [r7, #10]
 800186a:	2b35      	cmp	r3, #53	; 0x35
 800186c:	d902      	bls.n	8001874 <TFT_Draw_Bitmap_Without_Background+0x6c>
 800186e:	893b      	ldrh	r3, [r7, #8]
 8001870:	2b1a      	cmp	r3, #26
 8001872:	d810      	bhi.n	8001896 <TFT_Draw_Bitmap_Without_Background+0x8e>
			{
				Lcd_SetPixel(x+b,y+i, color);
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	b29a      	uxth	r2, r3
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	b218      	sxth	r0, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	b29a      	uxth	r2, r3
 8001884:	88bb      	ldrh	r3, [r7, #4]
 8001886:	4413      	add	r3, r2
 8001888:	b29b      	uxth	r3, r3
 800188a:	b21b      	sxth	r3, r3
 800188c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001890:	4619      	mov	r1, r3
 8001892:	f7ff fbbc 	bl	800100e <Lcd_SetPixel>
		for(int b =0;b<width;b+=1)
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	3301      	adds	r3, #1
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbc6      	blt.n	8001832 <TFT_Draw_Bitmap_Without_Background+0x2a>
	for(int i =0;i<height;i+=1)
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3301      	adds	r3, #1
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	883b      	ldrh	r3, [r7, #0]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	dbbc      	blt.n	800182c <TFT_Draw_Bitmap_Without_Background+0x24>
			}
		}
	}
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd90      	pop	{r4, r7, pc}

080018bc <TFT_Draw_VLine>:
		}
	}
}

void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80018bc:	b590      	push	{r4, r7, lr}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4604      	mov	r4, r0
 80018c4:	4608      	mov	r0, r1
 80018c6:	4611      	mov	r1, r2
 80018c8:	461a      	mov	r2, r3
 80018ca:	4623      	mov	r3, r4
 80018cc:	80fb      	strh	r3, [r7, #6]
 80018ce:	4603      	mov	r3, r0
 80018d0:	80bb      	strh	r3, [r7, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	807b      	strh	r3, [r7, #2]
 80018d6:	4613      	mov	r3, r2
 80018d8:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80018da:	2300      	movs	r3, #0
 80018dc:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 80018de:	887b      	ldrh	r3, [r7, #2]
 80018e0:	883a      	ldrh	r2, [r7, #0]
 80018e2:	88b9      	ldrh	r1, [r7, #4]
 80018e4:	88f8      	ldrh	r0, [r7, #6]
 80018e6:	f7ff fcf1 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	81fb      	strh	r3, [r7, #14]
 80018ee:	e006      	b.n	80018fe <TFT_Draw_VLine+0x42>
	Lcd_Write_Data(color);
 80018f0:	8c3b      	ldrh	r3, [r7, #32]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fb0c 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 80018f8:	89fb      	ldrh	r3, [r7, #14]
 80018fa:	3301      	adds	r3, #1
 80018fc:	81fb      	strh	r3, [r7, #14]
 80018fe:	89fa      	ldrh	r2, [r7, #14]
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	8839      	ldrh	r1, [r7, #0]
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	429a      	cmp	r2, r3
 800190a:	dbf1      	blt.n	80018f0 <TFT_Draw_VLine+0x34>
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	bd90      	pop	{r4, r7, pc}

08001916 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}


void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8001916:	b590      	push	{r4, r7, lr}
 8001918:	b085      	sub	sp, #20
 800191a:	af00      	add	r7, sp, #0
 800191c:	4604      	mov	r4, r0
 800191e:	4608      	mov	r0, r1
 8001920:	4611      	mov	r1, r2
 8001922:	461a      	mov	r2, r3
 8001924:	4623      	mov	r3, r4
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4603      	mov	r3, r0
 800192a:	80bb      	strh	r3, [r7, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	807b      	strh	r3, [r7, #2]
 8001930:	4613      	mov	r3, r2
 8001932:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 8001938:	883b      	ldrh	r3, [r7, #0]
 800193a:	887a      	ldrh	r2, [r7, #2]
 800193c:	88b9      	ldrh	r1, [r7, #4]
 800193e:	88f8      	ldrh	r0, [r7, #6]
 8001940:	f7ff fcc4 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e006      	b.n	8001958 <TFT_Draw_Fill_Rectangle+0x42>
	{
		Lcd_Write_Data(color);
 800194a:	8c3b      	ldrh	r3, [r7, #32]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fadf 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	3301      	adds	r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	883a      	ldrh	r2, [r7, #0]
 800195c:	fb02 f303 	mul.w	r3, r2, r3
 8001960:	461a      	mov	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4293      	cmp	r3, r2
 8001966:	d3f0      	bcc.n	800194a <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bd90      	pop	{r4, r7, pc}

08001972 <TFT_Draw_Fill_Circle_Helper>:
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
}


void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 8001972:	b590      	push	{r4, r7, lr}
 8001974:	b089      	sub	sp, #36	; 0x24
 8001976:	af02      	add	r7, sp, #8
 8001978:	4604      	mov	r4, r0
 800197a:	4608      	mov	r0, r1
 800197c:	4611      	mov	r1, r2
 800197e:	461a      	mov	r2, r3
 8001980:	4623      	mov	r3, r4
 8001982:	80fb      	strh	r3, [r7, #6]
 8001984:	4603      	mov	r3, r0
 8001986:	80bb      	strh	r3, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	f1c3 0301 	rsb	r3, r3, #1
 8001996:	b29b      	uxth	r3, r3
 8001998:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 800199a:	2301      	movs	r3, #1
 800199c:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800199e:	887b      	ldrh	r3, [r7, #2]
 80019a0:	461a      	mov	r2, r3
 80019a2:	03d2      	lsls	r2, r2, #15
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 80019b0:	887b      	ldrh	r3, [r7, #2]
 80019b2:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 80019b4:	e07f      	b.n	8001ab6 <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 80019b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db0e      	blt.n	80019dc <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	3b01      	subs	r3, #1
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 80019ca:	8a7b      	ldrh	r3, [r7, #18]
 80019cc:	3302      	adds	r3, #2
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 80019d2:	8afa      	ldrh	r2, [r7, #22]
 80019d4:	8a7b      	ldrh	r3, [r7, #18]
 80019d6:	4413      	add	r3, r2
 80019d8:	b29b      	uxth	r3, r3
 80019da:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 80019dc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 80019e8:	8abb      	ldrh	r3, [r7, #20]
 80019ea:	3302      	adds	r3, #2
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 80019f0:	8afa      	ldrh	r2, [r7, #22]
 80019f2:	8abb      	ldrh	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 80019fa:	787b      	ldrb	r3, [r7, #1]
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d029      	beq.n	8001a58 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 8001a04:	88fa      	ldrh	r2, [r7, #6]
 8001a06:	8a3b      	ldrh	r3, [r7, #16]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b298      	uxth	r0, r3
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	b299      	uxth	r1, r3
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a1c:	4413      	add	r3, r2
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2301      	movs	r3, #1
 8001a2a:	f7ff ff47 	bl	80018bc <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001a2e:	88fa      	ldrh	r2, [r7, #6]
 8001a30:	89fb      	ldrh	r3, [r7, #14]
 8001a32:	4413      	add	r3, r2
 8001a34:	b298      	uxth	r0, r3
 8001a36:	88ba      	ldrh	r2, [r7, #4]
 8001a38:	8a3b      	ldrh	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	b299      	uxth	r1, r3
 8001a3e:	8a3b      	ldrh	r3, [r7, #16]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a46:	4413      	add	r3, r2
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2301      	movs	r3, #1
 8001a54:	f7ff ff32 	bl	80018bc <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d029      	beq.n	8001ab6 <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 8001a62:	88fa      	ldrh	r2, [r7, #6]
 8001a64:	8a3b      	ldrh	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	b298      	uxth	r0, r3
 8001a6a:	88ba      	ldrh	r2, [r7, #4]
 8001a6c:	89fb      	ldrh	r3, [r7, #14]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	b299      	uxth	r1, r3
 8001a72:	89fb      	ldrh	r3, [r7, #14]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	3301      	adds	r3, #1
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	2301      	movs	r3, #1
 8001a88:	f7ff ff18 	bl	80018bc <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 8001a8c:	88fa      	ldrh	r2, [r7, #6]
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	b298      	uxth	r0, r3
 8001a94:	88ba      	ldrh	r2, [r7, #4]
 8001a96:	8a3b      	ldrh	r3, [r7, #16]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	8a3b      	ldrh	r3, [r7, #16]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001aa4:	4413      	add	r3, r2
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f7ff ff03 	bl	80018bc <TFT_Draw_VLine>
  while (x<y) {
 8001ab6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	f6ff af79 	blt.w	80019b6 <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}

08001ace <TFT_Draw_Fill_Round_Rect>:


void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001ace:	b590      	push	{r4, r7, lr}
 8001ad0:	b085      	sub	sp, #20
 8001ad2:	af02      	add	r7, sp, #8
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	4608      	mov	r0, r1
 8001ad8:	4611      	mov	r1, r2
 8001ada:	461a      	mov	r2, r3
 8001adc:	4623      	mov	r3, r4
 8001ade:	80fb      	strh	r3, [r7, #6]
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	80bb      	strh	r3, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001aec:	88fa      	ldrh	r2, [r7, #6]
 8001aee:	8b3b      	ldrh	r3, [r7, #24]
 8001af0:	4413      	add	r3, r2
 8001af2:	b298      	uxth	r0, r3
 8001af4:	8b3b      	ldrh	r3, [r7, #24]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	883c      	ldrh	r4, [r7, #0]
 8001b02:	88b9      	ldrh	r1, [r7, #4]
 8001b04:	8bbb      	ldrh	r3, [r7, #28]
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4623      	mov	r3, r4
 8001b0a:	f7ff ff04 	bl	8001916 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001b0e:	88fa      	ldrh	r2, [r7, #6]
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	4413      	add	r3, r2
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	8b3b      	ldrh	r3, [r7, #24]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b218      	sxth	r0, r3
 8001b22:	88ba      	ldrh	r2, [r7, #4]
 8001b24:	8b3b      	ldrh	r3, [r7, #24]
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b219      	sxth	r1, r3
 8001b2c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001b30:	8b3b      	ldrh	r3, [r7, #24]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	883a      	ldrh	r2, [r7, #0]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29b      	uxth	r3, r3
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	8bba      	ldrh	r2, [r7, #28]
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	9300      	str	r3, [sp, #0]
 8001b48:	2301      	movs	r3, #1
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	f7ff ff11 	bl	8001972 <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001b50:	88fa      	ldrh	r2, [r7, #6]
 8001b52:	8b3b      	ldrh	r3, [r7, #24]
 8001b54:	4413      	add	r3, r2
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	b218      	sxth	r0, r3
 8001b5a:	88ba      	ldrh	r2, [r7, #4]
 8001b5c:	8b3b      	ldrh	r3, [r7, #24]
 8001b5e:	4413      	add	r3, r2
 8001b60:	b29b      	uxth	r3, r3
 8001b62:	b219      	sxth	r1, r3
 8001b64:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001b68:	8b3b      	ldrh	r3, [r7, #24]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	883a      	ldrh	r2, [r7, #0]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b21b      	sxth	r3, r3
 8001b7a:	8bba      	ldrh	r2, [r7, #28]
 8001b7c:	9201      	str	r2, [sp, #4]
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2302      	movs	r3, #2
 8001b82:	4622      	mov	r2, r4
 8001b84:	f7ff fef5 	bl	8001972 <TFT_Draw_Fill_Circle_Helper>
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}

08001b90 <LCD_Char>:



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af02      	add	r7, sp, #8
 8001b96:	60ba      	str	r2, [r7, #8]
 8001b98:	607b      	str	r3, [r7, #4]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	81fb      	strh	r3, [r7, #14]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	777b      	strb	r3, [r7, #29]
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	763b      	strb	r3, [r7, #24]
 8001bbe:	e095      	b.n	8001cec <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	767b      	strb	r3, [r7, #25]
 8001bc4:	e053      	b.n	8001c6e <LCD_Char+0xde>
		{
			if(bit == 0)
 8001bc6:	7f3b      	ldrb	r3, [r7, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d109      	bne.n	8001be0 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	83fa      	strh	r2, [r7, #30]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001bdc:	2380      	movs	r3, #128	; 0x80
 8001bde:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001be0:	7f7a      	ldrb	r2, [r7, #29]
 8001be2:	7f3b      	ldrb	r3, [r7, #28]
 8001be4:	4013      	ands	r3, r2
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <LCD_Char+0x64>
			{
				set_pixels++;
 8001bec:	8b7b      	ldrh	r3, [r7, #26]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	837b      	strh	r3, [r7, #26]
 8001bf2:	e036      	b.n	8001c62 <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 8001bf4:	8b7b      	ldrh	r3, [r7, #26]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d033      	beq.n	8001c62 <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c00:	461a      	mov	r2, r3
 8001c02:	7e7b      	ldrb	r3, [r7, #25]
 8001c04:	441a      	add	r2, r3
 8001c06:	8b7b      	ldrh	r3, [r7, #26]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	fb12 f303 	smulbb	r3, r2, r3
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	89fb      	ldrh	r3, [r7, #14]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b298      	uxth	r0, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001c24:	461a      	mov	r2, r3
 8001c26:	7e3b      	ldrb	r3, [r7, #24]
 8001c28:	4413      	add	r3, r2
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	fb12 f303 	smulbb	r3, r2, r3
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	89bb      	ldrh	r3, [r7, #12]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b299      	uxth	r1, r3
 8001c3e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	8b7a      	ldrh	r2, [r7, #26]
 8001c46:	fb12 f303 	smulbb	r3, r2, r3
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c50:	b29c      	uxth	r4, r3
 8001c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f7ff fe5c 	bl	8001916 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001c62:	7f3b      	ldrb	r3, [r7, #28]
 8001c64:	085b      	lsrs	r3, r3, #1
 8001c66:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001c68:	7e7b      	ldrb	r3, [r7, #25]
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	767b      	strb	r3, [r7, #25]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	789b      	ldrb	r3, [r3, #2]
 8001c72:	7e7a      	ldrb	r2, [r7, #25]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d3a6      	bcc.n	8001bc6 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001c78:	8b7b      	ldrh	r3, [r7, #26]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d033      	beq.n	8001ce6 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001c84:	461a      	mov	r2, r3
 8001c86:	7e7b      	ldrb	r3, [r7, #25]
 8001c88:	441a      	add	r2, r3
 8001c8a:	8b7b      	ldrh	r3, [r7, #26]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	fb12 f303 	smulbb	r3, r2, r3
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	89fb      	ldrh	r3, [r7, #14]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	b298      	uxth	r0, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	7e3b      	ldrb	r3, [r7, #24]
 8001cac:	4413      	add	r3, r2
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	fb12 f303 	smulbb	r3, r2, r3
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	89bb      	ldrh	r3, [r7, #12]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	b299      	uxth	r1, r3
 8001cc2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	8b7a      	ldrh	r2, [r7, #26]
 8001cca:	fb12 f303 	smulbb	r3, r2, r3
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cd4:	b29c      	uxth	r4, r3
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	4623      	mov	r3, r4
 8001cde:	f7ff fe1a 	bl	8001916 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001ce6:	7e3b      	ldrb	r3, [r7, #24]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	763b      	strb	r3, [r7, #24]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	78db      	ldrb	r3, [r3, #3]
 8001cf0:	7e3a      	ldrb	r2, [r7, #24]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	f4ff af64 	bcc.w	8001bc0 <LCD_Char+0x30>
		}
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	bf00      	nop
 8001cfc:	3724      	adds	r7, #36	; 0x24
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <LCD_centered_Font>:

void LCD_centered_Font (uint16_t x, uint16_t y,  uint16_t length,  char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001d02:	b590      	push	{r4, r7, lr}
 8001d04:	b093      	sub	sp, #76	; 0x4c
 8001d06:	af04      	add	r7, sp, #16
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	81fb      	strh	r3, [r7, #14]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	81bb      	strh	r3, [r7, #12]
 8001d12:	4613      	mov	r3, r2
 8001d14:	817b      	strh	r3, [r7, #10]
	uint16_t row_counter =0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t row_width =0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t end_text_in_row = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t start_text_in_row=0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	863b      	strh	r3, [r7, #48]	; 0x30

	GFXfont font;
	bool write_Text=FALSE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool long_string=FALSE;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001d32:	f107 0318 	add.w	r3, r7, #24
 8001d36:	220c      	movs	r2, #12
 8001d38:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fe81 	bl	8005a42 <memcpy>
	int16_t font_Y = font.yAdvance*size;
 8001d40:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	fb12 f303 	smulbb	r3, r2, r3
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_x;
	int16_t cursor_y = y;
 8001d54:	89bb      	ldrh	r3, [r7, #12]
 8001d56:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001d5c:	e093      	b.n	8001e86 <LCD_centered_Font+0x184>
		{

			char c = text[text_pos];
 8001d5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	4413      	add	r3, r2
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


			if(c >= font.first && c <= font.last && c != '\r' && c != '\n')
 8001d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d6e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d326      	bcc.n	8001dc4 <LCD_centered_Font+0xc2>
 8001d76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001d7a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d820      	bhi.n	8001dc4 <LCD_centered_Font+0xc2>
 8001d82:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d86:	2b0d      	cmp	r3, #13
 8001d88:	d01c      	beq.n	8001dc4 <LCD_centered_Font+0xc2>
 8001d8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d8e:	2b0a      	cmp	r3, #10
 8001d90:	d018      	beq.n	8001dc4 <LCD_centered_Font+0xc2>
			{
				GFXglyph glyph;
				memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d98:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001d9c:	1a5b      	subs	r3, r3, r1
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	18d1      	adds	r1, r2, r3
 8001da2:	f107 0310 	add.w	r3, r7, #16
 8001da6:	2208      	movs	r2, #8
 8001da8:	4618      	mov	r0, r3
 8001daa:	f003 fe4a 	bl	8005a42 <memcpy>
				row_counter+=glyph.xAdvance*size;
 8001dae:	7d3b      	ldrb	r3, [r7, #20]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	fb12 f303 	smulbb	r3, r2, r3
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dc0:	4413      	add	r3, r2
 8001dc2:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
			if (c == '\n')
 8001dc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dc8:	2b0a      	cmp	r3, #10
 8001dca:	d106      	bne.n	8001dda <LCD_centered_Font+0xd8>
			{
				write_Text = TRUE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				end_text_in_row=text_pos;
 8001dd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dd4:	867b      	strh	r3, [r7, #50]	; 0x32
				row_width = row_counter;
 8001dd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001dd8:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if(c==' ')
 8001dda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d106      	bne.n	8001df0 <LCD_centered_Font+0xee>
			{
				end_text_in_row=text_pos;
 8001de2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001de4:	867b      	strh	r3, [r7, #50]	; 0x32
				row_width = row_counter;
 8001de6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001de8:	86bb      	strh	r3, [r7, #52]	; 0x34
				long_string = TRUE;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
			if(row_counter>=length&&long_string)
 8001df0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d306      	bcc.n	8001e06 <LCD_centered_Font+0x104>
 8001df8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d002      	beq.n	8001e06 <LCD_centered_Font+0x104>
			{
				write_Text = TRUE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			if(write_Text)
 8001e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d038      	beq.n	8001e80 <LCD_centered_Font+0x17e>
			{
				//write linie in the center

				if(x+ (length-row_width)/2>=0)
 8001e0e:	89fa      	ldrh	r2, [r7, #14]
 8001e10:	8979      	ldrh	r1, [r7, #10]
 8001e12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e14:	1acb      	subs	r3, r1, r3
 8001e16:	0fd9      	lsrs	r1, r3, #31
 8001e18:	440b      	add	r3, r1
 8001e1a:	105b      	asrs	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db0b      	blt.n	8001e3a <LCD_centered_Font+0x138>
				cursor_x =x+ (length-row_width)/2;
 8001e22:	897a      	ldrh	r2, [r7, #10]
 8001e24:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	0fda      	lsrs	r2, r3, #31
 8001e2a:	4413      	add	r3, r2
 8001e2c:	105b      	asrs	r3, r3, #1
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	89fb      	ldrh	r3, [r7, #14]
 8001e32:	4413      	add	r3, r2
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001e38:	e001      	b.n	8001e3e <LCD_centered_Font+0x13c>
				else cursor_x=0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	85bb      	strh	r3, [r7, #44]	; 0x2c
				LCD_Row_Font (cursor_x, cursor_y, start_text_in_row, end_text_in_row, text, p_font, size, color24);
 8001e3e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001e40:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001e42:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8001e44:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e4e:	9302      	str	r3, [sp, #8]
 8001e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4623      	mov	r3, r4
 8001e5a:	f000 f840 	bl	8001ede <LCD_Row_Font>
				start_text_in_row=end_text_in_row;
 8001e5e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e60:	863b      	strh	r3, [r7, #48]	; 0x30
				text_pos = end_text_in_row;
 8001e62:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001e64:	853b      	strh	r3, [r7, #40]	; 0x28
				row_counter=0;
 8001e66:	2300      	movs	r3, #0
 8001e68:	86fb      	strh	r3, [r7, #54]	; 0x36
				write_Text=FALSE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cursor_y+=font_Y;
 8001e70:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001e72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e74:	4413      	add	r3, r2
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	857b      	strh	r3, [r7, #42]	; 0x2a
				long_string = FALSE;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001e80:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e82:	3301      	adds	r3, #1
 8001e84:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e86:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7fe f9f9 	bl	8000280 <strlen>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	429c      	cmp	r4, r3
 8001e92:	f4ff af64 	bcc.w	8001d5e <LCD_centered_Font+0x5c>

			}
		}
	end_text_in_row=strlen(text);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7fe f9f2 	bl	8000280 <strlen>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	867b      	strh	r3, [r7, #50]	; 0x32
	cursor_x =x+ (length-row_counter)/2;
 8001ea0:	897a      	ldrh	r2, [r7, #10]
 8001ea2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	0fda      	lsrs	r2, r3, #31
 8001ea8:	4413      	add	r3, r2
 8001eaa:	105b      	asrs	r3, r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	89fb      	ldrh	r3, [r7, #14]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	LCD_Row_Font (cursor_x, cursor_y, start_text_in_row, end_text_in_row, text, p_font, size, color24);
 8001eb6:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001eb8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001eba:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8001ebc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec0:	9303      	str	r3, [sp, #12]
 8001ec2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	4623      	mov	r3, r4
 8001ed2:	f000 f804 	bl	8001ede <LCD_Row_Font>
}
 8001ed6:	bf00      	nop
 8001ed8:	373c      	adds	r7, #60	; 0x3c
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd90      	pop	{r4, r7, pc}

08001ede <LCD_Row_Font>:

void LCD_Row_Font(uint16_t x, uint16_t y, uint16_t start, uint16_t end, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001ede:	b590      	push	{r4, r7, lr}
 8001ee0:	b08d      	sub	sp, #52	; 0x34
 8001ee2:	af02      	add	r7, sp, #8
 8001ee4:	4604      	mov	r4, r0
 8001ee6:	4608      	mov	r0, r1
 8001ee8:	4611      	mov	r1, r2
 8001eea:	461a      	mov	r2, r3
 8001eec:	4623      	mov	r3, r4
 8001eee:	80fb      	strh	r3, [r7, #6]
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	80bb      	strh	r3, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	803b      	strh	r3, [r7, #0]

	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	220c      	movs	r2, #12
 8001f02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 fd9c 	bl	8005a42 <memcpy>
	int16_t cursor_x = x;
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_y = y + (font.yAdvance*size)/4;
 8001f0e:	7fbb      	ldrb	r3, [r7, #30]
 8001f10:	461a      	mov	r2, r3
 8001f12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f16:	fb02 f303 	mul.w	r3, r2, r3
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da00      	bge.n	8001f20 <LCD_Row_Font+0x42>
 8001f1e:	3303      	adds	r3, #3
 8001f20:	109b      	asrs	r3, r3, #2
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	88bb      	ldrh	r3, [r7, #4]
 8001f26:	4413      	add	r3, r2
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	847b      	strh	r3, [r7, #34]	; 0x22
	//int16_t cursor_y = y;
	for(uint16_t text_pos = start; text_pos < end; text_pos++)
 8001f2c:	887b      	ldrh	r3, [r7, #2]
 8001f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f30:	e043      	b.n	8001fba <LCD_Row_Font+0xdc>
	{
		char c = text[text_pos];
 8001f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f36:	4413      	add	r3, r2
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if(c >= font.first && c <= font.last && c != '\r'&& c!='\n')
 8001f3e:	7f3b      	ldrb	r3, [r7, #28]
 8001f40:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d335      	bcc.n	8001fb4 <LCD_Row_Font+0xd6>
 8001f48:	7f7b      	ldrb	r3, [r7, #29]
 8001f4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d830      	bhi.n	8001fb4 <LCD_Row_Font+0xd6>
 8001f52:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f56:	2b0d      	cmp	r3, #13
 8001f58:	d02c      	beq.n	8001fb4 <LCD_Row_Font+0xd6>
 8001f5a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f5e:	2b0a      	cmp	r3, #10
 8001f60:	d028      	beq.n	8001fb4 <LCD_Row_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001f68:	7f39      	ldrb	r1, [r7, #28]
 8001f6a:	1a5b      	subs	r3, r3, r1
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	18d1      	adds	r1, r2, r3
 8001f70:	f107 030c 	add.w	r3, r7, #12
 8001f74:	2208      	movs	r2, #8
 8001f76:	4618      	mov	r0, r3
 8001f78:	f003 fd63 	bl	8005a42 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001f7c:	f107 0414 	add.w	r4, r7, #20
 8001f80:	f107 020c 	add.w	r2, r7, #12
 8001f84:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8001f88:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8e:	9301      	str	r3, [sp, #4]
 8001f90:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001f94:	9300      	str	r3, [sp, #0]
 8001f96:	4623      	mov	r3, r4
 8001f98:	f7ff fdfa 	bl	8001b90 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001f9c:	7c3b      	ldrb	r3, [r7, #16]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	fb12 f303 	smulbb	r3, r2, r3
 8001faa:	b29a      	uxth	r2, r3
 8001fac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fae:	4413      	add	r3, r2
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint16_t text_pos = start; text_pos < end; text_pos++)
 8001fb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001fba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001fbc:	883b      	ldrh	r3, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d3b7      	bcc.n	8001f32 <LCD_Row_Font+0x54>
		}
	}
}
 8001fc2:	bf00      	nop
 8001fc4:	bf00      	nop
 8001fc6:	372c      	adds	r7, #44	; 0x2c
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}

08001fcc <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b08f      	sub	sp, #60	; 0x3c
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	60ba      	str	r2, [r7, #8]
 8001fd4:	607b      	str	r3, [r7, #4]
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	81fb      	strh	r3, [r7, #14]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	81bb      	strh	r3, [r7, #12]

	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001fde:	f107 031c 	add.w	r3, r7, #28
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 fd2b 	bl	8005a42 <memcpy>
	int16_t cursor_x = x;
 8001fec:	89fb      	ldrh	r3, [r7, #14]
 8001fee:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y+ (font.yAdvance*size)/4;
 8001ff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da00      	bge.n	8002004 <LCD_Font+0x38>
 8002002:	3303      	adds	r3, #3
 8002004:	109b      	asrs	r3, r3, #2
 8002006:	b29a      	uxth	r2, r3
 8002008:	89bb      	ldrh	r3, [r7, #12]
 800200a:	4413      	add	r3, r2
 800200c:	b29b      	uxth	r3, r3
 800200e:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002010:	2300      	movs	r3, #0
 8002012:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002014:	e056      	b.n	80020c4 <LCD_Font+0xf8>
	{
		char c = text[text_pos];
 8002016:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	4413      	add	r3, r2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8002022:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002026:	2b0a      	cmp	r3, #10
 8002028:	d10f      	bne.n	800204a <LCD_Font+0x7e>
		{
			cursor_x = x;
 800202a:	89fb      	ldrh	r3, [r7, #14]
 800202c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800202e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002032:	b29a      	uxth	r2, r3
 8002034:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002038:	b29b      	uxth	r3, r3
 800203a:	fb12 f303 	smulbb	r3, r2, r3
 800203e:	b29a      	uxth	r2, r3
 8002040:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002042:	4413      	add	r3, r2
 8002044:	b29b      	uxth	r3, r3
 8002046:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002048:	e039      	b.n	80020be <LCD_Font+0xf2>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800204a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800204e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002052:	429a      	cmp	r2, r3
 8002054:	d333      	bcc.n	80020be <LCD_Font+0xf2>
 8002056:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800205a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800205e:	429a      	cmp	r2, r3
 8002060:	d82d      	bhi.n	80020be <LCD_Font+0xf2>
 8002062:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002066:	2b0d      	cmp	r3, #13
 8002068:	d029      	beq.n	80020be <LCD_Font+0xf2>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800206a:	6a3a      	ldr	r2, [r7, #32]
 800206c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002070:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002074:	1a5b      	subs	r3, r3, r1
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	18d1      	adds	r1, r2, r3
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	2208      	movs	r2, #8
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fcde 	bl	8005a42 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8002086:	f107 041c 	add.w	r4, r7, #28
 800208a:	f107 0214 	add.w	r2, r7, #20
 800208e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8002092:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8002096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	4623      	mov	r3, r4
 80020a2:	f7ff fd75 	bl	8001b90 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 80020a6:	7e3b      	ldrb	r3, [r7, #24]
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	fb12 f303 	smulbb	r3, r2, r3
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80020b8:	4413      	add	r3, r2
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80020be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020c0:	3301      	adds	r3, #1
 80020c2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80020c4:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80020c6:	68b8      	ldr	r0, [r7, #8]
 80020c8:	f7fe f8da 	bl	8000280 <strlen>
 80020cc:	4603      	mov	r3, r0
 80020ce:	429c      	cmp	r4, r3
 80020d0:	d3a1      	bcc.n	8002016 <LCD_Font+0x4a>
		}
	}
}
 80020d2:	bf00      	nop
 80020d4:	bf00      	nop
 80020d6:	3734      	adds	r7, #52	; 0x34
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd90      	pop	{r4, r7, pc}

080020dc <LCD_FillTriangle>:

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80020dc:	b590      	push	{r4, r7, lr}
 80020de:	b091      	sub	sp, #68	; 0x44
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	4604      	mov	r4, r0
 80020e4:	4608      	mov	r0, r1
 80020e6:	4611      	mov	r1, r2
 80020e8:	461a      	mov	r2, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	80fb      	strh	r3, [r7, #6]
 80020ee:	4603      	mov	r3, r0
 80020f0:	80bb      	strh	r3, [r7, #4]
 80020f2:	460b      	mov	r3, r1
 80020f4:	807b      	strh	r3, [r7, #2]
 80020f6:	4613      	mov	r3, r2
 80020f8:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 80020fa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002102:	429a      	cmp	r2, r3
 8002104:	dd0b      	ble.n	800211e <LCD_FillTriangle+0x42>
		swap(y0, y1);
 8002106:	88bb      	ldrh	r3, [r7, #4]
 8002108:	84fb      	strh	r3, [r7, #38]	; 0x26
 800210a:	883b      	ldrh	r3, [r7, #0]
 800210c:	80bb      	strh	r3, [r7, #4]
 800210e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002110:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8002112:	88fb      	ldrh	r3, [r7, #6]
 8002114:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	80fb      	strh	r3, [r7, #6]
 800211a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800211c:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 800211e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002122:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002126:	429a      	cmp	r2, r3
 8002128:	dd0f      	ble.n	800214a <LCD_FillTriangle+0x6e>
		swap(y2, y1);
 800212a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800212e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002130:	883b      	ldrh	r3, [r7, #0]
 8002132:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002138:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 800213a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800213e:	843b      	strh	r3, [r7, #32]
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002146:	8c3b      	ldrh	r3, [r7, #32]
 8002148:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800214a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800214e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002152:	429a      	cmp	r2, r3
 8002154:	dd0b      	ble.n	800216e <LCD_FillTriangle+0x92>
		swap(y0, y1);
 8002156:	88bb      	ldrh	r3, [r7, #4]
 8002158:	83fb      	strh	r3, [r7, #30]
 800215a:	883b      	ldrh	r3, [r7, #0]
 800215c:	80bb      	strh	r3, [r7, #4]
 800215e:	8bfb      	ldrh	r3, [r7, #30]
 8002160:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	83bb      	strh	r3, [r7, #28]
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	80fb      	strh	r3, [r7, #6]
 800216a:	8bbb      	ldrh	r3, [r7, #28]
 800216c:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800216e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002172:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002176:	429a      	cmp	r2, r3
 8002178:	d136      	bne.n	80021e8 <LCD_FillTriangle+0x10c>
		a = b = x0;
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800217e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002180:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(x1 < a)      a = x1;
 8002182:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002186:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800218a:	429a      	cmp	r2, r3
 800218c:	da02      	bge.n	8002194 <LCD_FillTriangle+0xb8>
 800218e:	887b      	ldrh	r3, [r7, #2]
 8002190:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002192:	e007      	b.n	80021a4 <LCD_FillTriangle+0xc8>
		else if(x1 > b) b = x1;
 8002194:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002198:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800219c:	429a      	cmp	r2, r3
 800219e:	dd01      	ble.n	80021a4 <LCD_FillTriangle+0xc8>
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(x2 < a)      a = x2;
 80021a4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80021a8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80021ac:	429a      	cmp	r2, r3
 80021ae:	da03      	bge.n	80021b8 <LCD_FillTriangle+0xdc>
 80021b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021b4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80021b6:	e008      	b.n	80021ca <LCD_FillTriangle+0xee>
		else if(x2 > b) b = x2;
 80021b8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80021bc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dd02      	ble.n	80021ca <LCD_FillTriangle+0xee>
 80021c4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80021c8:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y0, b - a + 1,1, color);
 80021ca:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80021cc:	88b9      	ldrh	r1, [r7, #4]
 80021ce:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2301      	movs	r3, #1
 80021e2:	f7ff f8c9 	bl	8001378 <TFT_Draw_HLine>
		return;
 80021e6:	e0d2      	b.n	800238e <LCD_FillTriangle+0x2b2>
	}

	int16_t	dx01 = x1 - x0,
 80021e8:	887a      	ldrh	r2, [r7, #2]
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	837b      	strh	r3, [r7, #26]
			dy01 = y1 - y0,
 80021f2:	883a      	ldrh	r2, [r7, #0]
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	833b      	strh	r3, [r7, #24]
			dx02 = x2 - x0,
 80021fc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	b29b      	uxth	r3, r3
 8002206:	82fb      	strh	r3, [r7, #22]
			dy02 = y2 - y0,
 8002208:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	b29b      	uxth	r3, r3
 8002212:	82bb      	strh	r3, [r7, #20]
			dx12 = x2 - x1,
 8002214:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002218:	887b      	ldrh	r3, [r7, #2]
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	b29b      	uxth	r3, r3
 800221e:	827b      	strh	r3, [r7, #18]
			dy12 = y2 - y1;
 8002220:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002224:	883b      	ldrh	r3, [r7, #0]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	b29b      	uxth	r3, r3
 800222a:	823b      	strh	r3, [r7, #16]
	int32_t	sa   = 0,
 800222c:	2300      	movs	r3, #0
 800222e:	62fb      	str	r3, [r7, #44]	; 0x2c
			sb   = 0;
 8002230:	2300      	movs	r3, #0
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2) last = y1;   // Include y1 scanline
 8002234:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002238:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800223c:	429a      	cmp	r2, r3
 800223e:	d102      	bne.n	8002246 <LCD_FillTriangle+0x16a>
 8002240:	883b      	ldrh	r3, [r7, #0]
 8002242:	863b      	strh	r3, [r7, #48]	; 0x30
 8002244:	e003      	b.n	800224e <LCD_FillTriangle+0x172>
	else last = y1 - 1; // Skip it
 8002246:	883b      	ldrh	r3, [r7, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	b29b      	uxth	r3, r3
 800224c:	863b      	strh	r3, [r7, #48]	; 0x30

	for(y = y0; y <= last; y++) {
 800224e:	88bb      	ldrh	r3, [r7, #4]
 8002250:	867b      	strh	r3, [r7, #50]	; 0x32
 8002252:	e03d      	b.n	80022d0 <LCD_FillTriangle+0x1f4>
		a = x0 + sa / dy01;
 8002254:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002258:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800225a:	fb92 f3f3 	sdiv	r3, r2, r3
 800225e:	b29a      	uxth	r2, r3
 8002260:	88fb      	ldrh	r3, [r7, #6]
 8002262:	4413      	add	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8002268:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800226c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800226e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002272:	b29a      	uxth	r2, r3
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	4413      	add	r3, r2
 8002278:	b29b      	uxth	r3, r3
 800227a:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx01;
 800227c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002280:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002282:	4413      	add	r3, r2
 8002284:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8002286:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800228a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800228c:	4413      	add	r3, r2
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8002290:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002294:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002298:	429a      	cmp	r2, r3
 800229a:	dd05      	ble.n	80022a8 <LCD_FillTriangle+0x1cc>
 800229c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800229e:	81bb      	strh	r3, [r7, #12]
 80022a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80022a2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022a4:	89bb      	ldrh	r3, [r7, #12]
 80022a6:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b-a+1,1, color);
 80022a8:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80022aa:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80022ac:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3301      	adds	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2301      	movs	r3, #1
 80022c0:	f7ff f85a 	bl	8001378 <TFT_Draw_HLine>
	for(y = y0; y <= last; y++) {
 80022c4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3301      	adds	r3, #1
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	867b      	strh	r3, [r7, #50]	; 0x32
 80022d0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80022d4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80022d8:	429a      	cmp	r2, r3
 80022da:	ddbb      	ble.n	8002254 <LCD_FillTriangle+0x178>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 80022dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80022e0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80022e4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80022e8:	1a8a      	subs	r2, r1, r2
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	sb = dx02 * (y - y0);
 80022f0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80022f4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80022f8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022fc:	1a8a      	subs	r2, r1, r2
 80022fe:	fb02 f303 	mul.w	r3, r2, r3
 8002302:	62bb      	str	r3, [r7, #40]	; 0x28
	for(; y <= y2; y++) {
 8002304:	e03d      	b.n	8002382 <LCD_FillTriangle+0x2a6>
		a = x1 + sa / dy12;
 8002306:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800230a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800230c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002310:	b29a      	uxth	r2, r3
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	4413      	add	r3, r2
 8002316:	b29b      	uxth	r3, r3
 8002318:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 800231a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800231e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002320:	fb92 f3f3 	sdiv	r3, r2, r3
 8002324:	b29a      	uxth	r2, r3
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	4413      	add	r3, r2
 800232a:	b29b      	uxth	r3, r3
 800232c:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx12;
 800232e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002334:	4413      	add	r3, r2
 8002336:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8002338:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800233c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233e:	4413      	add	r3, r2
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8002342:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002346:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800234a:	429a      	cmp	r2, r3
 800234c:	dd05      	ble.n	800235a <LCD_FillTriangle+0x27e>
 800234e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002350:	81fb      	strh	r3, [r7, #14]
 8002352:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002354:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b - a + 1,1, color);
 800235a:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800235c:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800235e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002360:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	b29b      	uxth	r3, r3
 8002366:	3301      	adds	r3, #1
 8002368:	b29a      	uxth	r2, r3
 800236a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	2301      	movs	r3, #1
 8002372:	f7ff f801 	bl	8001378 <TFT_Draw_HLine>
	for(; y <= y2; y++) {
 8002376:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800237a:	b29b      	uxth	r3, r3
 800237c:	3301      	adds	r3, #1
 800237e:	b29b      	uxth	r3, r3
 8002380:	867b      	strh	r3, [r7, #50]	; 0x32
 8002382:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002386:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800238a:	429a      	cmp	r2, r3
 800238c:	ddbb      	ble.n	8002306 <LCD_FillTriangle+0x22a>
	}
}
 800238e:	373c      	adds	r7, #60	; 0x3c
 8002390:	46bd      	mov	sp, r7
 8002392:	bd90      	pop	{r4, r7, pc}

08002394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239a:	f107 030c 	add.w	r3, r7, #12
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
 80023a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	4b3d      	ldr	r3, [pc, #244]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a3c      	ldr	r2, [pc, #240]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b3a      	ldr	r3, [pc, #232]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	60bb      	str	r3, [r7, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	607b      	str	r3, [r7, #4]
 80023ca:	4b36      	ldr	r3, [pc, #216]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a35      	ldr	r2, [pc, #212]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b33      	ldr	r3, [pc, #204]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	4b2f      	ldr	r3, [pc, #188]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a2e      	ldr	r2, [pc, #184]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b2c      	ldr	r3, [pc, #176]	; (80024a4 <MX_GPIO_Init+0x110>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	603b      	str	r3, [r7, #0]
 80023fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80023fe:	2200      	movs	r2, #0
 8002400:	f248 31ff 	movw	r1, #33791	; 0x83ff
 8002404:	4828      	ldr	r0, [pc, #160]	; (80024a8 <MX_GPIO_Init+0x114>)
 8002406:	f001 fbc5 	bl	8003b94 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D8_Pin|D9_Pin|D10_Pin|GPIO_PIN_13
 800240a:	2200      	movs	r2, #0
 800240c:	f242 31ff 	movw	r1, #9215	; 0x23ff
 8002410:	4826      	ldr	r0, [pc, #152]	; (80024ac <MX_GPIO_Init+0x118>)
 8002412:	f001 fbbf 	bl	8003b94 <HAL_GPIO_WritePin>
                          |D15_Pin|WR_Pin|RD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002416:	f248 33ff 	movw	r3, #33791	; 0x83ff
 800241a:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002424:	2303      	movs	r3, #3
 8002426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002428:	f107 030c 	add.w	r3, r7, #12
 800242c:	4619      	mov	r1, r3
 800242e:	481e      	ldr	r0, [pc, #120]	; (80024a8 <MX_GPIO_Init+0x114>)
 8002430:	f001 fa2c 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002434:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002438:	60fb      	str	r3, [r7, #12]
                          |D12_Pin|D13_Pin|D14_Pin|D15_Pin
                          |WR_Pin|RD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243a:	2301      	movs	r3, #1
 800243c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002442:	2303      	movs	r3, #3
 8002444:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002446:	f107 030c 	add.w	r3, r7, #12
 800244a:	4619      	mov	r1, r3
 800244c:	4817      	ldr	r0, [pc, #92]	; (80024ac <MX_GPIO_Init+0x118>)
 800244e:	f001 fa1d 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002458:	2301      	movs	r3, #1
 800245a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002460:	2302      	movs	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002464:	f107 030c 	add.w	r3, r7, #12
 8002468:	4619      	mov	r1, r3
 800246a:	4810      	ldr	r0, [pc, #64]	; (80024ac <MX_GPIO_Init+0x118>)
 800246c:	f001 fa0e 	bl	800388c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8002470:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002476:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800247a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247c:	2301      	movs	r3, #1
 800247e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8002480:	f107 030c 	add.w	r3, r7, #12
 8002484:	4619      	mov	r1, r3
 8002486:	4808      	ldr	r0, [pc, #32]	; (80024a8 <MX_GPIO_Init+0x114>)
 8002488:	f001 fa00 	bl	800388c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	2028      	movs	r0, #40	; 0x28
 8002492:	f001 f9c4 	bl	800381e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002496:	2028      	movs	r0, #40	; 0x28
 8002498:	f001 f9dd 	bl	8003856 <HAL_NVIC_EnableIRQ>

}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400

080024b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db0b      	blt.n	80024da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	f003 021f 	and.w	r2, r3, #31
 80024c8:	4907      	ldr	r1, [pc, #28]	; (80024e8 <__NVIC_EnableIRQ+0x38>)
 80024ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	2001      	movs	r0, #1
 80024d2:	fa00 f202 	lsl.w	r2, r0, r2
 80024d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	e000e100 	.word	0xe000e100

080024ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	db12      	blt.n	8002524 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	f003 021f 	and.w	r2, r3, #31
 8002504:	490a      	ldr	r1, [pc, #40]	; (8002530 <__NVIC_DisableIRQ+0x44>)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	095b      	lsrs	r3, r3, #5
 800250c:	2001      	movs	r0, #1
 800250e:	fa00 f202 	lsl.w	r2, r0, r2
 8002512:	3320      	adds	r3, #32
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002518:	f3bf 8f4f 	dsb	sy
}
 800251c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800251e:	f3bf 8f6f 	isb	sy
}
 8002522:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr
 8002530:	e000e100 	.word	0xe000e100

08002534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b090      	sub	sp, #64	; 0x40
 8002538:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800253a:	f000 ffff 	bl	800353c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800253e:	f000 fc69 	bl	8002e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002542:	f7ff ff27 	bl	8002394 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002546:	f000 fcef 	bl	8002f28 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 800254a:	f7fe fd7d 	bl	8001048 <Init_SSD1963>

  //NVIC_DisableIRQ(EXTI15_10_IRQn);
  //EXTI->IMR &= 0xff;

  uint16_t pos_y;
    TFT_Clear_Screen(0xCFFF);
 800254e:	f64c 70ff 	movw	r0, #53247	; 0xcfff
 8002552:	f7fe fee7 	bl	8001324 <TFT_Clear_Screen>
    TFT_Draw_Fill_Rectangle(100,0, 600, 144, 0xD61F);//niebieska ramka
 8002556:	f24d 631f 	movw	r3, #54815	; 0xd61f
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	2390      	movs	r3, #144	; 0x90
 800255e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002562:	2100      	movs	r1, #0
 8002564:	2064      	movs	r0, #100	; 0x64
 8002566:	f7ff f9d6 	bl	8001916 <TFT_Draw_Fill_Rectangle>




	TFT_Draw_Fill_Rectangle(780,0, 20, 20, 0x8C51);//szary prostokąt z prawej
 800256a:	f648 4351 	movw	r3, #35921	; 0x8c51
 800256e:	9300      	str	r3, [sp, #0]
 8002570:	2314      	movs	r3, #20
 8002572:	2214      	movs	r2, #20
 8002574:	2100      	movs	r1, #0
 8002576:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800257a:	f7ff f9cc 	bl	8001916 <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Rectangle(780,460, 20, 20, 0x8C51);
 800257e:	f648 4351 	movw	r3, #35921	; 0x8c51
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	2314      	movs	r3, #20
 8002586:	2214      	movs	r2, #20
 8002588:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800258c:	f44f 7043 	mov.w	r0, #780	; 0x30c
 8002590:	f7ff f9c1 	bl	8001916 <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Round_Rect (680, 0, 120, 480, 20, 0x8C51);
 8002594:	f648 4351 	movw	r3, #35921	; 0x8c51
 8002598:	9301      	str	r3, [sp, #4]
 800259a:	2314      	movs	r3, #20
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025a2:	2278      	movs	r2, #120	; 0x78
 80025a4:	2100      	movs	r1, #0
 80025a6:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 80025aa:	f7ff fa90 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	pos_y = 9;
 80025ae:	2309      	movs	r3, #9
 80025b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint8_t i = 0; i<7;i+=1)//przyciski po prawej
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80025b8:	e02c      	b.n	8002614 <main+0xe0>
	{
		TFT_Draw_Fill_Round_Rect (696, pos_y, 88, 47, 10,  0xD6BA);
 80025ba:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80025bc:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	230a      	movs	r3, #10
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	232f      	movs	r3, #47	; 0x2f
 80025c8:	2258      	movs	r2, #88	; 0x58
 80025ca:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80025ce:	f7ff fa7e 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
		TFT_Draw_Fill_Rectangle(740,pos_y, 2, 47, 0x0000);
 80025d2:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80025d4:	2300      	movs	r3, #0
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	232f      	movs	r3, #47	; 0x2f
 80025da:	2202      	movs	r2, #2
 80025dc:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 80025e0:	f7ff f999 	bl	8001916 <TFT_Draw_Fill_Rectangle>
		LCD_centered_Font(696, pos_y+24, 88, "+   -", _Open_Sans_Bold_48, 1, 0x4A69);
 80025e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80025e6:	3318      	adds	r3, #24
 80025e8:	b299      	uxth	r1, r3
 80025ea:	f644 2369 	movw	r3, #19049	; 0x4a69
 80025ee:	9302      	str	r3, [sp, #8]
 80025f0:	2301      	movs	r3, #1
 80025f2:	9301      	str	r3, [sp, #4]
 80025f4:	4b68      	ldr	r3, [pc, #416]	; (8002798 <main+0x264>)
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	4b68      	ldr	r3, [pc, #416]	; (800279c <main+0x268>)
 80025fa:	2258      	movs	r2, #88	; 0x58
 80025fc:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002600:	f7ff fb7f 	bl	8001d02 <LCD_centered_Font>
		pos_y+=56;
 8002604:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002606:	3338      	adds	r3, #56	; 0x38
 8002608:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint8_t i = 0; i<7;i+=1)//przyciski po prawej
 800260a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800260e:	3301      	adds	r3, #1
 8002610:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8002614:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002618:	2b06      	cmp	r3, #6
 800261a:	d9ce      	bls.n	80025ba <main+0x86>
	}
	TFT_Draw_Fill_Round_Rect (696, 413, 88, 47, 10,  0xD6BA);
 800261c:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	230a      	movs	r3, #10
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	232f      	movs	r3, #47	; 0x2f
 8002628:	2258      	movs	r2, #88	; 0x58
 800262a:	f240 119d 	movw	r1, #413	; 0x19d
 800262e:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002632:	f7ff fa4c 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Rectangle(740, 413, 2, 47, 0x0000);
 8002636:	2300      	movs	r3, #0
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	232f      	movs	r3, #47	; 0x2f
 800263c:	2202      	movs	r2, #2
 800263e:	f240 119d 	movw	r1, #413	; 0x19d
 8002642:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8002646:	f7ff f966 	bl	8001916 <TFT_Draw_Fill_Rectangle>
	LCD_centered_Font(696, 413+24, 88, "+   -", _Open_Sans_Bold_48, 1, 0x4A69);
 800264a:	f644 2369 	movw	r3, #19049	; 0x4a69
 800264e:	9302      	str	r3, [sp, #8]
 8002650:	2301      	movs	r3, #1
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	4b50      	ldr	r3, [pc, #320]	; (8002798 <main+0x264>)
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <main+0x268>)
 800265a:	2258      	movs	r2, #88	; 0x58
 800265c:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002660:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002664:	f7ff fb4d 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(696, 9+25, 88, "X", _Open_Sans_Bold_48, 1, 0x7D3D);//literki po prawej
 8002668:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	2301      	movs	r3, #1
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	4b49      	ldr	r3, [pc, #292]	; (8002798 <main+0x264>)
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	4b4a      	ldr	r3, [pc, #296]	; (80027a0 <main+0x26c>)
 8002678:	2258      	movs	r2, #88	; 0x58
 800267a:	2122      	movs	r1, #34	; 0x22
 800267c:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002680:	f7ff fb3f 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(696, 65+25, 88, "Y", _Open_Sans_Bold_48, 1, 0x7D3D);
 8002684:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	2301      	movs	r3, #1
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	4b42      	ldr	r3, [pc, #264]	; (8002798 <main+0x264>)
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <main+0x270>)
 8002694:	2258      	movs	r2, #88	; 0x58
 8002696:	215a      	movs	r1, #90	; 0x5a
 8002698:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 800269c:	f7ff fb31 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(696, 121+25, 88, "Z", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026a0:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026a4:	9302      	str	r3, [sp, #8]
 80026a6:	2301      	movs	r3, #1
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	4b3b      	ldr	r3, [pc, #236]	; (8002798 <main+0x264>)
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <main+0x274>)
 80026b0:	2258      	movs	r2, #88	; 0x58
 80026b2:	2192      	movs	r1, #146	; 0x92
 80026b4:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80026b8:	f7ff fb23 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(696, 177+25, 88, "A", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026bc:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	2301      	movs	r3, #1
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	4b34      	ldr	r3, [pc, #208]	; (8002798 <main+0x264>)
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	4b38      	ldr	r3, [pc, #224]	; (80027ac <main+0x278>)
 80026cc:	2258      	movs	r2, #88	; 0x58
 80026ce:	21ca      	movs	r1, #202	; 0xca
 80026d0:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80026d4:	f7ff fb15 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(696, 233+25, 88, "B", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026d8:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026dc:	9302      	str	r3, [sp, #8]
 80026de:	2301      	movs	r3, #1
 80026e0:	9301      	str	r3, [sp, #4]
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <main+0x264>)
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4b32      	ldr	r3, [pc, #200]	; (80027b0 <main+0x27c>)
 80026e8:	2258      	movs	r2, #88	; 0x58
 80026ea:	f44f 7181 	mov.w	r1, #258	; 0x102
 80026ee:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80026f2:	f7ff fb06 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(696, 289+25, 88, "C", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026f6:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026fa:	9302      	str	r3, [sp, #8]
 80026fc:	2301      	movs	r3, #1
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	4b25      	ldr	r3, [pc, #148]	; (8002798 <main+0x264>)
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <main+0x280>)
 8002706:	2258      	movs	r2, #88	; 0x58
 8002708:	f44f 719d 	mov.w	r1, #314	; 0x13a
 800270c:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002710:	f7ff faf7 	bl	8001d02 <LCD_centered_Font>
	LCD_FillTriangle(732, 417,732, 417+38, 732+24, 417+19, 0x7D3D);
 8002714:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 800271e:	9301      	str	r3, [sp, #4]
 8002720:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	f240 13c7 	movw	r3, #455	; 0x1c7
 800272a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800272e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8002732:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 8002736:	f7ff fcd1 	bl	80020dc <LCD_FillTriangle>
	TFT_Draw_Bitmap_Without_Background(721, 353, hand_icon_x, hand_icon_y, hand_icon);
 800273a:	4b1f      	ldr	r3, [pc, #124]	; (80027b8 <main+0x284>)
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	231f      	movs	r3, #31
 8002740:	2229      	movs	r2, #41	; 0x29
 8002742:	f240 1161 	movw	r1, #353	; 0x161
 8002746:	f240 20d1 	movw	r0, #721	; 0x2d1
 800274a:	f7ff f85d 	bl	8001808 <TFT_Draw_Bitmap_Without_Background>




    TFT_Draw_Fill_Rectangle(0,0, 20, 20, 0x8C51);//szary prostokąt z lewej
 800274e:	f648 4351 	movw	r3, #35921	; 0x8c51
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	2314      	movs	r3, #20
 8002756:	2214      	movs	r2, #20
 8002758:	2100      	movs	r1, #0
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff f8db 	bl	8001916 <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Rectangle(0,460, 20, 20, 0x8C51);
 8002760:	f648 4351 	movw	r3, #35921	; 0x8c51
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2314      	movs	r3, #20
 8002768:	2214      	movs	r2, #20
 800276a:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 800276e:	2000      	movs	r0, #0
 8002770:	f7ff f8d1 	bl	8001916 <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Round_Rect (0, 0, 120, 480, 20, 0x8C51);
 8002774:	f648 4351 	movw	r3, #35921	; 0x8c51
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	2314      	movs	r3, #20
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002782:	2278      	movs	r2, #120	; 0x78
 8002784:	2100      	movs	r1, #0
 8002786:	2000      	movs	r0, #0
 8002788:	f7ff f9a1 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
    pos_y = 33;
 800278c:	2321      	movs	r3, #33	; 0x21
 800278e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i<8;i+=1)//przyciski po lewej
 8002790:	2300      	movs	r3, #0
 8002792:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8002796:	e024      	b.n	80027e2 <main+0x2ae>
 8002798:	0800b5dc 	.word	0x0800b5dc
 800279c:	080079c8 	.word	0x080079c8
 80027a0:	080079d0 	.word	0x080079d0
 80027a4:	080079d4 	.word	0x080079d4
 80027a8:	080079d8 	.word	0x080079d8
 80027ac:	080079dc 	.word	0x080079dc
 80027b0:	080079e0 	.word	0x080079e0
 80027b4:	080079e4 	.word	0x080079e4
 80027b8:	0800b5e8 	.word	0x0800b5e8
    {
        TFT_Draw_Fill_Round_Rect (16, pos_y, 88, 47, 10,  0xD6BA);
 80027bc:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80027be:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	230a      	movs	r3, #10
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	232f      	movs	r3, #47	; 0x2f
 80027ca:	2258      	movs	r2, #88	; 0x58
 80027cc:	2010      	movs	r0, #16
 80027ce:	f7ff f97e 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
        pos_y+=56;
 80027d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80027d4:	3338      	adds	r3, #56	; 0x38
 80027d6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    for(uint8_t i = 0; i<8;i+=1)//przyciski po lewej
 80027d8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027dc:	3301      	adds	r3, #1
 80027de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80027e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027e6:	2b07      	cmp	r3, #7
 80027e8:	d9e8      	bls.n	80027bc <main+0x288>
    }
    LCD_centered_Font(0, 0+16, 120, "JOB NAME", _Open_Sans_Bold_14, 1, BLACK);
 80027ea:	2300      	movs	r3, #0
 80027ec:	9302      	str	r3, [sp, #8]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	4bc3      	ldr	r3, [pc, #780]	; (8002b00 <main+0x5cc>)
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	4bc3      	ldr	r3, [pc, #780]	; (8002b04 <main+0x5d0>)
 80027f8:	2278      	movs	r2, #120	; 0x78
 80027fa:	2110      	movs	r1, #16
 80027fc:	2000      	movs	r0, #0
 80027fe:	f7ff fa80 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 33+24, 88, "OPEN", _Open_Sans_Bold_14, 1, 0x7D3D);//literki po lewej
 8002802:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002806:	9302      	str	r3, [sp, #8]
 8002808:	2301      	movs	r3, #1
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	4bbc      	ldr	r3, [pc, #752]	; (8002b00 <main+0x5cc>)
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	4bbd      	ldr	r3, [pc, #756]	; (8002b08 <main+0x5d4>)
 8002812:	2258      	movs	r2, #88	; 0x58
 8002814:	2139      	movs	r1, #57	; 0x39
 8002816:	2010      	movs	r0, #16
 8002818:	f7ff fa73 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 89+24, 88, "CONT. JOB", _Open_Sans_Bold_14, 1, 0x7D3D);
 800281c:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002820:	9302      	str	r3, [sp, #8]
 8002822:	2301      	movs	r3, #1
 8002824:	9301      	str	r3, [sp, #4]
 8002826:	4bb6      	ldr	r3, [pc, #728]	; (8002b00 <main+0x5cc>)
 8002828:	9300      	str	r3, [sp, #0]
 800282a:	4bb8      	ldr	r3, [pc, #736]	; (8002b0c <main+0x5d8>)
 800282c:	2258      	movs	r2, #88	; 0x58
 800282e:	2171      	movs	r1, #113	; 0x71
 8002830:	2010      	movs	r0, #16
 8002832:	f7ff fa66 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 145+24, 88, "MANUAL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002836:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800283a:	9302      	str	r3, [sp, #8]
 800283c:	2301      	movs	r3, #1
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	4baf      	ldr	r3, [pc, #700]	; (8002b00 <main+0x5cc>)
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4bb2      	ldr	r3, [pc, #712]	; (8002b10 <main+0x5dc>)
 8002846:	2258      	movs	r2, #88	; 0x58
 8002848:	21a9      	movs	r1, #169	; 0xa9
 800284a:	2010      	movs	r0, #16
 800284c:	f7ff fa59 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 201+14, 88, "ENABLE\nTOOL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002850:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	2301      	movs	r3, #1
 8002858:	9301      	str	r3, [sp, #4]
 800285a:	4ba9      	ldr	r3, [pc, #676]	; (8002b00 <main+0x5cc>)
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	4bad      	ldr	r3, [pc, #692]	; (8002b14 <main+0x5e0>)
 8002860:	2258      	movs	r2, #88	; 0x58
 8002862:	21d7      	movs	r1, #215	; 0xd7
 8002864:	2010      	movs	r0, #16
 8002866:	f7ff fa4c 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 257+24, 88, "RUN JOB", _Open_Sans_Bold_14, 1, 0x7D3D);
 800286a:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800286e:	9302      	str	r3, [sp, #8]
 8002870:	2301      	movs	r3, #1
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	4ba2      	ldr	r3, [pc, #648]	; (8002b00 <main+0x5cc>)
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4ba7      	ldr	r3, [pc, #668]	; (8002b18 <main+0x5e4>)
 800287a:	2258      	movs	r2, #88	; 0x58
 800287c:	f240 1119 	movw	r1, #281	; 0x119
 8002880:	2010      	movs	r0, #16
 8002882:	f7ff fa3e 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 313+14, 88, "AXIS\nCONTROL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002886:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800288a:	9302      	str	r3, [sp, #8]
 800288c:	2301      	movs	r3, #1
 800288e:	9301      	str	r3, [sp, #4]
 8002890:	4b9b      	ldr	r3, [pc, #620]	; (8002b00 <main+0x5cc>)
 8002892:	9300      	str	r3, [sp, #0]
 8002894:	4ba1      	ldr	r3, [pc, #644]	; (8002b1c <main+0x5e8>)
 8002896:	2258      	movs	r2, #88	; 0x58
 8002898:	f240 1147 	movw	r1, #327	; 0x147
 800289c:	2010      	movs	r0, #16
 800289e:	f7ff fa30 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 369+14, 88, "CONT.\nMOVEMENT", _Open_Sans_Bold_14, 1, 0x7D3D);
 80028a2:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80028a6:	9302      	str	r3, [sp, #8]
 80028a8:	2301      	movs	r3, #1
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	4b94      	ldr	r3, [pc, #592]	; (8002b00 <main+0x5cc>)
 80028ae:	9300      	str	r3, [sp, #0]
 80028b0:	4b9b      	ldr	r3, [pc, #620]	; (8002b20 <main+0x5ec>)
 80028b2:	2258      	movs	r2, #88	; 0x58
 80028b4:	f240 117f 	movw	r1, #383	; 0x17f
 80028b8:	2010      	movs	r0, #16
 80028ba:	f7ff fa22 	bl	8001d02 <LCD_centered_Font>
	LCD_centered_Font(16, 425+24, 88, "SETTINGS", _Open_Sans_Bold_14, 1, 0x7D3D);
 80028be:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80028c2:	9302      	str	r3, [sp, #8]
 80028c4:	2301      	movs	r3, #1
 80028c6:	9301      	str	r3, [sp, #4]
 80028c8:	4b8d      	ldr	r3, [pc, #564]	; (8002b00 <main+0x5cc>)
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	4b95      	ldr	r3, [pc, #596]	; (8002b24 <main+0x5f0>)
 80028ce:	2258      	movs	r2, #88	; 0x58
 80028d0:	f240 11c1 	movw	r1, #449	; 0x1c1
 80028d4:	2010      	movs	r0, #16
 80028d6:	f7ff fa14 	bl	8001d02 <LCD_centered_Font>




	TFT_Draw_Fill_Round_Rect (132, 9, 70, 41, 20,  0xD6BA);//przyciski na gorze
 80028da:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80028de:	9301      	str	r3, [sp, #4]
 80028e0:	2314      	movs	r3, #20
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	2329      	movs	r3, #41	; 0x29
 80028e6:	2246      	movs	r2, #70	; 0x46
 80028e8:	2109      	movs	r1, #9
 80028ea:	2084      	movs	r0, #132	; 0x84
 80028ec:	f7ff f8ef 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (212, 9, 70, 41, 20,  0xD6BA);
 80028f0:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80028f4:	9301      	str	r3, [sp, #4]
 80028f6:	2314      	movs	r3, #20
 80028f8:	9300      	str	r3, [sp, #0]
 80028fa:	2329      	movs	r3, #41	; 0x29
 80028fc:	2246      	movs	r2, #70	; 0x46
 80028fe:	2109      	movs	r1, #9
 8002900:	20d4      	movs	r0, #212	; 0xd4
 8002902:	f7ff f8e4 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (291, 9, 70, 41, 20,  0xD6BA);
 8002906:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	2314      	movs	r3, #20
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2329      	movs	r3, #41	; 0x29
 8002912:	2246      	movs	r2, #70	; 0x46
 8002914:	2109      	movs	r1, #9
 8002916:	f240 1023 	movw	r0, #291	; 0x123
 800291a:	f7ff f8d8 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (371, 9, 81, 41, 20,  0xD6BA);
 800291e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002922:	9301      	str	r3, [sp, #4]
 8002924:	2314      	movs	r3, #20
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	2329      	movs	r3, #41	; 0x29
 800292a:	2251      	movs	r2, #81	; 0x51
 800292c:	2109      	movs	r1, #9
 800292e:	f240 1073 	movw	r0, #371	; 0x173
 8002932:	f7ff f8cc 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (462, 9, 72, 41, 20,  0xD6BA);
 8002936:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800293a:	9301      	str	r3, [sp, #4]
 800293c:	2314      	movs	r3, #20
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2329      	movs	r3, #41	; 0x29
 8002942:	2248      	movs	r2, #72	; 0x48
 8002944:	2109      	movs	r1, #9
 8002946:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 800294a:	f7ff f8c0 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (544, 9, 72, 41, 20,  0xD6BA);
 800294e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	2314      	movs	r3, #20
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2329      	movs	r3, #41	; 0x29
 800295a:	2248      	movs	r2, #72	; 0x48
 800295c:	2109      	movs	r1, #9
 800295e:	f44f 7008 	mov.w	r0, #544	; 0x220
 8002962:	f7ff f8b4 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (628, 15, 40, 40, 20,  0xD6BA);
 8002966:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2314      	movs	r3, #20
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2328      	movs	r3, #40	; 0x28
 8002972:	2228      	movs	r2, #40	; 0x28
 8002974:	210f      	movs	r1, #15
 8002976:	f44f 701d 	mov.w	r0, #628	; 0x274
 800297a:	f7ff f8a8 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (628, 88, 40, 40, 20,  0xD6BA);
 800297e:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2314      	movs	r3, #20
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2328      	movs	r3, #40	; 0x28
 800298a:	2228      	movs	r2, #40	; 0x28
 800298c:	2158      	movs	r1, #88	; 0x58
 800298e:	f44f 701d 	mov.w	r0, #628	; 0x274
 8002992:	f7ff f89c 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (211, 68, 61, 21, 10,  0xD6BA);
 8002996:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800299a:	9301      	str	r3, [sp, #4]
 800299c:	230a      	movs	r3, #10
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	2315      	movs	r3, #21
 80029a2:	223d      	movs	r2, #61	; 0x3d
 80029a4:	2144      	movs	r1, #68	; 0x44
 80029a6:	20d3      	movs	r0, #211	; 0xd3
 80029a8:	f7ff f891 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (211, 109, 61, 21, 10,  0xD6BA);
 80029ac:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	230a      	movs	r3, #10
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2315      	movs	r3, #21
 80029b8:	223d      	movs	r2, #61	; 0x3d
 80029ba:	216d      	movs	r1, #109	; 0x6d
 80029bc:	20d3      	movs	r0, #211	; 0xd3
 80029be:	f7ff f886 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (362, 68, 61, 21, 10,  0xD6BA);
 80029c2:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	230a      	movs	r3, #10
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2315      	movs	r3, #21
 80029ce:	223d      	movs	r2, #61	; 0x3d
 80029d0:	2144      	movs	r1, #68	; 0x44
 80029d2:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80029d6:	f7ff f87a 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (362, 109, 61, 21, 10,  0xD6BA);
 80029da:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	230a      	movs	r3, #10
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2315      	movs	r3, #21
 80029e6:	223d      	movs	r2, #61	; 0x3d
 80029e8:	216d      	movs	r1, #109	; 0x6d
 80029ea:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80029ee:	f7ff f86e 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (532, 68, 61, 21, 10,  0xD6BA);
 80029f2:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029f6:	9301      	str	r3, [sp, #4]
 80029f8:	230a      	movs	r3, #10
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	2315      	movs	r3, #21
 80029fe:	223d      	movs	r2, #61	; 0x3d
 8002a00:	2144      	movs	r1, #68	; 0x44
 8002a02:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002a06:	f7ff f862 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (532, 109, 61, 21, 10,  0xD6BA);
 8002a0a:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	230a      	movs	r3, #10
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2315      	movs	r3, #21
 8002a16:	223d      	movs	r2, #61	; 0x3d
 8002a18:	216d      	movs	r1, #109	; 0x6d
 8002a1a:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002a1e:	f7ff f856 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
    LCD_centered_Font(132, 9+22, 70, "SELECT", _Open_Sans_Bold_14, 1, BLACK);//opisy przyciskow
 8002a22:	2300      	movs	r3, #0
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	2301      	movs	r3, #1
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <main+0x5cc>)
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4b3e      	ldr	r3, [pc, #248]	; (8002b28 <main+0x5f4>)
 8002a30:	2246      	movs	r2, #70	; 0x46
 8002a32:	211f      	movs	r1, #31
 8002a34:	2084      	movs	r0, #132	; 0x84
 8002a36:	f7ff f964 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(212, 9+22, 70, "NEW P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	9302      	str	r3, [sp, #8]
 8002a3e:	2301      	movs	r3, #1
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	4b2f      	ldr	r3, [pc, #188]	; (8002b00 <main+0x5cc>)
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <main+0x5f8>)
 8002a48:	2246      	movs	r2, #70	; 0x46
 8002a4a:	211f      	movs	r1, #31
 8002a4c:	20d4      	movs	r0, #212	; 0xd4
 8002a4e:	f7ff f958 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(291, 9+22, 70, "EDIT P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a52:	2300      	movs	r3, #0
 8002a54:	9302      	str	r3, [sp, #8]
 8002a56:	2301      	movs	r3, #1
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <main+0x5cc>)
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <main+0x5fc>)
 8002a60:	2246      	movs	r2, #70	; 0x46
 8002a62:	211f      	movs	r1, #31
 8002a64:	f240 1023 	movw	r0, #291	; 0x123
 8002a68:	f7ff f94b 	bl	8001d02 <LCD_centered_Font>
    LCD_Font(371, 9+22,  "DELETE P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9301      	str	r3, [sp, #4]
 8002a70:	2301      	movs	r3, #1
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4b22      	ldr	r3, [pc, #136]	; (8002b00 <main+0x5cc>)
 8002a76:	4a2f      	ldr	r2, [pc, #188]	; (8002b34 <main+0x600>)
 8002a78:	211f      	movs	r1, #31
 8002a7a:	f240 1073 	movw	r0, #371	; 0x173
 8002a7e:	f7ff faa5 	bl	8001fcc <LCD_Font>
    LCD_centered_Font(462, 9+22, 70, "SET T.P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a82:	2300      	movs	r3, #0
 8002a84:	9302      	str	r3, [sp, #8]
 8002a86:	2301      	movs	r3, #1
 8002a88:	9301      	str	r3, [sp, #4]
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <main+0x5cc>)
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	4b2a      	ldr	r3, [pc, #168]	; (8002b38 <main+0x604>)
 8002a90:	2246      	movs	r2, #70	; 0x46
 8002a92:	211f      	movs	r1, #31
 8002a94:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 8002a98:	f7ff f933 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(544, 9+22, 70, "SET H.P", _Open_Sans_Bold_14, 1, BLACK);
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	9302      	str	r3, [sp, #8]
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <main+0x5cc>)
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <main+0x608>)
 8002aaa:	2246      	movs	r2, #70	; 0x46
 8002aac:	211f      	movs	r1, #31
 8002aae:	f44f 7008 	mov.w	r0, #544	; 0x220
 8002ab2:	f7ff f926 	bl	8001d02 <LCD_centered_Font>
    LCD_Font(155, 67+11, "Name:", _Open_Sans_Bold_14, 1, BLACK);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	9301      	str	r3, [sp, #4]
 8002aba:	2301      	movs	r3, #1
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <main+0x5cc>)
 8002ac0:	4a1f      	ldr	r2, [pc, #124]	; (8002b40 <main+0x60c>)
 8002ac2:	214e      	movs	r1, #78	; 0x4e
 8002ac4:	209b      	movs	r0, #155	; 0x9b
 8002ac6:	f7ff fa81 	bl	8001fcc <LCD_Font>
    LCD_Font(155, 109+11, "Tool:", _Open_Sans_Bold_14, 1, BLACK);
 8002aca:	2300      	movs	r3, #0
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <main+0x5cc>)
 8002ad4:	4a1b      	ldr	r2, [pc, #108]	; (8002b44 <main+0x610>)
 8002ad6:	2178      	movs	r1, #120	; 0x78
 8002ad8:	209b      	movs	r0, #155	; 0x9b
 8002ada:	f7ff fa77 	bl	8001fcc <LCD_Font>
    LCD_Font(295, 67+11, "Move:", _Open_Sans_Bold_14, 1, BLACK);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <main+0x5cc>)
 8002ae8:	4a17      	ldr	r2, [pc, #92]	; (8002b48 <main+0x614>)
 8002aea:	214e      	movs	r1, #78	; 0x4e
 8002aec:	f240 1027 	movw	r0, #295	; 0x127
 8002af0:	f7ff fa6c 	bl	8001fcc <LCD_Font>
    LCD_Font(295, 109+11, "Speed:", _Open_Sans_Bold_14, 1, BLACK);
 8002af4:	2300      	movs	r3, #0
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	2301      	movs	r3, #1
 8002afa:	9300      	str	r3, [sp, #0]
 8002afc:	4b00      	ldr	r3, [pc, #0]	; (8002b00 <main+0x5cc>)
 8002afe:	e025      	b.n	8002b4c <main+0x618>
 8002b00:	08008158 	.word	0x08008158
 8002b04:	080079e8 	.word	0x080079e8
 8002b08:	080079f4 	.word	0x080079f4
 8002b0c:	080079fc 	.word	0x080079fc
 8002b10:	08007a08 	.word	0x08007a08
 8002b14:	08007a10 	.word	0x08007a10
 8002b18:	08007a1c 	.word	0x08007a1c
 8002b1c:	08007a24 	.word	0x08007a24
 8002b20:	08007a34 	.word	0x08007a34
 8002b24:	08007a44 	.word	0x08007a44
 8002b28:	08007a50 	.word	0x08007a50
 8002b2c:	08007a58 	.word	0x08007a58
 8002b30:	08007a60 	.word	0x08007a60
 8002b34:	08007a68 	.word	0x08007a68
 8002b38:	08007a74 	.word	0x08007a74
 8002b3c:	08007a80 	.word	0x08007a80
 8002b40:	08007a88 	.word	0x08007a88
 8002b44:	08007a90 	.word	0x08007a90
 8002b48:	08007a98 	.word	0x08007a98
 8002b4c:	4aa2      	ldr	r2, [pc, #648]	; (8002dd8 <main+0x8a4>)
 8002b4e:	2178      	movs	r1, #120	; 0x78
 8002b50:	f240 1027 	movw	r0, #295	; 0x127
 8002b54:	f7ff fa3a 	bl	8001fcc <LCD_Font>
    LCD_Font(446, 67+11, "Type:", _Open_Sans_Bold_14, 1, BLACK);
 8002b58:	2300      	movs	r3, #0
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	4b9e      	ldr	r3, [pc, #632]	; (8002ddc <main+0x8a8>)
 8002b62:	4a9f      	ldr	r2, [pc, #636]	; (8002de0 <main+0x8ac>)
 8002b64:	214e      	movs	r1, #78	; 0x4e
 8002b66:	f44f 70df 	mov.w	r0, #446	; 0x1be
 8002b6a:	f7ff fa2f 	bl	8001fcc <LCD_Font>
    LCD_Font(446, 109+11, "at Target:", _Open_Sans_Bold_14, 1, BLACK);
 8002b6e:	2300      	movs	r3, #0
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2301      	movs	r3, #1
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	4b99      	ldr	r3, [pc, #612]	; (8002ddc <main+0x8a8>)
 8002b78:	4a9a      	ldr	r2, [pc, #616]	; (8002de4 <main+0x8b0>)
 8002b7a:	2178      	movs	r1, #120	; 0x78
 8002b7c:	f44f 70df 	mov.w	r0, #446	; 0x1be
 8002b80:	f7ff fa24 	bl	8001fcc <LCD_Font>
    LCD_centered_Font(211, 68+11, 61, "P11", _Open_Sans_Bold_14, 1, BLACK);
 8002b84:	2300      	movs	r3, #0
 8002b86:	9302      	str	r3, [sp, #8]
 8002b88:	2301      	movs	r3, #1
 8002b8a:	9301      	str	r3, [sp, #4]
 8002b8c:	4b93      	ldr	r3, [pc, #588]	; (8002ddc <main+0x8a8>)
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	4b95      	ldr	r3, [pc, #596]	; (8002de8 <main+0x8b4>)
 8002b92:	223d      	movs	r2, #61	; 0x3d
 8002b94:	214f      	movs	r1, #79	; 0x4f
 8002b96:	20d3      	movs	r0, #211	; 0xd3
 8002b98:	f7ff f8b3 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(211, 109+11, 41, "OFF", _Open_Sans_Bold_14, 1, BLACK);
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	9302      	str	r3, [sp, #8]
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	9301      	str	r3, [sp, #4]
 8002ba4:	4b8d      	ldr	r3, [pc, #564]	; (8002ddc <main+0x8a8>)
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	4b90      	ldr	r3, [pc, #576]	; (8002dec <main+0x8b8>)
 8002baa:	2229      	movs	r2, #41	; 0x29
 8002bac:	2178      	movs	r1, #120	; 0x78
 8002bae:	20d3      	movs	r0, #211	; 0xd3
 8002bb0:	f7ff f8a7 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(362, 68+11, 41, "Circ", _Open_Sans_Bold_14, 1, BLACK);
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <main+0x8a8>)
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4b8b      	ldr	r3, [pc, #556]	; (8002df0 <main+0x8bc>)
 8002bc2:	2229      	movs	r2, #41	; 0x29
 8002bc4:	214f      	movs	r1, #79	; 0x4f
 8002bc6:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002bca:	f7ff f89a 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(362, 109+11, 41, "100%", _Open_Sans_Bold_14, 1, BLACK);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	9302      	str	r3, [sp, #8]
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	9301      	str	r3, [sp, #4]
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <main+0x8a8>)
 8002bd8:	9300      	str	r3, [sp, #0]
 8002bda:	4b86      	ldr	r3, [pc, #536]	; (8002df4 <main+0x8c0>)
 8002bdc:	2229      	movs	r2, #41	; 0x29
 8002bde:	2178      	movs	r1, #120	; 0x78
 8002be0:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002be4:	f7ff f88d 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(532, 68+11, 41, "Cont", _Open_Sans_Bold_14, 1, BLACK);
 8002be8:	2300      	movs	r3, #0
 8002bea:	9302      	str	r3, [sp, #8]
 8002bec:	2301      	movs	r3, #1
 8002bee:	9301      	str	r3, [sp, #4]
 8002bf0:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <main+0x8a8>)
 8002bf2:	9300      	str	r3, [sp, #0]
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <main+0x8c4>)
 8002bf6:	2229      	movs	r2, #41	; 0x29
 8002bf8:	214f      	movs	r1, #79	; 0x4f
 8002bfa:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002bfe:	f7ff f880 	bl	8001d02 <LCD_centered_Font>
    LCD_centered_Font(532, 109+11, 61, "YES", _Open_Sans_Bold_14, 1, BLACK);
 8002c02:	2300      	movs	r3, #0
 8002c04:	9302      	str	r3, [sp, #8]
 8002c06:	2301      	movs	r3, #1
 8002c08:	9301      	str	r3, [sp, #4]
 8002c0a:	4b74      	ldr	r3, [pc, #464]	; (8002ddc <main+0x8a8>)
 8002c0c:	9300      	str	r3, [sp, #0]
 8002c0e:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <main+0x8c8>)
 8002c10:	223d      	movs	r2, #61	; 0x3d
 8002c12:	2178      	movs	r1, #120	; 0x78
 8002c14:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002c18:	f7ff f873 	bl	8001d02 <LCD_centered_Font>
	LCD_FillTriangle(636, 42,636+23, 42, 647, 22, 0x00FD);
 8002c1c:	23fd      	movs	r3, #253	; 0xfd
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	2316      	movs	r3, #22
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	f240 2387 	movw	r3, #647	; 0x287
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	232a      	movs	r3, #42	; 0x2a
 8002c2c:	f240 2293 	movw	r2, #659	; 0x293
 8002c30:	212a      	movs	r1, #42	; 0x2a
 8002c32:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8002c36:	f7ff fa51 	bl	80020dc <LCD_FillTriangle>
	LCD_FillTriangle(636, 42+59,636+23, 42+59, 647, 22+40+59, 0x00FD);
 8002c3a:	23fd      	movs	r3, #253	; 0xfd
 8002c3c:	9302      	str	r3, [sp, #8]
 8002c3e:	2379      	movs	r3, #121	; 0x79
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	f240 2387 	movw	r3, #647	; 0x287
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	2365      	movs	r3, #101	; 0x65
 8002c4a:	f240 2293 	movw	r2, #659	; 0x293
 8002c4e:	2165      	movs	r1, #101	; 0x65
 8002c50:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8002c54:	f7ff fa42 	bl	80020dc <LCD_FillTriangle>
	LCD_FillTriangle(574, 74,573+13, 74, 580, 74+11, 0x00FD);
 8002c58:	23fd      	movs	r3, #253	; 0xfd
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	2355      	movs	r3, #85	; 0x55
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	f44f 7311 	mov.w	r3, #580	; 0x244
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	234a      	movs	r3, #74	; 0x4a
 8002c68:	f240 224a 	movw	r2, #586	; 0x24a
 8002c6c:	214a      	movs	r1, #74	; 0x4a
 8002c6e:	f240 203e 	movw	r0, #574	; 0x23e
 8002c72:	f7ff fa33 	bl	80020dc <LCD_FillTriangle>
	//LCD_FillTriangle(574, 74+41,573+13, 74+41, 580, 74+11+41, 0x00FD);
	LCD_FillTriangle(574-170, 74,573+13-170, 74, 580-170, 74+11, 0x00FD);
 8002c76:	23fd      	movs	r3, #253	; 0xfd
 8002c78:	9302      	str	r3, [sp, #8]
 8002c7a:	2355      	movs	r3, #85	; 0x55
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002c82:	9300      	str	r3, [sp, #0]
 8002c84:	234a      	movs	r3, #74	; 0x4a
 8002c86:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002c8a:	214a      	movs	r1, #74	; 0x4a
 8002c8c:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8002c90:	f7ff fa24 	bl	80020dc <LCD_FillTriangle>
	LCD_FillTriangle(574-170, 74+41,573+13-170, 74+41, 580-170, 74+11+41, 0x00FD);
 8002c94:	23fd      	movs	r3, #253	; 0xfd
 8002c96:	9302      	str	r3, [sp, #8]
 8002c98:	237e      	movs	r3, #126	; 0x7e
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2373      	movs	r3, #115	; 0x73
 8002ca4:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002ca8:	2173      	movs	r1, #115	; 0x73
 8002caa:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8002cae:	f7ff fa15 	bl	80020dc <LCD_FillTriangle>
	LCD_FillTriangle(574-322, 74+41,573+13-322, 74+41, 580-322, 74+11+41, 0x00FD);
 8002cb2:	23fd      	movs	r3, #253	; 0xfd
 8002cb4:	9302      	str	r3, [sp, #8]
 8002cb6:	237e      	movs	r3, #126	; 0x7e
 8002cb8:	9301      	str	r3, [sp, #4]
 8002cba:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2373      	movs	r3, #115	; 0x73
 8002cc2:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002cc6:	2173      	movs	r1, #115	; 0x73
 8002cc8:	20fc      	movs	r0, #252	; 0xfc
 8002cca:	f7ff fa07 	bl	80020dc <LCD_FillTriangle>
    //char string[30];
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cce:	2028      	movs	r0, #40	; 0x28
 8002cd0:	f7ff fbee 	bl	80024b0 <__NVIC_EnableIRQ>
    TFT_Draw_Fill_Round_Rect (700, 300, 80, 80, 10,  BLUE);
    LCD_Font(700, 350, "nArA", _Open_Sans_Bold_10, 2, WHITE);
    TFT_Draw_Circle(300, 340, 40, 1, 10, WHITE);*/
	//TFT_Draw_Bitmap(421, 353, hand_icon_x, hand_icon_y, hand_icon);

    int allertX = 220;	//MAX size is 220x200 - with bigger tabs malloc has problem
 8002cd4:	23dc      	movs	r3, #220	; 0xdc
 8002cd6:	62bb      	str	r3, [r7, #40]	; 0x28
    int allertY = 200;
 8002cd8:	23c8      	movs	r3, #200	; 0xc8
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t *save = (uint16_t *)malloc(allertX* allertY * sizeof(uint16_t));
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce0:	fb02 f303 	mul.w	r3, r2, r3
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 ffdc 	bl	8004ca4 <malloc>
 8002cec:	4603      	mov	r3, r0
 8002cee:	623b      	str	r3, [r7, #32]

  while (1)
  {
	  	NVIC_DisableIRQ(EXTI15_10_IRQn);
 8002cf0:	2028      	movs	r0, #40	; 0x28
 8002cf2:	f7ff fbfb 	bl	80024ec <__NVIC_DisableIRQ>
		TFT_Draw_Fill_Round_Rect (280, 180, 200, 60, 10,  0xCFFF);
 8002cf6:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8002cfa:	9301      	str	r3, [sp, #4]
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	233c      	movs	r3, #60	; 0x3c
 8002d02:	22c8      	movs	r2, #200	; 0xc8
 8002d04:	21b4      	movs	r1, #180	; 0xb4
 8002d06:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002d0a:	f7fe fee0 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
	 	char buffer1[10]; // Bufor na konwertowaną wartość
	 	char buffer2[10]; // Bufor na konwertowaną wartość
	 	uint16_t touchx = getX();
 8002d0e:	f000 fbb7 	bl	8003480 <getX>
 8002d12:	4603      	mov	r3, r0
 8002d14:	83fb      	strh	r3, [r7, #30]

	 	sprintf(buffer1, "X%d", touchx); // Konwersja wartości do ciągu znaków
 8002d16:	8bfa      	ldrh	r2, [r7, #30]
 8002d18:	f107 0310 	add.w	r3, r7, #16
 8002d1c:	4938      	ldr	r1, [pc, #224]	; (8002e00 <main+0x8cc>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f002 fd9c 	bl	800585c <siprintf>
	 	uint16_t touchy = getY();
 8002d24:	f000 fbc6 	bl	80034b4 <getY>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	83bb      	strh	r3, [r7, #28]
	 	sprintf(buffer2, "Y%d", touchy); // Konwersja wartości do ciągu znaków
 8002d2c:	8bba      	ldrh	r2, [r7, #28]
 8002d2e:	1d3b      	adds	r3, r7, #4
 8002d30:	4934      	ldr	r1, [pc, #208]	; (8002e04 <main+0x8d0>)
 8002d32:	4618      	mov	r0, r3
 8002d34:	f002 fd92 	bl	800585c <siprintf>
	 	LCD_Font(300, 200,  buffer1, _Open_Sans_Bold_28, 1, BLACK);
 8002d38:	f107 0210 	add.w	r2, r7, #16
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	9301      	str	r3, [sp, #4]
 8002d40:	2301      	movs	r3, #1
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4b30      	ldr	r3, [pc, #192]	; (8002e08 <main+0x8d4>)
 8002d46:	21c8      	movs	r1, #200	; 0xc8
 8002d48:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d4c:	f7ff f93e 	bl	8001fcc <LCD_Font>
	 	LCD_Font(300, 220,  buffer2, _Open_Sans_Bold_28, 1, BLACK);
 8002d50:	1d3a      	adds	r2, r7, #4
 8002d52:	2300      	movs	r3, #0
 8002d54:	9301      	str	r3, [sp, #4]
 8002d56:	2301      	movs	r3, #1
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	4b2b      	ldr	r3, [pc, #172]	; (8002e08 <main+0x8d4>)
 8002d5c:	21dc      	movs	r1, #220	; 0xdc
 8002d5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d62:	f7ff f933 	bl	8001fcc <LCD_Font>
	 	HAL_Delay(100);
 8002d66:	2064      	movs	r0, #100	; 0x64
 8002d68:	f000 fc5a 	bl	8003620 <HAL_Delay>
	 	uint16_t touchy = getY();
*/

	 	//NVIC_EnableIRQ(EXTI15_10_IRQn);

	 	if(touchx >=696 && touchx<=696+88 && touchy>=9 && touchy<=9+47)// 696, pos_y, 88, 47,
 8002d6c:	8bfb      	ldrh	r3, [r7, #30]
 8002d6e:	f5b3 7f2e 	cmp.w	r3, #696	; 0x2b8
 8002d72:	d3bd      	bcc.n	8002cf0 <main+0x7bc>
 8002d74:	8bfb      	ldrh	r3, [r7, #30]
 8002d76:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002d7a:	d8b9      	bhi.n	8002cf0 <main+0x7bc>
 8002d7c:	8bbb      	ldrh	r3, [r7, #28]
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d9b6      	bls.n	8002cf0 <main+0x7bc>
 8002d82:	8bbb      	ldrh	r3, [r7, #28]
 8002d84:	2b38      	cmp	r3, #56	; 0x38
 8002d86:	d8b3      	bhi.n	8002cf0 <main+0x7bc>
	 		  		{
	  	  	  	  	  	  	//HAL_Delay(1000);
	  	  	  	  	  	  	uint16_t counter = TFT_Draw_List(400, 200, 100, "TYPE:", "powitanie",  save, _Open_Sans_Bold_14);
 8002d88:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <main+0x8a8>)
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <main+0x8d8>)
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <main+0x8dc>)
 8002d96:	2264      	movs	r2, #100	; 0x64
 8002d98:	21c8      	movs	r1, #200	; 0xc8
 8002d9a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d9e:	f7fe fb44 	bl	800142a <TFT_Draw_List>
 8002da2:	4603      	mov	r3, r0
 8002da4:	837b      	strh	r3, [r7, #26]
	  	  	  	  	  	  	HAL_Delay(1000);
 8002da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002daa:	f000 fc39 	bl	8003620 <HAL_Delay>
	  	  	  	  	  	  	TFT_Restore_Area(400, 200, 100, 47+1+34+35*counter, save);
 8002dae:	8b7b      	ldrh	r3, [r7, #26]
 8002db0:	461a      	mov	r2, r3
 8002db2:	0092      	lsls	r2, r2, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	461a      	mov	r2, r3
 8002db8:	00d2      	lsls	r2, r2, #3
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	3352      	adds	r3, #82	; 0x52
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	2264      	movs	r2, #100	; 0x64
 8002dca:	21c8      	movs	r1, #200	; 0xc8
 8002dcc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002dd0:	f7fe fc6f 	bl	80016b2 <TFT_Restore_Area>
  {
 8002dd4:	e78c      	b.n	8002cf0 <main+0x7bc>
 8002dd6:	bf00      	nop
 8002dd8:	08007aa0 	.word	0x08007aa0
 8002ddc:	08008158 	.word	0x08008158
 8002de0:	08007aa8 	.word	0x08007aa8
 8002de4:	08007ab0 	.word	0x08007ab0
 8002de8:	08007abc 	.word	0x08007abc
 8002dec:	08007ac0 	.word	0x08007ac0
 8002df0:	08007ac4 	.word	0x08007ac4
 8002df4:	08007acc 	.word	0x08007acc
 8002df8:	08007ad4 	.word	0x08007ad4
 8002dfc:	08007adc 	.word	0x08007adc
 8002e00:	08007ae0 	.word	0x08007ae0
 8002e04:	08007ae4 	.word	0x08007ae4
 8002e08:	08009070 	.word	0x08009070
 8002e0c:	08007af0 	.word	0x08007af0
 8002e10:	08007ae8 	.word	0x08007ae8

08002e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b094      	sub	sp, #80	; 0x50
 8002e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e1a:	f107 0320 	add.w	r3, r7, #32
 8002e1e:	2230      	movs	r2, #48	; 0x30
 8002e20:	2100      	movs	r1, #0
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 fd7d 	bl	8005922 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	4b28      	ldr	r3, [pc, #160]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6413      	str	r3, [r2, #64]	; 0x40
 8002e48:	4b25      	ldr	r3, [pc, #148]	; (8002ee0 <SystemClock_Config+0xcc>)
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
 8002e58:	4b22      	ldr	r3, [pc, #136]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e60:	4a20      	ldr	r2, [pc, #128]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e66:	6013      	str	r3, [r2, #0]
 8002e68:	4b1e      	ldr	r3, [pc, #120]	; (8002ee4 <SystemClock_Config+0xd0>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002e74:	2302      	movs	r3, #2
 8002e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002e7c:	2310      	movs	r3, #16
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002e80:	2302      	movs	r3, #2
 8002e82:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002e84:	2300      	movs	r3, #0
 8002e86:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002e88:	2308      	movs	r3, #8
 8002e8a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002e8c:	2354      	movs	r3, #84	; 0x54
 8002e8e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002e90:	2302      	movs	r3, #2
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002e94:	2304      	movs	r3, #4
 8002e96:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002e98:	f107 0320 	add.w	r3, r7, #32
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 feab 	bl	8003bf8 <HAL_RCC_OscConfig>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ea8:	f000 f839 	bl	8002f1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002eac:	230f      	movs	r3, #15
 8002eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002ec2:	f107 030c 	add.w	r3, r7, #12
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f001 f90d 	bl	80040e8 <HAL_RCC_ClockConfig>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ed4:	f000 f823 	bl	8002f1e <Error_Handler>
  }
}
 8002ed8:	bf00      	nop
 8002eda:	3750      	adds	r7, #80	; 0x50
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000

08002ee8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af02      	add	r7, sp, #8
 8002eee:	4603      	mov	r3, r0
 8002ef0:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == T_IRQ_Pin)
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ef8:	d10d      	bne.n	8002f16 <HAL_GPIO_EXTI_Callback+0x2e>
	{
		TFT_Draw_Fill_Round_Rect (280, 180, 200, 60, 10,  BLACK);
 8002efa:	2300      	movs	r3, #0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	230a      	movs	r3, #10
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	233c      	movs	r3, #60	; 0x3c
 8002f04:	22c8      	movs	r2, #200	; 0xc8
 8002f06:	21b4      	movs	r1, #180	; 0xb4
 8002f08:	f44f 708c 	mov.w	r0, #280	; 0x118
 8002f0c:	f7fe fddf 	bl	8001ace <TFT_Draw_Fill_Round_Rect>
		HAL_Delay(100);
 8002f10:	2064      	movs	r0, #100	; 0x64
 8002f12:	f000 fb85 	bl	8003620 <HAL_Delay>
	}
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002f22:	b672      	cpsid	i
}
 8002f24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f26:	e7fe      	b.n	8002f26 <Error_Handler+0x8>

08002f28 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002f2c:	4b17      	ldr	r3, [pc, #92]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <MX_SPI2_Init+0x68>)
 8002f30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002f32:	4b16      	ldr	r3, [pc, #88]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002f40:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f46:	4b11      	ldr	r3, [pc, #68]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002f52:	4b0e      	ldr	r3, [pc, #56]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f58:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f5c:	2218      	movs	r2, #24
 8002f5e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f60:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f6c:	4b07      	ldr	r3, [pc, #28]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f74:	220a      	movs	r2, #10
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002f78:	4804      	ldr	r0, [pc, #16]	; (8002f8c <MX_SPI2_Init+0x64>)
 8002f7a:	f001 fa61 	bl	8004440 <HAL_SPI_Init>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002f84:	f7ff ffcb 	bl	8002f1e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002f88:	bf00      	nop
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200001f0 	.word	0x200001f0
 8002f90:	40003800 	.word	0x40003800

08002f94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a19      	ldr	r2, [pc, #100]	; (8003018 <HAL_SPI_MspInit+0x84>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d12c      	bne.n	8003010 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
 8002fba:	4b18      	ldr	r3, [pc, #96]	; (800301c <HAL_SPI_MspInit+0x88>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	4a17      	ldr	r2, [pc, #92]	; (800301c <HAL_SPI_MspInit+0x88>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fc6:	4b15      	ldr	r3, [pc, #84]	; (800301c <HAL_SPI_MspInit+0x88>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	613b      	str	r3, [r7, #16]
 8002fd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
 8002fd6:	4b11      	ldr	r3, [pc, #68]	; (800301c <HAL_SPI_MspInit+0x88>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	4a10      	ldr	r2, [pc, #64]	; (800301c <HAL_SPI_MspInit+0x88>)
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fe2:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_SPI_MspInit+0x88>)
 8002fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	60fb      	str	r3, [r7, #12]
 8002fec:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002fee:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8002ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003000:	2305      	movs	r3, #5
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	4619      	mov	r1, r3
 800300a:	4805      	ldr	r0, [pc, #20]	; (8003020 <HAL_SPI_MspInit+0x8c>)
 800300c:	f000 fc3e 	bl	800388c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003010:	bf00      	nop
 8003012:	3728      	adds	r7, #40	; 0x28
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	40003800 	.word	0x40003800
 800301c:	40023800 	.word	0x40023800
 8003020:	40020400 	.word	0x40020400

08003024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <HAL_MspInit+0x4c>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a0f      	ldr	r2, [pc, #60]	; (8003070 <HAL_MspInit+0x4c>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_MspInit+0x4c>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	607b      	str	r3, [r7, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	603b      	str	r3, [r7, #0]
 800304a:	4b09      	ldr	r3, [pc, #36]	; (8003070 <HAL_MspInit+0x4c>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	4a08      	ldr	r2, [pc, #32]	; (8003070 <HAL_MspInit+0x4c>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	; 0x40
 8003056:	4b06      	ldr	r3, [pc, #24]	; (8003070 <HAL_MspInit+0x4c>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003062:	bf00      	nop
 8003064:	370c      	adds	r7, #12
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800

08003074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003078:	e7fe      	b.n	8003078 <NMI_Handler+0x4>

0800307a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800307e:	e7fe      	b.n	800307e <HardFault_Handler+0x4>

08003080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003084:	e7fe      	b.n	8003084 <MemManage_Handler+0x4>

08003086 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003086:	b480      	push	{r7}
 8003088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308a:	e7fe      	b.n	800308a <BusFault_Handler+0x4>

0800308c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003090:	e7fe      	b.n	8003090 <UsageFault_Handler+0x4>

08003092 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003092:	b480      	push	{r7}
 8003094:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030ae:	b480      	push	{r7}
 80030b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b2:	bf00      	nop
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c0:	f000 fa8e 	bl	80035e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(T_IRQ_Pin);
 80030cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030d0:	f000 fd7a 	bl	8003bc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  return 1;
 80030dc:	2301      	movs	r3, #1
}
 80030de:	4618      	mov	r0, r3
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <_kill>:

int _kill(int pid, int sig)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030f2:	f002 fc79 	bl	80059e8 <__errno>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2216      	movs	r2, #22
 80030fa:	601a      	str	r2, [r3, #0]
  return -1;
 80030fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <_exit>:

void _exit (int status)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003110:	f04f 31ff 	mov.w	r1, #4294967295
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f7ff ffe7 	bl	80030e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800311a:	e7fe      	b.n	800311a <_exit+0x12>

0800311c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003128:	2300      	movs	r3, #0
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e00a      	b.n	8003144 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800312e:	f3af 8000 	nop.w
 8003132:	4601      	mov	r1, r0
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	60ba      	str	r2, [r7, #8]
 800313a:	b2ca      	uxtb	r2, r1
 800313c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	3301      	adds	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	429a      	cmp	r2, r3
 800314a:	dbf0      	blt.n	800312e <_read+0x12>
  }

  return len;
 800314c:	687b      	ldr	r3, [r7, #4]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}

08003156 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	b086      	sub	sp, #24
 800315a:	af00      	add	r7, sp, #0
 800315c:	60f8      	str	r0, [r7, #12]
 800315e:	60b9      	str	r1, [r7, #8]
 8003160:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e009      	b.n	800317c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	1c5a      	adds	r2, r3, #1
 800316c:	60ba      	str	r2, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	3301      	adds	r3, #1
 800317a:	617b      	str	r3, [r7, #20]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	dbf1      	blt.n	8003168 <_write+0x12>
  }
  return len;
 8003184:	687b      	ldr	r3, [r7, #4]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <_close>:

int _close(int file)
{
 800318e:	b480      	push	{r7}
 8003190:	b083      	sub	sp, #12
 8003192:	af00      	add	r7, sp, #0
 8003194:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
}
 800319a:	4618      	mov	r0, r3
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr

080031a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031a6:	b480      	push	{r7}
 80031a8:	b083      	sub	sp, #12
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
 80031ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031b6:	605a      	str	r2, [r3, #4]
  return 0;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	370c      	adds	r7, #12
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <_isatty>:

int _isatty(int file)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b083      	sub	sp, #12
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ce:	2301      	movs	r3, #1
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr

080031dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <_sbrk+0x5c>)
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <_sbrk+0x60>)
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <_sbrk+0x64>)
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <_sbrk+0x68>)
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003228:	f002 fbde 	bl	80059e8 <__errno>
 800322c:	4603      	mov	r3, r0
 800322e:	220c      	movs	r2, #12
 8003230:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	e009      	b.n	800324c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <_sbrk+0x64>)
 8003248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20018000 	.word	0x20018000
 8003258:	00000400 	.word	0x00000400
 800325c:	20000248 	.word	0x20000248
 8003260:	200003a0 	.word	0x200003a0

08003264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <SystemInit+0x20>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <SystemInit+0x20>)
 8003270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003278:	bf00      	nop
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	e000ed00 	.word	0xe000ed00

08003288 <remap>:


extern SPI_HandleTypeDef hspi2;

inline static float remap(float x, float in_min, float in_max, float out_min, float out_max)
{
 8003288:	b480      	push	{r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003292:	edc7 0a04 	vstr	s1, [r7, #16]
 8003296:	ed87 1a03 	vstr	s2, [r7, #12]
 800329a:	edc7 1a02 	vstr	s3, [r7, #8]
 800329e:	ed87 2a01 	vstr	s4, [r7, #4]
	float new = ((x - in_min)  / (in_max - in_min))* (out_max - out_min) + out_min;
 80032a2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032a6:	edd7 7a04 	vldr	s15, [r7, #16]
 80032aa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80032ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80032b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80032b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032be:	edd7 6a01 	vldr	s13, [r7, #4]
 80032c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80032c6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80032d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d6:	edc7 7a07 	vstr	s15, [r7, #28]
	return ((x - in_min)  / (in_max - in_min))* (out_max - out_min) + out_min;
 80032da:	ed97 7a05 	vldr	s14, [r7, #20]
 80032de:	edd7 7a04 	vldr	s15, [r7, #16]
 80032e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80032e6:	ed97 7a03 	vldr	s14, [r7, #12]
 80032ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80032ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	edd7 6a01 	vldr	s13, [r7, #4]
 80032fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80032fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003302:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003306:	edd7 7a02 	vldr	s15, [r7, #8]
 800330a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800330e:	eeb0 0a67 	vmov.f32	s0, s15
 8003312:	3724      	adds	r7, #36	; 0x24
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <getRaw>:
	HAL_SPI_Transmit(&hspi2, 0x00, 1, 1000);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
}

uint16_t getRaw(uint8_t address)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	4603      	mov	r3, r0
 8003324:	71fb      	strb	r3, [r7, #7]

	uint8_t data;
	uint16_t LSB, MSB;
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8003326:	2200      	movs	r2, #0
 8003328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800332c:	481e      	ldr	r0, [pc, #120]	; (80033a8 <getRaw+0x8c>)
 800332e:	f000 fc31 	bl	8003b94 <HAL_GPIO_WritePin>
	uint16_t data4;
	address = 0x00;
	HAL_SPI_TransmitReceive(&hspi2, &address, &data4, sizeof(data4), 1000);
	data4>>3;*/

	HAL_Delay(1);
 8003332:	2001      	movs	r0, #1
 8003334:	f000 f974 	bl	8003620 <HAL_Delay>
	HAL_SPI_Transmit(&hspi2, &address, 1, 1000);
 8003338:	1df9      	adds	r1, r7, #7
 800333a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333e:	2201      	movs	r2, #1
 8003340:	481a      	ldr	r0, [pc, #104]	; (80033ac <getRaw+0x90>)
 8003342:	f001 f906 	bl	8004552 <HAL_SPI_Transmit>
	address = 0x00;
 8003346:	2300      	movs	r3, #0
 8003348:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &address, &data, sizeof(data), 1000);
 800334a:	f107 020d 	add.w	r2, r7, #13
 800334e:	1df9      	adds	r1, r7, #7
 8003350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2301      	movs	r3, #1
 8003358:	4814      	ldr	r0, [pc, #80]	; (80033ac <getRaw+0x90>)
 800335a:	f001 fa36 	bl	80047ca <HAL_SPI_TransmitReceive>
	MSB = data;
 800335e:	7b7b      	ldrb	r3, [r7, #13]
 8003360:	82fb      	strh	r3, [r7, #22]
	address = 0x00;
 8003362:	2300      	movs	r3, #0
 8003364:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_TransmitReceive(&hspi2, &address, &data, sizeof(data), 1000);
 8003366:	f107 020d 	add.w	r2, r7, #13
 800336a:	1df9      	adds	r1, r7, #7
 800336c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	2301      	movs	r3, #1
 8003374:	480d      	ldr	r0, [pc, #52]	; (80033ac <getRaw+0x90>)
 8003376:	f001 fa28 	bl	80047ca <HAL_SPI_TransmitReceive>
	LSB = data;
 800337a:	7b7b      	ldrb	r3, [r7, #13]
 800337c:	82bb      	strh	r3, [r7, #20]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003384:	4808      	ldr	r0, [pc, #32]	; (80033a8 <getRaw+0x8c>)
 8003386:	f000 fc05 	bl	8003b94 <HAL_GPIO_WritePin>


	uint16_t data1 = LSB >> 3;
 800338a:	8abb      	ldrh	r3, [r7, #20]
 800338c:	08db      	lsrs	r3, r3, #3
 800338e:	827b      	strh	r3, [r7, #18]
	uint16_t data2 = MSB << 5;
 8003390:	8afb      	ldrh	r3, [r7, #22]
 8003392:	015b      	lsls	r3, r3, #5
 8003394:	823b      	strh	r3, [r7, #16]
	uint16_t data3 = data1|data2;
 8003396:	8a7a      	ldrh	r2, [r7, #18]
 8003398:	8a3b      	ldrh	r3, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	81fb      	strh	r3, [r7, #14]


	return data3;
 800339e:	89fb      	ldrh	r3, [r7, #14]


}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40020400 	.word	0x40020400
 80033ac:	200001f0 	.word	0x200001f0

080033b0 <X>:

inline static uint16_t X(void)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
	uint16_t x;
	x = (uint16_t) remap(getRaw(XPT2046_ADDR_X), RAW_MIN_X, RAW_MAX_X, OUT_MIN_X, OUT_MAX_X);
 80033b6:	20d1      	movs	r0, #209	; 0xd1
 80033b8:	f7ff ffb0 	bl	800331c <getRaw>
 80033bc:	4603      	mov	r3, r0
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8003408 <X+0x58>
 80033ca:	eddf 1a10 	vldr	s3, [pc, #64]	; 800340c <X+0x5c>
 80033ce:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003410 <X+0x60>
 80033d2:	eddf 0a10 	vldr	s1, [pc, #64]	; 8003414 <X+0x64>
 80033d6:	eeb0 0a67 	vmov.f32	s0, s15
 80033da:	f7ff ff55 	bl	8003288 <remap>
 80033de:	eef0 7a40 	vmov.f32	s15, s0
 80033e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e6:	ee17 3a90 	vmov	r3, s15
 80033ea:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_X) x = OUT_MAX_X - x;
	if (x > OUT_MIN_X && x < OUT_MAX_X) return x;
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <X+0x4e>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80033f8:	d201      	bcs.n	80033fe <X+0x4e>
 80033fa:	88fb      	ldrh	r3, [r7, #6]
 80033fc:	e000      	b.n	8003400 <X+0x50>
	else return 0;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	44480000 	.word	0x44480000
 800340c:	00000000 	.word	0x00000000
 8003410:	45760000 	.word	0x45760000
 8003414:	43020000 	.word	0x43020000

08003418 <Y>:

inline static uint16_t Y(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
	uint16_t y;
	y = (uint16_t) remap(getRaw(XPT2046_ADDR_Y), RAW_MIN_Y, RAW_MAX_Y, OUT_MIN_Y, OUT_MAX_Y);
 800341e:	2091      	movs	r0, #145	; 0x91
 8003420:	f7ff ff7c 	bl	800331c <getRaw>
 8003424:	4603      	mov	r3, r0
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800342e:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8003470 <Y+0x58>
 8003432:	eddf 1a10 	vldr	s3, [pc, #64]	; 8003474 <Y+0x5c>
 8003436:	ed9f 1a10 	vldr	s2, [pc, #64]	; 8003478 <Y+0x60>
 800343a:	eddf 0a10 	vldr	s1, [pc, #64]	; 800347c <Y+0x64>
 800343e:	eeb0 0a67 	vmov.f32	s0, s15
 8003442:	f7ff ff21 	bl	8003288 <remap>
 8003446:	eef0 7a40 	vmov.f32	s15, s0
 800344a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344e:	ee17 3a90 	vmov	r3, s15
 8003452:	80fb      	strh	r3, [r7, #6]
	if (XPT2046_MIRROR_Y) y = OUT_MAX_Y - y;
	if (y > OUT_MIN_Y && y < OUT_MAX_Y) return y;
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <Y+0x4e>
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003460:	d201      	bcs.n	8003466 <Y+0x4e>
 8003462:	88fb      	ldrh	r3, [r7, #6]
 8003464:	e000      	b.n	8003468 <Y+0x50>
	else return 0;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	43f00000 	.word	0x43f00000
 8003474:	00000000 	.word	0x00000000
 8003478:	45746000 	.word	0x45746000
 800347c:	439b0000 	.word	0x439b0000

08003480 <getX>:

uint16_t getX(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t x[2] = { 1, 2 };
 8003486:	4b0a      	ldr	r3, [pc, #40]	; (80034b0 <getX+0x30>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	607b      	str	r3, [r7, #4]
		while (x[0] != x[1])
 800348c:	e007      	b.n	800349e <getX+0x1e>
		{
			if (XPT2046_REVERSED) { x[0] = Y(); x[1] = Y(); }
			else { x[0] = X(); x[1] = X(); }
 800348e:	f7ff ff8f 	bl	80033b0 <X>
 8003492:	4603      	mov	r3, r0
 8003494:	80bb      	strh	r3, [r7, #4]
 8003496:	f7ff ff8b 	bl	80033b0 <X>
 800349a:	4603      	mov	r3, r0
 800349c:	80fb      	strh	r3, [r7, #6]
		while (x[0] != x[1])
 800349e:	88ba      	ldrh	r2, [r7, #4]
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d1f3      	bne.n	800348e <getX+0xe>
		}
		return x[0];
 80034a6:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return Y(); else return X();
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	08007afc 	.word	0x08007afc

080034b4 <getY>:

uint16_t getY(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
	if (XPT2046_ACCURACY)
	{
		uint16_t y[2] = { 1, 2 };
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <getY+0x30>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	607b      	str	r3, [r7, #4]
		while (y[0] != y[1])
 80034c0:	e007      	b.n	80034d2 <getY+0x1e>
		{
			if (XPT2046_REVERSED) { y[0] = X(); y[1] = X(); }
			else { y[0] = Y(); y[1] = Y(); }
 80034c2:	f7ff ffa9 	bl	8003418 <Y>
 80034c6:	4603      	mov	r3, r0
 80034c8:	80bb      	strh	r3, [r7, #4]
 80034ca:	f7ff ffa5 	bl	8003418 <Y>
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
		while (y[0] != y[1])
 80034d2:	88ba      	ldrh	r2, [r7, #4]
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d1f3      	bne.n	80034c2 <getY+0xe>
		}
		return y[0];
 80034da:	88bb      	ldrh	r3, [r7, #4]
	}
	else if (XPT2046_REVERSED) return X(); else return Y();
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	08007afc 	.word	0x08007afc

080034e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003520 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034ec:	480d      	ldr	r0, [pc, #52]	; (8003524 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034ee:	490e      	ldr	r1, [pc, #56]	; (8003528 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034f0:	4a0e      	ldr	r2, [pc, #56]	; (800352c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034f4:	e002      	b.n	80034fc <LoopCopyDataInit>

080034f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034fa:	3304      	adds	r3, #4

080034fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003500:	d3f9      	bcc.n	80034f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003502:	4a0b      	ldr	r2, [pc, #44]	; (8003530 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003504:	4c0b      	ldr	r4, [pc, #44]	; (8003534 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003508:	e001      	b.n	800350e <LoopFillZerobss>

0800350a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800350a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800350c:	3204      	adds	r2, #4

0800350e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800350e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003510:	d3fb      	bcc.n	800350a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003512:	f7ff fea7 	bl	8003264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003516:	f002 fa6d 	bl	80059f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800351a:	f7ff f80b 	bl	8002534 <main>
  bx  lr    
 800351e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003528:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800352c:	0800c36c 	.word	0x0800c36c
  ldr r2, =_sbss
 8003530:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003534:	2000039c 	.word	0x2000039c

08003538 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003538:	e7fe      	b.n	8003538 <ADC_IRQHandler>
	...

0800353c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003540:	4b0e      	ldr	r3, [pc, #56]	; (800357c <HAL_Init+0x40>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a0d      	ldr	r2, [pc, #52]	; (800357c <HAL_Init+0x40>)
 8003546:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800354a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <HAL_Init+0x40>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0a      	ldr	r2, [pc, #40]	; (800357c <HAL_Init+0x40>)
 8003552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003556:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <HAL_Init+0x40>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a07      	ldr	r2, [pc, #28]	; (800357c <HAL_Init+0x40>)
 800355e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003564:	2003      	movs	r0, #3
 8003566:	f000 f94f 	bl	8003808 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800356a:	200f      	movs	r0, #15
 800356c:	f000 f808 	bl	8003580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003570:	f7ff fd58 	bl	8003024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40023c00 	.word	0x40023c00

08003580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_InitTick+0x54>)
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <HAL_InitTick+0x58>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	4619      	mov	r1, r3
 8003592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003596:	fbb3 f3f1 	udiv	r3, r3, r1
 800359a:	fbb2 f3f3 	udiv	r3, r2, r3
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 f967 	bl	8003872 <HAL_SYSTICK_Config>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e00e      	b.n	80035cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b0f      	cmp	r3, #15
 80035b2:	d80a      	bhi.n	80035ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035b4:	2200      	movs	r2, #0
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295
 80035bc:	f000 f92f 	bl	800381e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_InitTick+0x5c>)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20000000 	.word	0x20000000
 80035d8:	20000008 	.word	0x20000008
 80035dc:	20000004 	.word	0x20000004

080035e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_IncTick+0x20>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_IncTick+0x24>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	4a04      	ldr	r2, [pc, #16]	; (8003604 <HAL_IncTick+0x24>)
 80035f2:	6013      	str	r3, [r2, #0]
}
 80035f4:	bf00      	nop
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	20000008 	.word	0x20000008
 8003604:	2000024c 	.word	0x2000024c

08003608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return uwTick;
 800360c:	4b03      	ldr	r3, [pc, #12]	; (800361c <HAL_GetTick+0x14>)
 800360e:	681b      	ldr	r3, [r3, #0]
}
 8003610:	4618      	mov	r0, r3
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	2000024c 	.word	0x2000024c

08003620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003628:	f7ff ffee 	bl	8003608 <HAL_GetTick>
 800362c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d005      	beq.n	8003646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <HAL_Delay+0x44>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4413      	add	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003646:	bf00      	nop
 8003648:	f7ff ffde 	bl	8003608 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	429a      	cmp	r2, r3
 8003656:	d8f7      	bhi.n	8003648 <HAL_Delay+0x28>
  {
  }
}
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000008 	.word	0x20000008

08003668 <__NVIC_SetPriorityGrouping>:
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f003 0307 	and.w	r3, r3, #7
 8003676:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003678:	4b0c      	ldr	r3, [pc, #48]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003684:	4013      	ands	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800369a:	4a04      	ldr	r2, [pc, #16]	; (80036ac <__NVIC_SetPriorityGrouping+0x44>)
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	60d3      	str	r3, [r2, #12]
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	e000ed00 	.word	0xe000ed00

080036b0 <__NVIC_GetPriorityGrouping>:
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <__NVIC_GetPriorityGrouping+0x18>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	0a1b      	lsrs	r3, r3, #8
 80036ba:	f003 0307 	and.w	r3, r3, #7
}
 80036be:	4618      	mov	r0, r3
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_EnableIRQ>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	4603      	mov	r3, r0
 80036d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db0b      	blt.n	80036f6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036de:	79fb      	ldrb	r3, [r7, #7]
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4907      	ldr	r1, [pc, #28]	; (8003704 <__NVIC_EnableIRQ+0x38>)
 80036e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2001      	movs	r0, #1
 80036ee:	fa00 f202 	lsl.w	r2, r0, r2
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80036f6:	bf00      	nop
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	e000e100 	.word	0xe000e100

08003708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db0a      	blt.n	8003732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	490c      	ldr	r1, [pc, #48]	; (8003754 <__NVIC_SetPriority+0x4c>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	440b      	add	r3, r1
 800372c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003730:	e00a      	b.n	8003748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4908      	ldr	r1, [pc, #32]	; (8003758 <__NVIC_SetPriority+0x50>)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3b04      	subs	r3, #4
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	440b      	add	r3, r1
 8003746:	761a      	strb	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800375c:	b480      	push	{r7}
 800375e:	b089      	sub	sp, #36	; 0x24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0307 	and.w	r3, r3, #7
 800376e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	f1c3 0307 	rsb	r3, r3, #7
 8003776:	2b04      	cmp	r3, #4
 8003778:	bf28      	it	cs
 800377a:	2304      	movcs	r3, #4
 800377c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	3304      	adds	r3, #4
 8003782:	2b06      	cmp	r3, #6
 8003784:	d902      	bls.n	800378c <NVIC_EncodePriority+0x30>
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3b03      	subs	r3, #3
 800378a:	e000      	b.n	800378e <NVIC_EncodePriority+0x32>
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	f04f 32ff 	mov.w	r2, #4294967295
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	401a      	ands	r2, r3
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037a4:	f04f 31ff 	mov.w	r1, #4294967295
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa01 f303 	lsl.w	r3, r1, r3
 80037ae:	43d9      	mvns	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	4313      	orrs	r3, r2
         );
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3724      	adds	r7, #36	; 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037d4:	d301      	bcc.n	80037da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037d6:	2301      	movs	r3, #1
 80037d8:	e00f      	b.n	80037fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037da:	4a0a      	ldr	r2, [pc, #40]	; (8003804 <SysTick_Config+0x40>)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3b01      	subs	r3, #1
 80037e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037e2:	210f      	movs	r1, #15
 80037e4:	f04f 30ff 	mov.w	r0, #4294967295
 80037e8:	f7ff ff8e 	bl	8003708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <SysTick_Config+0x40>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <SysTick_Config+0x40>)
 80037f4:	2207      	movs	r2, #7
 80037f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	e000e010 	.word	0xe000e010

08003808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff29 	bl	8003668 <__NVIC_SetPriorityGrouping>
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	4603      	mov	r3, r0
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
 800382a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003830:	f7ff ff3e 	bl	80036b0 <__NVIC_GetPriorityGrouping>
 8003834:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68b9      	ldr	r1, [r7, #8]
 800383a:	6978      	ldr	r0, [r7, #20]
 800383c:	f7ff ff8e 	bl	800375c <NVIC_EncodePriority>
 8003840:	4602      	mov	r2, r0
 8003842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003846:	4611      	mov	r1, r2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff ff5d 	bl	8003708 <__NVIC_SetPriority>
}
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	4603      	mov	r3, r0
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff31 	bl	80036cc <__NVIC_EnableIRQ>
}
 800386a:	bf00      	nop
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ffa2 	bl	80037c4 <SysTick_Config>
 8003880:	4603      	mov	r3, r0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800389a:	2300      	movs	r3, #0
 800389c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e159      	b.n	8003b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038a8:	2201      	movs	r2, #1
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	f040 8148 	bne.w	8003b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d005      	beq.n	80038de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d130      	bne.n	8003940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2203      	movs	r2, #3
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	4013      	ands	r3, r2
 80038f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	4313      	orrs	r3, r2
 8003906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003914:	2201      	movs	r2, #1
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	091b      	lsrs	r3, r3, #4
 800392a:	f003 0201 	and.w	r2, r3, #1
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b03      	cmp	r3, #3
 800394a:	d017      	beq.n	800397c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2203      	movs	r2, #3
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	689a      	ldr	r2, [r3, #8]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	f003 0303 	and.w	r3, r3, #3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d123      	bne.n	80039d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	08da      	lsrs	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3208      	adds	r2, #8
 8003990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	220f      	movs	r2, #15
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	691a      	ldr	r2, [r3, #16]
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	08da      	lsrs	r2, r3, #3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	3208      	adds	r2, #8
 80039ca:	69b9      	ldr	r1, [r7, #24]
 80039cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	2203      	movs	r2, #3
 80039dc:	fa02 f303 	lsl.w	r3, r2, r3
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0203 	and.w	r2, r3, #3
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	f000 80a2 	beq.w	8003b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	4b57      	ldr	r3, [pc, #348]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a56      	ldr	r2, [pc, #344]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b54      	ldr	r3, [pc, #336]	; (8003b74 <HAL_GPIO_Init+0x2e8>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2e:	4a52      	ldr	r2, [pc, #328]	; (8003b78 <HAL_GPIO_Init+0x2ec>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a49      	ldr	r2, [pc, #292]	; (8003b7c <HAL_GPIO_Init+0x2f0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d019      	beq.n	8003a8e <HAL_GPIO_Init+0x202>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a48      	ldr	r2, [pc, #288]	; (8003b80 <HAL_GPIO_Init+0x2f4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d013      	beq.n	8003a8a <HAL_GPIO_Init+0x1fe>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a47      	ldr	r2, [pc, #284]	; (8003b84 <HAL_GPIO_Init+0x2f8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00d      	beq.n	8003a86 <HAL_GPIO_Init+0x1fa>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a46      	ldr	r2, [pc, #280]	; (8003b88 <HAL_GPIO_Init+0x2fc>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <HAL_GPIO_Init+0x1f6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a45      	ldr	r2, [pc, #276]	; (8003b8c <HAL_GPIO_Init+0x300>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d101      	bne.n	8003a7e <HAL_GPIO_Init+0x1f2>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	e008      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a7e:	2307      	movs	r3, #7
 8003a80:	e006      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a82:	2303      	movs	r3, #3
 8003a84:	e004      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e002      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_GPIO_Init+0x204>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f002 0203 	and.w	r2, r2, #3
 8003a96:	0092      	lsls	r2, r2, #2
 8003a98:	4093      	lsls	r3, r2
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003aa0:	4935      	ldr	r1, [pc, #212]	; (8003b78 <HAL_GPIO_Init+0x2ec>)
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	089b      	lsrs	r3, r3, #2
 8003aa6:	3302      	adds	r3, #2
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003aae:	4b38      	ldr	r3, [pc, #224]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d003      	beq.n	8003ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ad2:	4a2f      	ldr	r2, [pc, #188]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	43db      	mvns	r3, r3
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d003      	beq.n	8003afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003afc:	4a24      	ldr	r2, [pc, #144]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b02:	4b23      	ldr	r3, [pc, #140]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	43db      	mvns	r3, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b26:	4a1a      	ldr	r2, [pc, #104]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b2c:	4b18      	ldr	r3, [pc, #96]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	69ba      	ldr	r2, [r7, #24]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b50:	4a0f      	ldr	r2, [pc, #60]	; (8003b90 <HAL_GPIO_Init+0x304>)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	61fb      	str	r3, [r7, #28]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b0f      	cmp	r3, #15
 8003b60:	f67f aea2 	bls.w	80038a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3724      	adds	r7, #36	; 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40020000 	.word	0x40020000
 8003b80:	40020400 	.word	0x40020400
 8003b84:	40020800 	.word	0x40020800
 8003b88:	40020c00 	.word	0x40020c00
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40013c00 	.word	0x40013c00

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ba4:	787b      	ldrb	r3, [r7, #1]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d003      	beq.n	8003bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003baa:	887a      	ldrh	r2, [r7, #2]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bb0:	e003      	b.n	8003bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bb2:	887b      	ldrh	r3, [r7, #2]
 8003bb4:	041a      	lsls	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	619a      	str	r2, [r3, #24]
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bd2:	4b08      	ldr	r3, [pc, #32]	; (8003bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd4:	695a      	ldr	r2, [r3, #20]
 8003bd6:	88fb      	ldrh	r3, [r7, #6]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d006      	beq.n	8003bec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bde:	4a05      	ldr	r2, [pc, #20]	; (8003bf4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff f97e 	bl	8002ee8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bec:	bf00      	nop
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	40013c00 	.word	0x40013c00

08003bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b086      	sub	sp, #24
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e267      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d075      	beq.n	8003d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c16:	4b88      	ldr	r3, [pc, #544]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d00c      	beq.n	8003c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c22:	4b85      	ldr	r3, [pc, #532]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d112      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c2e:	4b82      	ldr	r3, [pc, #520]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c3a:	d10b      	bne.n	8003c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c3c:	4b7e      	ldr	r3, [pc, #504]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d05b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x108>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d157      	bne.n	8003d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e242      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c5c:	d106      	bne.n	8003c6c <HAL_RCC_OscConfig+0x74>
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a75      	ldr	r2, [pc, #468]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	e01d      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c74:	d10c      	bne.n	8003c90 <HAL_RCC_OscConfig+0x98>
 8003c76:	4b70      	ldr	r3, [pc, #448]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a6f      	ldr	r2, [pc, #444]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6c      	ldr	r2, [pc, #432]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c8c:	6013      	str	r3, [r2, #0]
 8003c8e:	e00b      	b.n	8003ca8 <HAL_RCC_OscConfig+0xb0>
 8003c90:	4b69      	ldr	r3, [pc, #420]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a68      	ldr	r2, [pc, #416]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9a:	6013      	str	r3, [r2, #0]
 8003c9c:	4b66      	ldr	r3, [pc, #408]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a65      	ldr	r2, [pc, #404]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d013      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb0:	f7ff fcaa 	bl	8003608 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7ff fca6 	bl	8003608 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	; 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e207      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0f0      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xc0>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd8:	f7ff fc96 	bl	8003608 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7ff fc92 	bl	8003608 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e1f3      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cf2:	4b51      	ldr	r3, [pc, #324]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0xe8>
 8003cfe:	e000      	b.n	8003d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d063      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d0e:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 030c 	and.w	r3, r3, #12
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00b      	beq.n	8003d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d1a:	4b47      	ldr	r3, [pc, #284]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d11c      	bne.n	8003d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d26:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d116      	bne.n	8003d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <HAL_RCC_OscConfig+0x152>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d001      	beq.n	8003d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e1c7      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4937      	ldr	r1, [pc, #220]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	e03a      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d68:	4b34      	ldr	r3, [pc, #208]	; (8003e3c <HAL_RCC_OscConfig+0x244>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7ff fc4b 	bl	8003608 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d76:	f7ff fc47 	bl	8003608 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e1a8      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d88:	4b2b      	ldr	r3, [pc, #172]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d94:	4b28      	ldr	r3, [pc, #160]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4925      	ldr	r1, [pc, #148]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]
 8003da8:	e015      	b.n	8003dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003daa:	4b24      	ldr	r3, [pc, #144]	; (8003e3c <HAL_RCC_OscConfig+0x244>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db0:	f7ff fc2a 	bl	8003608 <HAL_GetTick>
 8003db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003db8:	f7ff fc26 	bl	8003608 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e187      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 0302 	and.w	r3, r3, #2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1f0      	bne.n	8003db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0308 	and.w	r3, r3, #8
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d036      	beq.n	8003e50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d016      	beq.n	8003e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dea:	4b15      	ldr	r3, [pc, #84]	; (8003e40 <HAL_RCC_OscConfig+0x248>)
 8003dec:	2201      	movs	r2, #1
 8003dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003df0:	f7ff fc0a 	bl	8003608 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df8:	f7ff fc06 	bl	8003608 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e167      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x200>
 8003e16:	e01b      	b.n	8003e50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <HAL_RCC_OscConfig+0x248>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1e:	f7ff fbf3 	bl	8003608 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	e00e      	b.n	8003e44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e26:	f7ff fbef 	bl	8003608 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d907      	bls.n	8003e44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e150      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	42470000 	.word	0x42470000
 8003e40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e44:	4b88      	ldr	r3, [pc, #544]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1ea      	bne.n	8003e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	f000 8097 	beq.w	8003f8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e62:	4b81      	ldr	r3, [pc, #516]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10f      	bne.n	8003e8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e6e:	2300      	movs	r3, #0
 8003e70:	60bb      	str	r3, [r7, #8]
 8003e72:	4b7d      	ldr	r3, [pc, #500]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	4a7c      	ldr	r2, [pc, #496]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e7e:	4b7a      	ldr	r3, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e86:	60bb      	str	r3, [r7, #8]
 8003e88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	4b77      	ldr	r3, [pc, #476]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d118      	bne.n	8003ecc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e9a:	4b74      	ldr	r3, [pc, #464]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a73      	ldr	r2, [pc, #460]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ea6:	f7ff fbaf 	bl	8003608 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eae:	f7ff fbab 	bl	8003608 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e10c      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ec0:	4b6a      	ldr	r3, [pc, #424]	; (800406c <HAL_RCC_OscConfig+0x474>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d106      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2ea>
 8003ed4:	4b64      	ldr	r3, [pc, #400]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a63      	ldr	r2, [pc, #396]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003eda:	f043 0301 	orr.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	e01c      	b.n	8003f1c <HAL_RCC_OscConfig+0x324>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	2b05      	cmp	r3, #5
 8003ee8:	d10c      	bne.n	8003f04 <HAL_RCC_OscConfig+0x30c>
 8003eea:	4b5f      	ldr	r3, [pc, #380]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a5e      	ldr	r2, [pc, #376]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	f043 0304 	orr.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	4b5c      	ldr	r3, [pc, #368]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efa:	4a5b      	ldr	r2, [pc, #364]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	6713      	str	r3, [r2, #112]	; 0x70
 8003f02:	e00b      	b.n	8003f1c <HAL_RCC_OscConfig+0x324>
 8003f04:	4b58      	ldr	r3, [pc, #352]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	4a57      	ldr	r2, [pc, #348]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f0a:	f023 0301 	bic.w	r3, r3, #1
 8003f0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f10:	4b55      	ldr	r3, [pc, #340]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f14:	4a54      	ldr	r2, [pc, #336]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f16:	f023 0304 	bic.w	r3, r3, #4
 8003f1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f24:	f7ff fb70 	bl	8003608 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2c:	f7ff fb6c 	bl	8003608 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e0cb      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0ee      	beq.n	8003f2c <HAL_RCC_OscConfig+0x334>
 8003f4e:	e014      	b.n	8003f7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f50:	f7ff fb5a 	bl	8003608 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f56:	e00a      	b.n	8003f6e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f58:	f7ff fb56 	bl	8003608 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e0b5      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ee      	bne.n	8003f58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f7a:	7dfb      	ldrb	r3, [r7, #23]
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d105      	bne.n	8003f8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f80:	4b39      	ldr	r3, [pc, #228]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	4a38      	ldr	r2, [pc, #224]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	699b      	ldr	r3, [r3, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	f000 80a1 	beq.w	80040d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f96:	4b34      	ldr	r3, [pc, #208]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d05c      	beq.n	800405c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d141      	bne.n	800402e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003faa:	4b31      	ldr	r3, [pc, #196]	; (8004070 <HAL_RCC_OscConfig+0x478>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb0:	f7ff fb2a 	bl	8003608 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fb6:	e008      	b.n	8003fca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb8:	f7ff fb26 	bl	8003608 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d901      	bls.n	8003fca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e087      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fca:	4b27      	ldr	r3, [pc, #156]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f0      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	019b      	lsls	r3, r3, #6
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	085b      	lsrs	r3, r3, #1
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	041b      	lsls	r3, r3, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	491b      	ldr	r1, [pc, #108]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004000:	4b1b      	ldr	r3, [pc, #108]	; (8004070 <HAL_RCC_OscConfig+0x478>)
 8004002:	2201      	movs	r2, #1
 8004004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004006:	f7ff faff 	bl	8003608 <HAL_GetTick>
 800400a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800400c:	e008      	b.n	8004020 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400e:	f7ff fafb 	bl	8003608 <HAL_GetTick>
 8004012:	4602      	mov	r2, r0
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	1ad3      	subs	r3, r2, r3
 8004018:	2b02      	cmp	r3, #2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e05c      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d0f0      	beq.n	800400e <HAL_RCC_OscConfig+0x416>
 800402c:	e054      	b.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCC_OscConfig+0x478>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7ff fae8 	bl	8003608 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800403c:	f7ff fae4 	bl	8003608 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e045      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b06      	ldr	r3, [pc, #24]	; (8004068 <HAL_RCC_OscConfig+0x470>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x444>
 800405a:	e03d      	b.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d107      	bne.n	8004074 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e038      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
 8004068:	40023800 	.word	0x40023800
 800406c:	40007000 	.word	0x40007000
 8004070:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004074:	4b1b      	ldr	r3, [pc, #108]	; (80040e4 <HAL_RCC_OscConfig+0x4ec>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d028      	beq.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d121      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	429a      	cmp	r2, r3
 800409c:	d11a      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040a4:	4013      	ands	r3, r2
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d111      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ba:	085b      	lsrs	r3, r3, #1
 80040bc:	3b01      	subs	r3, #1
 80040be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d001      	beq.n	80040d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023800 	.word	0x40023800

080040e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e0cc      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040fc:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d90c      	bls.n	8004124 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b65      	ldr	r3, [pc, #404]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800410c:	683a      	ldr	r2, [r7, #0]
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004112:	4b63      	ldr	r3, [pc, #396]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d001      	beq.n	8004124 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e0b8      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d020      	beq.n	8004172 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d005      	beq.n	8004148 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800413c:	4b59      	ldr	r3, [pc, #356]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	4a58      	ldr	r2, [pc, #352]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d005      	beq.n	8004160 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004154:	4b53      	ldr	r3, [pc, #332]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	4a52      	ldr	r2, [pc, #328]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800415a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800415e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004160:	4b50      	ldr	r3, [pc, #320]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	494d      	ldr	r1, [pc, #308]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b01      	cmp	r3, #1
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004186:	4b47      	ldr	r3, [pc, #284]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d119      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e07f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d003      	beq.n	80041a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041a2:	2b03      	cmp	r3, #3
 80041a4:	d107      	bne.n	80041b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041a6:	4b3f      	ldr	r3, [pc, #252]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d109      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e06f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b6:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0302 	and.w	r3, r3, #2
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e067      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041c6:	4b37      	ldr	r3, [pc, #220]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f023 0203 	bic.w	r2, r3, #3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	4934      	ldr	r1, [pc, #208]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041d8:	f7ff fa16 	bl	8003608 <HAL_GetTick>
 80041dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041de:	e00a      	b.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e0:	f7ff fa12 	bl	8003608 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e04f      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041f6:	4b2b      	ldr	r3, [pc, #172]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 020c 	and.w	r2, r3, #12
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	429a      	cmp	r2, r3
 8004206:	d1eb      	bne.n	80041e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0307 	and.w	r3, r3, #7
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d20c      	bcs.n	8004230 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004216:	4b22      	ldr	r3, [pc, #136]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800421e:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_RCC_ClockConfig+0x1b8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	429a      	cmp	r2, r3
 800422a:	d001      	beq.n	8004230 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e032      	b.n	8004296 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b00      	cmp	r3, #0
 800423a:	d008      	beq.n	800424e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800423c:	4b19      	ldr	r3, [pc, #100]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	4916      	ldr	r1, [pc, #88]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0308 	and.w	r3, r3, #8
 8004256:	2b00      	cmp	r3, #0
 8004258:	d009      	beq.n	800426e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800425a:	4b12      	ldr	r3, [pc, #72]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	490e      	ldr	r1, [pc, #56]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 800426a:	4313      	orrs	r3, r2
 800426c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800426e:	f000 f821 	bl	80042b4 <HAL_RCC_GetSysClockFreq>
 8004272:	4602      	mov	r2, r0
 8004274:	4b0b      	ldr	r3, [pc, #44]	; (80042a4 <HAL_RCC_ClockConfig+0x1bc>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	091b      	lsrs	r3, r3, #4
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	490a      	ldr	r1, [pc, #40]	; (80042a8 <HAL_RCC_ClockConfig+0x1c0>)
 8004280:	5ccb      	ldrb	r3, [r1, r3]
 8004282:	fa22 f303 	lsr.w	r3, r2, r3
 8004286:	4a09      	ldr	r2, [pc, #36]	; (80042ac <HAL_RCC_ClockConfig+0x1c4>)
 8004288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800428a:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_RCC_ClockConfig+0x1c8>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff f976 	bl	8003580 <HAL_InitTick>

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	40023c00 	.word	0x40023c00
 80042a4:	40023800 	.word	0x40023800
 80042a8:	0800bfd8 	.word	0x0800bfd8
 80042ac:	20000000 	.word	0x20000000
 80042b0:	20000004 	.word	0x20000004

080042b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b090      	sub	sp, #64	; 0x40
 80042ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80042bc:	2300      	movs	r3, #0
 80042be:	637b      	str	r3, [r7, #52]	; 0x34
 80042c0:	2300      	movs	r3, #0
 80042c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042c4:	2300      	movs	r3, #0
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042cc:	4b59      	ldr	r3, [pc, #356]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 030c 	and.w	r3, r3, #12
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d00d      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x40>
 80042d8:	2b08      	cmp	r3, #8
 80042da:	f200 80a1 	bhi.w	8004420 <HAL_RCC_GetSysClockFreq+0x16c>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCC_GetSysClockFreq+0x34>
 80042e2:	2b04      	cmp	r3, #4
 80042e4:	d003      	beq.n	80042ee <HAL_RCC_GetSysClockFreq+0x3a>
 80042e6:	e09b      	b.n	8004420 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042e8:	4b53      	ldr	r3, [pc, #332]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 80042ea:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80042ec:	e09b      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ee:	4b53      	ldr	r3, [pc, #332]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042f2:	e098      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042f4:	4b4f      	ldr	r3, [pc, #316]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042fe:	4b4d      	ldr	r3, [pc, #308]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d028      	beq.n	800435c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800430a:	4b4a      	ldr	r3, [pc, #296]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	099b      	lsrs	r3, r3, #6
 8004310:	2200      	movs	r2, #0
 8004312:	623b      	str	r3, [r7, #32]
 8004314:	627a      	str	r2, [r7, #36]	; 0x24
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800431c:	2100      	movs	r1, #0
 800431e:	4b47      	ldr	r3, [pc, #284]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 8004320:	fb03 f201 	mul.w	r2, r3, r1
 8004324:	2300      	movs	r3, #0
 8004326:	fb00 f303 	mul.w	r3, r0, r3
 800432a:	4413      	add	r3, r2
 800432c:	4a43      	ldr	r2, [pc, #268]	; (800443c <HAL_RCC_GetSysClockFreq+0x188>)
 800432e:	fba0 1202 	umull	r1, r2, r0, r2
 8004332:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004334:	460a      	mov	r2, r1
 8004336:	62ba      	str	r2, [r7, #40]	; 0x28
 8004338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433a:	4413      	add	r3, r2
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800433e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004340:	2200      	movs	r2, #0
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	61fa      	str	r2, [r7, #28]
 8004346:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800434a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800434e:	f7fc fc33 	bl	8000bb8 <__aeabi_uldivmod>
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	4613      	mov	r3, r2
 8004358:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435a:	e053      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435c:	4b35      	ldr	r3, [pc, #212]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	099b      	lsrs	r3, r3, #6
 8004362:	2200      	movs	r2, #0
 8004364:	613b      	str	r3, [r7, #16]
 8004366:	617a      	str	r2, [r7, #20]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800436e:	f04f 0b00 	mov.w	fp, #0
 8004372:	4652      	mov	r2, sl
 8004374:	465b      	mov	r3, fp
 8004376:	f04f 0000 	mov.w	r0, #0
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	0159      	lsls	r1, r3, #5
 8004380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004384:	0150      	lsls	r0, r2, #5
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	ebb2 080a 	subs.w	r8, r2, sl
 800438e:	eb63 090b 	sbc.w	r9, r3, fp
 8004392:	f04f 0200 	mov.w	r2, #0
 8004396:	f04f 0300 	mov.w	r3, #0
 800439a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800439e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80043a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80043a6:	ebb2 0408 	subs.w	r4, r2, r8
 80043aa:	eb63 0509 	sbc.w	r5, r3, r9
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	00eb      	lsls	r3, r5, #3
 80043b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043bc:	00e2      	lsls	r2, r4, #3
 80043be:	4614      	mov	r4, r2
 80043c0:	461d      	mov	r5, r3
 80043c2:	eb14 030a 	adds.w	r3, r4, sl
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	eb45 030b 	adc.w	r3, r5, fp
 80043cc:	607b      	str	r3, [r7, #4]
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043da:	4629      	mov	r1, r5
 80043dc:	028b      	lsls	r3, r1, #10
 80043de:	4621      	mov	r1, r4
 80043e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043e4:	4621      	mov	r1, r4
 80043e6:	028a      	lsls	r2, r1, #10
 80043e8:	4610      	mov	r0, r2
 80043ea:	4619      	mov	r1, r3
 80043ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ee:	2200      	movs	r2, #0
 80043f0:	60bb      	str	r3, [r7, #8]
 80043f2:	60fa      	str	r2, [r7, #12]
 80043f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043f8:	f7fc fbde 	bl	8000bb8 <__aeabi_uldivmod>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4613      	mov	r3, r2
 8004402:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_GetSysClockFreq+0x180>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	f003 0303 	and.w	r3, r3, #3
 800440e:	3301      	adds	r3, #1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004414:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004418:	fbb2 f3f3 	udiv	r3, r2, r3
 800441c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800441e:	e002      	b.n	8004426 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetSysClockFreq+0x184>)
 8004422:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004428:	4618      	mov	r0, r3
 800442a:	3740      	adds	r7, #64	; 0x40
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800
 8004438:	00f42400 	.word	0x00f42400
 800443c:	017d7840 	.word	0x017d7840

08004440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e07b      	b.n	800454a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	2b00      	cmp	r3, #0
 8004458:	d108      	bne.n	800446c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004462:	d009      	beq.n	8004478 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	61da      	str	r2, [r3, #28]
 800446a:	e005      	b.n	8004478 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fe fd7e 	bl	8002f94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f2:	431a      	orrs	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fc:	ea42 0103 	orr.w	r1, r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004504:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	430a      	orrs	r2, r1
 800450e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0104 	and.w	r1, r3, #4
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451e:	f003 0210 	and.w	r2, r3, #16
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004538:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b088      	sub	sp, #32
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004562:	2300      	movs	r3, #0
 8004564:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_SPI_Transmit+0x22>
 8004570:	2302      	movs	r3, #2
 8004572:	e126      	b.n	80047c2 <HAL_SPI_Transmit+0x270>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800457c:	f7ff f844 	bl	8003608 <HAL_GetTick>
 8004580:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004582:	88fb      	ldrh	r3, [r7, #6]
 8004584:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d002      	beq.n	8004598 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004592:	2302      	movs	r3, #2
 8004594:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004596:	e10b      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_Transmit+0x52>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d102      	bne.n	80045aa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045a8:	e102      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2203      	movs	r2, #3
 80045ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	88fa      	ldrh	r2, [r7, #6]
 80045c2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	88fa      	ldrh	r2, [r7, #6]
 80045c8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045f0:	d10f      	bne.n	8004612 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004600:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d007      	beq.n	8004630 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800462e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004638:	d14b      	bne.n	80046d2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_SPI_Transmit+0xf6>
 8004642:	8afb      	ldrh	r3, [r7, #22]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d13e      	bne.n	80046c6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	881a      	ldrh	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004658:	1c9a      	adds	r2, r3, #2
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800466c:	e02b      	b.n	80046c6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f003 0302 	and.w	r3, r3, #2
 8004678:	2b02      	cmp	r3, #2
 800467a:	d112      	bne.n	80046a2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	881a      	ldrh	r2, [r3, #0]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800468c:	1c9a      	adds	r2, r3, #2
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	86da      	strh	r2, [r3, #54]	; 0x36
 80046a0:	e011      	b.n	80046c6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a2:	f7fe ffb1 	bl	8003608 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	683a      	ldr	r2, [r7, #0]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_Transmit+0x168>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_Transmit+0x16e>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d102      	bne.n	80046c6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046c4:	e074      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ca:	b29b      	uxth	r3, r3
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1ce      	bne.n	800466e <HAL_SPI_Transmit+0x11c>
 80046d0:	e04c      	b.n	800476c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <HAL_SPI_Transmit+0x18e>
 80046da:	8afb      	ldrh	r3, [r7, #22]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d140      	bne.n	8004762 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	330c      	adds	r3, #12
 80046ea:	7812      	ldrb	r2, [r2, #0]
 80046ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004706:	e02c      	b.n	8004762 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b02      	cmp	r3, #2
 8004714:	d113      	bne.n	800473e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	330c      	adds	r3, #12
 8004720:	7812      	ldrb	r2, [r2, #0]
 8004722:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	86da      	strh	r2, [r3, #54]	; 0x36
 800473c:	e011      	b.n	8004762 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800473e:	f7fe ff63 	bl	8003608 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	429a      	cmp	r2, r3
 800474c:	d803      	bhi.n	8004756 <HAL_SPI_Transmit+0x204>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d102      	bne.n	800475c <HAL_SPI_Transmit+0x20a>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004760:	e026      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1cd      	bne.n	8004708 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	6839      	ldr	r1, [r7, #0]
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 fa55 	bl	8004c20 <SPI_EndRxTxTransaction>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2220      	movs	r2, #32
 8004780:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d002      	beq.n	80047ae <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	e000      	b.n	80047b0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2200      	movs	r2, #0
 80047bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3720      	adds	r7, #32
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08c      	sub	sp, #48	; 0x30
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
 80047d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047d8:	2301      	movs	r3, #1
 80047da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x26>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e18a      	b.n	8004b06 <HAL_SPI_TransmitReceive+0x33c>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047f8:	f7fe ff06 	bl	8003608 <HAL_GetTick>
 80047fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800480e:	887b      	ldrh	r3, [r7, #2]
 8004810:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004812:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004816:	2b01      	cmp	r3, #1
 8004818:	d00f      	beq.n	800483a <HAL_SPI_TransmitReceive+0x70>
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004820:	d107      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d103      	bne.n	8004832 <HAL_SPI_TransmitReceive+0x68>
 800482a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800482e:	2b04      	cmp	r3, #4
 8004830:	d003      	beq.n	800483a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004832:	2302      	movs	r3, #2
 8004834:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004838:	e15b      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <HAL_SPI_TransmitReceive+0x82>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_TransmitReceive+0x82>
 8004846:	887b      	ldrh	r3, [r7, #2]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d103      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004852:	e14e      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b04      	cmp	r3, #4
 800485e:	d003      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2205      	movs	r2, #5
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	887a      	ldrh	r2, [r7, #2]
 8004878:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	887a      	ldrh	r2, [r7, #2]
 800487e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	887a      	ldrh	r2, [r7, #2]
 800488a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a8:	2b40      	cmp	r3, #64	; 0x40
 80048aa:	d007      	beq.n	80048bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048c4:	d178      	bne.n	80049b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d002      	beq.n	80048d4 <HAL_SPI_TransmitReceive+0x10a>
 80048ce:	8b7b      	ldrh	r3, [r7, #26]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d166      	bne.n	80049a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d8:	881a      	ldrh	r2, [r3, #0]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e4:	1c9a      	adds	r2, r3, #2
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048f8:	e053      	b.n	80049a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b02      	cmp	r3, #2
 8004906:	d11b      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x176>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d016      	beq.n	8004940 <HAL_SPI_TransmitReceive+0x176>
 8004912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004914:	2b01      	cmp	r3, #1
 8004916:	d113      	bne.n	8004940 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800491c:	881a      	ldrh	r2, [r3, #0]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	1c9a      	adds	r2, r3, #2
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004932:	b29b      	uxth	r3, r3
 8004934:	3b01      	subs	r3, #1
 8004936:	b29a      	uxth	r2, r3
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d119      	bne.n	8004982 <HAL_SPI_TransmitReceive+0x1b8>
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d014      	beq.n	8004982 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	b292      	uxth	r2, r2
 8004964:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	1c9a      	adds	r2, r3, #2
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800497e:	2301      	movs	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004982:	f7fe fe41 	bl	8003608 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800498e:	429a      	cmp	r2, r3
 8004990:	d807      	bhi.n	80049a2 <HAL_SPI_TransmitReceive+0x1d8>
 8004992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004998:	d003      	beq.n	80049a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80049a0:	e0a7      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1a6      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x130>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1a1      	bne.n	80048fa <HAL_SPI_TransmitReceive+0x130>
 80049b6:	e07c      	b.n	8004ab2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d002      	beq.n	80049c6 <HAL_SPI_TransmitReceive+0x1fc>
 80049c0:	8b7b      	ldrh	r3, [r7, #26]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d16b      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	330c      	adds	r3, #12
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	3b01      	subs	r3, #1
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049ec:	e057      	b.n	8004a9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d11c      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x26c>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d017      	beq.n	8004a36 <HAL_SPI_TransmitReceive+0x26c>
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d114      	bne.n	8004a36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	7812      	ldrb	r2, [r2, #0]
 8004a18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d119      	bne.n	8004a78 <HAL_SPI_TransmitReceive+0x2ae>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d014      	beq.n	8004a78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a58:	b2d2      	uxtb	r2, r2
 8004a5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	1c5a      	adds	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004a74:	2301      	movs	r3, #1
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004a78:	f7fe fdc6 	bl	8003608 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d803      	bhi.n	8004a90 <HAL_SPI_TransmitReceive+0x2c6>
 8004a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8e:	d102      	bne.n	8004a96 <HAL_SPI_TransmitReceive+0x2cc>
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d103      	bne.n	8004a9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004a9c:	e029      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1a2      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x224>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d19d      	bne.n	80049ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 f8b2 	bl	8004c20 <SPI_EndRxTxTransaction>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d006      	beq.n	8004ad0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ace:	e010      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	e000      	b.n	8004af2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004af0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3730      	adds	r7, #48	; 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
	...

08004b10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	603b      	str	r3, [r7, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b20:	f7fe fd72 	bl	8003608 <HAL_GetTick>
 8004b24:	4602      	mov	r2, r0
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	1a9b      	subs	r3, r3, r2
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b30:	f7fe fd6a 	bl	8003608 <HAL_GetTick>
 8004b34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b36:	4b39      	ldr	r3, [pc, #228]	; (8004c1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	015b      	lsls	r3, r3, #5
 8004b3c:	0d1b      	lsrs	r3, r3, #20
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	fb02 f303 	mul.w	r3, r2, r3
 8004b44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b46:	e054      	b.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d050      	beq.n	8004bf2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b50:	f7fe fd5a 	bl	8003608 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d902      	bls.n	8004b66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d13d      	bne.n	8004be2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b7e:	d111      	bne.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b88:	d004      	beq.n	8004b94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b92:	d107      	bne.n	8004ba4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ba2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bac:	d10f      	bne.n	8004bce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bcc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e017      	b.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3b01      	subs	r3, #1
 8004bf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	689a      	ldr	r2, [r3, #8]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	bf0c      	ite	eq
 8004c02:	2301      	moveq	r3, #1
 8004c04:	2300      	movne	r3, #0
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d19b      	bne.n	8004b48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000000 	.word	0x20000000

08004c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b088      	sub	sp, #32
 8004c24:	af02      	add	r7, sp, #8
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004c2c:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <SPI_EndRxTxTransaction+0x7c>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a1b      	ldr	r2, [pc, #108]	; (8004ca0 <SPI_EndRxTxTransaction+0x80>)
 8004c32:	fba2 2303 	umull	r2, r3, r2, r3
 8004c36:	0d5b      	lsrs	r3, r3, #21
 8004c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c4a:	d112      	bne.n	8004c72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	9300      	str	r3, [sp, #0]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2200      	movs	r2, #0
 8004c54:	2180      	movs	r1, #128	; 0x80
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff5a 	bl	8004b10 <SPI_WaitFlagStateUntilTimeout>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d016      	beq.n	8004c90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c66:	f043 0220 	orr.w	r2, r3, #32
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e00f      	b.n	8004c92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c88:	2b80      	cmp	r3, #128	; 0x80
 8004c8a:	d0f2      	beq.n	8004c72 <SPI_EndRxTxTransaction+0x52>
 8004c8c:	e000      	b.n	8004c90 <SPI_EndRxTxTransaction+0x70>
        break;
 8004c8e:	bf00      	nop
  }

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3718      	adds	r7, #24
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	165e9f81 	.word	0x165e9f81

08004ca4 <malloc>:
 8004ca4:	4b02      	ldr	r3, [pc, #8]	; (8004cb0 <malloc+0xc>)
 8004ca6:	4601      	mov	r1, r0
 8004ca8:	6818      	ldr	r0, [r3, #0]
 8004caa:	f000 b823 	b.w	8004cf4 <_malloc_r>
 8004cae:	bf00      	nop
 8004cb0:	20000064 	.word	0x20000064

08004cb4 <sbrk_aligned>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4e0e      	ldr	r6, [pc, #56]	; (8004cf0 <sbrk_aligned+0x3c>)
 8004cb8:	460c      	mov	r4, r1
 8004cba:	6831      	ldr	r1, [r6, #0]
 8004cbc:	4605      	mov	r5, r0
 8004cbe:	b911      	cbnz	r1, 8004cc6 <sbrk_aligned+0x12>
 8004cc0:	f000 fe70 	bl	80059a4 <_sbrk_r>
 8004cc4:	6030      	str	r0, [r6, #0]
 8004cc6:	4621      	mov	r1, r4
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 fe6b 	bl	80059a4 <_sbrk_r>
 8004cce:	1c43      	adds	r3, r0, #1
 8004cd0:	d00a      	beq.n	8004ce8 <sbrk_aligned+0x34>
 8004cd2:	1cc4      	adds	r4, r0, #3
 8004cd4:	f024 0403 	bic.w	r4, r4, #3
 8004cd8:	42a0      	cmp	r0, r4
 8004cda:	d007      	beq.n	8004cec <sbrk_aligned+0x38>
 8004cdc:	1a21      	subs	r1, r4, r0
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f000 fe60 	bl	80059a4 <_sbrk_r>
 8004ce4:	3001      	adds	r0, #1
 8004ce6:	d101      	bne.n	8004cec <sbrk_aligned+0x38>
 8004ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8004cec:	4620      	mov	r0, r4
 8004cee:	bd70      	pop	{r4, r5, r6, pc}
 8004cf0:	20000254 	.word	0x20000254

08004cf4 <_malloc_r>:
 8004cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cf8:	1ccd      	adds	r5, r1, #3
 8004cfa:	f025 0503 	bic.w	r5, r5, #3
 8004cfe:	3508      	adds	r5, #8
 8004d00:	2d0c      	cmp	r5, #12
 8004d02:	bf38      	it	cc
 8004d04:	250c      	movcc	r5, #12
 8004d06:	2d00      	cmp	r5, #0
 8004d08:	4607      	mov	r7, r0
 8004d0a:	db01      	blt.n	8004d10 <_malloc_r+0x1c>
 8004d0c:	42a9      	cmp	r1, r5
 8004d0e:	d905      	bls.n	8004d1c <_malloc_r+0x28>
 8004d10:	230c      	movs	r3, #12
 8004d12:	603b      	str	r3, [r7, #0]
 8004d14:	2600      	movs	r6, #0
 8004d16:	4630      	mov	r0, r6
 8004d18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004df0 <_malloc_r+0xfc>
 8004d20:	f000 f868 	bl	8004df4 <__malloc_lock>
 8004d24:	f8d8 3000 	ldr.w	r3, [r8]
 8004d28:	461c      	mov	r4, r3
 8004d2a:	bb5c      	cbnz	r4, 8004d84 <_malloc_r+0x90>
 8004d2c:	4629      	mov	r1, r5
 8004d2e:	4638      	mov	r0, r7
 8004d30:	f7ff ffc0 	bl	8004cb4 <sbrk_aligned>
 8004d34:	1c43      	adds	r3, r0, #1
 8004d36:	4604      	mov	r4, r0
 8004d38:	d155      	bne.n	8004de6 <_malloc_r+0xf2>
 8004d3a:	f8d8 4000 	ldr.w	r4, [r8]
 8004d3e:	4626      	mov	r6, r4
 8004d40:	2e00      	cmp	r6, #0
 8004d42:	d145      	bne.n	8004dd0 <_malloc_r+0xdc>
 8004d44:	2c00      	cmp	r4, #0
 8004d46:	d048      	beq.n	8004dda <_malloc_r+0xe6>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	4631      	mov	r1, r6
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	eb04 0903 	add.w	r9, r4, r3
 8004d52:	f000 fe27 	bl	80059a4 <_sbrk_r>
 8004d56:	4581      	cmp	r9, r0
 8004d58:	d13f      	bne.n	8004dda <_malloc_r+0xe6>
 8004d5a:	6821      	ldr	r1, [r4, #0]
 8004d5c:	1a6d      	subs	r5, r5, r1
 8004d5e:	4629      	mov	r1, r5
 8004d60:	4638      	mov	r0, r7
 8004d62:	f7ff ffa7 	bl	8004cb4 <sbrk_aligned>
 8004d66:	3001      	adds	r0, #1
 8004d68:	d037      	beq.n	8004dda <_malloc_r+0xe6>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	442b      	add	r3, r5
 8004d6e:	6023      	str	r3, [r4, #0]
 8004d70:	f8d8 3000 	ldr.w	r3, [r8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d038      	beq.n	8004dea <_malloc_r+0xf6>
 8004d78:	685a      	ldr	r2, [r3, #4]
 8004d7a:	42a2      	cmp	r2, r4
 8004d7c:	d12b      	bne.n	8004dd6 <_malloc_r+0xe2>
 8004d7e:	2200      	movs	r2, #0
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	e00f      	b.n	8004da4 <_malloc_r+0xb0>
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	1b52      	subs	r2, r2, r5
 8004d88:	d41f      	bmi.n	8004dca <_malloc_r+0xd6>
 8004d8a:	2a0b      	cmp	r2, #11
 8004d8c:	d917      	bls.n	8004dbe <_malloc_r+0xca>
 8004d8e:	1961      	adds	r1, r4, r5
 8004d90:	42a3      	cmp	r3, r4
 8004d92:	6025      	str	r5, [r4, #0]
 8004d94:	bf18      	it	ne
 8004d96:	6059      	strne	r1, [r3, #4]
 8004d98:	6863      	ldr	r3, [r4, #4]
 8004d9a:	bf08      	it	eq
 8004d9c:	f8c8 1000 	streq.w	r1, [r8]
 8004da0:	5162      	str	r2, [r4, r5]
 8004da2:	604b      	str	r3, [r1, #4]
 8004da4:	4638      	mov	r0, r7
 8004da6:	f104 060b 	add.w	r6, r4, #11
 8004daa:	f000 f829 	bl	8004e00 <__malloc_unlock>
 8004dae:	f026 0607 	bic.w	r6, r6, #7
 8004db2:	1d23      	adds	r3, r4, #4
 8004db4:	1af2      	subs	r2, r6, r3
 8004db6:	d0ae      	beq.n	8004d16 <_malloc_r+0x22>
 8004db8:	1b9b      	subs	r3, r3, r6
 8004dba:	50a3      	str	r3, [r4, r2]
 8004dbc:	e7ab      	b.n	8004d16 <_malloc_r+0x22>
 8004dbe:	42a3      	cmp	r3, r4
 8004dc0:	6862      	ldr	r2, [r4, #4]
 8004dc2:	d1dd      	bne.n	8004d80 <_malloc_r+0x8c>
 8004dc4:	f8c8 2000 	str.w	r2, [r8]
 8004dc8:	e7ec      	b.n	8004da4 <_malloc_r+0xb0>
 8004dca:	4623      	mov	r3, r4
 8004dcc:	6864      	ldr	r4, [r4, #4]
 8004dce:	e7ac      	b.n	8004d2a <_malloc_r+0x36>
 8004dd0:	4634      	mov	r4, r6
 8004dd2:	6876      	ldr	r6, [r6, #4]
 8004dd4:	e7b4      	b.n	8004d40 <_malloc_r+0x4c>
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	e7cc      	b.n	8004d74 <_malloc_r+0x80>
 8004dda:	230c      	movs	r3, #12
 8004ddc:	603b      	str	r3, [r7, #0]
 8004dde:	4638      	mov	r0, r7
 8004de0:	f000 f80e 	bl	8004e00 <__malloc_unlock>
 8004de4:	e797      	b.n	8004d16 <_malloc_r+0x22>
 8004de6:	6025      	str	r5, [r4, #0]
 8004de8:	e7dc      	b.n	8004da4 <_malloc_r+0xb0>
 8004dea:	605b      	str	r3, [r3, #4]
 8004dec:	deff      	udf	#255	; 0xff
 8004dee:	bf00      	nop
 8004df0:	20000250 	.word	0x20000250

08004df4 <__malloc_lock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	; (8004dfc <__malloc_lock+0x8>)
 8004df6:	f000 be22 	b.w	8005a3e <__retarget_lock_acquire_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	20000398 	.word	0x20000398

08004e00 <__malloc_unlock>:
 8004e00:	4801      	ldr	r0, [pc, #4]	; (8004e08 <__malloc_unlock+0x8>)
 8004e02:	f000 be1d 	b.w	8005a40 <__retarget_lock_release_recursive>
 8004e06:	bf00      	nop
 8004e08:	20000398 	.word	0x20000398

08004e0c <__cvt>:
 8004e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	ec55 4b10 	vmov	r4, r5, d0
 8004e14:	2d00      	cmp	r5, #0
 8004e16:	460e      	mov	r6, r1
 8004e18:	4619      	mov	r1, r3
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	bfbb      	ittet	lt
 8004e1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e22:	461d      	movlt	r5, r3
 8004e24:	2300      	movge	r3, #0
 8004e26:	232d      	movlt	r3, #45	; 0x2d
 8004e28:	700b      	strb	r3, [r1, #0]
 8004e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e30:	4691      	mov	r9, r2
 8004e32:	f023 0820 	bic.w	r8, r3, #32
 8004e36:	bfbc      	itt	lt
 8004e38:	4622      	movlt	r2, r4
 8004e3a:	4614      	movlt	r4, r2
 8004e3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e40:	d005      	beq.n	8004e4e <__cvt+0x42>
 8004e42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e46:	d100      	bne.n	8004e4a <__cvt+0x3e>
 8004e48:	3601      	adds	r6, #1
 8004e4a:	2102      	movs	r1, #2
 8004e4c:	e000      	b.n	8004e50 <__cvt+0x44>
 8004e4e:	2103      	movs	r1, #3
 8004e50:	ab03      	add	r3, sp, #12
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	ab02      	add	r3, sp, #8
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	ec45 4b10 	vmov	d0, r4, r5
 8004e5c:	4653      	mov	r3, sl
 8004e5e:	4632      	mov	r2, r6
 8004e60:	f000 fe86 	bl	8005b70 <_dtoa_r>
 8004e64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e68:	4607      	mov	r7, r0
 8004e6a:	d102      	bne.n	8004e72 <__cvt+0x66>
 8004e6c:	f019 0f01 	tst.w	r9, #1
 8004e70:	d022      	beq.n	8004eb8 <__cvt+0xac>
 8004e72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e76:	eb07 0906 	add.w	r9, r7, r6
 8004e7a:	d110      	bne.n	8004e9e <__cvt+0x92>
 8004e7c:	783b      	ldrb	r3, [r7, #0]
 8004e7e:	2b30      	cmp	r3, #48	; 0x30
 8004e80:	d10a      	bne.n	8004e98 <__cvt+0x8c>
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4620      	mov	r0, r4
 8004e88:	4629      	mov	r1, r5
 8004e8a:	f7fb fe25 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e8e:	b918      	cbnz	r0, 8004e98 <__cvt+0x8c>
 8004e90:	f1c6 0601 	rsb	r6, r6, #1
 8004e94:	f8ca 6000 	str.w	r6, [sl]
 8004e98:	f8da 3000 	ldr.w	r3, [sl]
 8004e9c:	4499      	add	r9, r3
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	4629      	mov	r1, r5
 8004ea6:	f7fb fe17 	bl	8000ad8 <__aeabi_dcmpeq>
 8004eaa:	b108      	cbz	r0, 8004eb0 <__cvt+0xa4>
 8004eac:	f8cd 900c 	str.w	r9, [sp, #12]
 8004eb0:	2230      	movs	r2, #48	; 0x30
 8004eb2:	9b03      	ldr	r3, [sp, #12]
 8004eb4:	454b      	cmp	r3, r9
 8004eb6:	d307      	bcc.n	8004ec8 <__cvt+0xbc>
 8004eb8:	9b03      	ldr	r3, [sp, #12]
 8004eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ebc:	1bdb      	subs	r3, r3, r7
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	b004      	add	sp, #16
 8004ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec8:	1c59      	adds	r1, r3, #1
 8004eca:	9103      	str	r1, [sp, #12]
 8004ecc:	701a      	strb	r2, [r3, #0]
 8004ece:	e7f0      	b.n	8004eb2 <__cvt+0xa6>

08004ed0 <__exponent>:
 8004ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2900      	cmp	r1, #0
 8004ed6:	bfb8      	it	lt
 8004ed8:	4249      	neglt	r1, r1
 8004eda:	f803 2b02 	strb.w	r2, [r3], #2
 8004ede:	bfb4      	ite	lt
 8004ee0:	222d      	movlt	r2, #45	; 0x2d
 8004ee2:	222b      	movge	r2, #43	; 0x2b
 8004ee4:	2909      	cmp	r1, #9
 8004ee6:	7042      	strb	r2, [r0, #1]
 8004ee8:	dd2a      	ble.n	8004f40 <__exponent+0x70>
 8004eea:	f10d 0207 	add.w	r2, sp, #7
 8004eee:	4617      	mov	r7, r2
 8004ef0:	260a      	movs	r6, #10
 8004ef2:	4694      	mov	ip, r2
 8004ef4:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ef8:	fb06 1415 	mls	r4, r6, r5, r1
 8004efc:	3430      	adds	r4, #48	; 0x30
 8004efe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004f02:	460c      	mov	r4, r1
 8004f04:	2c63      	cmp	r4, #99	; 0x63
 8004f06:	f102 32ff 	add.w	r2, r2, #4294967295
 8004f0a:	4629      	mov	r1, r5
 8004f0c:	dcf1      	bgt.n	8004ef2 <__exponent+0x22>
 8004f0e:	3130      	adds	r1, #48	; 0x30
 8004f10:	f1ac 0402 	sub.w	r4, ip, #2
 8004f14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f18:	1c41      	adds	r1, r0, #1
 8004f1a:	4622      	mov	r2, r4
 8004f1c:	42ba      	cmp	r2, r7
 8004f1e:	d30a      	bcc.n	8004f36 <__exponent+0x66>
 8004f20:	f10d 0209 	add.w	r2, sp, #9
 8004f24:	eba2 020c 	sub.w	r2, r2, ip
 8004f28:	42bc      	cmp	r4, r7
 8004f2a:	bf88      	it	hi
 8004f2c:	2200      	movhi	r2, #0
 8004f2e:	4413      	add	r3, r2
 8004f30:	1a18      	subs	r0, r3, r0
 8004f32:	b003      	add	sp, #12
 8004f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f36:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f3e:	e7ed      	b.n	8004f1c <__exponent+0x4c>
 8004f40:	2330      	movs	r3, #48	; 0x30
 8004f42:	3130      	adds	r1, #48	; 0x30
 8004f44:	7083      	strb	r3, [r0, #2]
 8004f46:	70c1      	strb	r1, [r0, #3]
 8004f48:	1d03      	adds	r3, r0, #4
 8004f4a:	e7f1      	b.n	8004f30 <__exponent+0x60>

08004f4c <_printf_float>:
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f50:	ed2d 8b02 	vpush	{d8}
 8004f54:	b08d      	sub	sp, #52	; 0x34
 8004f56:	460c      	mov	r4, r1
 8004f58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f5c:	4616      	mov	r6, r2
 8004f5e:	461f      	mov	r7, r3
 8004f60:	4605      	mov	r5, r0
 8004f62:	f000 fce7 	bl	8005934 <_localeconv_r>
 8004f66:	f8d0 a000 	ldr.w	sl, [r0]
 8004f6a:	4650      	mov	r0, sl
 8004f6c:	f7fb f988 	bl	8000280 <strlen>
 8004f70:	2300      	movs	r3, #0
 8004f72:	930a      	str	r3, [sp, #40]	; 0x28
 8004f74:	6823      	ldr	r3, [r4, #0]
 8004f76:	9305      	str	r3, [sp, #20]
 8004f78:	f8d8 3000 	ldr.w	r3, [r8]
 8004f7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f80:	3307      	adds	r3, #7
 8004f82:	f023 0307 	bic.w	r3, r3, #7
 8004f86:	f103 0208 	add.w	r2, r3, #8
 8004f8a:	f8c8 2000 	str.w	r2, [r8]
 8004f8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f96:	9307      	str	r3, [sp, #28]
 8004f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f9c:	ee08 0a10 	vmov	s16, r0
 8004fa0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fa8:	4b9e      	ldr	r3, [pc, #632]	; (8005224 <_printf_float+0x2d8>)
 8004faa:	f04f 32ff 	mov.w	r2, #4294967295
 8004fae:	f7fb fdc5 	bl	8000b3c <__aeabi_dcmpun>
 8004fb2:	bb88      	cbnz	r0, 8005018 <_printf_float+0xcc>
 8004fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fb8:	4b9a      	ldr	r3, [pc, #616]	; (8005224 <_printf_float+0x2d8>)
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbe:	f7fb fd9f 	bl	8000b00 <__aeabi_dcmple>
 8004fc2:	bb48      	cbnz	r0, 8005018 <_printf_float+0xcc>
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4640      	mov	r0, r8
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f7fb fd8e 	bl	8000aec <__aeabi_dcmplt>
 8004fd0:	b110      	cbz	r0, 8004fd8 <_printf_float+0x8c>
 8004fd2:	232d      	movs	r3, #45	; 0x2d
 8004fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd8:	4a93      	ldr	r2, [pc, #588]	; (8005228 <_printf_float+0x2dc>)
 8004fda:	4b94      	ldr	r3, [pc, #592]	; (800522c <_printf_float+0x2e0>)
 8004fdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fe0:	bf94      	ite	ls
 8004fe2:	4690      	movls	r8, r2
 8004fe4:	4698      	movhi	r8, r3
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	9b05      	ldr	r3, [sp, #20]
 8004fec:	f023 0304 	bic.w	r3, r3, #4
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	f04f 0900 	mov.w	r9, #0
 8004ff6:	9700      	str	r7, [sp, #0]
 8004ff8:	4633      	mov	r3, r6
 8004ffa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ffc:	4621      	mov	r1, r4
 8004ffe:	4628      	mov	r0, r5
 8005000:	f000 f9da 	bl	80053b8 <_printf_common>
 8005004:	3001      	adds	r0, #1
 8005006:	f040 8090 	bne.w	800512a <_printf_float+0x1de>
 800500a:	f04f 30ff 	mov.w	r0, #4294967295
 800500e:	b00d      	add	sp, #52	; 0x34
 8005010:	ecbd 8b02 	vpop	{d8}
 8005014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005018:	4642      	mov	r2, r8
 800501a:	464b      	mov	r3, r9
 800501c:	4640      	mov	r0, r8
 800501e:	4649      	mov	r1, r9
 8005020:	f7fb fd8c 	bl	8000b3c <__aeabi_dcmpun>
 8005024:	b140      	cbz	r0, 8005038 <_printf_float+0xec>
 8005026:	464b      	mov	r3, r9
 8005028:	2b00      	cmp	r3, #0
 800502a:	bfbc      	itt	lt
 800502c:	232d      	movlt	r3, #45	; 0x2d
 800502e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005032:	4a7f      	ldr	r2, [pc, #508]	; (8005230 <_printf_float+0x2e4>)
 8005034:	4b7f      	ldr	r3, [pc, #508]	; (8005234 <_printf_float+0x2e8>)
 8005036:	e7d1      	b.n	8004fdc <_printf_float+0x90>
 8005038:	6863      	ldr	r3, [r4, #4]
 800503a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800503e:	9206      	str	r2, [sp, #24]
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	d13f      	bne.n	80050c4 <_printf_float+0x178>
 8005044:	2306      	movs	r3, #6
 8005046:	6063      	str	r3, [r4, #4]
 8005048:	9b05      	ldr	r3, [sp, #20]
 800504a:	6861      	ldr	r1, [r4, #4]
 800504c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005050:	2300      	movs	r3, #0
 8005052:	9303      	str	r3, [sp, #12]
 8005054:	ab0a      	add	r3, sp, #40	; 0x28
 8005056:	e9cd b301 	strd	fp, r3, [sp, #4]
 800505a:	ab09      	add	r3, sp, #36	; 0x24
 800505c:	ec49 8b10 	vmov	d0, r8, r9
 8005060:	9300      	str	r3, [sp, #0]
 8005062:	6022      	str	r2, [r4, #0]
 8005064:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005068:	4628      	mov	r0, r5
 800506a:	f7ff fecf 	bl	8004e0c <__cvt>
 800506e:	9b06      	ldr	r3, [sp, #24]
 8005070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005072:	2b47      	cmp	r3, #71	; 0x47
 8005074:	4680      	mov	r8, r0
 8005076:	d108      	bne.n	800508a <_printf_float+0x13e>
 8005078:	1cc8      	adds	r0, r1, #3
 800507a:	db02      	blt.n	8005082 <_printf_float+0x136>
 800507c:	6863      	ldr	r3, [r4, #4]
 800507e:	4299      	cmp	r1, r3
 8005080:	dd41      	ble.n	8005106 <_printf_float+0x1ba>
 8005082:	f1ab 0302 	sub.w	r3, fp, #2
 8005086:	fa5f fb83 	uxtb.w	fp, r3
 800508a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800508e:	d820      	bhi.n	80050d2 <_printf_float+0x186>
 8005090:	3901      	subs	r1, #1
 8005092:	465a      	mov	r2, fp
 8005094:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005098:	9109      	str	r1, [sp, #36]	; 0x24
 800509a:	f7ff ff19 	bl	8004ed0 <__exponent>
 800509e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050a0:	1813      	adds	r3, r2, r0
 80050a2:	2a01      	cmp	r2, #1
 80050a4:	4681      	mov	r9, r0
 80050a6:	6123      	str	r3, [r4, #16]
 80050a8:	dc02      	bgt.n	80050b0 <_printf_float+0x164>
 80050aa:	6822      	ldr	r2, [r4, #0]
 80050ac:	07d2      	lsls	r2, r2, #31
 80050ae:	d501      	bpl.n	80050b4 <_printf_float+0x168>
 80050b0:	3301      	adds	r3, #1
 80050b2:	6123      	str	r3, [r4, #16]
 80050b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d09c      	beq.n	8004ff6 <_printf_float+0xaa>
 80050bc:	232d      	movs	r3, #45	; 0x2d
 80050be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050c2:	e798      	b.n	8004ff6 <_printf_float+0xaa>
 80050c4:	9a06      	ldr	r2, [sp, #24]
 80050c6:	2a47      	cmp	r2, #71	; 0x47
 80050c8:	d1be      	bne.n	8005048 <_printf_float+0xfc>
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1bc      	bne.n	8005048 <_printf_float+0xfc>
 80050ce:	2301      	movs	r3, #1
 80050d0:	e7b9      	b.n	8005046 <_printf_float+0xfa>
 80050d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050d6:	d118      	bne.n	800510a <_printf_float+0x1be>
 80050d8:	2900      	cmp	r1, #0
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	dd0b      	ble.n	80050f6 <_printf_float+0x1aa>
 80050de:	6121      	str	r1, [r4, #16]
 80050e0:	b913      	cbnz	r3, 80050e8 <_printf_float+0x19c>
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	07d0      	lsls	r0, r2, #31
 80050e6:	d502      	bpl.n	80050ee <_printf_float+0x1a2>
 80050e8:	3301      	adds	r3, #1
 80050ea:	440b      	add	r3, r1
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80050f0:	f04f 0900 	mov.w	r9, #0
 80050f4:	e7de      	b.n	80050b4 <_printf_float+0x168>
 80050f6:	b913      	cbnz	r3, 80050fe <_printf_float+0x1b2>
 80050f8:	6822      	ldr	r2, [r4, #0]
 80050fa:	07d2      	lsls	r2, r2, #31
 80050fc:	d501      	bpl.n	8005102 <_printf_float+0x1b6>
 80050fe:	3302      	adds	r3, #2
 8005100:	e7f4      	b.n	80050ec <_printf_float+0x1a0>
 8005102:	2301      	movs	r3, #1
 8005104:	e7f2      	b.n	80050ec <_printf_float+0x1a0>
 8005106:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800510a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510c:	4299      	cmp	r1, r3
 800510e:	db05      	blt.n	800511c <_printf_float+0x1d0>
 8005110:	6823      	ldr	r3, [r4, #0]
 8005112:	6121      	str	r1, [r4, #16]
 8005114:	07d8      	lsls	r0, r3, #31
 8005116:	d5ea      	bpl.n	80050ee <_printf_float+0x1a2>
 8005118:	1c4b      	adds	r3, r1, #1
 800511a:	e7e7      	b.n	80050ec <_printf_float+0x1a0>
 800511c:	2900      	cmp	r1, #0
 800511e:	bfd4      	ite	le
 8005120:	f1c1 0202 	rsble	r2, r1, #2
 8005124:	2201      	movgt	r2, #1
 8005126:	4413      	add	r3, r2
 8005128:	e7e0      	b.n	80050ec <_printf_float+0x1a0>
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	055a      	lsls	r2, r3, #21
 800512e:	d407      	bmi.n	8005140 <_printf_float+0x1f4>
 8005130:	6923      	ldr	r3, [r4, #16]
 8005132:	4642      	mov	r2, r8
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	d12c      	bne.n	8005198 <_printf_float+0x24c>
 800513e:	e764      	b.n	800500a <_printf_float+0xbe>
 8005140:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005144:	f240 80e0 	bls.w	8005308 <_printf_float+0x3bc>
 8005148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800514c:	2200      	movs	r2, #0
 800514e:	2300      	movs	r3, #0
 8005150:	f7fb fcc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8005154:	2800      	cmp	r0, #0
 8005156:	d034      	beq.n	80051c2 <_printf_float+0x276>
 8005158:	4a37      	ldr	r2, [pc, #220]	; (8005238 <_printf_float+0x2ec>)
 800515a:	2301      	movs	r3, #1
 800515c:	4631      	mov	r1, r6
 800515e:	4628      	mov	r0, r5
 8005160:	47b8      	blx	r7
 8005162:	3001      	adds	r0, #1
 8005164:	f43f af51 	beq.w	800500a <_printf_float+0xbe>
 8005168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800516c:	429a      	cmp	r2, r3
 800516e:	db02      	blt.n	8005176 <_printf_float+0x22a>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07d8      	lsls	r0, r3, #31
 8005174:	d510      	bpl.n	8005198 <_printf_float+0x24c>
 8005176:	ee18 3a10 	vmov	r3, s16
 800517a:	4652      	mov	r2, sl
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	f43f af41 	beq.w	800500a <_printf_float+0xbe>
 8005188:	f04f 0800 	mov.w	r8, #0
 800518c:	f104 091a 	add.w	r9, r4, #26
 8005190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005192:	3b01      	subs	r3, #1
 8005194:	4543      	cmp	r3, r8
 8005196:	dc09      	bgt.n	80051ac <_printf_float+0x260>
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	079b      	lsls	r3, r3, #30
 800519c:	f100 8107 	bmi.w	80053ae <_printf_float+0x462>
 80051a0:	68e0      	ldr	r0, [r4, #12]
 80051a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a4:	4298      	cmp	r0, r3
 80051a6:	bfb8      	it	lt
 80051a8:	4618      	movlt	r0, r3
 80051aa:	e730      	b.n	800500e <_printf_float+0xc2>
 80051ac:	2301      	movs	r3, #1
 80051ae:	464a      	mov	r2, r9
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	f43f af27 	beq.w	800500a <_printf_float+0xbe>
 80051bc:	f108 0801 	add.w	r8, r8, #1
 80051c0:	e7e6      	b.n	8005190 <_printf_float+0x244>
 80051c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	dc39      	bgt.n	800523c <_printf_float+0x2f0>
 80051c8:	4a1b      	ldr	r2, [pc, #108]	; (8005238 <_printf_float+0x2ec>)
 80051ca:	2301      	movs	r3, #1
 80051cc:	4631      	mov	r1, r6
 80051ce:	4628      	mov	r0, r5
 80051d0:	47b8      	blx	r7
 80051d2:	3001      	adds	r0, #1
 80051d4:	f43f af19 	beq.w	800500a <_printf_float+0xbe>
 80051d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051dc:	4313      	orrs	r3, r2
 80051de:	d102      	bne.n	80051e6 <_printf_float+0x29a>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	07d9      	lsls	r1, r3, #31
 80051e4:	d5d8      	bpl.n	8005198 <_printf_float+0x24c>
 80051e6:	ee18 3a10 	vmov	r3, s16
 80051ea:	4652      	mov	r2, sl
 80051ec:	4631      	mov	r1, r6
 80051ee:	4628      	mov	r0, r5
 80051f0:	47b8      	blx	r7
 80051f2:	3001      	adds	r0, #1
 80051f4:	f43f af09 	beq.w	800500a <_printf_float+0xbe>
 80051f8:	f04f 0900 	mov.w	r9, #0
 80051fc:	f104 0a1a 	add.w	sl, r4, #26
 8005200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005202:	425b      	negs	r3, r3
 8005204:	454b      	cmp	r3, r9
 8005206:	dc01      	bgt.n	800520c <_printf_float+0x2c0>
 8005208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800520a:	e792      	b.n	8005132 <_printf_float+0x1e6>
 800520c:	2301      	movs	r3, #1
 800520e:	4652      	mov	r2, sl
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f aef7 	beq.w	800500a <_printf_float+0xbe>
 800521c:	f109 0901 	add.w	r9, r9, #1
 8005220:	e7ee      	b.n	8005200 <_printf_float+0x2b4>
 8005222:	bf00      	nop
 8005224:	7fefffff 	.word	0x7fefffff
 8005228:	0800bfe8 	.word	0x0800bfe8
 800522c:	0800bfec 	.word	0x0800bfec
 8005230:	0800bff0 	.word	0x0800bff0
 8005234:	0800bff4 	.word	0x0800bff4
 8005238:	0800bff8 	.word	0x0800bff8
 800523c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800523e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005240:	429a      	cmp	r2, r3
 8005242:	bfa8      	it	ge
 8005244:	461a      	movge	r2, r3
 8005246:	2a00      	cmp	r2, #0
 8005248:	4691      	mov	r9, r2
 800524a:	dc37      	bgt.n	80052bc <_printf_float+0x370>
 800524c:	f04f 0b00 	mov.w	fp, #0
 8005250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005254:	f104 021a 	add.w	r2, r4, #26
 8005258:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800525a:	9305      	str	r3, [sp, #20]
 800525c:	eba3 0309 	sub.w	r3, r3, r9
 8005260:	455b      	cmp	r3, fp
 8005262:	dc33      	bgt.n	80052cc <_printf_float+0x380>
 8005264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005268:	429a      	cmp	r2, r3
 800526a:	db3b      	blt.n	80052e4 <_printf_float+0x398>
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	07da      	lsls	r2, r3, #31
 8005270:	d438      	bmi.n	80052e4 <_printf_float+0x398>
 8005272:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005276:	eba2 0903 	sub.w	r9, r2, r3
 800527a:	9b05      	ldr	r3, [sp, #20]
 800527c:	1ad2      	subs	r2, r2, r3
 800527e:	4591      	cmp	r9, r2
 8005280:	bfa8      	it	ge
 8005282:	4691      	movge	r9, r2
 8005284:	f1b9 0f00 	cmp.w	r9, #0
 8005288:	dc35      	bgt.n	80052f6 <_printf_float+0x3aa>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005292:	f104 0a1a 	add.w	sl, r4, #26
 8005296:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800529a:	1a9b      	subs	r3, r3, r2
 800529c:	eba3 0309 	sub.w	r3, r3, r9
 80052a0:	4543      	cmp	r3, r8
 80052a2:	f77f af79 	ble.w	8005198 <_printf_float+0x24c>
 80052a6:	2301      	movs	r3, #1
 80052a8:	4652      	mov	r2, sl
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f aeaa 	beq.w	800500a <_printf_float+0xbe>
 80052b6:	f108 0801 	add.w	r8, r8, #1
 80052ba:	e7ec      	b.n	8005296 <_printf_float+0x34a>
 80052bc:	4613      	mov	r3, r2
 80052be:	4631      	mov	r1, r6
 80052c0:	4642      	mov	r2, r8
 80052c2:	4628      	mov	r0, r5
 80052c4:	47b8      	blx	r7
 80052c6:	3001      	adds	r0, #1
 80052c8:	d1c0      	bne.n	800524c <_printf_float+0x300>
 80052ca:	e69e      	b.n	800500a <_printf_float+0xbe>
 80052cc:	2301      	movs	r3, #1
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	9205      	str	r2, [sp, #20]
 80052d4:	47b8      	blx	r7
 80052d6:	3001      	adds	r0, #1
 80052d8:	f43f ae97 	beq.w	800500a <_printf_float+0xbe>
 80052dc:	9a05      	ldr	r2, [sp, #20]
 80052de:	f10b 0b01 	add.w	fp, fp, #1
 80052e2:	e7b9      	b.n	8005258 <_printf_float+0x30c>
 80052e4:	ee18 3a10 	vmov	r3, s16
 80052e8:	4652      	mov	r2, sl
 80052ea:	4631      	mov	r1, r6
 80052ec:	4628      	mov	r0, r5
 80052ee:	47b8      	blx	r7
 80052f0:	3001      	adds	r0, #1
 80052f2:	d1be      	bne.n	8005272 <_printf_float+0x326>
 80052f4:	e689      	b.n	800500a <_printf_float+0xbe>
 80052f6:	9a05      	ldr	r2, [sp, #20]
 80052f8:	464b      	mov	r3, r9
 80052fa:	4442      	add	r2, r8
 80052fc:	4631      	mov	r1, r6
 80052fe:	4628      	mov	r0, r5
 8005300:	47b8      	blx	r7
 8005302:	3001      	adds	r0, #1
 8005304:	d1c1      	bne.n	800528a <_printf_float+0x33e>
 8005306:	e680      	b.n	800500a <_printf_float+0xbe>
 8005308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800530a:	2a01      	cmp	r2, #1
 800530c:	dc01      	bgt.n	8005312 <_printf_float+0x3c6>
 800530e:	07db      	lsls	r3, r3, #31
 8005310:	d53a      	bpl.n	8005388 <_printf_float+0x43c>
 8005312:	2301      	movs	r3, #1
 8005314:	4642      	mov	r2, r8
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	47b8      	blx	r7
 800531c:	3001      	adds	r0, #1
 800531e:	f43f ae74 	beq.w	800500a <_printf_float+0xbe>
 8005322:	ee18 3a10 	vmov	r3, s16
 8005326:	4652      	mov	r2, sl
 8005328:	4631      	mov	r1, r6
 800532a:	4628      	mov	r0, r5
 800532c:	47b8      	blx	r7
 800532e:	3001      	adds	r0, #1
 8005330:	f43f ae6b 	beq.w	800500a <_printf_float+0xbe>
 8005334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005338:	2200      	movs	r2, #0
 800533a:	2300      	movs	r3, #0
 800533c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8005340:	f7fb fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8005344:	b9d8      	cbnz	r0, 800537e <_printf_float+0x432>
 8005346:	f10a 33ff 	add.w	r3, sl, #4294967295
 800534a:	f108 0201 	add.w	r2, r8, #1
 800534e:	4631      	mov	r1, r6
 8005350:	4628      	mov	r0, r5
 8005352:	47b8      	blx	r7
 8005354:	3001      	adds	r0, #1
 8005356:	d10e      	bne.n	8005376 <_printf_float+0x42a>
 8005358:	e657      	b.n	800500a <_printf_float+0xbe>
 800535a:	2301      	movs	r3, #1
 800535c:	4652      	mov	r2, sl
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae50 	beq.w	800500a <_printf_float+0xbe>
 800536a:	f108 0801 	add.w	r8, r8, #1
 800536e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005370:	3b01      	subs	r3, #1
 8005372:	4543      	cmp	r3, r8
 8005374:	dcf1      	bgt.n	800535a <_printf_float+0x40e>
 8005376:	464b      	mov	r3, r9
 8005378:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800537c:	e6da      	b.n	8005134 <_printf_float+0x1e8>
 800537e:	f04f 0800 	mov.w	r8, #0
 8005382:	f104 0a1a 	add.w	sl, r4, #26
 8005386:	e7f2      	b.n	800536e <_printf_float+0x422>
 8005388:	2301      	movs	r3, #1
 800538a:	4642      	mov	r2, r8
 800538c:	e7df      	b.n	800534e <_printf_float+0x402>
 800538e:	2301      	movs	r3, #1
 8005390:	464a      	mov	r2, r9
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	f43f ae36 	beq.w	800500a <_printf_float+0xbe>
 800539e:	f108 0801 	add.w	r8, r8, #1
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053a6:	1a5b      	subs	r3, r3, r1
 80053a8:	4543      	cmp	r3, r8
 80053aa:	dcf0      	bgt.n	800538e <_printf_float+0x442>
 80053ac:	e6f8      	b.n	80051a0 <_printf_float+0x254>
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	f104 0919 	add.w	r9, r4, #25
 80053b6:	e7f4      	b.n	80053a2 <_printf_float+0x456>

080053b8 <_printf_common>:
 80053b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053bc:	4616      	mov	r6, r2
 80053be:	4699      	mov	r9, r3
 80053c0:	688a      	ldr	r2, [r1, #8]
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053c8:	4293      	cmp	r3, r2
 80053ca:	bfb8      	it	lt
 80053cc:	4613      	movlt	r3, r2
 80053ce:	6033      	str	r3, [r6, #0]
 80053d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053d4:	4607      	mov	r7, r0
 80053d6:	460c      	mov	r4, r1
 80053d8:	b10a      	cbz	r2, 80053de <_printf_common+0x26>
 80053da:	3301      	adds	r3, #1
 80053dc:	6033      	str	r3, [r6, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	0699      	lsls	r1, r3, #26
 80053e2:	bf42      	ittt	mi
 80053e4:	6833      	ldrmi	r3, [r6, #0]
 80053e6:	3302      	addmi	r3, #2
 80053e8:	6033      	strmi	r3, [r6, #0]
 80053ea:	6825      	ldr	r5, [r4, #0]
 80053ec:	f015 0506 	ands.w	r5, r5, #6
 80053f0:	d106      	bne.n	8005400 <_printf_common+0x48>
 80053f2:	f104 0a19 	add.w	sl, r4, #25
 80053f6:	68e3      	ldr	r3, [r4, #12]
 80053f8:	6832      	ldr	r2, [r6, #0]
 80053fa:	1a9b      	subs	r3, r3, r2
 80053fc:	42ab      	cmp	r3, r5
 80053fe:	dc26      	bgt.n	800544e <_printf_common+0x96>
 8005400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005404:	1e13      	subs	r3, r2, #0
 8005406:	6822      	ldr	r2, [r4, #0]
 8005408:	bf18      	it	ne
 800540a:	2301      	movne	r3, #1
 800540c:	0692      	lsls	r2, r2, #26
 800540e:	d42b      	bmi.n	8005468 <_printf_common+0xb0>
 8005410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005414:	4649      	mov	r1, r9
 8005416:	4638      	mov	r0, r7
 8005418:	47c0      	blx	r8
 800541a:	3001      	adds	r0, #1
 800541c:	d01e      	beq.n	800545c <_printf_common+0xa4>
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	6922      	ldr	r2, [r4, #16]
 8005422:	f003 0306 	and.w	r3, r3, #6
 8005426:	2b04      	cmp	r3, #4
 8005428:	bf02      	ittt	eq
 800542a:	68e5      	ldreq	r5, [r4, #12]
 800542c:	6833      	ldreq	r3, [r6, #0]
 800542e:	1aed      	subeq	r5, r5, r3
 8005430:	68a3      	ldr	r3, [r4, #8]
 8005432:	bf0c      	ite	eq
 8005434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005438:	2500      	movne	r5, #0
 800543a:	4293      	cmp	r3, r2
 800543c:	bfc4      	itt	gt
 800543e:	1a9b      	subgt	r3, r3, r2
 8005440:	18ed      	addgt	r5, r5, r3
 8005442:	2600      	movs	r6, #0
 8005444:	341a      	adds	r4, #26
 8005446:	42b5      	cmp	r5, r6
 8005448:	d11a      	bne.n	8005480 <_printf_common+0xc8>
 800544a:	2000      	movs	r0, #0
 800544c:	e008      	b.n	8005460 <_printf_common+0xa8>
 800544e:	2301      	movs	r3, #1
 8005450:	4652      	mov	r2, sl
 8005452:	4649      	mov	r1, r9
 8005454:	4638      	mov	r0, r7
 8005456:	47c0      	blx	r8
 8005458:	3001      	adds	r0, #1
 800545a:	d103      	bne.n	8005464 <_printf_common+0xac>
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005464:	3501      	adds	r5, #1
 8005466:	e7c6      	b.n	80053f6 <_printf_common+0x3e>
 8005468:	18e1      	adds	r1, r4, r3
 800546a:	1c5a      	adds	r2, r3, #1
 800546c:	2030      	movs	r0, #48	; 0x30
 800546e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005472:	4422      	add	r2, r4
 8005474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800547c:	3302      	adds	r3, #2
 800547e:	e7c7      	b.n	8005410 <_printf_common+0x58>
 8005480:	2301      	movs	r3, #1
 8005482:	4622      	mov	r2, r4
 8005484:	4649      	mov	r1, r9
 8005486:	4638      	mov	r0, r7
 8005488:	47c0      	blx	r8
 800548a:	3001      	adds	r0, #1
 800548c:	d0e6      	beq.n	800545c <_printf_common+0xa4>
 800548e:	3601      	adds	r6, #1
 8005490:	e7d9      	b.n	8005446 <_printf_common+0x8e>
	...

08005494 <_printf_i>:
 8005494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005498:	7e0f      	ldrb	r7, [r1, #24]
 800549a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800549c:	2f78      	cmp	r7, #120	; 0x78
 800549e:	4691      	mov	r9, r2
 80054a0:	4680      	mov	r8, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	469a      	mov	sl, r3
 80054a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054aa:	d807      	bhi.n	80054bc <_printf_i+0x28>
 80054ac:	2f62      	cmp	r7, #98	; 0x62
 80054ae:	d80a      	bhi.n	80054c6 <_printf_i+0x32>
 80054b0:	2f00      	cmp	r7, #0
 80054b2:	f000 80d4 	beq.w	800565e <_printf_i+0x1ca>
 80054b6:	2f58      	cmp	r7, #88	; 0x58
 80054b8:	f000 80c0 	beq.w	800563c <_printf_i+0x1a8>
 80054bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054c4:	e03a      	b.n	800553c <_printf_i+0xa8>
 80054c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ca:	2b15      	cmp	r3, #21
 80054cc:	d8f6      	bhi.n	80054bc <_printf_i+0x28>
 80054ce:	a101      	add	r1, pc, #4	; (adr r1, 80054d4 <_printf_i+0x40>)
 80054d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054d4:	0800552d 	.word	0x0800552d
 80054d8:	08005541 	.word	0x08005541
 80054dc:	080054bd 	.word	0x080054bd
 80054e0:	080054bd 	.word	0x080054bd
 80054e4:	080054bd 	.word	0x080054bd
 80054e8:	080054bd 	.word	0x080054bd
 80054ec:	08005541 	.word	0x08005541
 80054f0:	080054bd 	.word	0x080054bd
 80054f4:	080054bd 	.word	0x080054bd
 80054f8:	080054bd 	.word	0x080054bd
 80054fc:	080054bd 	.word	0x080054bd
 8005500:	08005645 	.word	0x08005645
 8005504:	0800556d 	.word	0x0800556d
 8005508:	080055ff 	.word	0x080055ff
 800550c:	080054bd 	.word	0x080054bd
 8005510:	080054bd 	.word	0x080054bd
 8005514:	08005667 	.word	0x08005667
 8005518:	080054bd 	.word	0x080054bd
 800551c:	0800556d 	.word	0x0800556d
 8005520:	080054bd 	.word	0x080054bd
 8005524:	080054bd 	.word	0x080054bd
 8005528:	08005607 	.word	0x08005607
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	1d1a      	adds	r2, r3, #4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	602a      	str	r2, [r5, #0]
 8005534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800553c:	2301      	movs	r3, #1
 800553e:	e09f      	b.n	8005680 <_printf_i+0x1ec>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	0607      	lsls	r7, r0, #24
 8005546:	f103 0104 	add.w	r1, r3, #4
 800554a:	6029      	str	r1, [r5, #0]
 800554c:	d501      	bpl.n	8005552 <_printf_i+0xbe>
 800554e:	681e      	ldr	r6, [r3, #0]
 8005550:	e003      	b.n	800555a <_printf_i+0xc6>
 8005552:	0646      	lsls	r6, r0, #25
 8005554:	d5fb      	bpl.n	800554e <_printf_i+0xba>
 8005556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800555a:	2e00      	cmp	r6, #0
 800555c:	da03      	bge.n	8005566 <_printf_i+0xd2>
 800555e:	232d      	movs	r3, #45	; 0x2d
 8005560:	4276      	negs	r6, r6
 8005562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005566:	485a      	ldr	r0, [pc, #360]	; (80056d0 <_printf_i+0x23c>)
 8005568:	230a      	movs	r3, #10
 800556a:	e012      	b.n	8005592 <_printf_i+0xfe>
 800556c:	682b      	ldr	r3, [r5, #0]
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	1d19      	adds	r1, r3, #4
 8005572:	6029      	str	r1, [r5, #0]
 8005574:	0605      	lsls	r5, r0, #24
 8005576:	d501      	bpl.n	800557c <_printf_i+0xe8>
 8005578:	681e      	ldr	r6, [r3, #0]
 800557a:	e002      	b.n	8005582 <_printf_i+0xee>
 800557c:	0641      	lsls	r1, r0, #25
 800557e:	d5fb      	bpl.n	8005578 <_printf_i+0xe4>
 8005580:	881e      	ldrh	r6, [r3, #0]
 8005582:	4853      	ldr	r0, [pc, #332]	; (80056d0 <_printf_i+0x23c>)
 8005584:	2f6f      	cmp	r7, #111	; 0x6f
 8005586:	bf0c      	ite	eq
 8005588:	2308      	moveq	r3, #8
 800558a:	230a      	movne	r3, #10
 800558c:	2100      	movs	r1, #0
 800558e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005592:	6865      	ldr	r5, [r4, #4]
 8005594:	60a5      	str	r5, [r4, #8]
 8005596:	2d00      	cmp	r5, #0
 8005598:	bfa2      	ittt	ge
 800559a:	6821      	ldrge	r1, [r4, #0]
 800559c:	f021 0104 	bicge.w	r1, r1, #4
 80055a0:	6021      	strge	r1, [r4, #0]
 80055a2:	b90e      	cbnz	r6, 80055a8 <_printf_i+0x114>
 80055a4:	2d00      	cmp	r5, #0
 80055a6:	d04b      	beq.n	8005640 <_printf_i+0x1ac>
 80055a8:	4615      	mov	r5, r2
 80055aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80055ae:	fb03 6711 	mls	r7, r3, r1, r6
 80055b2:	5dc7      	ldrb	r7, [r0, r7]
 80055b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b8:	4637      	mov	r7, r6
 80055ba:	42bb      	cmp	r3, r7
 80055bc:	460e      	mov	r6, r1
 80055be:	d9f4      	bls.n	80055aa <_printf_i+0x116>
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d10b      	bne.n	80055dc <_printf_i+0x148>
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	07de      	lsls	r6, r3, #31
 80055c8:	d508      	bpl.n	80055dc <_printf_i+0x148>
 80055ca:	6923      	ldr	r3, [r4, #16]
 80055cc:	6861      	ldr	r1, [r4, #4]
 80055ce:	4299      	cmp	r1, r3
 80055d0:	bfde      	ittt	le
 80055d2:	2330      	movle	r3, #48	; 0x30
 80055d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055dc:	1b52      	subs	r2, r2, r5
 80055de:	6122      	str	r2, [r4, #16]
 80055e0:	f8cd a000 	str.w	sl, [sp]
 80055e4:	464b      	mov	r3, r9
 80055e6:	aa03      	add	r2, sp, #12
 80055e8:	4621      	mov	r1, r4
 80055ea:	4640      	mov	r0, r8
 80055ec:	f7ff fee4 	bl	80053b8 <_printf_common>
 80055f0:	3001      	adds	r0, #1
 80055f2:	d14a      	bne.n	800568a <_printf_i+0x1f6>
 80055f4:	f04f 30ff 	mov.w	r0, #4294967295
 80055f8:	b004      	add	sp, #16
 80055fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f043 0320 	orr.w	r3, r3, #32
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	4833      	ldr	r0, [pc, #204]	; (80056d4 <_printf_i+0x240>)
 8005608:	2778      	movs	r7, #120	; 0x78
 800560a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	6829      	ldr	r1, [r5, #0]
 8005612:	061f      	lsls	r7, r3, #24
 8005614:	f851 6b04 	ldr.w	r6, [r1], #4
 8005618:	d402      	bmi.n	8005620 <_printf_i+0x18c>
 800561a:	065f      	lsls	r7, r3, #25
 800561c:	bf48      	it	mi
 800561e:	b2b6      	uxthmi	r6, r6
 8005620:	07df      	lsls	r7, r3, #31
 8005622:	bf48      	it	mi
 8005624:	f043 0320 	orrmi.w	r3, r3, #32
 8005628:	6029      	str	r1, [r5, #0]
 800562a:	bf48      	it	mi
 800562c:	6023      	strmi	r3, [r4, #0]
 800562e:	b91e      	cbnz	r6, 8005638 <_printf_i+0x1a4>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	f023 0320 	bic.w	r3, r3, #32
 8005636:	6023      	str	r3, [r4, #0]
 8005638:	2310      	movs	r3, #16
 800563a:	e7a7      	b.n	800558c <_printf_i+0xf8>
 800563c:	4824      	ldr	r0, [pc, #144]	; (80056d0 <_printf_i+0x23c>)
 800563e:	e7e4      	b.n	800560a <_printf_i+0x176>
 8005640:	4615      	mov	r5, r2
 8005642:	e7bd      	b.n	80055c0 <_printf_i+0x12c>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	6826      	ldr	r6, [r4, #0]
 8005648:	6961      	ldr	r1, [r4, #20]
 800564a:	1d18      	adds	r0, r3, #4
 800564c:	6028      	str	r0, [r5, #0]
 800564e:	0635      	lsls	r5, r6, #24
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	d501      	bpl.n	8005658 <_printf_i+0x1c4>
 8005654:	6019      	str	r1, [r3, #0]
 8005656:	e002      	b.n	800565e <_printf_i+0x1ca>
 8005658:	0670      	lsls	r0, r6, #25
 800565a:	d5fb      	bpl.n	8005654 <_printf_i+0x1c0>
 800565c:	8019      	strh	r1, [r3, #0]
 800565e:	2300      	movs	r3, #0
 8005660:	6123      	str	r3, [r4, #16]
 8005662:	4615      	mov	r5, r2
 8005664:	e7bc      	b.n	80055e0 <_printf_i+0x14c>
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	1d1a      	adds	r2, r3, #4
 800566a:	602a      	str	r2, [r5, #0]
 800566c:	681d      	ldr	r5, [r3, #0]
 800566e:	6862      	ldr	r2, [r4, #4]
 8005670:	2100      	movs	r1, #0
 8005672:	4628      	mov	r0, r5
 8005674:	f7fa fdb4 	bl	80001e0 <memchr>
 8005678:	b108      	cbz	r0, 800567e <_printf_i+0x1ea>
 800567a:	1b40      	subs	r0, r0, r5
 800567c:	6060      	str	r0, [r4, #4]
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	2300      	movs	r3, #0
 8005684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005688:	e7aa      	b.n	80055e0 <_printf_i+0x14c>
 800568a:	6923      	ldr	r3, [r4, #16]
 800568c:	462a      	mov	r2, r5
 800568e:	4649      	mov	r1, r9
 8005690:	4640      	mov	r0, r8
 8005692:	47d0      	blx	sl
 8005694:	3001      	adds	r0, #1
 8005696:	d0ad      	beq.n	80055f4 <_printf_i+0x160>
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	079b      	lsls	r3, r3, #30
 800569c:	d413      	bmi.n	80056c6 <_printf_i+0x232>
 800569e:	68e0      	ldr	r0, [r4, #12]
 80056a0:	9b03      	ldr	r3, [sp, #12]
 80056a2:	4298      	cmp	r0, r3
 80056a4:	bfb8      	it	lt
 80056a6:	4618      	movlt	r0, r3
 80056a8:	e7a6      	b.n	80055f8 <_printf_i+0x164>
 80056aa:	2301      	movs	r3, #1
 80056ac:	4632      	mov	r2, r6
 80056ae:	4649      	mov	r1, r9
 80056b0:	4640      	mov	r0, r8
 80056b2:	47d0      	blx	sl
 80056b4:	3001      	adds	r0, #1
 80056b6:	d09d      	beq.n	80055f4 <_printf_i+0x160>
 80056b8:	3501      	adds	r5, #1
 80056ba:	68e3      	ldr	r3, [r4, #12]
 80056bc:	9903      	ldr	r1, [sp, #12]
 80056be:	1a5b      	subs	r3, r3, r1
 80056c0:	42ab      	cmp	r3, r5
 80056c2:	dcf2      	bgt.n	80056aa <_printf_i+0x216>
 80056c4:	e7eb      	b.n	800569e <_printf_i+0x20a>
 80056c6:	2500      	movs	r5, #0
 80056c8:	f104 0619 	add.w	r6, r4, #25
 80056cc:	e7f5      	b.n	80056ba <_printf_i+0x226>
 80056ce:	bf00      	nop
 80056d0:	0800bffa 	.word	0x0800bffa
 80056d4:	0800c00b 	.word	0x0800c00b

080056d8 <std>:
 80056d8:	2300      	movs	r3, #0
 80056da:	b510      	push	{r4, lr}
 80056dc:	4604      	mov	r4, r0
 80056de:	e9c0 3300 	strd	r3, r3, [r0]
 80056e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056e6:	6083      	str	r3, [r0, #8]
 80056e8:	8181      	strh	r1, [r0, #12]
 80056ea:	6643      	str	r3, [r0, #100]	; 0x64
 80056ec:	81c2      	strh	r2, [r0, #14]
 80056ee:	6183      	str	r3, [r0, #24]
 80056f0:	4619      	mov	r1, r3
 80056f2:	2208      	movs	r2, #8
 80056f4:	305c      	adds	r0, #92	; 0x5c
 80056f6:	f000 f914 	bl	8005922 <memset>
 80056fa:	4b0d      	ldr	r3, [pc, #52]	; (8005730 <std+0x58>)
 80056fc:	6263      	str	r3, [r4, #36]	; 0x24
 80056fe:	4b0d      	ldr	r3, [pc, #52]	; (8005734 <std+0x5c>)
 8005700:	62a3      	str	r3, [r4, #40]	; 0x28
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <std+0x60>)
 8005704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005706:	4b0d      	ldr	r3, [pc, #52]	; (800573c <std+0x64>)
 8005708:	6323      	str	r3, [r4, #48]	; 0x30
 800570a:	4b0d      	ldr	r3, [pc, #52]	; (8005740 <std+0x68>)
 800570c:	6224      	str	r4, [r4, #32]
 800570e:	429c      	cmp	r4, r3
 8005710:	d006      	beq.n	8005720 <std+0x48>
 8005712:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005716:	4294      	cmp	r4, r2
 8005718:	d002      	beq.n	8005720 <std+0x48>
 800571a:	33d0      	adds	r3, #208	; 0xd0
 800571c:	429c      	cmp	r4, r3
 800571e:	d105      	bne.n	800572c <std+0x54>
 8005720:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005728:	f000 b988 	b.w	8005a3c <__retarget_lock_init_recursive>
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	0800589d 	.word	0x0800589d
 8005734:	080058bf 	.word	0x080058bf
 8005738:	080058f7 	.word	0x080058f7
 800573c:	0800591b 	.word	0x0800591b
 8005740:	20000258 	.word	0x20000258

08005744 <stdio_exit_handler>:
 8005744:	4a02      	ldr	r2, [pc, #8]	; (8005750 <stdio_exit_handler+0xc>)
 8005746:	4903      	ldr	r1, [pc, #12]	; (8005754 <stdio_exit_handler+0x10>)
 8005748:	4803      	ldr	r0, [pc, #12]	; (8005758 <stdio_exit_handler+0x14>)
 800574a:	f000 b869 	b.w	8005820 <_fwalk_sglue>
 800574e:	bf00      	nop
 8005750:	2000000c 	.word	0x2000000c
 8005754:	080072a1 	.word	0x080072a1
 8005758:	20000018 	.word	0x20000018

0800575c <cleanup_stdio>:
 800575c:	6841      	ldr	r1, [r0, #4]
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <cleanup_stdio+0x34>)
 8005760:	4299      	cmp	r1, r3
 8005762:	b510      	push	{r4, lr}
 8005764:	4604      	mov	r4, r0
 8005766:	d001      	beq.n	800576c <cleanup_stdio+0x10>
 8005768:	f001 fd9a 	bl	80072a0 <_fflush_r>
 800576c:	68a1      	ldr	r1, [r4, #8]
 800576e:	4b09      	ldr	r3, [pc, #36]	; (8005794 <cleanup_stdio+0x38>)
 8005770:	4299      	cmp	r1, r3
 8005772:	d002      	beq.n	800577a <cleanup_stdio+0x1e>
 8005774:	4620      	mov	r0, r4
 8005776:	f001 fd93 	bl	80072a0 <_fflush_r>
 800577a:	68e1      	ldr	r1, [r4, #12]
 800577c:	4b06      	ldr	r3, [pc, #24]	; (8005798 <cleanup_stdio+0x3c>)
 800577e:	4299      	cmp	r1, r3
 8005780:	d004      	beq.n	800578c <cleanup_stdio+0x30>
 8005782:	4620      	mov	r0, r4
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005788:	f001 bd8a 	b.w	80072a0 <_fflush_r>
 800578c:	bd10      	pop	{r4, pc}
 800578e:	bf00      	nop
 8005790:	20000258 	.word	0x20000258
 8005794:	200002c0 	.word	0x200002c0
 8005798:	20000328 	.word	0x20000328

0800579c <global_stdio_init.part.0>:
 800579c:	b510      	push	{r4, lr}
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <global_stdio_init.part.0+0x30>)
 80057a0:	4c0b      	ldr	r4, [pc, #44]	; (80057d0 <global_stdio_init.part.0+0x34>)
 80057a2:	4a0c      	ldr	r2, [pc, #48]	; (80057d4 <global_stdio_init.part.0+0x38>)
 80057a4:	601a      	str	r2, [r3, #0]
 80057a6:	4620      	mov	r0, r4
 80057a8:	2200      	movs	r2, #0
 80057aa:	2104      	movs	r1, #4
 80057ac:	f7ff ff94 	bl	80056d8 <std>
 80057b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057b4:	2201      	movs	r2, #1
 80057b6:	2109      	movs	r1, #9
 80057b8:	f7ff ff8e 	bl	80056d8 <std>
 80057bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057c0:	2202      	movs	r2, #2
 80057c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057c6:	2112      	movs	r1, #18
 80057c8:	f7ff bf86 	b.w	80056d8 <std>
 80057cc:	20000390 	.word	0x20000390
 80057d0:	20000258 	.word	0x20000258
 80057d4:	08005745 	.word	0x08005745

080057d8 <__sfp_lock_acquire>:
 80057d8:	4801      	ldr	r0, [pc, #4]	; (80057e0 <__sfp_lock_acquire+0x8>)
 80057da:	f000 b930 	b.w	8005a3e <__retarget_lock_acquire_recursive>
 80057de:	bf00      	nop
 80057e0:	20000399 	.word	0x20000399

080057e4 <__sfp_lock_release>:
 80057e4:	4801      	ldr	r0, [pc, #4]	; (80057ec <__sfp_lock_release+0x8>)
 80057e6:	f000 b92b 	b.w	8005a40 <__retarget_lock_release_recursive>
 80057ea:	bf00      	nop
 80057ec:	20000399 	.word	0x20000399

080057f0 <__sinit>:
 80057f0:	b510      	push	{r4, lr}
 80057f2:	4604      	mov	r4, r0
 80057f4:	f7ff fff0 	bl	80057d8 <__sfp_lock_acquire>
 80057f8:	6a23      	ldr	r3, [r4, #32]
 80057fa:	b11b      	cbz	r3, 8005804 <__sinit+0x14>
 80057fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005800:	f7ff bff0 	b.w	80057e4 <__sfp_lock_release>
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <__sinit+0x28>)
 8005806:	6223      	str	r3, [r4, #32]
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <__sinit+0x2c>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1f5      	bne.n	80057fc <__sinit+0xc>
 8005810:	f7ff ffc4 	bl	800579c <global_stdio_init.part.0>
 8005814:	e7f2      	b.n	80057fc <__sinit+0xc>
 8005816:	bf00      	nop
 8005818:	0800575d 	.word	0x0800575d
 800581c:	20000390 	.word	0x20000390

08005820 <_fwalk_sglue>:
 8005820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005824:	4607      	mov	r7, r0
 8005826:	4688      	mov	r8, r1
 8005828:	4614      	mov	r4, r2
 800582a:	2600      	movs	r6, #0
 800582c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005830:	f1b9 0901 	subs.w	r9, r9, #1
 8005834:	d505      	bpl.n	8005842 <_fwalk_sglue+0x22>
 8005836:	6824      	ldr	r4, [r4, #0]
 8005838:	2c00      	cmp	r4, #0
 800583a:	d1f7      	bne.n	800582c <_fwalk_sglue+0xc>
 800583c:	4630      	mov	r0, r6
 800583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005842:	89ab      	ldrh	r3, [r5, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d907      	bls.n	8005858 <_fwalk_sglue+0x38>
 8005848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800584c:	3301      	adds	r3, #1
 800584e:	d003      	beq.n	8005858 <_fwalk_sglue+0x38>
 8005850:	4629      	mov	r1, r5
 8005852:	4638      	mov	r0, r7
 8005854:	47c0      	blx	r8
 8005856:	4306      	orrs	r6, r0
 8005858:	3568      	adds	r5, #104	; 0x68
 800585a:	e7e9      	b.n	8005830 <_fwalk_sglue+0x10>

0800585c <siprintf>:
 800585c:	b40e      	push	{r1, r2, r3}
 800585e:	b500      	push	{lr}
 8005860:	b09c      	sub	sp, #112	; 0x70
 8005862:	ab1d      	add	r3, sp, #116	; 0x74
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	9006      	str	r0, [sp, #24]
 8005868:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800586c:	4809      	ldr	r0, [pc, #36]	; (8005894 <siprintf+0x38>)
 800586e:	9107      	str	r1, [sp, #28]
 8005870:	9104      	str	r1, [sp, #16]
 8005872:	4909      	ldr	r1, [pc, #36]	; (8005898 <siprintf+0x3c>)
 8005874:	f853 2b04 	ldr.w	r2, [r3], #4
 8005878:	9105      	str	r1, [sp, #20]
 800587a:	6800      	ldr	r0, [r0, #0]
 800587c:	9301      	str	r3, [sp, #4]
 800587e:	a902      	add	r1, sp, #8
 8005880:	f001 fb8a 	bl	8006f98 <_svfiprintf_r>
 8005884:	9b02      	ldr	r3, [sp, #8]
 8005886:	2200      	movs	r2, #0
 8005888:	701a      	strb	r2, [r3, #0]
 800588a:	b01c      	add	sp, #112	; 0x70
 800588c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005890:	b003      	add	sp, #12
 8005892:	4770      	bx	lr
 8005894:	20000064 	.word	0x20000064
 8005898:	ffff0208 	.word	0xffff0208

0800589c <__sread>:
 800589c:	b510      	push	{r4, lr}
 800589e:	460c      	mov	r4, r1
 80058a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058a4:	f000 f86c 	bl	8005980 <_read_r>
 80058a8:	2800      	cmp	r0, #0
 80058aa:	bfab      	itete	ge
 80058ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058ae:	89a3      	ldrhlt	r3, [r4, #12]
 80058b0:	181b      	addge	r3, r3, r0
 80058b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058b6:	bfac      	ite	ge
 80058b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ba:	81a3      	strhlt	r3, [r4, #12]
 80058bc:	bd10      	pop	{r4, pc}

080058be <__swrite>:
 80058be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058c2:	461f      	mov	r7, r3
 80058c4:	898b      	ldrh	r3, [r1, #12]
 80058c6:	05db      	lsls	r3, r3, #23
 80058c8:	4605      	mov	r5, r0
 80058ca:	460c      	mov	r4, r1
 80058cc:	4616      	mov	r6, r2
 80058ce:	d505      	bpl.n	80058dc <__swrite+0x1e>
 80058d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d4:	2302      	movs	r3, #2
 80058d6:	2200      	movs	r2, #0
 80058d8:	f000 f840 	bl	800595c <_lseek_r>
 80058dc:	89a3      	ldrh	r3, [r4, #12]
 80058de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e6:	81a3      	strh	r3, [r4, #12]
 80058e8:	4632      	mov	r2, r6
 80058ea:	463b      	mov	r3, r7
 80058ec:	4628      	mov	r0, r5
 80058ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058f2:	f000 b867 	b.w	80059c4 <_write_r>

080058f6 <__sseek>:
 80058f6:	b510      	push	{r4, lr}
 80058f8:	460c      	mov	r4, r1
 80058fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fe:	f000 f82d 	bl	800595c <_lseek_r>
 8005902:	1c43      	adds	r3, r0, #1
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	bf15      	itete	ne
 8005908:	6560      	strne	r0, [r4, #84]	; 0x54
 800590a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800590e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005912:	81a3      	strheq	r3, [r4, #12]
 8005914:	bf18      	it	ne
 8005916:	81a3      	strhne	r3, [r4, #12]
 8005918:	bd10      	pop	{r4, pc}

0800591a <__sclose>:
 800591a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800591e:	f000 b80d 	b.w	800593c <_close_r>

08005922 <memset>:
 8005922:	4402      	add	r2, r0
 8005924:	4603      	mov	r3, r0
 8005926:	4293      	cmp	r3, r2
 8005928:	d100      	bne.n	800592c <memset+0xa>
 800592a:	4770      	bx	lr
 800592c:	f803 1b01 	strb.w	r1, [r3], #1
 8005930:	e7f9      	b.n	8005926 <memset+0x4>
	...

08005934 <_localeconv_r>:
 8005934:	4800      	ldr	r0, [pc, #0]	; (8005938 <_localeconv_r+0x4>)
 8005936:	4770      	bx	lr
 8005938:	20000158 	.word	0x20000158

0800593c <_close_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4d06      	ldr	r5, [pc, #24]	; (8005958 <_close_r+0x1c>)
 8005940:	2300      	movs	r3, #0
 8005942:	4604      	mov	r4, r0
 8005944:	4608      	mov	r0, r1
 8005946:	602b      	str	r3, [r5, #0]
 8005948:	f7fd fc21 	bl	800318e <_close>
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d102      	bne.n	8005956 <_close_r+0x1a>
 8005950:	682b      	ldr	r3, [r5, #0]
 8005952:	b103      	cbz	r3, 8005956 <_close_r+0x1a>
 8005954:	6023      	str	r3, [r4, #0]
 8005956:	bd38      	pop	{r3, r4, r5, pc}
 8005958:	20000394 	.word	0x20000394

0800595c <_lseek_r>:
 800595c:	b538      	push	{r3, r4, r5, lr}
 800595e:	4d07      	ldr	r5, [pc, #28]	; (800597c <_lseek_r+0x20>)
 8005960:	4604      	mov	r4, r0
 8005962:	4608      	mov	r0, r1
 8005964:	4611      	mov	r1, r2
 8005966:	2200      	movs	r2, #0
 8005968:	602a      	str	r2, [r5, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	f7fd fc36 	bl	80031dc <_lseek>
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d102      	bne.n	800597a <_lseek_r+0x1e>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	b103      	cbz	r3, 800597a <_lseek_r+0x1e>
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	bd38      	pop	{r3, r4, r5, pc}
 800597c:	20000394 	.word	0x20000394

08005980 <_read_r>:
 8005980:	b538      	push	{r3, r4, r5, lr}
 8005982:	4d07      	ldr	r5, [pc, #28]	; (80059a0 <_read_r+0x20>)
 8005984:	4604      	mov	r4, r0
 8005986:	4608      	mov	r0, r1
 8005988:	4611      	mov	r1, r2
 800598a:	2200      	movs	r2, #0
 800598c:	602a      	str	r2, [r5, #0]
 800598e:	461a      	mov	r2, r3
 8005990:	f7fd fbc4 	bl	800311c <_read>
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	d102      	bne.n	800599e <_read_r+0x1e>
 8005998:	682b      	ldr	r3, [r5, #0]
 800599a:	b103      	cbz	r3, 800599e <_read_r+0x1e>
 800599c:	6023      	str	r3, [r4, #0]
 800599e:	bd38      	pop	{r3, r4, r5, pc}
 80059a0:	20000394 	.word	0x20000394

080059a4 <_sbrk_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	; (80059c0 <_sbrk_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fd fc22 	bl	80031f8 <_sbrk>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_sbrk_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_sbrk_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	20000394 	.word	0x20000394

080059c4 <_write_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d07      	ldr	r5, [pc, #28]	; (80059e4 <_write_r+0x20>)
 80059c8:	4604      	mov	r4, r0
 80059ca:	4608      	mov	r0, r1
 80059cc:	4611      	mov	r1, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	602a      	str	r2, [r5, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7fd fbbf 	bl	8003156 <_write>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_write_r+0x1e>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_write_r+0x1e>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	20000394 	.word	0x20000394

080059e8 <__errno>:
 80059e8:	4b01      	ldr	r3, [pc, #4]	; (80059f0 <__errno+0x8>)
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	4770      	bx	lr
 80059ee:	bf00      	nop
 80059f0:	20000064 	.word	0x20000064

080059f4 <__libc_init_array>:
 80059f4:	b570      	push	{r4, r5, r6, lr}
 80059f6:	4d0d      	ldr	r5, [pc, #52]	; (8005a2c <__libc_init_array+0x38>)
 80059f8:	4c0d      	ldr	r4, [pc, #52]	; (8005a30 <__libc_init_array+0x3c>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	2600      	movs	r6, #0
 8005a00:	42a6      	cmp	r6, r4
 8005a02:	d109      	bne.n	8005a18 <__libc_init_array+0x24>
 8005a04:	4d0b      	ldr	r5, [pc, #44]	; (8005a34 <__libc_init_array+0x40>)
 8005a06:	4c0c      	ldr	r4, [pc, #48]	; (8005a38 <__libc_init_array+0x44>)
 8005a08:	f001 ffd0 	bl	80079ac <_init>
 8005a0c:	1b64      	subs	r4, r4, r5
 8005a0e:	10a4      	asrs	r4, r4, #2
 8005a10:	2600      	movs	r6, #0
 8005a12:	42a6      	cmp	r6, r4
 8005a14:	d105      	bne.n	8005a22 <__libc_init_array+0x2e>
 8005a16:	bd70      	pop	{r4, r5, r6, pc}
 8005a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a1c:	4798      	blx	r3
 8005a1e:	3601      	adds	r6, #1
 8005a20:	e7ee      	b.n	8005a00 <__libc_init_array+0xc>
 8005a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a26:	4798      	blx	r3
 8005a28:	3601      	adds	r6, #1
 8005a2a:	e7f2      	b.n	8005a12 <__libc_init_array+0x1e>
 8005a2c:	0800c364 	.word	0x0800c364
 8005a30:	0800c364 	.word	0x0800c364
 8005a34:	0800c364 	.word	0x0800c364
 8005a38:	0800c368 	.word	0x0800c368

08005a3c <__retarget_lock_init_recursive>:
 8005a3c:	4770      	bx	lr

08005a3e <__retarget_lock_acquire_recursive>:
 8005a3e:	4770      	bx	lr

08005a40 <__retarget_lock_release_recursive>:
 8005a40:	4770      	bx	lr

08005a42 <memcpy>:
 8005a42:	440a      	add	r2, r1
 8005a44:	4291      	cmp	r1, r2
 8005a46:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a4a:	d100      	bne.n	8005a4e <memcpy+0xc>
 8005a4c:	4770      	bx	lr
 8005a4e:	b510      	push	{r4, lr}
 8005a50:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a54:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a58:	4291      	cmp	r1, r2
 8005a5a:	d1f9      	bne.n	8005a50 <memcpy+0xe>
 8005a5c:	bd10      	pop	{r4, pc}

08005a5e <quorem>:
 8005a5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a62:	6903      	ldr	r3, [r0, #16]
 8005a64:	690c      	ldr	r4, [r1, #16]
 8005a66:	42a3      	cmp	r3, r4
 8005a68:	4607      	mov	r7, r0
 8005a6a:	db7e      	blt.n	8005b6a <quorem+0x10c>
 8005a6c:	3c01      	subs	r4, #1
 8005a6e:	f101 0814 	add.w	r8, r1, #20
 8005a72:	f100 0514 	add.w	r5, r0, #20
 8005a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a7a:	9301      	str	r3, [sp, #4]
 8005a7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a84:	3301      	adds	r3, #1
 8005a86:	429a      	cmp	r2, r3
 8005a88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a90:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a94:	d331      	bcc.n	8005afa <quorem+0x9c>
 8005a96:	f04f 0e00 	mov.w	lr, #0
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	46ac      	mov	ip, r5
 8005a9e:	46f2      	mov	sl, lr
 8005aa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8005aa4:	b293      	uxth	r3, r2
 8005aa6:	fb06 e303 	mla	r3, r6, r3, lr
 8005aaa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aae:	0c1a      	lsrs	r2, r3, #16
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ab6:	f8dc a000 	ldr.w	sl, [ip]
 8005aba:	fa13 f38a 	uxtah	r3, r3, sl
 8005abe:	fb06 220e 	mla	r2, r6, lr, r2
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	9b00      	ldr	r3, [sp, #0]
 8005ac6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005aca:	b292      	uxth	r2, r2
 8005acc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ad4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005ad8:	4581      	cmp	r9, r0
 8005ada:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ade:	f84c 3b04 	str.w	r3, [ip], #4
 8005ae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ae6:	d2db      	bcs.n	8005aa0 <quorem+0x42>
 8005ae8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005aec:	b92b      	cbnz	r3, 8005afa <quorem+0x9c>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	3b04      	subs	r3, #4
 8005af2:	429d      	cmp	r5, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	d32c      	bcc.n	8005b52 <quorem+0xf4>
 8005af8:	613c      	str	r4, [r7, #16]
 8005afa:	4638      	mov	r0, r7
 8005afc:	f001 f8f2 	bl	8006ce4 <__mcmp>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	db22      	blt.n	8005b4a <quorem+0xec>
 8005b04:	3601      	adds	r6, #1
 8005b06:	4629      	mov	r1, r5
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8005b0e:	f8d1 c000 	ldr.w	ip, [r1]
 8005b12:	b293      	uxth	r3, r2
 8005b14:	1ac3      	subs	r3, r0, r3
 8005b16:	0c12      	lsrs	r2, r2, #16
 8005b18:	fa13 f38c 	uxtah	r3, r3, ip
 8005b1c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005b20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005b2a:	45c1      	cmp	r9, r8
 8005b2c:	f841 3b04 	str.w	r3, [r1], #4
 8005b30:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005b34:	d2e9      	bcs.n	8005b0a <quorem+0xac>
 8005b36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b3e:	b922      	cbnz	r2, 8005b4a <quorem+0xec>
 8005b40:	3b04      	subs	r3, #4
 8005b42:	429d      	cmp	r5, r3
 8005b44:	461a      	mov	r2, r3
 8005b46:	d30a      	bcc.n	8005b5e <quorem+0x100>
 8005b48:	613c      	str	r4, [r7, #16]
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	b003      	add	sp, #12
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	6812      	ldr	r2, [r2, #0]
 8005b54:	3b04      	subs	r3, #4
 8005b56:	2a00      	cmp	r2, #0
 8005b58:	d1ce      	bne.n	8005af8 <quorem+0x9a>
 8005b5a:	3c01      	subs	r4, #1
 8005b5c:	e7c9      	b.n	8005af2 <quorem+0x94>
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	3b04      	subs	r3, #4
 8005b62:	2a00      	cmp	r2, #0
 8005b64:	d1f0      	bne.n	8005b48 <quorem+0xea>
 8005b66:	3c01      	subs	r4, #1
 8005b68:	e7eb      	b.n	8005b42 <quorem+0xe4>
 8005b6a:	2000      	movs	r0, #0
 8005b6c:	e7ee      	b.n	8005b4c <quorem+0xee>
	...

08005b70 <_dtoa_r>:
 8005b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b74:	ed2d 8b04 	vpush	{d8-d9}
 8005b78:	69c5      	ldr	r5, [r0, #28]
 8005b7a:	b093      	sub	sp, #76	; 0x4c
 8005b7c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b80:	ec57 6b10 	vmov	r6, r7, d0
 8005b84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b88:	9107      	str	r1, [sp, #28]
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b90:	b975      	cbnz	r5, 8005bb0 <_dtoa_r+0x40>
 8005b92:	2010      	movs	r0, #16
 8005b94:	f7ff f886 	bl	8004ca4 <malloc>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	61e0      	str	r0, [r4, #28]
 8005b9c:	b920      	cbnz	r0, 8005ba8 <_dtoa_r+0x38>
 8005b9e:	4bae      	ldr	r3, [pc, #696]	; (8005e58 <_dtoa_r+0x2e8>)
 8005ba0:	21ef      	movs	r1, #239	; 0xef
 8005ba2:	48ae      	ldr	r0, [pc, #696]	; (8005e5c <_dtoa_r+0x2ec>)
 8005ba4:	f001 fbbe 	bl	8007324 <__assert_func>
 8005ba8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005bac:	6005      	str	r5, [r0, #0]
 8005bae:	60c5      	str	r5, [r0, #12]
 8005bb0:	69e3      	ldr	r3, [r4, #28]
 8005bb2:	6819      	ldr	r1, [r3, #0]
 8005bb4:	b151      	cbz	r1, 8005bcc <_dtoa_r+0x5c>
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	604a      	str	r2, [r1, #4]
 8005bba:	2301      	movs	r3, #1
 8005bbc:	4093      	lsls	r3, r2
 8005bbe:	608b      	str	r3, [r1, #8]
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	f000 fe53 	bl	800686c <_Bfree>
 8005bc6:	69e3      	ldr	r3, [r4, #28]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	1e3b      	subs	r3, r7, #0
 8005bce:	bfbb      	ittet	lt
 8005bd0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005bd4:	9303      	strlt	r3, [sp, #12]
 8005bd6:	2300      	movge	r3, #0
 8005bd8:	2201      	movlt	r2, #1
 8005bda:	bfac      	ite	ge
 8005bdc:	f8c8 3000 	strge.w	r3, [r8]
 8005be0:	f8c8 2000 	strlt.w	r2, [r8]
 8005be4:	4b9e      	ldr	r3, [pc, #632]	; (8005e60 <_dtoa_r+0x2f0>)
 8005be6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005bea:	ea33 0308 	bics.w	r3, r3, r8
 8005bee:	d11b      	bne.n	8005c28 <_dtoa_r+0xb8>
 8005bf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bf2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005bfc:	4333      	orrs	r3, r6
 8005bfe:	f000 8593 	beq.w	8006728 <_dtoa_r+0xbb8>
 8005c02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c04:	b963      	cbnz	r3, 8005c20 <_dtoa_r+0xb0>
 8005c06:	4b97      	ldr	r3, [pc, #604]	; (8005e64 <_dtoa_r+0x2f4>)
 8005c08:	e027      	b.n	8005c5a <_dtoa_r+0xea>
 8005c0a:	4b97      	ldr	r3, [pc, #604]	; (8005e68 <_dtoa_r+0x2f8>)
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	3308      	adds	r3, #8
 8005c10:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	9800      	ldr	r0, [sp, #0]
 8005c16:	b013      	add	sp, #76	; 0x4c
 8005c18:	ecbd 8b04 	vpop	{d8-d9}
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	4b90      	ldr	r3, [pc, #576]	; (8005e64 <_dtoa_r+0x2f4>)
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	3303      	adds	r3, #3
 8005c26:	e7f3      	b.n	8005c10 <_dtoa_r+0xa0>
 8005c28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	ec51 0b17 	vmov	r0, r1, d7
 8005c32:	eeb0 8a47 	vmov.f32	s16, s14
 8005c36:	eef0 8a67 	vmov.f32	s17, s15
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f7fa ff4c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c40:	4681      	mov	r9, r0
 8005c42:	b160      	cbz	r0, 8005c5e <_dtoa_r+0xee>
 8005c44:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005c46:	2301      	movs	r3, #1
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 8568 	beq.w	8006722 <_dtoa_r+0xbb2>
 8005c52:	4b86      	ldr	r3, [pc, #536]	; (8005e6c <_dtoa_r+0x2fc>)
 8005c54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c56:	6013      	str	r3, [r2, #0]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	e7da      	b.n	8005c14 <_dtoa_r+0xa4>
 8005c5e:	aa10      	add	r2, sp, #64	; 0x40
 8005c60:	a911      	add	r1, sp, #68	; 0x44
 8005c62:	4620      	mov	r0, r4
 8005c64:	eeb0 0a48 	vmov.f32	s0, s16
 8005c68:	eef0 0a68 	vmov.f32	s1, s17
 8005c6c:	f001 f8e0 	bl	8006e30 <__d2b>
 8005c70:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c74:	4682      	mov	sl, r0
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	d07f      	beq.n	8005d7a <_dtoa_r+0x20a>
 8005c7a:	ee18 3a90 	vmov	r3, s17
 8005c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c82:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c86:	ec51 0b18 	vmov	r0, r1, d8
 8005c8a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c92:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c96:	4619      	mov	r1, r3
 8005c98:	2200      	movs	r2, #0
 8005c9a:	4b75      	ldr	r3, [pc, #468]	; (8005e70 <_dtoa_r+0x300>)
 8005c9c:	f7fa fafc 	bl	8000298 <__aeabi_dsub>
 8005ca0:	a367      	add	r3, pc, #412	; (adr r3, 8005e40 <_dtoa_r+0x2d0>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fcaf 	bl	8000608 <__aeabi_dmul>
 8005caa:	a367      	add	r3, pc, #412	; (adr r3, 8005e48 <_dtoa_r+0x2d8>)
 8005cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb0:	f7fa faf4 	bl	800029c <__adddf3>
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	4628      	mov	r0, r5
 8005cb8:	460f      	mov	r7, r1
 8005cba:	f7fa fc3b 	bl	8000534 <__aeabi_i2d>
 8005cbe:	a364      	add	r3, pc, #400	; (adr r3, 8005e50 <_dtoa_r+0x2e0>)
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f7fa fca0 	bl	8000608 <__aeabi_dmul>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4630      	mov	r0, r6
 8005cce:	4639      	mov	r1, r7
 8005cd0:	f7fa fae4 	bl	800029c <__adddf3>
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	460f      	mov	r7, r1
 8005cd8:	f7fa ff46 	bl	8000b68 <__aeabi_d2iz>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4683      	mov	fp, r0
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4630      	mov	r0, r6
 8005ce4:	4639      	mov	r1, r7
 8005ce6:	f7fa ff01 	bl	8000aec <__aeabi_dcmplt>
 8005cea:	b148      	cbz	r0, 8005d00 <_dtoa_r+0x190>
 8005cec:	4658      	mov	r0, fp
 8005cee:	f7fa fc21 	bl	8000534 <__aeabi_i2d>
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	463b      	mov	r3, r7
 8005cf6:	f7fa feef 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cfa:	b908      	cbnz	r0, 8005d00 <_dtoa_r+0x190>
 8005cfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d00:	f1bb 0f16 	cmp.w	fp, #22
 8005d04:	d857      	bhi.n	8005db6 <_dtoa_r+0x246>
 8005d06:	4b5b      	ldr	r3, [pc, #364]	; (8005e74 <_dtoa_r+0x304>)
 8005d08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d10:	ec51 0b18 	vmov	r0, r1, d8
 8005d14:	f7fa feea 	bl	8000aec <__aeabi_dcmplt>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d04e      	beq.n	8005dba <_dtoa_r+0x24a>
 8005d1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d20:	2300      	movs	r3, #0
 8005d22:	930c      	str	r3, [sp, #48]	; 0x30
 8005d24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d26:	1b5b      	subs	r3, r3, r5
 8005d28:	1e5a      	subs	r2, r3, #1
 8005d2a:	bf45      	ittet	mi
 8005d2c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005d30:	9305      	strmi	r3, [sp, #20]
 8005d32:	2300      	movpl	r3, #0
 8005d34:	2300      	movmi	r3, #0
 8005d36:	9206      	str	r2, [sp, #24]
 8005d38:	bf54      	ite	pl
 8005d3a:	9305      	strpl	r3, [sp, #20]
 8005d3c:	9306      	strmi	r3, [sp, #24]
 8005d3e:	f1bb 0f00 	cmp.w	fp, #0
 8005d42:	db3c      	blt.n	8005dbe <_dtoa_r+0x24e>
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005d4a:	445b      	add	r3, fp
 8005d4c:	9306      	str	r3, [sp, #24]
 8005d4e:	2300      	movs	r3, #0
 8005d50:	9308      	str	r3, [sp, #32]
 8005d52:	9b07      	ldr	r3, [sp, #28]
 8005d54:	2b09      	cmp	r3, #9
 8005d56:	d868      	bhi.n	8005e2a <_dtoa_r+0x2ba>
 8005d58:	2b05      	cmp	r3, #5
 8005d5a:	bfc4      	itt	gt
 8005d5c:	3b04      	subgt	r3, #4
 8005d5e:	9307      	strgt	r3, [sp, #28]
 8005d60:	9b07      	ldr	r3, [sp, #28]
 8005d62:	f1a3 0302 	sub.w	r3, r3, #2
 8005d66:	bfcc      	ite	gt
 8005d68:	2500      	movgt	r5, #0
 8005d6a:	2501      	movle	r5, #1
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	f200 8085 	bhi.w	8005e7c <_dtoa_r+0x30c>
 8005d72:	e8df f003 	tbb	[pc, r3]
 8005d76:	3b2e      	.short	0x3b2e
 8005d78:	5839      	.short	0x5839
 8005d7a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d7e:	441d      	add	r5, r3
 8005d80:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d84:	2b20      	cmp	r3, #32
 8005d86:	bfc1      	itttt	gt
 8005d88:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d8c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d90:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005d94:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d98:	bfd6      	itet	le
 8005d9a:	f1c3 0320 	rsble	r3, r3, #32
 8005d9e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005da2:	fa06 f003 	lslle.w	r0, r6, r3
 8005da6:	f7fa fbb5 	bl	8000514 <__aeabi_ui2d>
 8005daa:	2201      	movs	r2, #1
 8005dac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005db0:	3d01      	subs	r5, #1
 8005db2:	920e      	str	r2, [sp, #56]	; 0x38
 8005db4:	e76f      	b.n	8005c96 <_dtoa_r+0x126>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e7b3      	b.n	8005d22 <_dtoa_r+0x1b2>
 8005dba:	900c      	str	r0, [sp, #48]	; 0x30
 8005dbc:	e7b2      	b.n	8005d24 <_dtoa_r+0x1b4>
 8005dbe:	9b05      	ldr	r3, [sp, #20]
 8005dc0:	eba3 030b 	sub.w	r3, r3, fp
 8005dc4:	9305      	str	r3, [sp, #20]
 8005dc6:	f1cb 0300 	rsb	r3, fp, #0
 8005dca:	9308      	str	r3, [sp, #32]
 8005dcc:	2300      	movs	r3, #0
 8005dce:	930b      	str	r3, [sp, #44]	; 0x2c
 8005dd0:	e7bf      	b.n	8005d52 <_dtoa_r+0x1e2>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dc52      	bgt.n	8005e82 <_dtoa_r+0x312>
 8005ddc:	2301      	movs	r3, #1
 8005dde:	9301      	str	r3, [sp, #4]
 8005de0:	9304      	str	r3, [sp, #16]
 8005de2:	461a      	mov	r2, r3
 8005de4:	920a      	str	r2, [sp, #40]	; 0x28
 8005de6:	e00b      	b.n	8005e00 <_dtoa_r+0x290>
 8005de8:	2301      	movs	r3, #1
 8005dea:	e7f3      	b.n	8005dd4 <_dtoa_r+0x264>
 8005dec:	2300      	movs	r3, #0
 8005dee:	9309      	str	r3, [sp, #36]	; 0x24
 8005df0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df2:	445b      	add	r3, fp
 8005df4:	9301      	str	r3, [sp, #4]
 8005df6:	3301      	adds	r3, #1
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	9304      	str	r3, [sp, #16]
 8005dfc:	bfb8      	it	lt
 8005dfe:	2301      	movlt	r3, #1
 8005e00:	69e0      	ldr	r0, [r4, #28]
 8005e02:	2100      	movs	r1, #0
 8005e04:	2204      	movs	r2, #4
 8005e06:	f102 0614 	add.w	r6, r2, #20
 8005e0a:	429e      	cmp	r6, r3
 8005e0c:	d93d      	bls.n	8005e8a <_dtoa_r+0x31a>
 8005e0e:	6041      	str	r1, [r0, #4]
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 fceb 	bl	80067ec <_Balloc>
 8005e16:	9000      	str	r0, [sp, #0]
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	d139      	bne.n	8005e90 <_dtoa_r+0x320>
 8005e1c:	4b16      	ldr	r3, [pc, #88]	; (8005e78 <_dtoa_r+0x308>)
 8005e1e:	4602      	mov	r2, r0
 8005e20:	f240 11af 	movw	r1, #431	; 0x1af
 8005e24:	e6bd      	b.n	8005ba2 <_dtoa_r+0x32>
 8005e26:	2301      	movs	r3, #1
 8005e28:	e7e1      	b.n	8005dee <_dtoa_r+0x27e>
 8005e2a:	2501      	movs	r5, #1
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	9307      	str	r3, [sp, #28]
 8005e30:	9509      	str	r5, [sp, #36]	; 0x24
 8005e32:	f04f 33ff 	mov.w	r3, #4294967295
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	9304      	str	r3, [sp, #16]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2312      	movs	r3, #18
 8005e3e:	e7d1      	b.n	8005de4 <_dtoa_r+0x274>
 8005e40:	636f4361 	.word	0x636f4361
 8005e44:	3fd287a7 	.word	0x3fd287a7
 8005e48:	8b60c8b3 	.word	0x8b60c8b3
 8005e4c:	3fc68a28 	.word	0x3fc68a28
 8005e50:	509f79fb 	.word	0x509f79fb
 8005e54:	3fd34413 	.word	0x3fd34413
 8005e58:	0800c029 	.word	0x0800c029
 8005e5c:	0800c040 	.word	0x0800c040
 8005e60:	7ff00000 	.word	0x7ff00000
 8005e64:	0800c025 	.word	0x0800c025
 8005e68:	0800c01c 	.word	0x0800c01c
 8005e6c:	0800bff9 	.word	0x0800bff9
 8005e70:	3ff80000 	.word	0x3ff80000
 8005e74:	0800c130 	.word	0x0800c130
 8005e78:	0800c098 	.word	0x0800c098
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	e7d7      	b.n	8005e32 <_dtoa_r+0x2c2>
 8005e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	9304      	str	r3, [sp, #16]
 8005e88:	e7ba      	b.n	8005e00 <_dtoa_r+0x290>
 8005e8a:	3101      	adds	r1, #1
 8005e8c:	0052      	lsls	r2, r2, #1
 8005e8e:	e7ba      	b.n	8005e06 <_dtoa_r+0x296>
 8005e90:	69e3      	ldr	r3, [r4, #28]
 8005e92:	9a00      	ldr	r2, [sp, #0]
 8005e94:	601a      	str	r2, [r3, #0]
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	2b0e      	cmp	r3, #14
 8005e9a:	f200 80a8 	bhi.w	8005fee <_dtoa_r+0x47e>
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f000 80a5 	beq.w	8005fee <_dtoa_r+0x47e>
 8005ea4:	f1bb 0f00 	cmp.w	fp, #0
 8005ea8:	dd38      	ble.n	8005f1c <_dtoa_r+0x3ac>
 8005eaa:	4bc0      	ldr	r3, [pc, #768]	; (80061ac <_dtoa_r+0x63c>)
 8005eac:	f00b 020f 	and.w	r2, fp, #15
 8005eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eb4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005eb8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005ebc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005ec0:	d019      	beq.n	8005ef6 <_dtoa_r+0x386>
 8005ec2:	4bbb      	ldr	r3, [pc, #748]	; (80061b0 <_dtoa_r+0x640>)
 8005ec4:	ec51 0b18 	vmov	r0, r1, d8
 8005ec8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ecc:	f7fa fcc6 	bl	800085c <__aeabi_ddiv>
 8005ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ed4:	f008 080f 	and.w	r8, r8, #15
 8005ed8:	2503      	movs	r5, #3
 8005eda:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80061b0 <_dtoa_r+0x640>
 8005ede:	f1b8 0f00 	cmp.w	r8, #0
 8005ee2:	d10a      	bne.n	8005efa <_dtoa_r+0x38a>
 8005ee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee8:	4632      	mov	r2, r6
 8005eea:	463b      	mov	r3, r7
 8005eec:	f7fa fcb6 	bl	800085c <__aeabi_ddiv>
 8005ef0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef4:	e02b      	b.n	8005f4e <_dtoa_r+0x3de>
 8005ef6:	2502      	movs	r5, #2
 8005ef8:	e7ef      	b.n	8005eda <_dtoa_r+0x36a>
 8005efa:	f018 0f01 	tst.w	r8, #1
 8005efe:	d008      	beq.n	8005f12 <_dtoa_r+0x3a2>
 8005f00:	4630      	mov	r0, r6
 8005f02:	4639      	mov	r1, r7
 8005f04:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f08:	f7fa fb7e 	bl	8000608 <__aeabi_dmul>
 8005f0c:	3501      	adds	r5, #1
 8005f0e:	4606      	mov	r6, r0
 8005f10:	460f      	mov	r7, r1
 8005f12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005f16:	f109 0908 	add.w	r9, r9, #8
 8005f1a:	e7e0      	b.n	8005ede <_dtoa_r+0x36e>
 8005f1c:	f000 809f 	beq.w	800605e <_dtoa_r+0x4ee>
 8005f20:	f1cb 0600 	rsb	r6, fp, #0
 8005f24:	4ba1      	ldr	r3, [pc, #644]	; (80061ac <_dtoa_r+0x63c>)
 8005f26:	4fa2      	ldr	r7, [pc, #648]	; (80061b0 <_dtoa_r+0x640>)
 8005f28:	f006 020f 	and.w	r2, r6, #15
 8005f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f34:	ec51 0b18 	vmov	r0, r1, d8
 8005f38:	f7fa fb66 	bl	8000608 <__aeabi_dmul>
 8005f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f40:	1136      	asrs	r6, r6, #4
 8005f42:	2300      	movs	r3, #0
 8005f44:	2502      	movs	r5, #2
 8005f46:	2e00      	cmp	r6, #0
 8005f48:	d17e      	bne.n	8006048 <_dtoa_r+0x4d8>
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1d0      	bne.n	8005ef0 <_dtoa_r+0x380>
 8005f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 8084 	beq.w	8006062 <_dtoa_r+0x4f2>
 8005f5a:	4b96      	ldr	r3, [pc, #600]	; (80061b4 <_dtoa_r+0x644>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa fdc3 	bl	8000aec <__aeabi_dcmplt>
 8005f66:	2800      	cmp	r0, #0
 8005f68:	d07b      	beq.n	8006062 <_dtoa_r+0x4f2>
 8005f6a:	9b04      	ldr	r3, [sp, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d078      	beq.n	8006062 <_dtoa_r+0x4f2>
 8005f70:	9b01      	ldr	r3, [sp, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	dd39      	ble.n	8005fea <_dtoa_r+0x47a>
 8005f76:	4b90      	ldr	r3, [pc, #576]	; (80061b8 <_dtoa_r+0x648>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	4640      	mov	r0, r8
 8005f7c:	4649      	mov	r1, r9
 8005f7e:	f7fa fb43 	bl	8000608 <__aeabi_dmul>
 8005f82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f86:	9e01      	ldr	r6, [sp, #4]
 8005f88:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005f8c:	3501      	adds	r5, #1
 8005f8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f92:	4628      	mov	r0, r5
 8005f94:	f7fa face 	bl	8000534 <__aeabi_i2d>
 8005f98:	4642      	mov	r2, r8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	f7fa fb34 	bl	8000608 <__aeabi_dmul>
 8005fa0:	4b86      	ldr	r3, [pc, #536]	; (80061bc <_dtoa_r+0x64c>)
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f7fa f97a 	bl	800029c <__adddf3>
 8005fa8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005fac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fb0:	9303      	str	r3, [sp, #12]
 8005fb2:	2e00      	cmp	r6, #0
 8005fb4:	d158      	bne.n	8006068 <_dtoa_r+0x4f8>
 8005fb6:	4b82      	ldr	r3, [pc, #520]	; (80061c0 <_dtoa_r+0x650>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa f96b 	bl	8000298 <__aeabi_dsub>
 8005fc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fc6:	4680      	mov	r8, r0
 8005fc8:	4689      	mov	r9, r1
 8005fca:	f7fa fdad 	bl	8000b28 <__aeabi_dcmpgt>
 8005fce:	2800      	cmp	r0, #0
 8005fd0:	f040 8296 	bne.w	8006500 <_dtoa_r+0x990>
 8005fd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005fd8:	4640      	mov	r0, r8
 8005fda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005fde:	4649      	mov	r1, r9
 8005fe0:	f7fa fd84 	bl	8000aec <__aeabi_dcmplt>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 8289 	bne.w	80064fc <_dtoa_r+0x98c>
 8005fea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005fee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f2c0 814e 	blt.w	8006292 <_dtoa_r+0x722>
 8005ff6:	f1bb 0f0e 	cmp.w	fp, #14
 8005ffa:	f300 814a 	bgt.w	8006292 <_dtoa_r+0x722>
 8005ffe:	4b6b      	ldr	r3, [pc, #428]	; (80061ac <_dtoa_r+0x63c>)
 8006000:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800600a:	2b00      	cmp	r3, #0
 800600c:	f280 80dc 	bge.w	80061c8 <_dtoa_r+0x658>
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	f300 80d8 	bgt.w	80061c8 <_dtoa_r+0x658>
 8006018:	f040 826f 	bne.w	80064fa <_dtoa_r+0x98a>
 800601c:	4b68      	ldr	r3, [pc, #416]	; (80061c0 <_dtoa_r+0x650>)
 800601e:	2200      	movs	r2, #0
 8006020:	4640      	mov	r0, r8
 8006022:	4649      	mov	r1, r9
 8006024:	f7fa faf0 	bl	8000608 <__aeabi_dmul>
 8006028:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800602c:	f7fa fd72 	bl	8000b14 <__aeabi_dcmpge>
 8006030:	9e04      	ldr	r6, [sp, #16]
 8006032:	4637      	mov	r7, r6
 8006034:	2800      	cmp	r0, #0
 8006036:	f040 8245 	bne.w	80064c4 <_dtoa_r+0x954>
 800603a:	9d00      	ldr	r5, [sp, #0]
 800603c:	2331      	movs	r3, #49	; 0x31
 800603e:	f805 3b01 	strb.w	r3, [r5], #1
 8006042:	f10b 0b01 	add.w	fp, fp, #1
 8006046:	e241      	b.n	80064cc <_dtoa_r+0x95c>
 8006048:	07f2      	lsls	r2, r6, #31
 800604a:	d505      	bpl.n	8006058 <_dtoa_r+0x4e8>
 800604c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006050:	f7fa fada 	bl	8000608 <__aeabi_dmul>
 8006054:	3501      	adds	r5, #1
 8006056:	2301      	movs	r3, #1
 8006058:	1076      	asrs	r6, r6, #1
 800605a:	3708      	adds	r7, #8
 800605c:	e773      	b.n	8005f46 <_dtoa_r+0x3d6>
 800605e:	2502      	movs	r5, #2
 8006060:	e775      	b.n	8005f4e <_dtoa_r+0x3de>
 8006062:	9e04      	ldr	r6, [sp, #16]
 8006064:	465f      	mov	r7, fp
 8006066:	e792      	b.n	8005f8e <_dtoa_r+0x41e>
 8006068:	9900      	ldr	r1, [sp, #0]
 800606a:	4b50      	ldr	r3, [pc, #320]	; (80061ac <_dtoa_r+0x63c>)
 800606c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006070:	4431      	add	r1, r6
 8006072:	9102      	str	r1, [sp, #8]
 8006074:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006076:	eeb0 9a47 	vmov.f32	s18, s14
 800607a:	eef0 9a67 	vmov.f32	s19, s15
 800607e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006082:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006086:	2900      	cmp	r1, #0
 8006088:	d044      	beq.n	8006114 <_dtoa_r+0x5a4>
 800608a:	494e      	ldr	r1, [pc, #312]	; (80061c4 <_dtoa_r+0x654>)
 800608c:	2000      	movs	r0, #0
 800608e:	f7fa fbe5 	bl	800085c <__aeabi_ddiv>
 8006092:	ec53 2b19 	vmov	r2, r3, d9
 8006096:	f7fa f8ff 	bl	8000298 <__aeabi_dsub>
 800609a:	9d00      	ldr	r5, [sp, #0]
 800609c:	ec41 0b19 	vmov	d9, r0, r1
 80060a0:	4649      	mov	r1, r9
 80060a2:	4640      	mov	r0, r8
 80060a4:	f7fa fd60 	bl	8000b68 <__aeabi_d2iz>
 80060a8:	4606      	mov	r6, r0
 80060aa:	f7fa fa43 	bl	8000534 <__aeabi_i2d>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	4640      	mov	r0, r8
 80060b4:	4649      	mov	r1, r9
 80060b6:	f7fa f8ef 	bl	8000298 <__aeabi_dsub>
 80060ba:	3630      	adds	r6, #48	; 0x30
 80060bc:	f805 6b01 	strb.w	r6, [r5], #1
 80060c0:	ec53 2b19 	vmov	r2, r3, d9
 80060c4:	4680      	mov	r8, r0
 80060c6:	4689      	mov	r9, r1
 80060c8:	f7fa fd10 	bl	8000aec <__aeabi_dcmplt>
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d164      	bne.n	800619a <_dtoa_r+0x62a>
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	4937      	ldr	r1, [pc, #220]	; (80061b4 <_dtoa_r+0x644>)
 80060d6:	2000      	movs	r0, #0
 80060d8:	f7fa f8de 	bl	8000298 <__aeabi_dsub>
 80060dc:	ec53 2b19 	vmov	r2, r3, d9
 80060e0:	f7fa fd04 	bl	8000aec <__aeabi_dcmplt>
 80060e4:	2800      	cmp	r0, #0
 80060e6:	f040 80b6 	bne.w	8006256 <_dtoa_r+0x6e6>
 80060ea:	9b02      	ldr	r3, [sp, #8]
 80060ec:	429d      	cmp	r5, r3
 80060ee:	f43f af7c 	beq.w	8005fea <_dtoa_r+0x47a>
 80060f2:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <_dtoa_r+0x648>)
 80060f4:	ec51 0b19 	vmov	r0, r1, d9
 80060f8:	2200      	movs	r2, #0
 80060fa:	f7fa fa85 	bl	8000608 <__aeabi_dmul>
 80060fe:	4b2e      	ldr	r3, [pc, #184]	; (80061b8 <_dtoa_r+0x648>)
 8006100:	ec41 0b19 	vmov	d9, r0, r1
 8006104:	2200      	movs	r2, #0
 8006106:	4640      	mov	r0, r8
 8006108:	4649      	mov	r1, r9
 800610a:	f7fa fa7d 	bl	8000608 <__aeabi_dmul>
 800610e:	4680      	mov	r8, r0
 8006110:	4689      	mov	r9, r1
 8006112:	e7c5      	b.n	80060a0 <_dtoa_r+0x530>
 8006114:	ec51 0b17 	vmov	r0, r1, d7
 8006118:	f7fa fa76 	bl	8000608 <__aeabi_dmul>
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	9d00      	ldr	r5, [sp, #0]
 8006120:	930f      	str	r3, [sp, #60]	; 0x3c
 8006122:	ec41 0b19 	vmov	d9, r0, r1
 8006126:	4649      	mov	r1, r9
 8006128:	4640      	mov	r0, r8
 800612a:	f7fa fd1d 	bl	8000b68 <__aeabi_d2iz>
 800612e:	4606      	mov	r6, r0
 8006130:	f7fa fa00 	bl	8000534 <__aeabi_i2d>
 8006134:	3630      	adds	r6, #48	; 0x30
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4640      	mov	r0, r8
 800613c:	4649      	mov	r1, r9
 800613e:	f7fa f8ab 	bl	8000298 <__aeabi_dsub>
 8006142:	f805 6b01 	strb.w	r6, [r5], #1
 8006146:	9b02      	ldr	r3, [sp, #8]
 8006148:	429d      	cmp	r5, r3
 800614a:	4680      	mov	r8, r0
 800614c:	4689      	mov	r9, r1
 800614e:	f04f 0200 	mov.w	r2, #0
 8006152:	d124      	bne.n	800619e <_dtoa_r+0x62e>
 8006154:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <_dtoa_r+0x654>)
 8006156:	ec51 0b19 	vmov	r0, r1, d9
 800615a:	f7fa f89f 	bl	800029c <__adddf3>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4640      	mov	r0, r8
 8006164:	4649      	mov	r1, r9
 8006166:	f7fa fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 800616a:	2800      	cmp	r0, #0
 800616c:	d173      	bne.n	8006256 <_dtoa_r+0x6e6>
 800616e:	ec53 2b19 	vmov	r2, r3, d9
 8006172:	4914      	ldr	r1, [pc, #80]	; (80061c4 <_dtoa_r+0x654>)
 8006174:	2000      	movs	r0, #0
 8006176:	f7fa f88f 	bl	8000298 <__aeabi_dsub>
 800617a:	4602      	mov	r2, r0
 800617c:	460b      	mov	r3, r1
 800617e:	4640      	mov	r0, r8
 8006180:	4649      	mov	r1, r9
 8006182:	f7fa fcb3 	bl	8000aec <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	f43f af2f 	beq.w	8005fea <_dtoa_r+0x47a>
 800618c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800618e:	1e6b      	subs	r3, r5, #1
 8006190:	930f      	str	r3, [sp, #60]	; 0x3c
 8006192:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006196:	2b30      	cmp	r3, #48	; 0x30
 8006198:	d0f8      	beq.n	800618c <_dtoa_r+0x61c>
 800619a:	46bb      	mov	fp, r7
 800619c:	e04a      	b.n	8006234 <_dtoa_r+0x6c4>
 800619e:	4b06      	ldr	r3, [pc, #24]	; (80061b8 <_dtoa_r+0x648>)
 80061a0:	f7fa fa32 	bl	8000608 <__aeabi_dmul>
 80061a4:	4680      	mov	r8, r0
 80061a6:	4689      	mov	r9, r1
 80061a8:	e7bd      	b.n	8006126 <_dtoa_r+0x5b6>
 80061aa:	bf00      	nop
 80061ac:	0800c130 	.word	0x0800c130
 80061b0:	0800c108 	.word	0x0800c108
 80061b4:	3ff00000 	.word	0x3ff00000
 80061b8:	40240000 	.word	0x40240000
 80061bc:	401c0000 	.word	0x401c0000
 80061c0:	40140000 	.word	0x40140000
 80061c4:	3fe00000 	.word	0x3fe00000
 80061c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80061cc:	9d00      	ldr	r5, [sp, #0]
 80061ce:	4642      	mov	r2, r8
 80061d0:	464b      	mov	r3, r9
 80061d2:	4630      	mov	r0, r6
 80061d4:	4639      	mov	r1, r7
 80061d6:	f7fa fb41 	bl	800085c <__aeabi_ddiv>
 80061da:	f7fa fcc5 	bl	8000b68 <__aeabi_d2iz>
 80061de:	9001      	str	r0, [sp, #4]
 80061e0:	f7fa f9a8 	bl	8000534 <__aeabi_i2d>
 80061e4:	4642      	mov	r2, r8
 80061e6:	464b      	mov	r3, r9
 80061e8:	f7fa fa0e 	bl	8000608 <__aeabi_dmul>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4630      	mov	r0, r6
 80061f2:	4639      	mov	r1, r7
 80061f4:	f7fa f850 	bl	8000298 <__aeabi_dsub>
 80061f8:	9e01      	ldr	r6, [sp, #4]
 80061fa:	9f04      	ldr	r7, [sp, #16]
 80061fc:	3630      	adds	r6, #48	; 0x30
 80061fe:	f805 6b01 	strb.w	r6, [r5], #1
 8006202:	9e00      	ldr	r6, [sp, #0]
 8006204:	1bae      	subs	r6, r5, r6
 8006206:	42b7      	cmp	r7, r6
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	d134      	bne.n	8006278 <_dtoa_r+0x708>
 800620e:	f7fa f845 	bl	800029c <__adddf3>
 8006212:	4642      	mov	r2, r8
 8006214:	464b      	mov	r3, r9
 8006216:	4606      	mov	r6, r0
 8006218:	460f      	mov	r7, r1
 800621a:	f7fa fc85 	bl	8000b28 <__aeabi_dcmpgt>
 800621e:	b9c8      	cbnz	r0, 8006254 <_dtoa_r+0x6e4>
 8006220:	4642      	mov	r2, r8
 8006222:	464b      	mov	r3, r9
 8006224:	4630      	mov	r0, r6
 8006226:	4639      	mov	r1, r7
 8006228:	f7fa fc56 	bl	8000ad8 <__aeabi_dcmpeq>
 800622c:	b110      	cbz	r0, 8006234 <_dtoa_r+0x6c4>
 800622e:	9b01      	ldr	r3, [sp, #4]
 8006230:	07db      	lsls	r3, r3, #31
 8006232:	d40f      	bmi.n	8006254 <_dtoa_r+0x6e4>
 8006234:	4651      	mov	r1, sl
 8006236:	4620      	mov	r0, r4
 8006238:	f000 fb18 	bl	800686c <_Bfree>
 800623c:	2300      	movs	r3, #0
 800623e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006240:	702b      	strb	r3, [r5, #0]
 8006242:	f10b 0301 	add.w	r3, fp, #1
 8006246:	6013      	str	r3, [r2, #0]
 8006248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624a:	2b00      	cmp	r3, #0
 800624c:	f43f ace2 	beq.w	8005c14 <_dtoa_r+0xa4>
 8006250:	601d      	str	r5, [r3, #0]
 8006252:	e4df      	b.n	8005c14 <_dtoa_r+0xa4>
 8006254:	465f      	mov	r7, fp
 8006256:	462b      	mov	r3, r5
 8006258:	461d      	mov	r5, r3
 800625a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800625e:	2a39      	cmp	r2, #57	; 0x39
 8006260:	d106      	bne.n	8006270 <_dtoa_r+0x700>
 8006262:	9a00      	ldr	r2, [sp, #0]
 8006264:	429a      	cmp	r2, r3
 8006266:	d1f7      	bne.n	8006258 <_dtoa_r+0x6e8>
 8006268:	9900      	ldr	r1, [sp, #0]
 800626a:	2230      	movs	r2, #48	; 0x30
 800626c:	3701      	adds	r7, #1
 800626e:	700a      	strb	r2, [r1, #0]
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	3201      	adds	r2, #1
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	e790      	b.n	800619a <_dtoa_r+0x62a>
 8006278:	4ba3      	ldr	r3, [pc, #652]	; (8006508 <_dtoa_r+0x998>)
 800627a:	2200      	movs	r2, #0
 800627c:	f7fa f9c4 	bl	8000608 <__aeabi_dmul>
 8006280:	2200      	movs	r2, #0
 8006282:	2300      	movs	r3, #0
 8006284:	4606      	mov	r6, r0
 8006286:	460f      	mov	r7, r1
 8006288:	f7fa fc26 	bl	8000ad8 <__aeabi_dcmpeq>
 800628c:	2800      	cmp	r0, #0
 800628e:	d09e      	beq.n	80061ce <_dtoa_r+0x65e>
 8006290:	e7d0      	b.n	8006234 <_dtoa_r+0x6c4>
 8006292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006294:	2a00      	cmp	r2, #0
 8006296:	f000 80ca 	beq.w	800642e <_dtoa_r+0x8be>
 800629a:	9a07      	ldr	r2, [sp, #28]
 800629c:	2a01      	cmp	r2, #1
 800629e:	f300 80ad 	bgt.w	80063fc <_dtoa_r+0x88c>
 80062a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062a4:	2a00      	cmp	r2, #0
 80062a6:	f000 80a5 	beq.w	80063f4 <_dtoa_r+0x884>
 80062aa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80062ae:	9e08      	ldr	r6, [sp, #32]
 80062b0:	9d05      	ldr	r5, [sp, #20]
 80062b2:	9a05      	ldr	r2, [sp, #20]
 80062b4:	441a      	add	r2, r3
 80062b6:	9205      	str	r2, [sp, #20]
 80062b8:	9a06      	ldr	r2, [sp, #24]
 80062ba:	2101      	movs	r1, #1
 80062bc:	441a      	add	r2, r3
 80062be:	4620      	mov	r0, r4
 80062c0:	9206      	str	r2, [sp, #24]
 80062c2:	f000 fb89 	bl	80069d8 <__i2b>
 80062c6:	4607      	mov	r7, r0
 80062c8:	b165      	cbz	r5, 80062e4 <_dtoa_r+0x774>
 80062ca:	9b06      	ldr	r3, [sp, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	dd09      	ble.n	80062e4 <_dtoa_r+0x774>
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	9a05      	ldr	r2, [sp, #20]
 80062d4:	bfa8      	it	ge
 80062d6:	462b      	movge	r3, r5
 80062d8:	1ad2      	subs	r2, r2, r3
 80062da:	9205      	str	r2, [sp, #20]
 80062dc:	9a06      	ldr	r2, [sp, #24]
 80062de:	1aed      	subs	r5, r5, r3
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	9306      	str	r3, [sp, #24]
 80062e4:	9b08      	ldr	r3, [sp, #32]
 80062e6:	b1f3      	cbz	r3, 8006326 <_dtoa_r+0x7b6>
 80062e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80a3 	beq.w	8006436 <_dtoa_r+0x8c6>
 80062f0:	2e00      	cmp	r6, #0
 80062f2:	dd10      	ble.n	8006316 <_dtoa_r+0x7a6>
 80062f4:	4639      	mov	r1, r7
 80062f6:	4632      	mov	r2, r6
 80062f8:	4620      	mov	r0, r4
 80062fa:	f000 fc2d 	bl	8006b58 <__pow5mult>
 80062fe:	4652      	mov	r2, sl
 8006300:	4601      	mov	r1, r0
 8006302:	4607      	mov	r7, r0
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fb7d 	bl	8006a04 <__multiply>
 800630a:	4651      	mov	r1, sl
 800630c:	4680      	mov	r8, r0
 800630e:	4620      	mov	r0, r4
 8006310:	f000 faac 	bl	800686c <_Bfree>
 8006314:	46c2      	mov	sl, r8
 8006316:	9b08      	ldr	r3, [sp, #32]
 8006318:	1b9a      	subs	r2, r3, r6
 800631a:	d004      	beq.n	8006326 <_dtoa_r+0x7b6>
 800631c:	4651      	mov	r1, sl
 800631e:	4620      	mov	r0, r4
 8006320:	f000 fc1a 	bl	8006b58 <__pow5mult>
 8006324:	4682      	mov	sl, r0
 8006326:	2101      	movs	r1, #1
 8006328:	4620      	mov	r0, r4
 800632a:	f000 fb55 	bl	80069d8 <__i2b>
 800632e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006330:	2b00      	cmp	r3, #0
 8006332:	4606      	mov	r6, r0
 8006334:	f340 8081 	ble.w	800643a <_dtoa_r+0x8ca>
 8006338:	461a      	mov	r2, r3
 800633a:	4601      	mov	r1, r0
 800633c:	4620      	mov	r0, r4
 800633e:	f000 fc0b 	bl	8006b58 <__pow5mult>
 8006342:	9b07      	ldr	r3, [sp, #28]
 8006344:	2b01      	cmp	r3, #1
 8006346:	4606      	mov	r6, r0
 8006348:	dd7a      	ble.n	8006440 <_dtoa_r+0x8d0>
 800634a:	f04f 0800 	mov.w	r8, #0
 800634e:	6933      	ldr	r3, [r6, #16]
 8006350:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006354:	6918      	ldr	r0, [r3, #16]
 8006356:	f000 faf1 	bl	800693c <__hi0bits>
 800635a:	f1c0 0020 	rsb	r0, r0, #32
 800635e:	9b06      	ldr	r3, [sp, #24]
 8006360:	4418      	add	r0, r3
 8006362:	f010 001f 	ands.w	r0, r0, #31
 8006366:	f000 8094 	beq.w	8006492 <_dtoa_r+0x922>
 800636a:	f1c0 0320 	rsb	r3, r0, #32
 800636e:	2b04      	cmp	r3, #4
 8006370:	f340 8085 	ble.w	800647e <_dtoa_r+0x90e>
 8006374:	9b05      	ldr	r3, [sp, #20]
 8006376:	f1c0 001c 	rsb	r0, r0, #28
 800637a:	4403      	add	r3, r0
 800637c:	9305      	str	r3, [sp, #20]
 800637e:	9b06      	ldr	r3, [sp, #24]
 8006380:	4403      	add	r3, r0
 8006382:	4405      	add	r5, r0
 8006384:	9306      	str	r3, [sp, #24]
 8006386:	9b05      	ldr	r3, [sp, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	dd05      	ble.n	8006398 <_dtoa_r+0x828>
 800638c:	4651      	mov	r1, sl
 800638e:	461a      	mov	r2, r3
 8006390:	4620      	mov	r0, r4
 8006392:	f000 fc3b 	bl	8006c0c <__lshift>
 8006396:	4682      	mov	sl, r0
 8006398:	9b06      	ldr	r3, [sp, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	dd05      	ble.n	80063aa <_dtoa_r+0x83a>
 800639e:	4631      	mov	r1, r6
 80063a0:	461a      	mov	r2, r3
 80063a2:	4620      	mov	r0, r4
 80063a4:	f000 fc32 	bl	8006c0c <__lshift>
 80063a8:	4606      	mov	r6, r0
 80063aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d072      	beq.n	8006496 <_dtoa_r+0x926>
 80063b0:	4631      	mov	r1, r6
 80063b2:	4650      	mov	r0, sl
 80063b4:	f000 fc96 	bl	8006ce4 <__mcmp>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	da6c      	bge.n	8006496 <_dtoa_r+0x926>
 80063bc:	2300      	movs	r3, #0
 80063be:	4651      	mov	r1, sl
 80063c0:	220a      	movs	r2, #10
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 fa74 	bl	80068b0 <__multadd>
 80063c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80063ce:	4682      	mov	sl, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 81b0 	beq.w	8006736 <_dtoa_r+0xbc6>
 80063d6:	2300      	movs	r3, #0
 80063d8:	4639      	mov	r1, r7
 80063da:	220a      	movs	r2, #10
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 fa67 	bl	80068b0 <__multadd>
 80063e2:	9b01      	ldr	r3, [sp, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	4607      	mov	r7, r0
 80063e8:	f300 8096 	bgt.w	8006518 <_dtoa_r+0x9a8>
 80063ec:	9b07      	ldr	r3, [sp, #28]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	dc59      	bgt.n	80064a6 <_dtoa_r+0x936>
 80063f2:	e091      	b.n	8006518 <_dtoa_r+0x9a8>
 80063f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063fa:	e758      	b.n	80062ae <_dtoa_r+0x73e>
 80063fc:	9b04      	ldr	r3, [sp, #16]
 80063fe:	1e5e      	subs	r6, r3, #1
 8006400:	9b08      	ldr	r3, [sp, #32]
 8006402:	42b3      	cmp	r3, r6
 8006404:	bfbf      	itttt	lt
 8006406:	9b08      	ldrlt	r3, [sp, #32]
 8006408:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800640a:	9608      	strlt	r6, [sp, #32]
 800640c:	1af3      	sublt	r3, r6, r3
 800640e:	bfb4      	ite	lt
 8006410:	18d2      	addlt	r2, r2, r3
 8006412:	1b9e      	subge	r6, r3, r6
 8006414:	9b04      	ldr	r3, [sp, #16]
 8006416:	bfbc      	itt	lt
 8006418:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800641a:	2600      	movlt	r6, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	bfb7      	itett	lt
 8006420:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8006424:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8006428:	1a9d      	sublt	r5, r3, r2
 800642a:	2300      	movlt	r3, #0
 800642c:	e741      	b.n	80062b2 <_dtoa_r+0x742>
 800642e:	9e08      	ldr	r6, [sp, #32]
 8006430:	9d05      	ldr	r5, [sp, #20]
 8006432:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006434:	e748      	b.n	80062c8 <_dtoa_r+0x758>
 8006436:	9a08      	ldr	r2, [sp, #32]
 8006438:	e770      	b.n	800631c <_dtoa_r+0x7ac>
 800643a:	9b07      	ldr	r3, [sp, #28]
 800643c:	2b01      	cmp	r3, #1
 800643e:	dc19      	bgt.n	8006474 <_dtoa_r+0x904>
 8006440:	9b02      	ldr	r3, [sp, #8]
 8006442:	b9bb      	cbnz	r3, 8006474 <_dtoa_r+0x904>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800644a:	b99b      	cbnz	r3, 8006474 <_dtoa_r+0x904>
 800644c:	9b03      	ldr	r3, [sp, #12]
 800644e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006452:	0d1b      	lsrs	r3, r3, #20
 8006454:	051b      	lsls	r3, r3, #20
 8006456:	b183      	cbz	r3, 800647a <_dtoa_r+0x90a>
 8006458:	9b05      	ldr	r3, [sp, #20]
 800645a:	3301      	adds	r3, #1
 800645c:	9305      	str	r3, [sp, #20]
 800645e:	9b06      	ldr	r3, [sp, #24]
 8006460:	3301      	adds	r3, #1
 8006462:	9306      	str	r3, [sp, #24]
 8006464:	f04f 0801 	mov.w	r8, #1
 8006468:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	f47f af6f 	bne.w	800634e <_dtoa_r+0x7de>
 8006470:	2001      	movs	r0, #1
 8006472:	e774      	b.n	800635e <_dtoa_r+0x7ee>
 8006474:	f04f 0800 	mov.w	r8, #0
 8006478:	e7f6      	b.n	8006468 <_dtoa_r+0x8f8>
 800647a:	4698      	mov	r8, r3
 800647c:	e7f4      	b.n	8006468 <_dtoa_r+0x8f8>
 800647e:	d082      	beq.n	8006386 <_dtoa_r+0x816>
 8006480:	9a05      	ldr	r2, [sp, #20]
 8006482:	331c      	adds	r3, #28
 8006484:	441a      	add	r2, r3
 8006486:	9205      	str	r2, [sp, #20]
 8006488:	9a06      	ldr	r2, [sp, #24]
 800648a:	441a      	add	r2, r3
 800648c:	441d      	add	r5, r3
 800648e:	9206      	str	r2, [sp, #24]
 8006490:	e779      	b.n	8006386 <_dtoa_r+0x816>
 8006492:	4603      	mov	r3, r0
 8006494:	e7f4      	b.n	8006480 <_dtoa_r+0x910>
 8006496:	9b04      	ldr	r3, [sp, #16]
 8006498:	2b00      	cmp	r3, #0
 800649a:	dc37      	bgt.n	800650c <_dtoa_r+0x99c>
 800649c:	9b07      	ldr	r3, [sp, #28]
 800649e:	2b02      	cmp	r3, #2
 80064a0:	dd34      	ble.n	800650c <_dtoa_r+0x99c>
 80064a2:	9b04      	ldr	r3, [sp, #16]
 80064a4:	9301      	str	r3, [sp, #4]
 80064a6:	9b01      	ldr	r3, [sp, #4]
 80064a8:	b963      	cbnz	r3, 80064c4 <_dtoa_r+0x954>
 80064aa:	4631      	mov	r1, r6
 80064ac:	2205      	movs	r2, #5
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f9fe 	bl	80068b0 <__multadd>
 80064b4:	4601      	mov	r1, r0
 80064b6:	4606      	mov	r6, r0
 80064b8:	4650      	mov	r0, sl
 80064ba:	f000 fc13 	bl	8006ce4 <__mcmp>
 80064be:	2800      	cmp	r0, #0
 80064c0:	f73f adbb 	bgt.w	800603a <_dtoa_r+0x4ca>
 80064c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c6:	9d00      	ldr	r5, [sp, #0]
 80064c8:	ea6f 0b03 	mvn.w	fp, r3
 80064cc:	f04f 0800 	mov.w	r8, #0
 80064d0:	4631      	mov	r1, r6
 80064d2:	4620      	mov	r0, r4
 80064d4:	f000 f9ca 	bl	800686c <_Bfree>
 80064d8:	2f00      	cmp	r7, #0
 80064da:	f43f aeab 	beq.w	8006234 <_dtoa_r+0x6c4>
 80064de:	f1b8 0f00 	cmp.w	r8, #0
 80064e2:	d005      	beq.n	80064f0 <_dtoa_r+0x980>
 80064e4:	45b8      	cmp	r8, r7
 80064e6:	d003      	beq.n	80064f0 <_dtoa_r+0x980>
 80064e8:	4641      	mov	r1, r8
 80064ea:	4620      	mov	r0, r4
 80064ec:	f000 f9be 	bl	800686c <_Bfree>
 80064f0:	4639      	mov	r1, r7
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f9ba 	bl	800686c <_Bfree>
 80064f8:	e69c      	b.n	8006234 <_dtoa_r+0x6c4>
 80064fa:	2600      	movs	r6, #0
 80064fc:	4637      	mov	r7, r6
 80064fe:	e7e1      	b.n	80064c4 <_dtoa_r+0x954>
 8006500:	46bb      	mov	fp, r7
 8006502:	4637      	mov	r7, r6
 8006504:	e599      	b.n	800603a <_dtoa_r+0x4ca>
 8006506:	bf00      	nop
 8006508:	40240000 	.word	0x40240000
 800650c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650e:	2b00      	cmp	r3, #0
 8006510:	f000 80c8 	beq.w	80066a4 <_dtoa_r+0xb34>
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	9301      	str	r3, [sp, #4]
 8006518:	2d00      	cmp	r5, #0
 800651a:	dd05      	ble.n	8006528 <_dtoa_r+0x9b8>
 800651c:	4639      	mov	r1, r7
 800651e:	462a      	mov	r2, r5
 8006520:	4620      	mov	r0, r4
 8006522:	f000 fb73 	bl	8006c0c <__lshift>
 8006526:	4607      	mov	r7, r0
 8006528:	f1b8 0f00 	cmp.w	r8, #0
 800652c:	d05b      	beq.n	80065e6 <_dtoa_r+0xa76>
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4620      	mov	r0, r4
 8006532:	f000 f95b 	bl	80067ec <_Balloc>
 8006536:	4605      	mov	r5, r0
 8006538:	b928      	cbnz	r0, 8006546 <_dtoa_r+0x9d6>
 800653a:	4b83      	ldr	r3, [pc, #524]	; (8006748 <_dtoa_r+0xbd8>)
 800653c:	4602      	mov	r2, r0
 800653e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006542:	f7ff bb2e 	b.w	8005ba2 <_dtoa_r+0x32>
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	3202      	adds	r2, #2
 800654a:	0092      	lsls	r2, r2, #2
 800654c:	f107 010c 	add.w	r1, r7, #12
 8006550:	300c      	adds	r0, #12
 8006552:	f7ff fa76 	bl	8005a42 <memcpy>
 8006556:	2201      	movs	r2, #1
 8006558:	4629      	mov	r1, r5
 800655a:	4620      	mov	r0, r4
 800655c:	f000 fb56 	bl	8006c0c <__lshift>
 8006560:	9b00      	ldr	r3, [sp, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	9304      	str	r3, [sp, #16]
 8006566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800656a:	4413      	add	r3, r2
 800656c:	9308      	str	r3, [sp, #32]
 800656e:	9b02      	ldr	r3, [sp, #8]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	46b8      	mov	r8, r7
 8006576:	9306      	str	r3, [sp, #24]
 8006578:	4607      	mov	r7, r0
 800657a:	9b04      	ldr	r3, [sp, #16]
 800657c:	4631      	mov	r1, r6
 800657e:	3b01      	subs	r3, #1
 8006580:	4650      	mov	r0, sl
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	f7ff fa6b 	bl	8005a5e <quorem>
 8006588:	4641      	mov	r1, r8
 800658a:	9002      	str	r0, [sp, #8]
 800658c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006590:	4650      	mov	r0, sl
 8006592:	f000 fba7 	bl	8006ce4 <__mcmp>
 8006596:	463a      	mov	r2, r7
 8006598:	9005      	str	r0, [sp, #20]
 800659a:	4631      	mov	r1, r6
 800659c:	4620      	mov	r0, r4
 800659e:	f000 fbbd 	bl	8006d1c <__mdiff>
 80065a2:	68c2      	ldr	r2, [r0, #12]
 80065a4:	4605      	mov	r5, r0
 80065a6:	bb02      	cbnz	r2, 80065ea <_dtoa_r+0xa7a>
 80065a8:	4601      	mov	r1, r0
 80065aa:	4650      	mov	r0, sl
 80065ac:	f000 fb9a 	bl	8006ce4 <__mcmp>
 80065b0:	4602      	mov	r2, r0
 80065b2:	4629      	mov	r1, r5
 80065b4:	4620      	mov	r0, r4
 80065b6:	9209      	str	r2, [sp, #36]	; 0x24
 80065b8:	f000 f958 	bl	800686c <_Bfree>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065c0:	9d04      	ldr	r5, [sp, #16]
 80065c2:	ea43 0102 	orr.w	r1, r3, r2
 80065c6:	9b06      	ldr	r3, [sp, #24]
 80065c8:	4319      	orrs	r1, r3
 80065ca:	d110      	bne.n	80065ee <_dtoa_r+0xa7e>
 80065cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065d0:	d029      	beq.n	8006626 <_dtoa_r+0xab6>
 80065d2:	9b05      	ldr	r3, [sp, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd02      	ble.n	80065de <_dtoa_r+0xa6e>
 80065d8:	9b02      	ldr	r3, [sp, #8]
 80065da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80065de:	9b01      	ldr	r3, [sp, #4]
 80065e0:	f883 9000 	strb.w	r9, [r3]
 80065e4:	e774      	b.n	80064d0 <_dtoa_r+0x960>
 80065e6:	4638      	mov	r0, r7
 80065e8:	e7ba      	b.n	8006560 <_dtoa_r+0x9f0>
 80065ea:	2201      	movs	r2, #1
 80065ec:	e7e1      	b.n	80065b2 <_dtoa_r+0xa42>
 80065ee:	9b05      	ldr	r3, [sp, #20]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	db04      	blt.n	80065fe <_dtoa_r+0xa8e>
 80065f4:	9907      	ldr	r1, [sp, #28]
 80065f6:	430b      	orrs	r3, r1
 80065f8:	9906      	ldr	r1, [sp, #24]
 80065fa:	430b      	orrs	r3, r1
 80065fc:	d120      	bne.n	8006640 <_dtoa_r+0xad0>
 80065fe:	2a00      	cmp	r2, #0
 8006600:	dded      	ble.n	80065de <_dtoa_r+0xa6e>
 8006602:	4651      	mov	r1, sl
 8006604:	2201      	movs	r2, #1
 8006606:	4620      	mov	r0, r4
 8006608:	f000 fb00 	bl	8006c0c <__lshift>
 800660c:	4631      	mov	r1, r6
 800660e:	4682      	mov	sl, r0
 8006610:	f000 fb68 	bl	8006ce4 <__mcmp>
 8006614:	2800      	cmp	r0, #0
 8006616:	dc03      	bgt.n	8006620 <_dtoa_r+0xab0>
 8006618:	d1e1      	bne.n	80065de <_dtoa_r+0xa6e>
 800661a:	f019 0f01 	tst.w	r9, #1
 800661e:	d0de      	beq.n	80065de <_dtoa_r+0xa6e>
 8006620:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006624:	d1d8      	bne.n	80065d8 <_dtoa_r+0xa68>
 8006626:	9a01      	ldr	r2, [sp, #4]
 8006628:	2339      	movs	r3, #57	; 0x39
 800662a:	7013      	strb	r3, [r2, #0]
 800662c:	462b      	mov	r3, r5
 800662e:	461d      	mov	r5, r3
 8006630:	3b01      	subs	r3, #1
 8006632:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006636:	2a39      	cmp	r2, #57	; 0x39
 8006638:	d06c      	beq.n	8006714 <_dtoa_r+0xba4>
 800663a:	3201      	adds	r2, #1
 800663c:	701a      	strb	r2, [r3, #0]
 800663e:	e747      	b.n	80064d0 <_dtoa_r+0x960>
 8006640:	2a00      	cmp	r2, #0
 8006642:	dd07      	ble.n	8006654 <_dtoa_r+0xae4>
 8006644:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006648:	d0ed      	beq.n	8006626 <_dtoa_r+0xab6>
 800664a:	9a01      	ldr	r2, [sp, #4]
 800664c:	f109 0301 	add.w	r3, r9, #1
 8006650:	7013      	strb	r3, [r2, #0]
 8006652:	e73d      	b.n	80064d0 <_dtoa_r+0x960>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	9a08      	ldr	r2, [sp, #32]
 8006658:	f803 9c01 	strb.w	r9, [r3, #-1]
 800665c:	4293      	cmp	r3, r2
 800665e:	d043      	beq.n	80066e8 <_dtoa_r+0xb78>
 8006660:	4651      	mov	r1, sl
 8006662:	2300      	movs	r3, #0
 8006664:	220a      	movs	r2, #10
 8006666:	4620      	mov	r0, r4
 8006668:	f000 f922 	bl	80068b0 <__multadd>
 800666c:	45b8      	cmp	r8, r7
 800666e:	4682      	mov	sl, r0
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	f04f 020a 	mov.w	r2, #10
 8006678:	4641      	mov	r1, r8
 800667a:	4620      	mov	r0, r4
 800667c:	d107      	bne.n	800668e <_dtoa_r+0xb1e>
 800667e:	f000 f917 	bl	80068b0 <__multadd>
 8006682:	4680      	mov	r8, r0
 8006684:	4607      	mov	r7, r0
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	e775      	b.n	800657a <_dtoa_r+0xa0a>
 800668e:	f000 f90f 	bl	80068b0 <__multadd>
 8006692:	4639      	mov	r1, r7
 8006694:	4680      	mov	r8, r0
 8006696:	2300      	movs	r3, #0
 8006698:	220a      	movs	r2, #10
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f908 	bl	80068b0 <__multadd>
 80066a0:	4607      	mov	r7, r0
 80066a2:	e7f0      	b.n	8006686 <_dtoa_r+0xb16>
 80066a4:	9b04      	ldr	r3, [sp, #16]
 80066a6:	9301      	str	r3, [sp, #4]
 80066a8:	9d00      	ldr	r5, [sp, #0]
 80066aa:	4631      	mov	r1, r6
 80066ac:	4650      	mov	r0, sl
 80066ae:	f7ff f9d6 	bl	8005a5e <quorem>
 80066b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	f805 9b01 	strb.w	r9, [r5], #1
 80066bc:	1aea      	subs	r2, r5, r3
 80066be:	9b01      	ldr	r3, [sp, #4]
 80066c0:	4293      	cmp	r3, r2
 80066c2:	dd07      	ble.n	80066d4 <_dtoa_r+0xb64>
 80066c4:	4651      	mov	r1, sl
 80066c6:	2300      	movs	r3, #0
 80066c8:	220a      	movs	r2, #10
 80066ca:	4620      	mov	r0, r4
 80066cc:	f000 f8f0 	bl	80068b0 <__multadd>
 80066d0:	4682      	mov	sl, r0
 80066d2:	e7ea      	b.n	80066aa <_dtoa_r+0xb3a>
 80066d4:	9b01      	ldr	r3, [sp, #4]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bfc8      	it	gt
 80066da:	461d      	movgt	r5, r3
 80066dc:	9b00      	ldr	r3, [sp, #0]
 80066de:	bfd8      	it	le
 80066e0:	2501      	movle	r5, #1
 80066e2:	441d      	add	r5, r3
 80066e4:	f04f 0800 	mov.w	r8, #0
 80066e8:	4651      	mov	r1, sl
 80066ea:	2201      	movs	r2, #1
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 fa8d 	bl	8006c0c <__lshift>
 80066f2:	4631      	mov	r1, r6
 80066f4:	4682      	mov	sl, r0
 80066f6:	f000 faf5 	bl	8006ce4 <__mcmp>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	dc96      	bgt.n	800662c <_dtoa_r+0xabc>
 80066fe:	d102      	bne.n	8006706 <_dtoa_r+0xb96>
 8006700:	f019 0f01 	tst.w	r9, #1
 8006704:	d192      	bne.n	800662c <_dtoa_r+0xabc>
 8006706:	462b      	mov	r3, r5
 8006708:	461d      	mov	r5, r3
 800670a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800670e:	2a30      	cmp	r2, #48	; 0x30
 8006710:	d0fa      	beq.n	8006708 <_dtoa_r+0xb98>
 8006712:	e6dd      	b.n	80064d0 <_dtoa_r+0x960>
 8006714:	9a00      	ldr	r2, [sp, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d189      	bne.n	800662e <_dtoa_r+0xabe>
 800671a:	f10b 0b01 	add.w	fp, fp, #1
 800671e:	2331      	movs	r3, #49	; 0x31
 8006720:	e796      	b.n	8006650 <_dtoa_r+0xae0>
 8006722:	4b0a      	ldr	r3, [pc, #40]	; (800674c <_dtoa_r+0xbdc>)
 8006724:	f7ff ba99 	b.w	8005c5a <_dtoa_r+0xea>
 8006728:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800672a:	2b00      	cmp	r3, #0
 800672c:	f47f aa6d 	bne.w	8005c0a <_dtoa_r+0x9a>
 8006730:	4b07      	ldr	r3, [pc, #28]	; (8006750 <_dtoa_r+0xbe0>)
 8006732:	f7ff ba92 	b.w	8005c5a <_dtoa_r+0xea>
 8006736:	9b01      	ldr	r3, [sp, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	dcb5      	bgt.n	80066a8 <_dtoa_r+0xb38>
 800673c:	9b07      	ldr	r3, [sp, #28]
 800673e:	2b02      	cmp	r3, #2
 8006740:	f73f aeb1 	bgt.w	80064a6 <_dtoa_r+0x936>
 8006744:	e7b0      	b.n	80066a8 <_dtoa_r+0xb38>
 8006746:	bf00      	nop
 8006748:	0800c098 	.word	0x0800c098
 800674c:	0800bff8 	.word	0x0800bff8
 8006750:	0800c01c 	.word	0x0800c01c

08006754 <_free_r>:
 8006754:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006756:	2900      	cmp	r1, #0
 8006758:	d044      	beq.n	80067e4 <_free_r+0x90>
 800675a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800675e:	9001      	str	r0, [sp, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	f1a1 0404 	sub.w	r4, r1, #4
 8006766:	bfb8      	it	lt
 8006768:	18e4      	addlt	r4, r4, r3
 800676a:	f7fe fb43 	bl	8004df4 <__malloc_lock>
 800676e:	4a1e      	ldr	r2, [pc, #120]	; (80067e8 <_free_r+0x94>)
 8006770:	9801      	ldr	r0, [sp, #4]
 8006772:	6813      	ldr	r3, [r2, #0]
 8006774:	b933      	cbnz	r3, 8006784 <_free_r+0x30>
 8006776:	6063      	str	r3, [r4, #4]
 8006778:	6014      	str	r4, [r2, #0]
 800677a:	b003      	add	sp, #12
 800677c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006780:	f7fe bb3e 	b.w	8004e00 <__malloc_unlock>
 8006784:	42a3      	cmp	r3, r4
 8006786:	d908      	bls.n	800679a <_free_r+0x46>
 8006788:	6825      	ldr	r5, [r4, #0]
 800678a:	1961      	adds	r1, r4, r5
 800678c:	428b      	cmp	r3, r1
 800678e:	bf01      	itttt	eq
 8006790:	6819      	ldreq	r1, [r3, #0]
 8006792:	685b      	ldreq	r3, [r3, #4]
 8006794:	1949      	addeq	r1, r1, r5
 8006796:	6021      	streq	r1, [r4, #0]
 8006798:	e7ed      	b.n	8006776 <_free_r+0x22>
 800679a:	461a      	mov	r2, r3
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	b10b      	cbz	r3, 80067a4 <_free_r+0x50>
 80067a0:	42a3      	cmp	r3, r4
 80067a2:	d9fa      	bls.n	800679a <_free_r+0x46>
 80067a4:	6811      	ldr	r1, [r2, #0]
 80067a6:	1855      	adds	r5, r2, r1
 80067a8:	42a5      	cmp	r5, r4
 80067aa:	d10b      	bne.n	80067c4 <_free_r+0x70>
 80067ac:	6824      	ldr	r4, [r4, #0]
 80067ae:	4421      	add	r1, r4
 80067b0:	1854      	adds	r4, r2, r1
 80067b2:	42a3      	cmp	r3, r4
 80067b4:	6011      	str	r1, [r2, #0]
 80067b6:	d1e0      	bne.n	800677a <_free_r+0x26>
 80067b8:	681c      	ldr	r4, [r3, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	6053      	str	r3, [r2, #4]
 80067be:	440c      	add	r4, r1
 80067c0:	6014      	str	r4, [r2, #0]
 80067c2:	e7da      	b.n	800677a <_free_r+0x26>
 80067c4:	d902      	bls.n	80067cc <_free_r+0x78>
 80067c6:	230c      	movs	r3, #12
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	e7d6      	b.n	800677a <_free_r+0x26>
 80067cc:	6825      	ldr	r5, [r4, #0]
 80067ce:	1961      	adds	r1, r4, r5
 80067d0:	428b      	cmp	r3, r1
 80067d2:	bf04      	itt	eq
 80067d4:	6819      	ldreq	r1, [r3, #0]
 80067d6:	685b      	ldreq	r3, [r3, #4]
 80067d8:	6063      	str	r3, [r4, #4]
 80067da:	bf04      	itt	eq
 80067dc:	1949      	addeq	r1, r1, r5
 80067de:	6021      	streq	r1, [r4, #0]
 80067e0:	6054      	str	r4, [r2, #4]
 80067e2:	e7ca      	b.n	800677a <_free_r+0x26>
 80067e4:	b003      	add	sp, #12
 80067e6:	bd30      	pop	{r4, r5, pc}
 80067e8:	20000250 	.word	0x20000250

080067ec <_Balloc>:
 80067ec:	b570      	push	{r4, r5, r6, lr}
 80067ee:	69c6      	ldr	r6, [r0, #28]
 80067f0:	4604      	mov	r4, r0
 80067f2:	460d      	mov	r5, r1
 80067f4:	b976      	cbnz	r6, 8006814 <_Balloc+0x28>
 80067f6:	2010      	movs	r0, #16
 80067f8:	f7fe fa54 	bl	8004ca4 <malloc>
 80067fc:	4602      	mov	r2, r0
 80067fe:	61e0      	str	r0, [r4, #28]
 8006800:	b920      	cbnz	r0, 800680c <_Balloc+0x20>
 8006802:	4b18      	ldr	r3, [pc, #96]	; (8006864 <_Balloc+0x78>)
 8006804:	4818      	ldr	r0, [pc, #96]	; (8006868 <_Balloc+0x7c>)
 8006806:	216b      	movs	r1, #107	; 0x6b
 8006808:	f000 fd8c 	bl	8007324 <__assert_func>
 800680c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006810:	6006      	str	r6, [r0, #0]
 8006812:	60c6      	str	r6, [r0, #12]
 8006814:	69e6      	ldr	r6, [r4, #28]
 8006816:	68f3      	ldr	r3, [r6, #12]
 8006818:	b183      	cbz	r3, 800683c <_Balloc+0x50>
 800681a:	69e3      	ldr	r3, [r4, #28]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006822:	b9b8      	cbnz	r0, 8006854 <_Balloc+0x68>
 8006824:	2101      	movs	r1, #1
 8006826:	fa01 f605 	lsl.w	r6, r1, r5
 800682a:	1d72      	adds	r2, r6, #5
 800682c:	0092      	lsls	r2, r2, #2
 800682e:	4620      	mov	r0, r4
 8006830:	f000 fd96 	bl	8007360 <_calloc_r>
 8006834:	b160      	cbz	r0, 8006850 <_Balloc+0x64>
 8006836:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800683a:	e00e      	b.n	800685a <_Balloc+0x6e>
 800683c:	2221      	movs	r2, #33	; 0x21
 800683e:	2104      	movs	r1, #4
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fd8d 	bl	8007360 <_calloc_r>
 8006846:	69e3      	ldr	r3, [r4, #28]
 8006848:	60f0      	str	r0, [r6, #12]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1e4      	bne.n	800681a <_Balloc+0x2e>
 8006850:	2000      	movs	r0, #0
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	6802      	ldr	r2, [r0, #0]
 8006856:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800685a:	2300      	movs	r3, #0
 800685c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006860:	e7f7      	b.n	8006852 <_Balloc+0x66>
 8006862:	bf00      	nop
 8006864:	0800c029 	.word	0x0800c029
 8006868:	0800c0a9 	.word	0x0800c0a9

0800686c <_Bfree>:
 800686c:	b570      	push	{r4, r5, r6, lr}
 800686e:	69c6      	ldr	r6, [r0, #28]
 8006870:	4605      	mov	r5, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b976      	cbnz	r6, 8006894 <_Bfree+0x28>
 8006876:	2010      	movs	r0, #16
 8006878:	f7fe fa14 	bl	8004ca4 <malloc>
 800687c:	4602      	mov	r2, r0
 800687e:	61e8      	str	r0, [r5, #28]
 8006880:	b920      	cbnz	r0, 800688c <_Bfree+0x20>
 8006882:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <_Bfree+0x3c>)
 8006884:	4809      	ldr	r0, [pc, #36]	; (80068ac <_Bfree+0x40>)
 8006886:	218f      	movs	r1, #143	; 0x8f
 8006888:	f000 fd4c 	bl	8007324 <__assert_func>
 800688c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006890:	6006      	str	r6, [r0, #0]
 8006892:	60c6      	str	r6, [r0, #12]
 8006894:	b13c      	cbz	r4, 80068a6 <_Bfree+0x3a>
 8006896:	69eb      	ldr	r3, [r5, #28]
 8006898:	6862      	ldr	r2, [r4, #4]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068a0:	6021      	str	r1, [r4, #0]
 80068a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	0800c029 	.word	0x0800c029
 80068ac:	0800c0a9 	.word	0x0800c0a9

080068b0 <__multadd>:
 80068b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068b4:	690d      	ldr	r5, [r1, #16]
 80068b6:	4607      	mov	r7, r0
 80068b8:	460c      	mov	r4, r1
 80068ba:	461e      	mov	r6, r3
 80068bc:	f101 0c14 	add.w	ip, r1, #20
 80068c0:	2000      	movs	r0, #0
 80068c2:	f8dc 3000 	ldr.w	r3, [ip]
 80068c6:	b299      	uxth	r1, r3
 80068c8:	fb02 6101 	mla	r1, r2, r1, r6
 80068cc:	0c1e      	lsrs	r6, r3, #16
 80068ce:	0c0b      	lsrs	r3, r1, #16
 80068d0:	fb02 3306 	mla	r3, r2, r6, r3
 80068d4:	b289      	uxth	r1, r1
 80068d6:	3001      	adds	r0, #1
 80068d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068dc:	4285      	cmp	r5, r0
 80068de:	f84c 1b04 	str.w	r1, [ip], #4
 80068e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068e6:	dcec      	bgt.n	80068c2 <__multadd+0x12>
 80068e8:	b30e      	cbz	r6, 800692e <__multadd+0x7e>
 80068ea:	68a3      	ldr	r3, [r4, #8]
 80068ec:	42ab      	cmp	r3, r5
 80068ee:	dc19      	bgt.n	8006924 <__multadd+0x74>
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	4638      	mov	r0, r7
 80068f4:	3101      	adds	r1, #1
 80068f6:	f7ff ff79 	bl	80067ec <_Balloc>
 80068fa:	4680      	mov	r8, r0
 80068fc:	b928      	cbnz	r0, 800690a <__multadd+0x5a>
 80068fe:	4602      	mov	r2, r0
 8006900:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <__multadd+0x84>)
 8006902:	480d      	ldr	r0, [pc, #52]	; (8006938 <__multadd+0x88>)
 8006904:	21ba      	movs	r1, #186	; 0xba
 8006906:	f000 fd0d 	bl	8007324 <__assert_func>
 800690a:	6922      	ldr	r2, [r4, #16]
 800690c:	3202      	adds	r2, #2
 800690e:	f104 010c 	add.w	r1, r4, #12
 8006912:	0092      	lsls	r2, r2, #2
 8006914:	300c      	adds	r0, #12
 8006916:	f7ff f894 	bl	8005a42 <memcpy>
 800691a:	4621      	mov	r1, r4
 800691c:	4638      	mov	r0, r7
 800691e:	f7ff ffa5 	bl	800686c <_Bfree>
 8006922:	4644      	mov	r4, r8
 8006924:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006928:	3501      	adds	r5, #1
 800692a:	615e      	str	r6, [r3, #20]
 800692c:	6125      	str	r5, [r4, #16]
 800692e:	4620      	mov	r0, r4
 8006930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006934:	0800c098 	.word	0x0800c098
 8006938:	0800c0a9 	.word	0x0800c0a9

0800693c <__hi0bits>:
 800693c:	0c03      	lsrs	r3, r0, #16
 800693e:	041b      	lsls	r3, r3, #16
 8006940:	b9d3      	cbnz	r3, 8006978 <__hi0bits+0x3c>
 8006942:	0400      	lsls	r0, r0, #16
 8006944:	2310      	movs	r3, #16
 8006946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800694a:	bf04      	itt	eq
 800694c:	0200      	lsleq	r0, r0, #8
 800694e:	3308      	addeq	r3, #8
 8006950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006954:	bf04      	itt	eq
 8006956:	0100      	lsleq	r0, r0, #4
 8006958:	3304      	addeq	r3, #4
 800695a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800695e:	bf04      	itt	eq
 8006960:	0080      	lsleq	r0, r0, #2
 8006962:	3302      	addeq	r3, #2
 8006964:	2800      	cmp	r0, #0
 8006966:	db05      	blt.n	8006974 <__hi0bits+0x38>
 8006968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800696c:	f103 0301 	add.w	r3, r3, #1
 8006970:	bf08      	it	eq
 8006972:	2320      	moveq	r3, #32
 8006974:	4618      	mov	r0, r3
 8006976:	4770      	bx	lr
 8006978:	2300      	movs	r3, #0
 800697a:	e7e4      	b.n	8006946 <__hi0bits+0xa>

0800697c <__lo0bits>:
 800697c:	6803      	ldr	r3, [r0, #0]
 800697e:	f013 0207 	ands.w	r2, r3, #7
 8006982:	d00c      	beq.n	800699e <__lo0bits+0x22>
 8006984:	07d9      	lsls	r1, r3, #31
 8006986:	d422      	bmi.n	80069ce <__lo0bits+0x52>
 8006988:	079a      	lsls	r2, r3, #30
 800698a:	bf49      	itett	mi
 800698c:	085b      	lsrmi	r3, r3, #1
 800698e:	089b      	lsrpl	r3, r3, #2
 8006990:	6003      	strmi	r3, [r0, #0]
 8006992:	2201      	movmi	r2, #1
 8006994:	bf5c      	itt	pl
 8006996:	6003      	strpl	r3, [r0, #0]
 8006998:	2202      	movpl	r2, #2
 800699a:	4610      	mov	r0, r2
 800699c:	4770      	bx	lr
 800699e:	b299      	uxth	r1, r3
 80069a0:	b909      	cbnz	r1, 80069a6 <__lo0bits+0x2a>
 80069a2:	0c1b      	lsrs	r3, r3, #16
 80069a4:	2210      	movs	r2, #16
 80069a6:	b2d9      	uxtb	r1, r3
 80069a8:	b909      	cbnz	r1, 80069ae <__lo0bits+0x32>
 80069aa:	3208      	adds	r2, #8
 80069ac:	0a1b      	lsrs	r3, r3, #8
 80069ae:	0719      	lsls	r1, r3, #28
 80069b0:	bf04      	itt	eq
 80069b2:	091b      	lsreq	r3, r3, #4
 80069b4:	3204      	addeq	r2, #4
 80069b6:	0799      	lsls	r1, r3, #30
 80069b8:	bf04      	itt	eq
 80069ba:	089b      	lsreq	r3, r3, #2
 80069bc:	3202      	addeq	r2, #2
 80069be:	07d9      	lsls	r1, r3, #31
 80069c0:	d403      	bmi.n	80069ca <__lo0bits+0x4e>
 80069c2:	085b      	lsrs	r3, r3, #1
 80069c4:	f102 0201 	add.w	r2, r2, #1
 80069c8:	d003      	beq.n	80069d2 <__lo0bits+0x56>
 80069ca:	6003      	str	r3, [r0, #0]
 80069cc:	e7e5      	b.n	800699a <__lo0bits+0x1e>
 80069ce:	2200      	movs	r2, #0
 80069d0:	e7e3      	b.n	800699a <__lo0bits+0x1e>
 80069d2:	2220      	movs	r2, #32
 80069d4:	e7e1      	b.n	800699a <__lo0bits+0x1e>
	...

080069d8 <__i2b>:
 80069d8:	b510      	push	{r4, lr}
 80069da:	460c      	mov	r4, r1
 80069dc:	2101      	movs	r1, #1
 80069de:	f7ff ff05 	bl	80067ec <_Balloc>
 80069e2:	4602      	mov	r2, r0
 80069e4:	b928      	cbnz	r0, 80069f2 <__i2b+0x1a>
 80069e6:	4b05      	ldr	r3, [pc, #20]	; (80069fc <__i2b+0x24>)
 80069e8:	4805      	ldr	r0, [pc, #20]	; (8006a00 <__i2b+0x28>)
 80069ea:	f240 1145 	movw	r1, #325	; 0x145
 80069ee:	f000 fc99 	bl	8007324 <__assert_func>
 80069f2:	2301      	movs	r3, #1
 80069f4:	6144      	str	r4, [r0, #20]
 80069f6:	6103      	str	r3, [r0, #16]
 80069f8:	bd10      	pop	{r4, pc}
 80069fa:	bf00      	nop
 80069fc:	0800c098 	.word	0x0800c098
 8006a00:	0800c0a9 	.word	0x0800c0a9

08006a04 <__multiply>:
 8006a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a08:	4691      	mov	r9, r2
 8006a0a:	690a      	ldr	r2, [r1, #16]
 8006a0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	bfb8      	it	lt
 8006a14:	460b      	movlt	r3, r1
 8006a16:	460c      	mov	r4, r1
 8006a18:	bfbc      	itt	lt
 8006a1a:	464c      	movlt	r4, r9
 8006a1c:	4699      	movlt	r9, r3
 8006a1e:	6927      	ldr	r7, [r4, #16]
 8006a20:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006a24:	68a3      	ldr	r3, [r4, #8]
 8006a26:	6861      	ldr	r1, [r4, #4]
 8006a28:	eb07 060a 	add.w	r6, r7, sl
 8006a2c:	42b3      	cmp	r3, r6
 8006a2e:	b085      	sub	sp, #20
 8006a30:	bfb8      	it	lt
 8006a32:	3101      	addlt	r1, #1
 8006a34:	f7ff feda 	bl	80067ec <_Balloc>
 8006a38:	b930      	cbnz	r0, 8006a48 <__multiply+0x44>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	4b44      	ldr	r3, [pc, #272]	; (8006b50 <__multiply+0x14c>)
 8006a3e:	4845      	ldr	r0, [pc, #276]	; (8006b54 <__multiply+0x150>)
 8006a40:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006a44:	f000 fc6e 	bl	8007324 <__assert_func>
 8006a48:	f100 0514 	add.w	r5, r0, #20
 8006a4c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a50:	462b      	mov	r3, r5
 8006a52:	2200      	movs	r2, #0
 8006a54:	4543      	cmp	r3, r8
 8006a56:	d321      	bcc.n	8006a9c <__multiply+0x98>
 8006a58:	f104 0314 	add.w	r3, r4, #20
 8006a5c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006a60:	f109 0314 	add.w	r3, r9, #20
 8006a64:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006a68:	9202      	str	r2, [sp, #8]
 8006a6a:	1b3a      	subs	r2, r7, r4
 8006a6c:	3a15      	subs	r2, #21
 8006a6e:	f022 0203 	bic.w	r2, r2, #3
 8006a72:	3204      	adds	r2, #4
 8006a74:	f104 0115 	add.w	r1, r4, #21
 8006a78:	428f      	cmp	r7, r1
 8006a7a:	bf38      	it	cc
 8006a7c:	2204      	movcc	r2, #4
 8006a7e:	9201      	str	r2, [sp, #4]
 8006a80:	9a02      	ldr	r2, [sp, #8]
 8006a82:	9303      	str	r3, [sp, #12]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d80c      	bhi.n	8006aa2 <__multiply+0x9e>
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	dd03      	ble.n	8006a94 <__multiply+0x90>
 8006a8c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05b      	beq.n	8006b4c <__multiply+0x148>
 8006a94:	6106      	str	r6, [r0, #16]
 8006a96:	b005      	add	sp, #20
 8006a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a9c:	f843 2b04 	str.w	r2, [r3], #4
 8006aa0:	e7d8      	b.n	8006a54 <__multiply+0x50>
 8006aa2:	f8b3 a000 	ldrh.w	sl, [r3]
 8006aa6:	f1ba 0f00 	cmp.w	sl, #0
 8006aaa:	d024      	beq.n	8006af6 <__multiply+0xf2>
 8006aac:	f104 0e14 	add.w	lr, r4, #20
 8006ab0:	46a9      	mov	r9, r5
 8006ab2:	f04f 0c00 	mov.w	ip, #0
 8006ab6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006aba:	f8d9 1000 	ldr.w	r1, [r9]
 8006abe:	fa1f fb82 	uxth.w	fp, r2
 8006ac2:	b289      	uxth	r1, r1
 8006ac4:	fb0a 110b 	mla	r1, sl, fp, r1
 8006ac8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006acc:	f8d9 2000 	ldr.w	r2, [r9]
 8006ad0:	4461      	add	r1, ip
 8006ad2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006ad6:	fb0a c20b 	mla	r2, sl, fp, ip
 8006ada:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006ade:	b289      	uxth	r1, r1
 8006ae0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ae4:	4577      	cmp	r7, lr
 8006ae6:	f849 1b04 	str.w	r1, [r9], #4
 8006aea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006aee:	d8e2      	bhi.n	8006ab6 <__multiply+0xb2>
 8006af0:	9a01      	ldr	r2, [sp, #4]
 8006af2:	f845 c002 	str.w	ip, [r5, r2]
 8006af6:	9a03      	ldr	r2, [sp, #12]
 8006af8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006afc:	3304      	adds	r3, #4
 8006afe:	f1b9 0f00 	cmp.w	r9, #0
 8006b02:	d021      	beq.n	8006b48 <__multiply+0x144>
 8006b04:	6829      	ldr	r1, [r5, #0]
 8006b06:	f104 0c14 	add.w	ip, r4, #20
 8006b0a:	46ae      	mov	lr, r5
 8006b0c:	f04f 0a00 	mov.w	sl, #0
 8006b10:	f8bc b000 	ldrh.w	fp, [ip]
 8006b14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b18:	fb09 220b 	mla	r2, r9, fp, r2
 8006b1c:	4452      	add	r2, sl
 8006b1e:	b289      	uxth	r1, r1
 8006b20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b24:	f84e 1b04 	str.w	r1, [lr], #4
 8006b28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b30:	f8be 1000 	ldrh.w	r1, [lr]
 8006b34:	fb09 110a 	mla	r1, r9, sl, r1
 8006b38:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006b3c:	4567      	cmp	r7, ip
 8006b3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006b42:	d8e5      	bhi.n	8006b10 <__multiply+0x10c>
 8006b44:	9a01      	ldr	r2, [sp, #4]
 8006b46:	50a9      	str	r1, [r5, r2]
 8006b48:	3504      	adds	r5, #4
 8006b4a:	e799      	b.n	8006a80 <__multiply+0x7c>
 8006b4c:	3e01      	subs	r6, #1
 8006b4e:	e79b      	b.n	8006a88 <__multiply+0x84>
 8006b50:	0800c098 	.word	0x0800c098
 8006b54:	0800c0a9 	.word	0x0800c0a9

08006b58 <__pow5mult>:
 8006b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b5c:	4615      	mov	r5, r2
 8006b5e:	f012 0203 	ands.w	r2, r2, #3
 8006b62:	4606      	mov	r6, r0
 8006b64:	460f      	mov	r7, r1
 8006b66:	d007      	beq.n	8006b78 <__pow5mult+0x20>
 8006b68:	4c25      	ldr	r4, [pc, #148]	; (8006c00 <__pow5mult+0xa8>)
 8006b6a:	3a01      	subs	r2, #1
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b72:	f7ff fe9d 	bl	80068b0 <__multadd>
 8006b76:	4607      	mov	r7, r0
 8006b78:	10ad      	asrs	r5, r5, #2
 8006b7a:	d03d      	beq.n	8006bf8 <__pow5mult+0xa0>
 8006b7c:	69f4      	ldr	r4, [r6, #28]
 8006b7e:	b97c      	cbnz	r4, 8006ba0 <__pow5mult+0x48>
 8006b80:	2010      	movs	r0, #16
 8006b82:	f7fe f88f 	bl	8004ca4 <malloc>
 8006b86:	4602      	mov	r2, r0
 8006b88:	61f0      	str	r0, [r6, #28]
 8006b8a:	b928      	cbnz	r0, 8006b98 <__pow5mult+0x40>
 8006b8c:	4b1d      	ldr	r3, [pc, #116]	; (8006c04 <__pow5mult+0xac>)
 8006b8e:	481e      	ldr	r0, [pc, #120]	; (8006c08 <__pow5mult+0xb0>)
 8006b90:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006b94:	f000 fbc6 	bl	8007324 <__assert_func>
 8006b98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b9c:	6004      	str	r4, [r0, #0]
 8006b9e:	60c4      	str	r4, [r0, #12]
 8006ba0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006ba4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ba8:	b94c      	cbnz	r4, 8006bbe <__pow5mult+0x66>
 8006baa:	f240 2171 	movw	r1, #625	; 0x271
 8006bae:	4630      	mov	r0, r6
 8006bb0:	f7ff ff12 	bl	80069d8 <__i2b>
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006bba:	4604      	mov	r4, r0
 8006bbc:	6003      	str	r3, [r0, #0]
 8006bbe:	f04f 0900 	mov.w	r9, #0
 8006bc2:	07eb      	lsls	r3, r5, #31
 8006bc4:	d50a      	bpl.n	8006bdc <__pow5mult+0x84>
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4622      	mov	r2, r4
 8006bca:	4630      	mov	r0, r6
 8006bcc:	f7ff ff1a 	bl	8006a04 <__multiply>
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f7ff fe49 	bl	800686c <_Bfree>
 8006bda:	4647      	mov	r7, r8
 8006bdc:	106d      	asrs	r5, r5, #1
 8006bde:	d00b      	beq.n	8006bf8 <__pow5mult+0xa0>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	b938      	cbnz	r0, 8006bf4 <__pow5mult+0x9c>
 8006be4:	4622      	mov	r2, r4
 8006be6:	4621      	mov	r1, r4
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff ff0b 	bl	8006a04 <__multiply>
 8006bee:	6020      	str	r0, [r4, #0]
 8006bf0:	f8c0 9000 	str.w	r9, [r0]
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	e7e4      	b.n	8006bc2 <__pow5mult+0x6a>
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfe:	bf00      	nop
 8006c00:	0800c1f8 	.word	0x0800c1f8
 8006c04:	0800c029 	.word	0x0800c029
 8006c08:	0800c0a9 	.word	0x0800c0a9

08006c0c <__lshift>:
 8006c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c10:	460c      	mov	r4, r1
 8006c12:	6849      	ldr	r1, [r1, #4]
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	4691      	mov	r9, r2
 8006c20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006c24:	f108 0601 	add.w	r6, r8, #1
 8006c28:	42b3      	cmp	r3, r6
 8006c2a:	db0b      	blt.n	8006c44 <__lshift+0x38>
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	f7ff fddd 	bl	80067ec <_Balloc>
 8006c32:	4605      	mov	r5, r0
 8006c34:	b948      	cbnz	r0, 8006c4a <__lshift+0x3e>
 8006c36:	4602      	mov	r2, r0
 8006c38:	4b28      	ldr	r3, [pc, #160]	; (8006cdc <__lshift+0xd0>)
 8006c3a:	4829      	ldr	r0, [pc, #164]	; (8006ce0 <__lshift+0xd4>)
 8006c3c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006c40:	f000 fb70 	bl	8007324 <__assert_func>
 8006c44:	3101      	adds	r1, #1
 8006c46:	005b      	lsls	r3, r3, #1
 8006c48:	e7ee      	b.n	8006c28 <__lshift+0x1c>
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	f100 0114 	add.w	r1, r0, #20
 8006c50:	f100 0210 	add.w	r2, r0, #16
 8006c54:	4618      	mov	r0, r3
 8006c56:	4553      	cmp	r3, sl
 8006c58:	db33      	blt.n	8006cc2 <__lshift+0xb6>
 8006c5a:	6920      	ldr	r0, [r4, #16]
 8006c5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c60:	f104 0314 	add.w	r3, r4, #20
 8006c64:	f019 091f 	ands.w	r9, r9, #31
 8006c68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c70:	d02b      	beq.n	8006cca <__lshift+0xbe>
 8006c72:	f1c9 0e20 	rsb	lr, r9, #32
 8006c76:	468a      	mov	sl, r1
 8006c78:	2200      	movs	r2, #0
 8006c7a:	6818      	ldr	r0, [r3, #0]
 8006c7c:	fa00 f009 	lsl.w	r0, r0, r9
 8006c80:	4310      	orrs	r0, r2
 8006c82:	f84a 0b04 	str.w	r0, [sl], #4
 8006c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c8a:	459c      	cmp	ip, r3
 8006c8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c90:	d8f3      	bhi.n	8006c7a <__lshift+0x6e>
 8006c92:	ebac 0304 	sub.w	r3, ip, r4
 8006c96:	3b15      	subs	r3, #21
 8006c98:	f023 0303 	bic.w	r3, r3, #3
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	f104 0015 	add.w	r0, r4, #21
 8006ca2:	4584      	cmp	ip, r0
 8006ca4:	bf38      	it	cc
 8006ca6:	2304      	movcc	r3, #4
 8006ca8:	50ca      	str	r2, [r1, r3]
 8006caa:	b10a      	cbz	r2, 8006cb0 <__lshift+0xa4>
 8006cac:	f108 0602 	add.w	r6, r8, #2
 8006cb0:	3e01      	subs	r6, #1
 8006cb2:	4638      	mov	r0, r7
 8006cb4:	612e      	str	r6, [r5, #16]
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	f7ff fdd8 	bl	800686c <_Bfree>
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	e7c5      	b.n	8006c56 <__lshift+0x4a>
 8006cca:	3904      	subs	r1, #4
 8006ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cd0:	f841 2f04 	str.w	r2, [r1, #4]!
 8006cd4:	459c      	cmp	ip, r3
 8006cd6:	d8f9      	bhi.n	8006ccc <__lshift+0xc0>
 8006cd8:	e7ea      	b.n	8006cb0 <__lshift+0xa4>
 8006cda:	bf00      	nop
 8006cdc:	0800c098 	.word	0x0800c098
 8006ce0:	0800c0a9 	.word	0x0800c0a9

08006ce4 <__mcmp>:
 8006ce4:	b530      	push	{r4, r5, lr}
 8006ce6:	6902      	ldr	r2, [r0, #16]
 8006ce8:	690c      	ldr	r4, [r1, #16]
 8006cea:	1b12      	subs	r2, r2, r4
 8006cec:	d10e      	bne.n	8006d0c <__mcmp+0x28>
 8006cee:	f100 0314 	add.w	r3, r0, #20
 8006cf2:	3114      	adds	r1, #20
 8006cf4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006cf8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006cfc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d04:	42a5      	cmp	r5, r4
 8006d06:	d003      	beq.n	8006d10 <__mcmp+0x2c>
 8006d08:	d305      	bcc.n	8006d16 <__mcmp+0x32>
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	bd30      	pop	{r4, r5, pc}
 8006d10:	4283      	cmp	r3, r0
 8006d12:	d3f3      	bcc.n	8006cfc <__mcmp+0x18>
 8006d14:	e7fa      	b.n	8006d0c <__mcmp+0x28>
 8006d16:	f04f 32ff 	mov.w	r2, #4294967295
 8006d1a:	e7f7      	b.n	8006d0c <__mcmp+0x28>

08006d1c <__mdiff>:
 8006d1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	460c      	mov	r4, r1
 8006d22:	4606      	mov	r6, r0
 8006d24:	4611      	mov	r1, r2
 8006d26:	4620      	mov	r0, r4
 8006d28:	4690      	mov	r8, r2
 8006d2a:	f7ff ffdb 	bl	8006ce4 <__mcmp>
 8006d2e:	1e05      	subs	r5, r0, #0
 8006d30:	d110      	bne.n	8006d54 <__mdiff+0x38>
 8006d32:	4629      	mov	r1, r5
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff fd59 	bl	80067ec <_Balloc>
 8006d3a:	b930      	cbnz	r0, 8006d4a <__mdiff+0x2e>
 8006d3c:	4b3a      	ldr	r3, [pc, #232]	; (8006e28 <__mdiff+0x10c>)
 8006d3e:	4602      	mov	r2, r0
 8006d40:	f240 2137 	movw	r1, #567	; 0x237
 8006d44:	4839      	ldr	r0, [pc, #228]	; (8006e2c <__mdiff+0x110>)
 8006d46:	f000 faed 	bl	8007324 <__assert_func>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	bfa4      	itt	ge
 8006d56:	4643      	movge	r3, r8
 8006d58:	46a0      	movge	r8, r4
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006d60:	bfa6      	itte	ge
 8006d62:	461c      	movge	r4, r3
 8006d64:	2500      	movge	r5, #0
 8006d66:	2501      	movlt	r5, #1
 8006d68:	f7ff fd40 	bl	80067ec <_Balloc>
 8006d6c:	b920      	cbnz	r0, 8006d78 <__mdiff+0x5c>
 8006d6e:	4b2e      	ldr	r3, [pc, #184]	; (8006e28 <__mdiff+0x10c>)
 8006d70:	4602      	mov	r2, r0
 8006d72:	f240 2145 	movw	r1, #581	; 0x245
 8006d76:	e7e5      	b.n	8006d44 <__mdiff+0x28>
 8006d78:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006d7c:	6926      	ldr	r6, [r4, #16]
 8006d7e:	60c5      	str	r5, [r0, #12]
 8006d80:	f104 0914 	add.w	r9, r4, #20
 8006d84:	f108 0514 	add.w	r5, r8, #20
 8006d88:	f100 0e14 	add.w	lr, r0, #20
 8006d8c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006d90:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006d94:	f108 0210 	add.w	r2, r8, #16
 8006d98:	46f2      	mov	sl, lr
 8006d9a:	2100      	movs	r1, #0
 8006d9c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006da0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006da4:	fa11 f88b 	uxtah	r8, r1, fp
 8006da8:	b299      	uxth	r1, r3
 8006daa:	0c1b      	lsrs	r3, r3, #16
 8006dac:	eba8 0801 	sub.w	r8, r8, r1
 8006db0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006db4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006db8:	fa1f f888 	uxth.w	r8, r8
 8006dbc:	1419      	asrs	r1, r3, #16
 8006dbe:	454e      	cmp	r6, r9
 8006dc0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006dc4:	f84a 3b04 	str.w	r3, [sl], #4
 8006dc8:	d8e8      	bhi.n	8006d9c <__mdiff+0x80>
 8006dca:	1b33      	subs	r3, r6, r4
 8006dcc:	3b15      	subs	r3, #21
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	3304      	adds	r3, #4
 8006dd4:	3415      	adds	r4, #21
 8006dd6:	42a6      	cmp	r6, r4
 8006dd8:	bf38      	it	cc
 8006dda:	2304      	movcc	r3, #4
 8006ddc:	441d      	add	r5, r3
 8006dde:	4473      	add	r3, lr
 8006de0:	469e      	mov	lr, r3
 8006de2:	462e      	mov	r6, r5
 8006de4:	4566      	cmp	r6, ip
 8006de6:	d30e      	bcc.n	8006e06 <__mdiff+0xea>
 8006de8:	f10c 0203 	add.w	r2, ip, #3
 8006dec:	1b52      	subs	r2, r2, r5
 8006dee:	f022 0203 	bic.w	r2, r2, #3
 8006df2:	3d03      	subs	r5, #3
 8006df4:	45ac      	cmp	ip, r5
 8006df6:	bf38      	it	cc
 8006df8:	2200      	movcc	r2, #0
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e00:	b17a      	cbz	r2, 8006e22 <__mdiff+0x106>
 8006e02:	6107      	str	r7, [r0, #16]
 8006e04:	e7a4      	b.n	8006d50 <__mdiff+0x34>
 8006e06:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e0a:	fa11 f288 	uxtah	r2, r1, r8
 8006e0e:	1414      	asrs	r4, r2, #16
 8006e10:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e14:	b292      	uxth	r2, r2
 8006e16:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e1a:	f84e 2b04 	str.w	r2, [lr], #4
 8006e1e:	1421      	asrs	r1, r4, #16
 8006e20:	e7e0      	b.n	8006de4 <__mdiff+0xc8>
 8006e22:	3f01      	subs	r7, #1
 8006e24:	e7ea      	b.n	8006dfc <__mdiff+0xe0>
 8006e26:	bf00      	nop
 8006e28:	0800c098 	.word	0x0800c098
 8006e2c:	0800c0a9 	.word	0x0800c0a9

08006e30 <__d2b>:
 8006e30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	460f      	mov	r7, r1
 8006e36:	2101      	movs	r1, #1
 8006e38:	ec59 8b10 	vmov	r8, r9, d0
 8006e3c:	4616      	mov	r6, r2
 8006e3e:	f7ff fcd5 	bl	80067ec <_Balloc>
 8006e42:	4604      	mov	r4, r0
 8006e44:	b930      	cbnz	r0, 8006e54 <__d2b+0x24>
 8006e46:	4602      	mov	r2, r0
 8006e48:	4b24      	ldr	r3, [pc, #144]	; (8006edc <__d2b+0xac>)
 8006e4a:	4825      	ldr	r0, [pc, #148]	; (8006ee0 <__d2b+0xb0>)
 8006e4c:	f240 310f 	movw	r1, #783	; 0x30f
 8006e50:	f000 fa68 	bl	8007324 <__assert_func>
 8006e54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006e58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006e5c:	bb2d      	cbnz	r5, 8006eaa <__d2b+0x7a>
 8006e5e:	9301      	str	r3, [sp, #4]
 8006e60:	f1b8 0300 	subs.w	r3, r8, #0
 8006e64:	d026      	beq.n	8006eb4 <__d2b+0x84>
 8006e66:	4668      	mov	r0, sp
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	f7ff fd87 	bl	800697c <__lo0bits>
 8006e6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006e72:	b1e8      	cbz	r0, 8006eb0 <__d2b+0x80>
 8006e74:	f1c0 0320 	rsb	r3, r0, #32
 8006e78:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7c:	430b      	orrs	r3, r1
 8006e7e:	40c2      	lsrs	r2, r0
 8006e80:	6163      	str	r3, [r4, #20]
 8006e82:	9201      	str	r2, [sp, #4]
 8006e84:	9b01      	ldr	r3, [sp, #4]
 8006e86:	61a3      	str	r3, [r4, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	bf14      	ite	ne
 8006e8c:	2202      	movne	r2, #2
 8006e8e:	2201      	moveq	r2, #1
 8006e90:	6122      	str	r2, [r4, #16]
 8006e92:	b1bd      	cbz	r5, 8006ec4 <__d2b+0x94>
 8006e94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006e98:	4405      	add	r5, r0
 8006e9a:	603d      	str	r5, [r7, #0]
 8006e9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ea0:	6030      	str	r0, [r6, #0]
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	b003      	add	sp, #12
 8006ea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006eae:	e7d6      	b.n	8006e5e <__d2b+0x2e>
 8006eb0:	6161      	str	r1, [r4, #20]
 8006eb2:	e7e7      	b.n	8006e84 <__d2b+0x54>
 8006eb4:	a801      	add	r0, sp, #4
 8006eb6:	f7ff fd61 	bl	800697c <__lo0bits>
 8006eba:	9b01      	ldr	r3, [sp, #4]
 8006ebc:	6163      	str	r3, [r4, #20]
 8006ebe:	3020      	adds	r0, #32
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	e7e5      	b.n	8006e90 <__d2b+0x60>
 8006ec4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ec8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ecc:	6038      	str	r0, [r7, #0]
 8006ece:	6918      	ldr	r0, [r3, #16]
 8006ed0:	f7ff fd34 	bl	800693c <__hi0bits>
 8006ed4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ed8:	e7e2      	b.n	8006ea0 <__d2b+0x70>
 8006eda:	bf00      	nop
 8006edc:	0800c098 	.word	0x0800c098
 8006ee0:	0800c0a9 	.word	0x0800c0a9

08006ee4 <__ssputs_r>:
 8006ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ee8:	688e      	ldr	r6, [r1, #8]
 8006eea:	461f      	mov	r7, r3
 8006eec:	42be      	cmp	r6, r7
 8006eee:	680b      	ldr	r3, [r1, #0]
 8006ef0:	4682      	mov	sl, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	4690      	mov	r8, r2
 8006ef6:	d82c      	bhi.n	8006f52 <__ssputs_r+0x6e>
 8006ef8:	898a      	ldrh	r2, [r1, #12]
 8006efa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006efe:	d026      	beq.n	8006f4e <__ssputs_r+0x6a>
 8006f00:	6965      	ldr	r5, [r4, #20]
 8006f02:	6909      	ldr	r1, [r1, #16]
 8006f04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f08:	eba3 0901 	sub.w	r9, r3, r1
 8006f0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f10:	1c7b      	adds	r3, r7, #1
 8006f12:	444b      	add	r3, r9
 8006f14:	106d      	asrs	r5, r5, #1
 8006f16:	429d      	cmp	r5, r3
 8006f18:	bf38      	it	cc
 8006f1a:	461d      	movcc	r5, r3
 8006f1c:	0553      	lsls	r3, r2, #21
 8006f1e:	d527      	bpl.n	8006f70 <__ssputs_r+0x8c>
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7fd fee7 	bl	8004cf4 <_malloc_r>
 8006f26:	4606      	mov	r6, r0
 8006f28:	b360      	cbz	r0, 8006f84 <__ssputs_r+0xa0>
 8006f2a:	6921      	ldr	r1, [r4, #16]
 8006f2c:	464a      	mov	r2, r9
 8006f2e:	f7fe fd88 	bl	8005a42 <memcpy>
 8006f32:	89a3      	ldrh	r3, [r4, #12]
 8006f34:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	6126      	str	r6, [r4, #16]
 8006f40:	6165      	str	r5, [r4, #20]
 8006f42:	444e      	add	r6, r9
 8006f44:	eba5 0509 	sub.w	r5, r5, r9
 8006f48:	6026      	str	r6, [r4, #0]
 8006f4a:	60a5      	str	r5, [r4, #8]
 8006f4c:	463e      	mov	r6, r7
 8006f4e:	42be      	cmp	r6, r7
 8006f50:	d900      	bls.n	8006f54 <__ssputs_r+0x70>
 8006f52:	463e      	mov	r6, r7
 8006f54:	6820      	ldr	r0, [r4, #0]
 8006f56:	4632      	mov	r2, r6
 8006f58:	4641      	mov	r1, r8
 8006f5a:	f000 f9c9 	bl	80072f0 <memmove>
 8006f5e:	68a3      	ldr	r3, [r4, #8]
 8006f60:	1b9b      	subs	r3, r3, r6
 8006f62:	60a3      	str	r3, [r4, #8]
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	4433      	add	r3, r6
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	2000      	movs	r0, #0
 8006f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f70:	462a      	mov	r2, r5
 8006f72:	f000 fa1d 	bl	80073b0 <_realloc_r>
 8006f76:	4606      	mov	r6, r0
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d1e0      	bne.n	8006f3e <__ssputs_r+0x5a>
 8006f7c:	6921      	ldr	r1, [r4, #16]
 8006f7e:	4650      	mov	r0, sl
 8006f80:	f7ff fbe8 	bl	8006754 <_free_r>
 8006f84:	230c      	movs	r3, #12
 8006f86:	f8ca 3000 	str.w	r3, [sl]
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f90:	81a3      	strh	r3, [r4, #12]
 8006f92:	f04f 30ff 	mov.w	r0, #4294967295
 8006f96:	e7e9      	b.n	8006f6c <__ssputs_r+0x88>

08006f98 <_svfiprintf_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	4698      	mov	r8, r3
 8006f9e:	898b      	ldrh	r3, [r1, #12]
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	b09d      	sub	sp, #116	; 0x74
 8006fa4:	4607      	mov	r7, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	4614      	mov	r4, r2
 8006faa:	d50e      	bpl.n	8006fca <_svfiprintf_r+0x32>
 8006fac:	690b      	ldr	r3, [r1, #16]
 8006fae:	b963      	cbnz	r3, 8006fca <_svfiprintf_r+0x32>
 8006fb0:	2140      	movs	r1, #64	; 0x40
 8006fb2:	f7fd fe9f 	bl	8004cf4 <_malloc_r>
 8006fb6:	6028      	str	r0, [r5, #0]
 8006fb8:	6128      	str	r0, [r5, #16]
 8006fba:	b920      	cbnz	r0, 8006fc6 <_svfiprintf_r+0x2e>
 8006fbc:	230c      	movs	r3, #12
 8006fbe:	603b      	str	r3, [r7, #0]
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	e0d0      	b.n	8007168 <_svfiprintf_r+0x1d0>
 8006fc6:	2340      	movs	r3, #64	; 0x40
 8006fc8:	616b      	str	r3, [r5, #20]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006fce:	2320      	movs	r3, #32
 8006fd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fd8:	2330      	movs	r3, #48	; 0x30
 8006fda:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007180 <_svfiprintf_r+0x1e8>
 8006fde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fe2:	f04f 0901 	mov.w	r9, #1
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	469a      	mov	sl, r3
 8006fea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006fee:	b10a      	cbz	r2, 8006ff4 <_svfiprintf_r+0x5c>
 8006ff0:	2a25      	cmp	r2, #37	; 0x25
 8006ff2:	d1f9      	bne.n	8006fe8 <_svfiprintf_r+0x50>
 8006ff4:	ebba 0b04 	subs.w	fp, sl, r4
 8006ff8:	d00b      	beq.n	8007012 <_svfiprintf_r+0x7a>
 8006ffa:	465b      	mov	r3, fp
 8006ffc:	4622      	mov	r2, r4
 8006ffe:	4629      	mov	r1, r5
 8007000:	4638      	mov	r0, r7
 8007002:	f7ff ff6f 	bl	8006ee4 <__ssputs_r>
 8007006:	3001      	adds	r0, #1
 8007008:	f000 80a9 	beq.w	800715e <_svfiprintf_r+0x1c6>
 800700c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800700e:	445a      	add	r2, fp
 8007010:	9209      	str	r2, [sp, #36]	; 0x24
 8007012:	f89a 3000 	ldrb.w	r3, [sl]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 80a1 	beq.w	800715e <_svfiprintf_r+0x1c6>
 800701c:	2300      	movs	r3, #0
 800701e:	f04f 32ff 	mov.w	r2, #4294967295
 8007022:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007026:	f10a 0a01 	add.w	sl, sl, #1
 800702a:	9304      	str	r3, [sp, #16]
 800702c:	9307      	str	r3, [sp, #28]
 800702e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007032:	931a      	str	r3, [sp, #104]	; 0x68
 8007034:	4654      	mov	r4, sl
 8007036:	2205      	movs	r2, #5
 8007038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800703c:	4850      	ldr	r0, [pc, #320]	; (8007180 <_svfiprintf_r+0x1e8>)
 800703e:	f7f9 f8cf 	bl	80001e0 <memchr>
 8007042:	9a04      	ldr	r2, [sp, #16]
 8007044:	b9d8      	cbnz	r0, 800707e <_svfiprintf_r+0xe6>
 8007046:	06d0      	lsls	r0, r2, #27
 8007048:	bf44      	itt	mi
 800704a:	2320      	movmi	r3, #32
 800704c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007050:	0711      	lsls	r1, r2, #28
 8007052:	bf44      	itt	mi
 8007054:	232b      	movmi	r3, #43	; 0x2b
 8007056:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800705a:	f89a 3000 	ldrb.w	r3, [sl]
 800705e:	2b2a      	cmp	r3, #42	; 0x2a
 8007060:	d015      	beq.n	800708e <_svfiprintf_r+0xf6>
 8007062:	9a07      	ldr	r2, [sp, #28]
 8007064:	4654      	mov	r4, sl
 8007066:	2000      	movs	r0, #0
 8007068:	f04f 0c0a 	mov.w	ip, #10
 800706c:	4621      	mov	r1, r4
 800706e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007072:	3b30      	subs	r3, #48	; 0x30
 8007074:	2b09      	cmp	r3, #9
 8007076:	d94d      	bls.n	8007114 <_svfiprintf_r+0x17c>
 8007078:	b1b0      	cbz	r0, 80070a8 <_svfiprintf_r+0x110>
 800707a:	9207      	str	r2, [sp, #28]
 800707c:	e014      	b.n	80070a8 <_svfiprintf_r+0x110>
 800707e:	eba0 0308 	sub.w	r3, r0, r8
 8007082:	fa09 f303 	lsl.w	r3, r9, r3
 8007086:	4313      	orrs	r3, r2
 8007088:	9304      	str	r3, [sp, #16]
 800708a:	46a2      	mov	sl, r4
 800708c:	e7d2      	b.n	8007034 <_svfiprintf_r+0x9c>
 800708e:	9b03      	ldr	r3, [sp, #12]
 8007090:	1d19      	adds	r1, r3, #4
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	9103      	str	r1, [sp, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	bfbb      	ittet	lt
 800709a:	425b      	neglt	r3, r3
 800709c:	f042 0202 	orrlt.w	r2, r2, #2
 80070a0:	9307      	strge	r3, [sp, #28]
 80070a2:	9307      	strlt	r3, [sp, #28]
 80070a4:	bfb8      	it	lt
 80070a6:	9204      	strlt	r2, [sp, #16]
 80070a8:	7823      	ldrb	r3, [r4, #0]
 80070aa:	2b2e      	cmp	r3, #46	; 0x2e
 80070ac:	d10c      	bne.n	80070c8 <_svfiprintf_r+0x130>
 80070ae:	7863      	ldrb	r3, [r4, #1]
 80070b0:	2b2a      	cmp	r3, #42	; 0x2a
 80070b2:	d134      	bne.n	800711e <_svfiprintf_r+0x186>
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	1d1a      	adds	r2, r3, #4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	9203      	str	r2, [sp, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	bfb8      	it	lt
 80070c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80070c4:	3402      	adds	r4, #2
 80070c6:	9305      	str	r3, [sp, #20]
 80070c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007190 <_svfiprintf_r+0x1f8>
 80070cc:	7821      	ldrb	r1, [r4, #0]
 80070ce:	2203      	movs	r2, #3
 80070d0:	4650      	mov	r0, sl
 80070d2:	f7f9 f885 	bl	80001e0 <memchr>
 80070d6:	b138      	cbz	r0, 80070e8 <_svfiprintf_r+0x150>
 80070d8:	9b04      	ldr	r3, [sp, #16]
 80070da:	eba0 000a 	sub.w	r0, r0, sl
 80070de:	2240      	movs	r2, #64	; 0x40
 80070e0:	4082      	lsls	r2, r0
 80070e2:	4313      	orrs	r3, r2
 80070e4:	3401      	adds	r4, #1
 80070e6:	9304      	str	r3, [sp, #16]
 80070e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070ec:	4825      	ldr	r0, [pc, #148]	; (8007184 <_svfiprintf_r+0x1ec>)
 80070ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070f2:	2206      	movs	r2, #6
 80070f4:	f7f9 f874 	bl	80001e0 <memchr>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d038      	beq.n	800716e <_svfiprintf_r+0x1d6>
 80070fc:	4b22      	ldr	r3, [pc, #136]	; (8007188 <_svfiprintf_r+0x1f0>)
 80070fe:	bb1b      	cbnz	r3, 8007148 <_svfiprintf_r+0x1b0>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	3307      	adds	r3, #7
 8007104:	f023 0307 	bic.w	r3, r3, #7
 8007108:	3308      	adds	r3, #8
 800710a:	9303      	str	r3, [sp, #12]
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	4433      	add	r3, r6
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	e768      	b.n	8006fe6 <_svfiprintf_r+0x4e>
 8007114:	fb0c 3202 	mla	r2, ip, r2, r3
 8007118:	460c      	mov	r4, r1
 800711a:	2001      	movs	r0, #1
 800711c:	e7a6      	b.n	800706c <_svfiprintf_r+0xd4>
 800711e:	2300      	movs	r3, #0
 8007120:	3401      	adds	r4, #1
 8007122:	9305      	str	r3, [sp, #20]
 8007124:	4619      	mov	r1, r3
 8007126:	f04f 0c0a 	mov.w	ip, #10
 800712a:	4620      	mov	r0, r4
 800712c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007130:	3a30      	subs	r2, #48	; 0x30
 8007132:	2a09      	cmp	r2, #9
 8007134:	d903      	bls.n	800713e <_svfiprintf_r+0x1a6>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0c6      	beq.n	80070c8 <_svfiprintf_r+0x130>
 800713a:	9105      	str	r1, [sp, #20]
 800713c:	e7c4      	b.n	80070c8 <_svfiprintf_r+0x130>
 800713e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007142:	4604      	mov	r4, r0
 8007144:	2301      	movs	r3, #1
 8007146:	e7f0      	b.n	800712a <_svfiprintf_r+0x192>
 8007148:	ab03      	add	r3, sp, #12
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	462a      	mov	r2, r5
 800714e:	4b0f      	ldr	r3, [pc, #60]	; (800718c <_svfiprintf_r+0x1f4>)
 8007150:	a904      	add	r1, sp, #16
 8007152:	4638      	mov	r0, r7
 8007154:	f7fd fefa 	bl	8004f4c <_printf_float>
 8007158:	1c42      	adds	r2, r0, #1
 800715a:	4606      	mov	r6, r0
 800715c:	d1d6      	bne.n	800710c <_svfiprintf_r+0x174>
 800715e:	89ab      	ldrh	r3, [r5, #12]
 8007160:	065b      	lsls	r3, r3, #25
 8007162:	f53f af2d 	bmi.w	8006fc0 <_svfiprintf_r+0x28>
 8007166:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007168:	b01d      	add	sp, #116	; 0x74
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	ab03      	add	r3, sp, #12
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	462a      	mov	r2, r5
 8007174:	4b05      	ldr	r3, [pc, #20]	; (800718c <_svfiprintf_r+0x1f4>)
 8007176:	a904      	add	r1, sp, #16
 8007178:	4638      	mov	r0, r7
 800717a:	f7fe f98b 	bl	8005494 <_printf_i>
 800717e:	e7eb      	b.n	8007158 <_svfiprintf_r+0x1c0>
 8007180:	0800c204 	.word	0x0800c204
 8007184:	0800c20e 	.word	0x0800c20e
 8007188:	08004f4d 	.word	0x08004f4d
 800718c:	08006ee5 	.word	0x08006ee5
 8007190:	0800c20a 	.word	0x0800c20a

08007194 <__sflush_r>:
 8007194:	898a      	ldrh	r2, [r1, #12]
 8007196:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800719a:	4605      	mov	r5, r0
 800719c:	0710      	lsls	r0, r2, #28
 800719e:	460c      	mov	r4, r1
 80071a0:	d458      	bmi.n	8007254 <__sflush_r+0xc0>
 80071a2:	684b      	ldr	r3, [r1, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	dc05      	bgt.n	80071b4 <__sflush_r+0x20>
 80071a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	dc02      	bgt.n	80071b4 <__sflush_r+0x20>
 80071ae:	2000      	movs	r0, #0
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071b6:	2e00      	cmp	r6, #0
 80071b8:	d0f9      	beq.n	80071ae <__sflush_r+0x1a>
 80071ba:	2300      	movs	r3, #0
 80071bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071c0:	682f      	ldr	r7, [r5, #0]
 80071c2:	6a21      	ldr	r1, [r4, #32]
 80071c4:	602b      	str	r3, [r5, #0]
 80071c6:	d032      	beq.n	800722e <__sflush_r+0x9a>
 80071c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	075a      	lsls	r2, r3, #29
 80071ce:	d505      	bpl.n	80071dc <__sflush_r+0x48>
 80071d0:	6863      	ldr	r3, [r4, #4]
 80071d2:	1ac0      	subs	r0, r0, r3
 80071d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071d6:	b10b      	cbz	r3, 80071dc <__sflush_r+0x48>
 80071d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071da:	1ac0      	subs	r0, r0, r3
 80071dc:	2300      	movs	r3, #0
 80071de:	4602      	mov	r2, r0
 80071e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071e2:	6a21      	ldr	r1, [r4, #32]
 80071e4:	4628      	mov	r0, r5
 80071e6:	47b0      	blx	r6
 80071e8:	1c43      	adds	r3, r0, #1
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	d106      	bne.n	80071fc <__sflush_r+0x68>
 80071ee:	6829      	ldr	r1, [r5, #0]
 80071f0:	291d      	cmp	r1, #29
 80071f2:	d82b      	bhi.n	800724c <__sflush_r+0xb8>
 80071f4:	4a29      	ldr	r2, [pc, #164]	; (800729c <__sflush_r+0x108>)
 80071f6:	410a      	asrs	r2, r1
 80071f8:	07d6      	lsls	r6, r2, #31
 80071fa:	d427      	bmi.n	800724c <__sflush_r+0xb8>
 80071fc:	2200      	movs	r2, #0
 80071fe:	6062      	str	r2, [r4, #4]
 8007200:	04d9      	lsls	r1, r3, #19
 8007202:	6922      	ldr	r2, [r4, #16]
 8007204:	6022      	str	r2, [r4, #0]
 8007206:	d504      	bpl.n	8007212 <__sflush_r+0x7e>
 8007208:	1c42      	adds	r2, r0, #1
 800720a:	d101      	bne.n	8007210 <__sflush_r+0x7c>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b903      	cbnz	r3, 8007212 <__sflush_r+0x7e>
 8007210:	6560      	str	r0, [r4, #84]	; 0x54
 8007212:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007214:	602f      	str	r7, [r5, #0]
 8007216:	2900      	cmp	r1, #0
 8007218:	d0c9      	beq.n	80071ae <__sflush_r+0x1a>
 800721a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800721e:	4299      	cmp	r1, r3
 8007220:	d002      	beq.n	8007228 <__sflush_r+0x94>
 8007222:	4628      	mov	r0, r5
 8007224:	f7ff fa96 	bl	8006754 <_free_r>
 8007228:	2000      	movs	r0, #0
 800722a:	6360      	str	r0, [r4, #52]	; 0x34
 800722c:	e7c0      	b.n	80071b0 <__sflush_r+0x1c>
 800722e:	2301      	movs	r3, #1
 8007230:	4628      	mov	r0, r5
 8007232:	47b0      	blx	r6
 8007234:	1c41      	adds	r1, r0, #1
 8007236:	d1c8      	bne.n	80071ca <__sflush_r+0x36>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0c5      	beq.n	80071ca <__sflush_r+0x36>
 800723e:	2b1d      	cmp	r3, #29
 8007240:	d001      	beq.n	8007246 <__sflush_r+0xb2>
 8007242:	2b16      	cmp	r3, #22
 8007244:	d101      	bne.n	800724a <__sflush_r+0xb6>
 8007246:	602f      	str	r7, [r5, #0]
 8007248:	e7b1      	b.n	80071ae <__sflush_r+0x1a>
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	e7ad      	b.n	80071b0 <__sflush_r+0x1c>
 8007254:	690f      	ldr	r7, [r1, #16]
 8007256:	2f00      	cmp	r7, #0
 8007258:	d0a9      	beq.n	80071ae <__sflush_r+0x1a>
 800725a:	0793      	lsls	r3, r2, #30
 800725c:	680e      	ldr	r6, [r1, #0]
 800725e:	bf08      	it	eq
 8007260:	694b      	ldreq	r3, [r1, #20]
 8007262:	600f      	str	r7, [r1, #0]
 8007264:	bf18      	it	ne
 8007266:	2300      	movne	r3, #0
 8007268:	eba6 0807 	sub.w	r8, r6, r7
 800726c:	608b      	str	r3, [r1, #8]
 800726e:	f1b8 0f00 	cmp.w	r8, #0
 8007272:	dd9c      	ble.n	80071ae <__sflush_r+0x1a>
 8007274:	6a21      	ldr	r1, [r4, #32]
 8007276:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007278:	4643      	mov	r3, r8
 800727a:	463a      	mov	r2, r7
 800727c:	4628      	mov	r0, r5
 800727e:	47b0      	blx	r6
 8007280:	2800      	cmp	r0, #0
 8007282:	dc06      	bgt.n	8007292 <__sflush_r+0xfe>
 8007284:	89a3      	ldrh	r3, [r4, #12]
 8007286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	e78e      	b.n	80071b0 <__sflush_r+0x1c>
 8007292:	4407      	add	r7, r0
 8007294:	eba8 0800 	sub.w	r8, r8, r0
 8007298:	e7e9      	b.n	800726e <__sflush_r+0xda>
 800729a:	bf00      	nop
 800729c:	dfbffffe 	.word	0xdfbffffe

080072a0 <_fflush_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	690b      	ldr	r3, [r1, #16]
 80072a4:	4605      	mov	r5, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	b913      	cbnz	r3, 80072b0 <_fflush_r+0x10>
 80072aa:	2500      	movs	r5, #0
 80072ac:	4628      	mov	r0, r5
 80072ae:	bd38      	pop	{r3, r4, r5, pc}
 80072b0:	b118      	cbz	r0, 80072ba <_fflush_r+0x1a>
 80072b2:	6a03      	ldr	r3, [r0, #32]
 80072b4:	b90b      	cbnz	r3, 80072ba <_fflush_r+0x1a>
 80072b6:	f7fe fa9b 	bl	80057f0 <__sinit>
 80072ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d0f3      	beq.n	80072aa <_fflush_r+0xa>
 80072c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072c4:	07d0      	lsls	r0, r2, #31
 80072c6:	d404      	bmi.n	80072d2 <_fflush_r+0x32>
 80072c8:	0599      	lsls	r1, r3, #22
 80072ca:	d402      	bmi.n	80072d2 <_fflush_r+0x32>
 80072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ce:	f7fe fbb6 	bl	8005a3e <__retarget_lock_acquire_recursive>
 80072d2:	4628      	mov	r0, r5
 80072d4:	4621      	mov	r1, r4
 80072d6:	f7ff ff5d 	bl	8007194 <__sflush_r>
 80072da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072dc:	07da      	lsls	r2, r3, #31
 80072de:	4605      	mov	r5, r0
 80072e0:	d4e4      	bmi.n	80072ac <_fflush_r+0xc>
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	059b      	lsls	r3, r3, #22
 80072e6:	d4e1      	bmi.n	80072ac <_fflush_r+0xc>
 80072e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ea:	f7fe fba9 	bl	8005a40 <__retarget_lock_release_recursive>
 80072ee:	e7dd      	b.n	80072ac <_fflush_r+0xc>

080072f0 <memmove>:
 80072f0:	4288      	cmp	r0, r1
 80072f2:	b510      	push	{r4, lr}
 80072f4:	eb01 0402 	add.w	r4, r1, r2
 80072f8:	d902      	bls.n	8007300 <memmove+0x10>
 80072fa:	4284      	cmp	r4, r0
 80072fc:	4623      	mov	r3, r4
 80072fe:	d807      	bhi.n	8007310 <memmove+0x20>
 8007300:	1e43      	subs	r3, r0, #1
 8007302:	42a1      	cmp	r1, r4
 8007304:	d008      	beq.n	8007318 <memmove+0x28>
 8007306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800730a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800730e:	e7f8      	b.n	8007302 <memmove+0x12>
 8007310:	4402      	add	r2, r0
 8007312:	4601      	mov	r1, r0
 8007314:	428a      	cmp	r2, r1
 8007316:	d100      	bne.n	800731a <memmove+0x2a>
 8007318:	bd10      	pop	{r4, pc}
 800731a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800731e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007322:	e7f7      	b.n	8007314 <memmove+0x24>

08007324 <__assert_func>:
 8007324:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007326:	4614      	mov	r4, r2
 8007328:	461a      	mov	r2, r3
 800732a:	4b09      	ldr	r3, [pc, #36]	; (8007350 <__assert_func+0x2c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4605      	mov	r5, r0
 8007330:	68d8      	ldr	r0, [r3, #12]
 8007332:	b14c      	cbz	r4, 8007348 <__assert_func+0x24>
 8007334:	4b07      	ldr	r3, [pc, #28]	; (8007354 <__assert_func+0x30>)
 8007336:	9100      	str	r1, [sp, #0]
 8007338:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800733c:	4906      	ldr	r1, [pc, #24]	; (8007358 <__assert_func+0x34>)
 800733e:	462b      	mov	r3, r5
 8007340:	f000 f872 	bl	8007428 <fiprintf>
 8007344:	f000 f882 	bl	800744c <abort>
 8007348:	4b04      	ldr	r3, [pc, #16]	; (800735c <__assert_func+0x38>)
 800734a:	461c      	mov	r4, r3
 800734c:	e7f3      	b.n	8007336 <__assert_func+0x12>
 800734e:	bf00      	nop
 8007350:	20000064 	.word	0x20000064
 8007354:	0800c21f 	.word	0x0800c21f
 8007358:	0800c22c 	.word	0x0800c22c
 800735c:	0800c25a 	.word	0x0800c25a

08007360 <_calloc_r>:
 8007360:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007362:	fba1 2402 	umull	r2, r4, r1, r2
 8007366:	b94c      	cbnz	r4, 800737c <_calloc_r+0x1c>
 8007368:	4611      	mov	r1, r2
 800736a:	9201      	str	r2, [sp, #4]
 800736c:	f7fd fcc2 	bl	8004cf4 <_malloc_r>
 8007370:	9a01      	ldr	r2, [sp, #4]
 8007372:	4605      	mov	r5, r0
 8007374:	b930      	cbnz	r0, 8007384 <_calloc_r+0x24>
 8007376:	4628      	mov	r0, r5
 8007378:	b003      	add	sp, #12
 800737a:	bd30      	pop	{r4, r5, pc}
 800737c:	220c      	movs	r2, #12
 800737e:	6002      	str	r2, [r0, #0]
 8007380:	2500      	movs	r5, #0
 8007382:	e7f8      	b.n	8007376 <_calloc_r+0x16>
 8007384:	4621      	mov	r1, r4
 8007386:	f7fe facc 	bl	8005922 <memset>
 800738a:	e7f4      	b.n	8007376 <_calloc_r+0x16>

0800738c <__ascii_mbtowc>:
 800738c:	b082      	sub	sp, #8
 800738e:	b901      	cbnz	r1, 8007392 <__ascii_mbtowc+0x6>
 8007390:	a901      	add	r1, sp, #4
 8007392:	b142      	cbz	r2, 80073a6 <__ascii_mbtowc+0x1a>
 8007394:	b14b      	cbz	r3, 80073aa <__ascii_mbtowc+0x1e>
 8007396:	7813      	ldrb	r3, [r2, #0]
 8007398:	600b      	str	r3, [r1, #0]
 800739a:	7812      	ldrb	r2, [r2, #0]
 800739c:	1e10      	subs	r0, r2, #0
 800739e:	bf18      	it	ne
 80073a0:	2001      	movne	r0, #1
 80073a2:	b002      	add	sp, #8
 80073a4:	4770      	bx	lr
 80073a6:	4610      	mov	r0, r2
 80073a8:	e7fb      	b.n	80073a2 <__ascii_mbtowc+0x16>
 80073aa:	f06f 0001 	mvn.w	r0, #1
 80073ae:	e7f8      	b.n	80073a2 <__ascii_mbtowc+0x16>

080073b0 <_realloc_r>:
 80073b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073b4:	4680      	mov	r8, r0
 80073b6:	4614      	mov	r4, r2
 80073b8:	460e      	mov	r6, r1
 80073ba:	b921      	cbnz	r1, 80073c6 <_realloc_r+0x16>
 80073bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073c0:	4611      	mov	r1, r2
 80073c2:	f7fd bc97 	b.w	8004cf4 <_malloc_r>
 80073c6:	b92a      	cbnz	r2, 80073d4 <_realloc_r+0x24>
 80073c8:	f7ff f9c4 	bl	8006754 <_free_r>
 80073cc:	4625      	mov	r5, r4
 80073ce:	4628      	mov	r0, r5
 80073d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d4:	f000 f841 	bl	800745a <_malloc_usable_size_r>
 80073d8:	4284      	cmp	r4, r0
 80073da:	4607      	mov	r7, r0
 80073dc:	d802      	bhi.n	80073e4 <_realloc_r+0x34>
 80073de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80073e2:	d812      	bhi.n	800740a <_realloc_r+0x5a>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4640      	mov	r0, r8
 80073e8:	f7fd fc84 	bl	8004cf4 <_malloc_r>
 80073ec:	4605      	mov	r5, r0
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d0ed      	beq.n	80073ce <_realloc_r+0x1e>
 80073f2:	42bc      	cmp	r4, r7
 80073f4:	4622      	mov	r2, r4
 80073f6:	4631      	mov	r1, r6
 80073f8:	bf28      	it	cs
 80073fa:	463a      	movcs	r2, r7
 80073fc:	f7fe fb21 	bl	8005a42 <memcpy>
 8007400:	4631      	mov	r1, r6
 8007402:	4640      	mov	r0, r8
 8007404:	f7ff f9a6 	bl	8006754 <_free_r>
 8007408:	e7e1      	b.n	80073ce <_realloc_r+0x1e>
 800740a:	4635      	mov	r5, r6
 800740c:	e7df      	b.n	80073ce <_realloc_r+0x1e>

0800740e <__ascii_wctomb>:
 800740e:	b149      	cbz	r1, 8007424 <__ascii_wctomb+0x16>
 8007410:	2aff      	cmp	r2, #255	; 0xff
 8007412:	bf85      	ittet	hi
 8007414:	238a      	movhi	r3, #138	; 0x8a
 8007416:	6003      	strhi	r3, [r0, #0]
 8007418:	700a      	strbls	r2, [r1, #0]
 800741a:	f04f 30ff 	movhi.w	r0, #4294967295
 800741e:	bf98      	it	ls
 8007420:	2001      	movls	r0, #1
 8007422:	4770      	bx	lr
 8007424:	4608      	mov	r0, r1
 8007426:	4770      	bx	lr

08007428 <fiprintf>:
 8007428:	b40e      	push	{r1, r2, r3}
 800742a:	b503      	push	{r0, r1, lr}
 800742c:	4601      	mov	r1, r0
 800742e:	ab03      	add	r3, sp, #12
 8007430:	4805      	ldr	r0, [pc, #20]	; (8007448 <fiprintf+0x20>)
 8007432:	f853 2b04 	ldr.w	r2, [r3], #4
 8007436:	6800      	ldr	r0, [r0, #0]
 8007438:	9301      	str	r3, [sp, #4]
 800743a:	f000 f83f 	bl	80074bc <_vfiprintf_r>
 800743e:	b002      	add	sp, #8
 8007440:	f85d eb04 	ldr.w	lr, [sp], #4
 8007444:	b003      	add	sp, #12
 8007446:	4770      	bx	lr
 8007448:	20000064 	.word	0x20000064

0800744c <abort>:
 800744c:	b508      	push	{r3, lr}
 800744e:	2006      	movs	r0, #6
 8007450:	f000 fa0c 	bl	800786c <raise>
 8007454:	2001      	movs	r0, #1
 8007456:	f7fb fe57 	bl	8003108 <_exit>

0800745a <_malloc_usable_size_r>:
 800745a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800745e:	1f18      	subs	r0, r3, #4
 8007460:	2b00      	cmp	r3, #0
 8007462:	bfbc      	itt	lt
 8007464:	580b      	ldrlt	r3, [r1, r0]
 8007466:	18c0      	addlt	r0, r0, r3
 8007468:	4770      	bx	lr

0800746a <__sfputc_r>:
 800746a:	6893      	ldr	r3, [r2, #8]
 800746c:	3b01      	subs	r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	b410      	push	{r4}
 8007472:	6093      	str	r3, [r2, #8]
 8007474:	da08      	bge.n	8007488 <__sfputc_r+0x1e>
 8007476:	6994      	ldr	r4, [r2, #24]
 8007478:	42a3      	cmp	r3, r4
 800747a:	db01      	blt.n	8007480 <__sfputc_r+0x16>
 800747c:	290a      	cmp	r1, #10
 800747e:	d103      	bne.n	8007488 <__sfputc_r+0x1e>
 8007480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007484:	f000 b934 	b.w	80076f0 <__swbuf_r>
 8007488:	6813      	ldr	r3, [r2, #0]
 800748a:	1c58      	adds	r0, r3, #1
 800748c:	6010      	str	r0, [r2, #0]
 800748e:	7019      	strb	r1, [r3, #0]
 8007490:	4608      	mov	r0, r1
 8007492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007496:	4770      	bx	lr

08007498 <__sfputs_r>:
 8007498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800749a:	4606      	mov	r6, r0
 800749c:	460f      	mov	r7, r1
 800749e:	4614      	mov	r4, r2
 80074a0:	18d5      	adds	r5, r2, r3
 80074a2:	42ac      	cmp	r4, r5
 80074a4:	d101      	bne.n	80074aa <__sfputs_r+0x12>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e007      	b.n	80074ba <__sfputs_r+0x22>
 80074aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ae:	463a      	mov	r2, r7
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7ff ffda 	bl	800746a <__sfputc_r>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	d1f3      	bne.n	80074a2 <__sfputs_r+0xa>
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074bc <_vfiprintf_r>:
 80074bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c0:	460d      	mov	r5, r1
 80074c2:	b09d      	sub	sp, #116	; 0x74
 80074c4:	4614      	mov	r4, r2
 80074c6:	4698      	mov	r8, r3
 80074c8:	4606      	mov	r6, r0
 80074ca:	b118      	cbz	r0, 80074d4 <_vfiprintf_r+0x18>
 80074cc:	6a03      	ldr	r3, [r0, #32]
 80074ce:	b90b      	cbnz	r3, 80074d4 <_vfiprintf_r+0x18>
 80074d0:	f7fe f98e 	bl	80057f0 <__sinit>
 80074d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074d6:	07d9      	lsls	r1, r3, #31
 80074d8:	d405      	bmi.n	80074e6 <_vfiprintf_r+0x2a>
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	059a      	lsls	r2, r3, #22
 80074de:	d402      	bmi.n	80074e6 <_vfiprintf_r+0x2a>
 80074e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074e2:	f7fe faac 	bl	8005a3e <__retarget_lock_acquire_recursive>
 80074e6:	89ab      	ldrh	r3, [r5, #12]
 80074e8:	071b      	lsls	r3, r3, #28
 80074ea:	d501      	bpl.n	80074f0 <_vfiprintf_r+0x34>
 80074ec:	692b      	ldr	r3, [r5, #16]
 80074ee:	b99b      	cbnz	r3, 8007518 <_vfiprintf_r+0x5c>
 80074f0:	4629      	mov	r1, r5
 80074f2:	4630      	mov	r0, r6
 80074f4:	f000 f93a 	bl	800776c <__swsetup_r>
 80074f8:	b170      	cbz	r0, 8007518 <_vfiprintf_r+0x5c>
 80074fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074fc:	07dc      	lsls	r4, r3, #31
 80074fe:	d504      	bpl.n	800750a <_vfiprintf_r+0x4e>
 8007500:	f04f 30ff 	mov.w	r0, #4294967295
 8007504:	b01d      	add	sp, #116	; 0x74
 8007506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800750a:	89ab      	ldrh	r3, [r5, #12]
 800750c:	0598      	lsls	r0, r3, #22
 800750e:	d4f7      	bmi.n	8007500 <_vfiprintf_r+0x44>
 8007510:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007512:	f7fe fa95 	bl	8005a40 <__retarget_lock_release_recursive>
 8007516:	e7f3      	b.n	8007500 <_vfiprintf_r+0x44>
 8007518:	2300      	movs	r3, #0
 800751a:	9309      	str	r3, [sp, #36]	; 0x24
 800751c:	2320      	movs	r3, #32
 800751e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007522:	f8cd 800c 	str.w	r8, [sp, #12]
 8007526:	2330      	movs	r3, #48	; 0x30
 8007528:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80076dc <_vfiprintf_r+0x220>
 800752c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007530:	f04f 0901 	mov.w	r9, #1
 8007534:	4623      	mov	r3, r4
 8007536:	469a      	mov	sl, r3
 8007538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753c:	b10a      	cbz	r2, 8007542 <_vfiprintf_r+0x86>
 800753e:	2a25      	cmp	r2, #37	; 0x25
 8007540:	d1f9      	bne.n	8007536 <_vfiprintf_r+0x7a>
 8007542:	ebba 0b04 	subs.w	fp, sl, r4
 8007546:	d00b      	beq.n	8007560 <_vfiprintf_r+0xa4>
 8007548:	465b      	mov	r3, fp
 800754a:	4622      	mov	r2, r4
 800754c:	4629      	mov	r1, r5
 800754e:	4630      	mov	r0, r6
 8007550:	f7ff ffa2 	bl	8007498 <__sfputs_r>
 8007554:	3001      	adds	r0, #1
 8007556:	f000 80a9 	beq.w	80076ac <_vfiprintf_r+0x1f0>
 800755a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800755c:	445a      	add	r2, fp
 800755e:	9209      	str	r2, [sp, #36]	; 0x24
 8007560:	f89a 3000 	ldrb.w	r3, [sl]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 80a1 	beq.w	80076ac <_vfiprintf_r+0x1f0>
 800756a:	2300      	movs	r3, #0
 800756c:	f04f 32ff 	mov.w	r2, #4294967295
 8007570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007574:	f10a 0a01 	add.w	sl, sl, #1
 8007578:	9304      	str	r3, [sp, #16]
 800757a:	9307      	str	r3, [sp, #28]
 800757c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007580:	931a      	str	r3, [sp, #104]	; 0x68
 8007582:	4654      	mov	r4, sl
 8007584:	2205      	movs	r2, #5
 8007586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758a:	4854      	ldr	r0, [pc, #336]	; (80076dc <_vfiprintf_r+0x220>)
 800758c:	f7f8 fe28 	bl	80001e0 <memchr>
 8007590:	9a04      	ldr	r2, [sp, #16]
 8007592:	b9d8      	cbnz	r0, 80075cc <_vfiprintf_r+0x110>
 8007594:	06d1      	lsls	r1, r2, #27
 8007596:	bf44      	itt	mi
 8007598:	2320      	movmi	r3, #32
 800759a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800759e:	0713      	lsls	r3, r2, #28
 80075a0:	bf44      	itt	mi
 80075a2:	232b      	movmi	r3, #43	; 0x2b
 80075a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075a8:	f89a 3000 	ldrb.w	r3, [sl]
 80075ac:	2b2a      	cmp	r3, #42	; 0x2a
 80075ae:	d015      	beq.n	80075dc <_vfiprintf_r+0x120>
 80075b0:	9a07      	ldr	r2, [sp, #28]
 80075b2:	4654      	mov	r4, sl
 80075b4:	2000      	movs	r0, #0
 80075b6:	f04f 0c0a 	mov.w	ip, #10
 80075ba:	4621      	mov	r1, r4
 80075bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075c0:	3b30      	subs	r3, #48	; 0x30
 80075c2:	2b09      	cmp	r3, #9
 80075c4:	d94d      	bls.n	8007662 <_vfiprintf_r+0x1a6>
 80075c6:	b1b0      	cbz	r0, 80075f6 <_vfiprintf_r+0x13a>
 80075c8:	9207      	str	r2, [sp, #28]
 80075ca:	e014      	b.n	80075f6 <_vfiprintf_r+0x13a>
 80075cc:	eba0 0308 	sub.w	r3, r0, r8
 80075d0:	fa09 f303 	lsl.w	r3, r9, r3
 80075d4:	4313      	orrs	r3, r2
 80075d6:	9304      	str	r3, [sp, #16]
 80075d8:	46a2      	mov	sl, r4
 80075da:	e7d2      	b.n	8007582 <_vfiprintf_r+0xc6>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	1d19      	adds	r1, r3, #4
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	9103      	str	r1, [sp, #12]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	bfbb      	ittet	lt
 80075e8:	425b      	neglt	r3, r3
 80075ea:	f042 0202 	orrlt.w	r2, r2, #2
 80075ee:	9307      	strge	r3, [sp, #28]
 80075f0:	9307      	strlt	r3, [sp, #28]
 80075f2:	bfb8      	it	lt
 80075f4:	9204      	strlt	r2, [sp, #16]
 80075f6:	7823      	ldrb	r3, [r4, #0]
 80075f8:	2b2e      	cmp	r3, #46	; 0x2e
 80075fa:	d10c      	bne.n	8007616 <_vfiprintf_r+0x15a>
 80075fc:	7863      	ldrb	r3, [r4, #1]
 80075fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007600:	d134      	bne.n	800766c <_vfiprintf_r+0x1b0>
 8007602:	9b03      	ldr	r3, [sp, #12]
 8007604:	1d1a      	adds	r2, r3, #4
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	9203      	str	r2, [sp, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	bfb8      	it	lt
 800760e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007612:	3402      	adds	r4, #2
 8007614:	9305      	str	r3, [sp, #20]
 8007616:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80076ec <_vfiprintf_r+0x230>
 800761a:	7821      	ldrb	r1, [r4, #0]
 800761c:	2203      	movs	r2, #3
 800761e:	4650      	mov	r0, sl
 8007620:	f7f8 fdde 	bl	80001e0 <memchr>
 8007624:	b138      	cbz	r0, 8007636 <_vfiprintf_r+0x17a>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	eba0 000a 	sub.w	r0, r0, sl
 800762c:	2240      	movs	r2, #64	; 0x40
 800762e:	4082      	lsls	r2, r0
 8007630:	4313      	orrs	r3, r2
 8007632:	3401      	adds	r4, #1
 8007634:	9304      	str	r3, [sp, #16]
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4829      	ldr	r0, [pc, #164]	; (80076e0 <_vfiprintf_r+0x224>)
 800763c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007640:	2206      	movs	r2, #6
 8007642:	f7f8 fdcd 	bl	80001e0 <memchr>
 8007646:	2800      	cmp	r0, #0
 8007648:	d03f      	beq.n	80076ca <_vfiprintf_r+0x20e>
 800764a:	4b26      	ldr	r3, [pc, #152]	; (80076e4 <_vfiprintf_r+0x228>)
 800764c:	bb1b      	cbnz	r3, 8007696 <_vfiprintf_r+0x1da>
 800764e:	9b03      	ldr	r3, [sp, #12]
 8007650:	3307      	adds	r3, #7
 8007652:	f023 0307 	bic.w	r3, r3, #7
 8007656:	3308      	adds	r3, #8
 8007658:	9303      	str	r3, [sp, #12]
 800765a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800765c:	443b      	add	r3, r7
 800765e:	9309      	str	r3, [sp, #36]	; 0x24
 8007660:	e768      	b.n	8007534 <_vfiprintf_r+0x78>
 8007662:	fb0c 3202 	mla	r2, ip, r2, r3
 8007666:	460c      	mov	r4, r1
 8007668:	2001      	movs	r0, #1
 800766a:	e7a6      	b.n	80075ba <_vfiprintf_r+0xfe>
 800766c:	2300      	movs	r3, #0
 800766e:	3401      	adds	r4, #1
 8007670:	9305      	str	r3, [sp, #20]
 8007672:	4619      	mov	r1, r3
 8007674:	f04f 0c0a 	mov.w	ip, #10
 8007678:	4620      	mov	r0, r4
 800767a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800767e:	3a30      	subs	r2, #48	; 0x30
 8007680:	2a09      	cmp	r2, #9
 8007682:	d903      	bls.n	800768c <_vfiprintf_r+0x1d0>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d0c6      	beq.n	8007616 <_vfiprintf_r+0x15a>
 8007688:	9105      	str	r1, [sp, #20]
 800768a:	e7c4      	b.n	8007616 <_vfiprintf_r+0x15a>
 800768c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007690:	4604      	mov	r4, r0
 8007692:	2301      	movs	r3, #1
 8007694:	e7f0      	b.n	8007678 <_vfiprintf_r+0x1bc>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <_vfiprintf_r+0x22c>)
 800769e:	a904      	add	r1, sp, #16
 80076a0:	4630      	mov	r0, r6
 80076a2:	f7fd fc53 	bl	8004f4c <_printf_float>
 80076a6:	4607      	mov	r7, r0
 80076a8:	1c78      	adds	r0, r7, #1
 80076aa:	d1d6      	bne.n	800765a <_vfiprintf_r+0x19e>
 80076ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076ae:	07d9      	lsls	r1, r3, #31
 80076b0:	d405      	bmi.n	80076be <_vfiprintf_r+0x202>
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	059a      	lsls	r2, r3, #22
 80076b6:	d402      	bmi.n	80076be <_vfiprintf_r+0x202>
 80076b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ba:	f7fe f9c1 	bl	8005a40 <__retarget_lock_release_recursive>
 80076be:	89ab      	ldrh	r3, [r5, #12]
 80076c0:	065b      	lsls	r3, r3, #25
 80076c2:	f53f af1d 	bmi.w	8007500 <_vfiprintf_r+0x44>
 80076c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076c8:	e71c      	b.n	8007504 <_vfiprintf_r+0x48>
 80076ca:	ab03      	add	r3, sp, #12
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	462a      	mov	r2, r5
 80076d0:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <_vfiprintf_r+0x22c>)
 80076d2:	a904      	add	r1, sp, #16
 80076d4:	4630      	mov	r0, r6
 80076d6:	f7fd fedd 	bl	8005494 <_printf_i>
 80076da:	e7e4      	b.n	80076a6 <_vfiprintf_r+0x1ea>
 80076dc:	0800c204 	.word	0x0800c204
 80076e0:	0800c20e 	.word	0x0800c20e
 80076e4:	08004f4d 	.word	0x08004f4d
 80076e8:	08007499 	.word	0x08007499
 80076ec:	0800c20a 	.word	0x0800c20a

080076f0 <__swbuf_r>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	460e      	mov	r6, r1
 80076f4:	4614      	mov	r4, r2
 80076f6:	4605      	mov	r5, r0
 80076f8:	b118      	cbz	r0, 8007702 <__swbuf_r+0x12>
 80076fa:	6a03      	ldr	r3, [r0, #32]
 80076fc:	b90b      	cbnz	r3, 8007702 <__swbuf_r+0x12>
 80076fe:	f7fe f877 	bl	80057f0 <__sinit>
 8007702:	69a3      	ldr	r3, [r4, #24]
 8007704:	60a3      	str	r3, [r4, #8]
 8007706:	89a3      	ldrh	r3, [r4, #12]
 8007708:	071a      	lsls	r2, r3, #28
 800770a:	d525      	bpl.n	8007758 <__swbuf_r+0x68>
 800770c:	6923      	ldr	r3, [r4, #16]
 800770e:	b31b      	cbz	r3, 8007758 <__swbuf_r+0x68>
 8007710:	6823      	ldr	r3, [r4, #0]
 8007712:	6922      	ldr	r2, [r4, #16]
 8007714:	1a98      	subs	r0, r3, r2
 8007716:	6963      	ldr	r3, [r4, #20]
 8007718:	b2f6      	uxtb	r6, r6
 800771a:	4283      	cmp	r3, r0
 800771c:	4637      	mov	r7, r6
 800771e:	dc04      	bgt.n	800772a <__swbuf_r+0x3a>
 8007720:	4621      	mov	r1, r4
 8007722:	4628      	mov	r0, r5
 8007724:	f7ff fdbc 	bl	80072a0 <_fflush_r>
 8007728:	b9e0      	cbnz	r0, 8007764 <__swbuf_r+0x74>
 800772a:	68a3      	ldr	r3, [r4, #8]
 800772c:	3b01      	subs	r3, #1
 800772e:	60a3      	str	r3, [r4, #8]
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	6022      	str	r2, [r4, #0]
 8007736:	701e      	strb	r6, [r3, #0]
 8007738:	6962      	ldr	r2, [r4, #20]
 800773a:	1c43      	adds	r3, r0, #1
 800773c:	429a      	cmp	r2, r3
 800773e:	d004      	beq.n	800774a <__swbuf_r+0x5a>
 8007740:	89a3      	ldrh	r3, [r4, #12]
 8007742:	07db      	lsls	r3, r3, #31
 8007744:	d506      	bpl.n	8007754 <__swbuf_r+0x64>
 8007746:	2e0a      	cmp	r6, #10
 8007748:	d104      	bne.n	8007754 <__swbuf_r+0x64>
 800774a:	4621      	mov	r1, r4
 800774c:	4628      	mov	r0, r5
 800774e:	f7ff fda7 	bl	80072a0 <_fflush_r>
 8007752:	b938      	cbnz	r0, 8007764 <__swbuf_r+0x74>
 8007754:	4638      	mov	r0, r7
 8007756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007758:	4621      	mov	r1, r4
 800775a:	4628      	mov	r0, r5
 800775c:	f000 f806 	bl	800776c <__swsetup_r>
 8007760:	2800      	cmp	r0, #0
 8007762:	d0d5      	beq.n	8007710 <__swbuf_r+0x20>
 8007764:	f04f 37ff 	mov.w	r7, #4294967295
 8007768:	e7f4      	b.n	8007754 <__swbuf_r+0x64>
	...

0800776c <__swsetup_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	4b2a      	ldr	r3, [pc, #168]	; (8007818 <__swsetup_r+0xac>)
 8007770:	4605      	mov	r5, r0
 8007772:	6818      	ldr	r0, [r3, #0]
 8007774:	460c      	mov	r4, r1
 8007776:	b118      	cbz	r0, 8007780 <__swsetup_r+0x14>
 8007778:	6a03      	ldr	r3, [r0, #32]
 800777a:	b90b      	cbnz	r3, 8007780 <__swsetup_r+0x14>
 800777c:	f7fe f838 	bl	80057f0 <__sinit>
 8007780:	89a3      	ldrh	r3, [r4, #12]
 8007782:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007786:	0718      	lsls	r0, r3, #28
 8007788:	d422      	bmi.n	80077d0 <__swsetup_r+0x64>
 800778a:	06d9      	lsls	r1, r3, #27
 800778c:	d407      	bmi.n	800779e <__swsetup_r+0x32>
 800778e:	2309      	movs	r3, #9
 8007790:	602b      	str	r3, [r5, #0]
 8007792:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007796:	81a3      	strh	r3, [r4, #12]
 8007798:	f04f 30ff 	mov.w	r0, #4294967295
 800779c:	e034      	b.n	8007808 <__swsetup_r+0x9c>
 800779e:	0758      	lsls	r0, r3, #29
 80077a0:	d512      	bpl.n	80077c8 <__swsetup_r+0x5c>
 80077a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80077a4:	b141      	cbz	r1, 80077b8 <__swsetup_r+0x4c>
 80077a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80077aa:	4299      	cmp	r1, r3
 80077ac:	d002      	beq.n	80077b4 <__swsetup_r+0x48>
 80077ae:	4628      	mov	r0, r5
 80077b0:	f7fe ffd0 	bl	8006754 <_free_r>
 80077b4:	2300      	movs	r3, #0
 80077b6:	6363      	str	r3, [r4, #52]	; 0x34
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	2300      	movs	r3, #0
 80077c2:	6063      	str	r3, [r4, #4]
 80077c4:	6923      	ldr	r3, [r4, #16]
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	89a3      	ldrh	r3, [r4, #12]
 80077ca:	f043 0308 	orr.w	r3, r3, #8
 80077ce:	81a3      	strh	r3, [r4, #12]
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	b94b      	cbnz	r3, 80077e8 <__swsetup_r+0x7c>
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80077da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077de:	d003      	beq.n	80077e8 <__swsetup_r+0x7c>
 80077e0:	4621      	mov	r1, r4
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 f884 	bl	80078f0 <__smakebuf_r>
 80077e8:	89a0      	ldrh	r0, [r4, #12]
 80077ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80077ee:	f010 0301 	ands.w	r3, r0, #1
 80077f2:	d00a      	beq.n	800780a <__swsetup_r+0x9e>
 80077f4:	2300      	movs	r3, #0
 80077f6:	60a3      	str	r3, [r4, #8]
 80077f8:	6963      	ldr	r3, [r4, #20]
 80077fa:	425b      	negs	r3, r3
 80077fc:	61a3      	str	r3, [r4, #24]
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	b943      	cbnz	r3, 8007814 <__swsetup_r+0xa8>
 8007802:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007806:	d1c4      	bne.n	8007792 <__swsetup_r+0x26>
 8007808:	bd38      	pop	{r3, r4, r5, pc}
 800780a:	0781      	lsls	r1, r0, #30
 800780c:	bf58      	it	pl
 800780e:	6963      	ldrpl	r3, [r4, #20]
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	e7f4      	b.n	80077fe <__swsetup_r+0x92>
 8007814:	2000      	movs	r0, #0
 8007816:	e7f7      	b.n	8007808 <__swsetup_r+0x9c>
 8007818:	20000064 	.word	0x20000064

0800781c <_raise_r>:
 800781c:	291f      	cmp	r1, #31
 800781e:	b538      	push	{r3, r4, r5, lr}
 8007820:	4604      	mov	r4, r0
 8007822:	460d      	mov	r5, r1
 8007824:	d904      	bls.n	8007830 <_raise_r+0x14>
 8007826:	2316      	movs	r3, #22
 8007828:	6003      	str	r3, [r0, #0]
 800782a:	f04f 30ff 	mov.w	r0, #4294967295
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007832:	b112      	cbz	r2, 800783a <_raise_r+0x1e>
 8007834:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007838:	b94b      	cbnz	r3, 800784e <_raise_r+0x32>
 800783a:	4620      	mov	r0, r4
 800783c:	f000 f830 	bl	80078a0 <_getpid_r>
 8007840:	462a      	mov	r2, r5
 8007842:	4601      	mov	r1, r0
 8007844:	4620      	mov	r0, r4
 8007846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800784a:	f000 b817 	b.w	800787c <_kill_r>
 800784e:	2b01      	cmp	r3, #1
 8007850:	d00a      	beq.n	8007868 <_raise_r+0x4c>
 8007852:	1c59      	adds	r1, r3, #1
 8007854:	d103      	bne.n	800785e <_raise_r+0x42>
 8007856:	2316      	movs	r3, #22
 8007858:	6003      	str	r3, [r0, #0]
 800785a:	2001      	movs	r0, #1
 800785c:	e7e7      	b.n	800782e <_raise_r+0x12>
 800785e:	2400      	movs	r4, #0
 8007860:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007864:	4628      	mov	r0, r5
 8007866:	4798      	blx	r3
 8007868:	2000      	movs	r0, #0
 800786a:	e7e0      	b.n	800782e <_raise_r+0x12>

0800786c <raise>:
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <raise+0xc>)
 800786e:	4601      	mov	r1, r0
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f7ff bfd3 	b.w	800781c <_raise_r>
 8007876:	bf00      	nop
 8007878:	20000064 	.word	0x20000064

0800787c <_kill_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d07      	ldr	r5, [pc, #28]	; (800789c <_kill_r+0x20>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	4611      	mov	r1, r2
 8007888:	602b      	str	r3, [r5, #0]
 800788a:	f7fb fc2d 	bl	80030e8 <_kill>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d102      	bne.n	8007898 <_kill_r+0x1c>
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	b103      	cbz	r3, 8007898 <_kill_r+0x1c>
 8007896:	6023      	str	r3, [r4, #0]
 8007898:	bd38      	pop	{r3, r4, r5, pc}
 800789a:	bf00      	nop
 800789c:	20000394 	.word	0x20000394

080078a0 <_getpid_r>:
 80078a0:	f7fb bc1a 	b.w	80030d8 <_getpid>

080078a4 <__swhatbuf_r>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	460c      	mov	r4, r1
 80078a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ac:	2900      	cmp	r1, #0
 80078ae:	b096      	sub	sp, #88	; 0x58
 80078b0:	4615      	mov	r5, r2
 80078b2:	461e      	mov	r6, r3
 80078b4:	da0d      	bge.n	80078d2 <__swhatbuf_r+0x2e>
 80078b6:	89a3      	ldrh	r3, [r4, #12]
 80078b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80078bc:	f04f 0100 	mov.w	r1, #0
 80078c0:	bf0c      	ite	eq
 80078c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80078c6:	2340      	movne	r3, #64	; 0x40
 80078c8:	2000      	movs	r0, #0
 80078ca:	6031      	str	r1, [r6, #0]
 80078cc:	602b      	str	r3, [r5, #0]
 80078ce:	b016      	add	sp, #88	; 0x58
 80078d0:	bd70      	pop	{r4, r5, r6, pc}
 80078d2:	466a      	mov	r2, sp
 80078d4:	f000 f848 	bl	8007968 <_fstat_r>
 80078d8:	2800      	cmp	r0, #0
 80078da:	dbec      	blt.n	80078b6 <__swhatbuf_r+0x12>
 80078dc:	9901      	ldr	r1, [sp, #4]
 80078de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80078e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80078e6:	4259      	negs	r1, r3
 80078e8:	4159      	adcs	r1, r3
 80078ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078ee:	e7eb      	b.n	80078c8 <__swhatbuf_r+0x24>

080078f0 <__smakebuf_r>:
 80078f0:	898b      	ldrh	r3, [r1, #12]
 80078f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078f4:	079d      	lsls	r5, r3, #30
 80078f6:	4606      	mov	r6, r0
 80078f8:	460c      	mov	r4, r1
 80078fa:	d507      	bpl.n	800790c <__smakebuf_r+0x1c>
 80078fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	6123      	str	r3, [r4, #16]
 8007904:	2301      	movs	r3, #1
 8007906:	6163      	str	r3, [r4, #20]
 8007908:	b002      	add	sp, #8
 800790a:	bd70      	pop	{r4, r5, r6, pc}
 800790c:	ab01      	add	r3, sp, #4
 800790e:	466a      	mov	r2, sp
 8007910:	f7ff ffc8 	bl	80078a4 <__swhatbuf_r>
 8007914:	9900      	ldr	r1, [sp, #0]
 8007916:	4605      	mov	r5, r0
 8007918:	4630      	mov	r0, r6
 800791a:	f7fd f9eb 	bl	8004cf4 <_malloc_r>
 800791e:	b948      	cbnz	r0, 8007934 <__smakebuf_r+0x44>
 8007920:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007924:	059a      	lsls	r2, r3, #22
 8007926:	d4ef      	bmi.n	8007908 <__smakebuf_r+0x18>
 8007928:	f023 0303 	bic.w	r3, r3, #3
 800792c:	f043 0302 	orr.w	r3, r3, #2
 8007930:	81a3      	strh	r3, [r4, #12]
 8007932:	e7e3      	b.n	80078fc <__smakebuf_r+0xc>
 8007934:	89a3      	ldrh	r3, [r4, #12]
 8007936:	6020      	str	r0, [r4, #0]
 8007938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800793c:	81a3      	strh	r3, [r4, #12]
 800793e:	9b00      	ldr	r3, [sp, #0]
 8007940:	6163      	str	r3, [r4, #20]
 8007942:	9b01      	ldr	r3, [sp, #4]
 8007944:	6120      	str	r0, [r4, #16]
 8007946:	b15b      	cbz	r3, 8007960 <__smakebuf_r+0x70>
 8007948:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800794c:	4630      	mov	r0, r6
 800794e:	f000 f81d 	bl	800798c <_isatty_r>
 8007952:	b128      	cbz	r0, 8007960 <__smakebuf_r+0x70>
 8007954:	89a3      	ldrh	r3, [r4, #12]
 8007956:	f023 0303 	bic.w	r3, r3, #3
 800795a:	f043 0301 	orr.w	r3, r3, #1
 800795e:	81a3      	strh	r3, [r4, #12]
 8007960:	89a3      	ldrh	r3, [r4, #12]
 8007962:	431d      	orrs	r5, r3
 8007964:	81a5      	strh	r5, [r4, #12]
 8007966:	e7cf      	b.n	8007908 <__smakebuf_r+0x18>

08007968 <_fstat_r>:
 8007968:	b538      	push	{r3, r4, r5, lr}
 800796a:	4d07      	ldr	r5, [pc, #28]	; (8007988 <_fstat_r+0x20>)
 800796c:	2300      	movs	r3, #0
 800796e:	4604      	mov	r4, r0
 8007970:	4608      	mov	r0, r1
 8007972:	4611      	mov	r1, r2
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	f7fb fc16 	bl	80031a6 <_fstat>
 800797a:	1c43      	adds	r3, r0, #1
 800797c:	d102      	bne.n	8007984 <_fstat_r+0x1c>
 800797e:	682b      	ldr	r3, [r5, #0]
 8007980:	b103      	cbz	r3, 8007984 <_fstat_r+0x1c>
 8007982:	6023      	str	r3, [r4, #0]
 8007984:	bd38      	pop	{r3, r4, r5, pc}
 8007986:	bf00      	nop
 8007988:	20000394 	.word	0x20000394

0800798c <_isatty_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	; (80079a8 <_isatty_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7fb fc15 	bl	80031c6 <_isatty>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_isatty_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_isatty_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	20000394 	.word	0x20000394

080079ac <_init>:
 80079ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ae:	bf00      	nop
 80079b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b2:	bc08      	pop	{r3}
 80079b4:	469e      	mov	lr, r3
 80079b6:	4770      	bx	lr

080079b8 <_fini>:
 80079b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ba:	bf00      	nop
 80079bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079be:	bc08      	pop	{r3}
 80079c0:	469e      	mov	lr, r3
 80079c2:	4770      	bx	lr
