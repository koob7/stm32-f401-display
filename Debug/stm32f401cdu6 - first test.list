
stm32f401cdu6 - first test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012690  080078b0  080078b0  000178b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f40  08019f40  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08019f40  08019f40  00029f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f48  08019f48  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019f48  08019f48  00029f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f4c  08019f4c  00029f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08019f50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001d8  0801a128  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0801a128  00030354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005c8c  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000157b  00000000  00000000  00035ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00037458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000046e  00000000  00000000  00037a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169c5  00000000  00000000  00037ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007ad8  00000000  00000000  0004e8a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000862f5  00000000  00000000  0005637b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aa0  00000000  00000000  000dc670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000df110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007898 	.word	0x08007898

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007898 	.word	0x08007898

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <tft_write_bus>:
GPIO_TypeDef* PORT_NAME_ARR[]={D0_PORT,D1_PORT,D2_PORT,D3_PORT,D4_PORT,D5_PORT,D6_PORT,D7_PORT,D8_PORT,D9_PORT,D10_PORT,D11_PORT,D12_PORT,D13_PORT,D14_PORT,D15_PORT};
uint16_t      PIN_NAME_ARR[]={D0_PIN,D1_PIN,D2_PIN,D3_PIN,D4_PIN,D5_PIN,D6_PIN,D7_PIN,D8_PIN,D9_PIN,D10_PIN,D11_PIN,D12_PIN,D13_PIN,D14_PIN,D15_PIN};


void tft_write_bus(uint8_t high_byte,uint8_t low_byte)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
    else
    {
      pin_low(PORT_NAME_ARR[i],PIN_NAME_ARR[i]);
    }
  }*/
	PORTA->ODR = (PORTA->ODR & 0xffffff00) | low_byte;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <tft_write_bus+0x54>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <tft_write_bus+0x54>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	614b      	str	r3, [r1, #20]
	PORTB->ODR = (PORTB->ODR & 0xffffff00) | high_byte;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <tft_write_bus+0x58>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	490b      	ldr	r1, [pc, #44]	; (8000fac <tft_write_bus+0x58>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	614b      	str	r3, [r1, #20]
  asm("nop");
 8000f84:	bf00      	nop
  pin_low(WR_PORT,WR_PIN);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <tft_write_bus+0x58>)
 8000f8e:	f002 f929 	bl	80031e4 <HAL_GPIO_WritePin>
  pin_high(WR_PORT,WR_PIN);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <tft_write_bus+0x58>)
 8000f9a:	f002 f923 	bl	80031e4 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400

08000fb0 <Lcd_Write_Data>:
{
	pin_high(RS_PORT,RS_PIN);
	tft_write_bus(high_byte,low_byte);
}
void Lcd_Write_Data(uint16_t data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  pin_high(RS_PORT,RS_PIN);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <Lcd_Write_Data+0x34>)
 8000fc2:	f002 f90f 	bl	80031e4 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffbd 	bl	8000f54 <tft_write_bus>
//    tft_write_bus(data>>8,data&0x00ff);
//    		WRN;
//    		WR;
//    		CS;

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <Lcd_Write_Cmd+0x34>)
 8000ffa:	f002 f8f3 	bl	80031e4 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffa1 	bl	8000f54 <tft_write_bus>
//	RSN;
//	tft_write_bus(data>>8,data&0x00ff);
//    WRN;
//    		WR;
//    		CS;
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000

08001020 <Lcd_SetArea>:
//{
//   *(uint16_t *) (LCD_DATA)= data;
//}
///////////////////
void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4623      	mov	r3, r4
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	4603      	mov	r3, r0
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 800103e:	202a      	movs	r0, #42	; 0x2a
 8001040:	f7ff ffd2 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffb0 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffaa 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffa4 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff9e 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 8001074:	202b      	movs	r0, #43	; 0x2b
 8001076:	f7ff ffb7 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff95 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff8f 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff89 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 800109e:	883b      	ldrh	r3, [r7, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff83 	bl	8000fb0 <Lcd_Write_Data>
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
	...

080010b4 <LCD_Write_DATA>:
Lcd_Write_Data(color);
Lcd_Write_Cmd(0x0);
}

void LCD_Write_DATA(uint16_t data)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	4603      	mov	r3, r0
 80010bc:	80fb      	strh	r3, [r7, #6]
  pin_high(RS_PORT,RS_PIN);
 80010be:	2201      	movs	r2, #1
 80010c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <LCD_Write_DATA+0x34>)
 80010c6:	f002 f88d 	bl	80031e4 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	88fa      	ldrh	r2, [r7, #6]
 80010d4:	b2d2      	uxtb	r2, r2
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff3b 	bl	8000f54 <tft_write_bus>
//    tft_write_bus(data>>8,data&0x00ff);
//    		WRN;
//    		WR;
//    		CS;

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40020000 	.word	0x40020000

080010ec <LCD_Write_COM>:

void LCD_Write_COM(uint16_t data)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fc:	4808      	ldr	r0, [pc, #32]	; (8001120 <LCD_Write_COM+0x34>)
 80010fe:	f002 f871 	bl	80031e4 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8001102:	88fb      	ldrh	r3, [r7, #6]
 8001104:	0a1b      	lsrs	r3, r3, #8
 8001106:	b29b      	uxth	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	88fa      	ldrh	r2, [r7, #6]
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff1f 	bl	8000f54 <tft_write_bus>
//	RSN;
//	tft_write_bus(data>>8,data&0x00ff);
//    WRN;
//    		WR;
//    		CS;
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40020000 	.word	0x40020000

08001124 <Init_SSD1963>:


void Init_SSD1963(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
//
			pin_high(CS_PORT,CS_PIN);
 8001128:	2201      	movs	r2, #1
 800112a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800112e:	4875      	ldr	r0, [pc, #468]	; (8001304 <Init_SSD1963+0x1e0>)
 8001130:	f002 f858 	bl	80031e4 <HAL_GPIO_WritePin>
			pin_high(RD_PORT,RD_PIN);
 8001134:	2201      	movs	r2, #1
 8001136:	f44f 7100 	mov.w	r1, #512	; 0x200
 800113a:	4873      	ldr	r0, [pc, #460]	; (8001308 <Init_SSD1963+0x1e4>)
 800113c:	f002 f852 	bl	80031e4 <HAL_GPIO_WritePin>
			pin_high(WR_PORT,WR_PIN);
 8001140:	2201      	movs	r2, #1
 8001142:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001146:	4870      	ldr	r0, [pc, #448]	; (8001308 <Init_SSD1963+0x1e4>)
 8001148:	f002 f84c 	bl	80031e4 <HAL_GPIO_WritePin>
			pin_low(REST_PORT,REST_PIN);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	486c      	ldr	r0, [pc, #432]	; (8001304 <Init_SSD1963+0x1e0>)
 8001154:	f002 f846 	bl	80031e4 <HAL_GPIO_WritePin>

			HAL_Delay(20);
 8001158:	2014      	movs	r0, #20
 800115a:	f001 fdb5 	bl	8002cc8 <HAL_Delay>
			pin_high(REST_PORT,REST_PIN);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001164:	4867      	ldr	r0, [pc, #412]	; (8001304 <Init_SSD1963+0x1e0>)
 8001166:	f002 f83d 	bl	80031e4 <HAL_GPIO_WritePin>
			HAL_Delay(20);
 800116a:	2014      	movs	r0, #20
 800116c:	f001 fdac 	bl	8002cc8 <HAL_Delay>
			pin_low(CS_PORT,CS_PIN);
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001176:	4863      	ldr	r0, [pc, #396]	; (8001304 <Init_SSD1963+0x1e0>)
 8001178:	f002 f834 	bl	80031e4 <HAL_GPIO_WritePin>





LCD_Write_COM(0xE2);		//PLL multiplier, set PLL clock to 120M
 800117c:	20e2      	movs	r0, #226	; 0xe2
 800117e:	f7ff ffb5 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 8001182:	2023      	movs	r0, #35	; 0x23
 8001184:	f7ff ff96 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x02);
 8001188:	2002      	movs	r0, #2
 800118a:	f7ff ff93 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x04);
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff ff90 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_COM(0xE0);		// PLL enable
 8001194:	20e0      	movs	r0, #224	; 0xe0
 8001196:	f7ff ffa9 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x01);
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff8a 	bl	80010b4 <LCD_Write_DATA>
HAL_Delay(10);
 80011a0:	200a      	movs	r0, #10
 80011a2:	f001 fd91 	bl	8002cc8 <HAL_Delay>
LCD_Write_COM(0xE0);
 80011a6:	20e0      	movs	r0, #224	; 0xe0
 80011a8:	f7ff ffa0 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x03);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f7ff ff81 	bl	80010b4 <LCD_Write_DATA>
HAL_Delay(10);
 80011b2:	200a      	movs	r0, #10
 80011b4:	f001 fd88 	bl	8002cc8 <HAL_Delay>
LCD_Write_COM(0x01);		// software reset
 80011b8:	2001      	movs	r0, #1
 80011ba:	f7ff ff97 	bl	80010ec <LCD_Write_COM>
HAL_Delay(100);
 80011be:	2064      	movs	r0, #100	; 0x64
 80011c0:	f001 fd82 	bl	8002cc8 <HAL_Delay>
LCD_Write_COM(0xE6);		//PLL setting for PCLK, depends on resolution
 80011c4:	20e6      	movs	r0, #230	; 0xe6
 80011c6:	f7ff ff91 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x04);
 80011ca:	2004      	movs	r0, #4
 80011cc:	f7ff ff72 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x93);
 80011d0:	2093      	movs	r0, #147	; 0x93
 80011d2:	f7ff ff6f 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0xE0);
 80011d6:	20e0      	movs	r0, #224	; 0xe0
 80011d8:	f7ff ff6c 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0xB0);		//LCD SPECIFICATION
 80011dc:	20b0      	movs	r0, #176	; 0xb0
 80011de:	f7ff ff85 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x00);	// 0x24
 80011e2:	2000      	movs	r0, #0
 80011e4:	f7ff ff66 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff ff63 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x03);		//Set HDP	799
 80011ee:	2003      	movs	r0, #3
 80011f0:	f7ff ff60 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x1F);
 80011f4:	201f      	movs	r0, #31
 80011f6:	f7ff ff5d 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//Set VDP	479
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff ff5a 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0xDF);
 8001200:	20df      	movs	r0, #223	; 0xdf
 8001202:	f7ff ff57 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff ff54 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0xB4);		//HSYNC
 800120c:	20b4      	movs	r0, #180	; 0xb4
 800120e:	f7ff ff6d 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x03);		//Set HT	928
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff ff4e 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0xA0);
 8001218:	20a0      	movs	r0, #160	; 0xa0
 800121a:	f7ff ff4b 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set HPS	46
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ff48 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x2E);
 8001224:	202e      	movs	r0, #46	; 0x2e
 8001226:	f7ff ff45 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x30);		//Set HPW	48
 800122a:	2030      	movs	r0, #48	; 0x30
 800122c:	f7ff ff42 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set LPS	15
 8001230:	2000      	movs	r0, #0
 8001232:	f7ff ff3f 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x0F);
 8001236:	200f      	movs	r0, #15
 8001238:	f7ff ff3c 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 800123c:	2000      	movs	r0, #0
 800123e:	f7ff ff39 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0xB6);		//VSYNC
 8001242:	20b6      	movs	r0, #182	; 0xb6
 8001244:	f7ff ff52 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x02);		//Set VT	525
 8001248:	2002      	movs	r0, #2
 800124a:	f7ff ff33 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x0D);
 800124e:	200d      	movs	r0, #13
 8001250:	f7ff ff30 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set VPS	16
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff ff2d 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x10);
 800125a:	2010      	movs	r0, #16
 800125c:	f7ff ff2a 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x10);		//Set VPW	16
 8001260:	2010      	movs	r0, #16
 8001262:	f7ff ff27 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);		//Set FPS	8
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff ff24 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x08);
 800126c:	2008      	movs	r0, #8
 800126e:	f7ff ff21 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0xBA);
 8001272:	20ba      	movs	r0, #186	; 0xba
 8001274:	f7ff ff3a 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x05);		//GPIO[3:0] out 1
 8001278:	2005      	movs	r0, #5
 800127a:	f7ff ff1b 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0xB8);
 800127e:	20b8      	movs	r0, #184	; 0xb8
 8001280:	f7ff ff34 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8001284:	2007      	movs	r0, #7
 8001286:	f7ff ff15 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x01);		//GPIO0 normal
 800128a:	2001      	movs	r0, #1
 800128c:	f7ff ff12 	bl	80010b4 <LCD_Write_DATA>

//LCD_Write_COM(0x36);		//rotation
//LCD_Write_DATA(0x21);		// -- Set to 0x22 to rotate 180 degrees 0x21

LCD_Write_COM(0xba);		//rotation
 8001290:	20ba      	movs	r0, #186	; 0xba
 8001292:	f7ff ff2b 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8001296:	2001      	movs	r0, #1
 8001298:	f7ff ff0c 	bl	80010b4 <LCD_Write_DATA>


LCD_Write_COM(0xF0);		//pixel data interface
 800129c:	20f0      	movs	r0, #240	; 0xf0
 800129e:	f7ff ff25 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x03);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f7ff ff06 	bl	80010b4 <LCD_Write_DATA>


HAL_Delay(10);
 80012a8:	200a      	movs	r0, #10
 80012aa:	f001 fd0d 	bl	8002cc8 <HAL_Delay>

Lcd_SetArea(0, 0, 799, 479);
 80012ae:	f240 13df 	movw	r3, #479	; 0x1df
 80012b2:	f240 321f 	movw	r2, #799	; 0x31f
 80012b6:	2100      	movs	r1, #0
 80012b8:	2000      	movs	r0, #0
 80012ba:	f7ff feb1 	bl	8001020 <Lcd_SetArea>
LCD_Write_COM(0x29);		//display on
 80012be:	2029      	movs	r0, #41	; 0x29
 80012c0:	f7ff ff14 	bl	80010ec <LCD_Write_COM>

LCD_Write_COM(0xBE);		//set PWM for B/L
 80012c4:	20be      	movs	r0, #190	; 0xbe
 80012c6:	f7ff ff11 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x06);
 80012ca:	2006      	movs	r0, #6
 80012cc:	f7ff fef2 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 80012d0:	20f0      	movs	r0, #240	; 0xf0
 80012d2:	f7ff feef 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x01);
 80012d6:	2001      	movs	r0, #1
 80012d8:	f7ff feec 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0xF0);
 80012dc:	20f0      	movs	r0, #240	; 0xf0
 80012de:	f7ff fee9 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fee6 	bl	80010b4 <LCD_Write_DATA>
LCD_Write_DATA(0x00);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff fee3 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0xD0);
 80012ee:	20d0      	movs	r0, #208	; 0xd0
 80012f0:	f7ff fefc 	bl	80010ec <LCD_Write_COM>
LCD_Write_DATA(0x0D);
 80012f4:	200d      	movs	r0, #13
 80012f6:	f7ff fedd 	bl	80010b4 <LCD_Write_DATA>

LCD_Write_COM(0x2C);
 80012fa:	202c      	movs	r0, #44	; 0x2c
 80012fc:	f7ff fef6 	bl	80010ec <LCD_Write_COM>

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400

0800130c <TFT_Send_Cmd>:
//===========================================================================
//===========================================================================
//�-��� ��� �������� ������
//static __inline  - not work before define of function 
void 	TFT_Send_Cmd(uint16_t index)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
//	*(uint8_t *) (LCD_REG) = index;
	  pin_low(RS_PORT,RS_PIN);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <TFT_Send_Cmd+0x34>)
 800131e:	f001 ff61 	bl	80031e4 <HAL_GPIO_WritePin>
	  tft_write_bus(index>>8,index&0x00ff);
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe0f 	bl	8000f54 <tft_write_bus>
//	RSN;
//	tft_write_bus(data>>8,data&0x00ff);
//    WRN;
//    		WR;
//    		CS;
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40020000 	.word	0x40020000

08001344 <TFT_Write_Data>:

//�-��� ��� �������� ������
void TFT_Write_Data(uint16_t data)
{   
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	80fb      	strh	r3, [r7, #6]
//    *(uint16_t *) (LCD_DATA) = data;
	  pin_high(RS_PORT,RS_PIN);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001354:	4808      	ldr	r0, [pc, #32]	; (8001378 <TFT_Write_Data+0x34>)
 8001356:	f001 ff45 	bl	80031e4 <HAL_GPIO_WritePin>
	  tft_write_bus(data>>8,data&0x00ff);
 800135a:	88fb      	ldrh	r3, [r7, #6]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	b29b      	uxth	r3, r3
 8001360:	b2db      	uxtb	r3, r3
 8001362:	88fa      	ldrh	r2, [r7, #6]
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fdf3 	bl	8000f54 <tft_write_bus>
//	RS;
//    tft_write_bus(data>>8,data&0x00ff);
//    		WRN;
//    		WR;
//    		CS;
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40020000 	.word	0x40020000

0800137c <TFT_Set_X>:
//�-��� ������������� ������� ������� �� X
void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	460a      	mov	r2, r1
 8001386:	80fb      	strh	r3, [r7, #6]
 8001388:	4613      	mov	r3, r2
 800138a:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002A);
 800138c:	202a      	movs	r0, #42	; 0x2a
 800138e:	f7ff ffbd 	bl	800130c <TFT_Send_Cmd>
	TFT_Write_Data(start_x>>8);
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ffd3 	bl	8001344 <TFT_Write_Data>
	TFT_Write_Data(start_x&0x00ff);
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ffcd 	bl	8001344 <TFT_Write_Data>
	
	TFT_Write_Data(end_x>>8);
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	0a1b      	lsrs	r3, r3, #8
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ffc7 	bl	8001344 <TFT_Write_Data>
	TFT_Write_Data(end_x&0x00ff);
 80013b6:	88bb      	ldrh	r3, [r7, #4]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ffc1 	bl	8001344 <TFT_Write_Data>
}
 80013c2:	bf00      	nop
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <TFT_Set_Y>:

//�-��� ������������� ������� ������� �� Y
void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	4603      	mov	r3, r0
 80013d2:	460a      	mov	r2, r1
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	4613      	mov	r3, r2
 80013d8:	80bb      	strh	r3, [r7, #4]
	TFT_Send_Cmd(0x002B);
 80013da:	202b      	movs	r0, #43	; 0x2b
 80013dc:	f7ff ff96 	bl	800130c <TFT_Send_Cmd>
	TFT_Write_Data(start_y>>8);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	0a1b      	lsrs	r3, r3, #8
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff ffac 	bl	8001344 <TFT_Write_Data>
	TFT_Write_Data(start_y&0x00ff);
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ffa6 	bl	8001344 <TFT_Write_Data>
	
	TFT_Write_Data(end_y>>8);
 80013f8:	88bb      	ldrh	r3, [r7, #4]
 80013fa:	0a1b      	lsrs	r3, r3, #8
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffa0 	bl	8001344 <TFT_Write_Data>
	TFT_Write_Data(end_y&0x00ff);
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff9a 	bl	8001344 <TFT_Write_Data>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <TFT_Set_Work_Area>:
}


//�-���  ������ ���������� ������� �������
void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4604      	mov	r4, r0
 8001420:	4608      	mov	r0, r1
 8001422:	4611      	mov	r1, r2
 8001424:	461a      	mov	r2, r3
 8001426:	4623      	mov	r3, r4
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	4603      	mov	r3, r0
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	460b      	mov	r3, r1
 8001430:	807b      	strh	r3, [r7, #2]
 8001432:	4613      	mov	r3, r2
 8001434:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	887b      	ldrh	r3, [r7, #2]
 800143a:	4413      	add	r3, r2
 800143c:	b29b      	uxth	r3, r3
 800143e:	3b01      	subs	r3, #1
 8001440:	b29a      	uxth	r2, r3
 8001442:	88fb      	ldrh	r3, [r7, #6]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff98 	bl	800137c <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 800144c:	88ba      	ldrh	r2, [r7, #4]
 800144e:	883b      	ldrh	r3, [r7, #0]
 8001450:	4413      	add	r3, r2
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ffb4 	bl	80013ca <TFT_Set_Y>
	TFT_Send_Cmd(0x2C);
 8001462:	202c      	movs	r0, #44	; 0x2c
 8001464:	f7ff ff52 	bl	800130c <TFT_Send_Cmd>
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bd90      	pop	{r4, r7, pc}

08001470 <TFT_Clear_Screen>:

//�-��� ����������� ������� ��������� ������
void TFT_Clear_Screen(uint16_t color)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 800147e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001482:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001486:	2100      	movs	r1, #0
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff ffc5 	bl	8001418 <TFT_Set_Work_Area>
	pin_high(RS_PORT,RS_PIN);
 800148e:	2201      	movs	r2, #1
 8001490:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001494:	480d      	ldr	r0, [pc, #52]	; (80014cc <TFT_Clear_Screen+0x5c>)
 8001496:	f001 fea5 	bl	80031e4 <HAL_GPIO_WritePin>
	for(i=0; i < 384000; i++)
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e00c      	b.n	80014ba <TFT_Clear_Screen+0x4a>
	{
//		TFT_Write_Data(color);	//������� ��������� �����


		  tft_write_bus(color>>8,color&0x00ff);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	88fa      	ldrh	r2, [r7, #6]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	4611      	mov	r1, r2
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff fd50 	bl	8000f54 <tft_write_bus>
	for(i=0; i < 384000; i++)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	3301      	adds	r3, #1
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <TFT_Clear_Screen+0x60>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d9ee      	bls.n	80014a0 <TFT_Clear_Screen+0x30>
	}
}
 80014c2:	bf00      	nop
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40020000 	.word	0x40020000
 80014d0:	0005dbff 	.word	0x0005dbff

080014d4 <TFT_Draw_Line>:
	}
}

//�-��� ������ ����� ��������� ����� � �������
void TFT_Draw_Line (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2, uint8_t size,uint16_t color)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af02      	add	r7, sp, #8
 80014da:	4604      	mov	r4, r0
 80014dc:	4608      	mov	r0, r1
 80014de:	4611      	mov	r1, r2
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	80fb      	strh	r3, [r7, #6]
 80014e6:	4603      	mov	r3, r0
 80014e8:	80bb      	strh	r3, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80014f2:	887a      	ldrh	r2, [r7, #2]
 80014f4:	88fb      	ldrh	r3, [r7, #6]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	bfb8      	it	lt
 80014fc:	425b      	neglt	r3, r3
 80014fe:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8001500:	883a      	ldrh	r2, [r7, #0]
 8001502:	88bb      	ldrh	r3, [r7, #4]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	bfb8      	it	lt
 800150a:	425b      	neglt	r3, r3
 800150c:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800150e:	88fa      	ldrh	r2, [r7, #6]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	429a      	cmp	r2, r3
 8001514:	d201      	bcs.n	800151a <TFT_Draw_Line+0x46>
 8001516:	2301      	movs	r3, #1
 8001518:	e001      	b.n	800151e <TFT_Draw_Line+0x4a>
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001520:	88ba      	ldrh	r2, [r7, #4]
 8001522:	883b      	ldrh	r3, [r7, #0]
 8001524:	429a      	cmp	r2, r3
 8001526:	d201      	bcs.n	800152c <TFT_Draw_Line+0x58>
 8001528:	2301      	movs	r3, #1
 800152a:	e001      	b.n	8001530 <TFT_Draw_Line+0x5c>
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
 8001530:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	1ad3      	subs	r3, r2, r3
 8001538:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 800153e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001542:	b29a      	uxth	r2, r3
 8001544:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001548:	b29c      	uxth	r4, r3
 800154a:	88b9      	ldrh	r1, [r7, #4]
 800154c:	88f8      	ldrh	r0, [r7, #6]
 800154e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	4623      	mov	r3, r4
 8001554:	f000 f859 	bl	800160a <TFT_Draw_Fill_Rectangle>
		
		if(x1 == x2 && y1 == y2)
 8001558:	88fa      	ldrh	r2, [r7, #6]
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	429a      	cmp	r2, r3
 800155e:	d103      	bne.n	8001568 <TFT_Draw_Line+0x94>
 8001560:	88ba      	ldrh	r2, [r7, #4]
 8001562:	883b      	ldrh	r3, [r7, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d01e      	beq.n	80015a6 <TFT_Draw_Line+0xd2>
		break;
		
		error2 = error * 2;
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	60bb      	str	r3, [r7, #8]
		
		if(error2 > -deltaY)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	425b      	negs	r3, r3
 8001572:	68ba      	ldr	r2, [r7, #8]
 8001574:	429a      	cmp	r2, r3
 8001576:	dd08      	ble.n	800158a <TFT_Draw_Line+0xb6>
		{
			error -= deltaY;
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	b29a      	uxth	r2, r3
 8001584:	88fb      	ldrh	r3, [r7, #6]
 8001586:	4413      	add	r3, r2
 8001588:	80fb      	strh	r3, [r7, #6]
		}
		
		if(error2 < deltaX)
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	429a      	cmp	r2, r3
 8001590:	dad5      	bge.n	800153e <TFT_Draw_Line+0x6a>
		{
			error += deltaX;
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	4413      	add	r3, r2
 8001598:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	b29a      	uxth	r2, r3
 800159e:	88bb      	ldrh	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	80bb      	strh	r3, [r7, #4]
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 80015a4:	e7cb      	b.n	800153e <TFT_Draw_Line+0x6a>
		break;
 80015a6:	bf00      	nop
		}
	}
}
 80015a8:	bf00      	nop
 80015aa:	3724      	adds	r7, #36	; 0x24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd90      	pop	{r4, r7, pc}

080015b0 <TFT_Draw_HLine>:

//�-��� ������ �������������� �����, ��������� �����, ������� � �����
void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4604      	mov	r4, r0
 80015b8:	4608      	mov	r0, r1
 80015ba:	4611      	mov	r1, r2
 80015bc:	461a      	mov	r2, r3
 80015be:	4623      	mov	r3, r4
 80015c0:	80fb      	strh	r3, [r7, #6]
 80015c2:	4603      	mov	r3, r0
 80015c4:	80bb      	strh	r3, [r7, #4]
 80015c6:	460b      	mov	r3, r1
 80015c8:	807b      	strh	r3, [r7, #2]
 80015ca:	4613      	mov	r3, r2
 80015cc:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 80015d2:	883b      	ldrh	r3, [r7, #0]
 80015d4:	887a      	ldrh	r2, [r7, #2]
 80015d6:	88b9      	ldrh	r1, [r7, #4]
 80015d8:	88f8      	ldrh	r0, [r7, #6]
 80015da:	f7ff ff1d 	bl	8001418 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80015de:	2300      	movs	r3, #0
 80015e0:	81fb      	strh	r3, [r7, #14]
 80015e2:	e006      	b.n	80015f2 <TFT_Draw_HLine+0x42>
	TFT_Write_Data(color);
 80015e4:	8c3b      	ldrh	r3, [r7, #32]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff feac 	bl	8001344 <TFT_Write_Data>
	for(i=0; i<(length*size); i++)
 80015ec:	89fb      	ldrh	r3, [r7, #14]
 80015ee:	3301      	adds	r3, #1
 80015f0:	81fb      	strh	r3, [r7, #14]
 80015f2:	89fa      	ldrh	r2, [r7, #14]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	8839      	ldrh	r1, [r7, #0]
 80015f8:	fb01 f303 	mul.w	r3, r1, r3
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf1      	blt.n	80015e4 <TFT_Draw_HLine+0x34>
}
 8001600:	bf00      	nop
 8001602:	bf00      	nop
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	bd90      	pop	{r4, r7, pc}

0800160a <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}

//�-��� ������ ����������� �������������, ��������� �����, ������, �����
void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 800160a:	b590      	push	{r4, r7, lr}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	4604      	mov	r4, r0
 8001612:	4608      	mov	r0, r1
 8001614:	4611      	mov	r1, r2
 8001616:	461a      	mov	r2, r3
 8001618:	4623      	mov	r3, r4
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4603      	mov	r3, r0
 800161e:	80bb      	strh	r3, [r7, #4]
 8001620:	460b      	mov	r3, r1
 8001622:	807b      	strh	r3, [r7, #2]
 8001624:	4613      	mov	r3, r2
 8001626:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 800162c:	883b      	ldrh	r3, [r7, #0]
 800162e:	887a      	ldrh	r2, [r7, #2]
 8001630:	88b9      	ldrh	r1, [r7, #4]
 8001632:	88f8      	ldrh	r0, [r7, #6]
 8001634:	f7ff fef0 	bl	8001418 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	e006      	b.n	800164c <TFT_Draw_Fill_Rectangle+0x42>
	{
		TFT_Write_Data(color);	//������� ��������� �����
 800163e:	8c3b      	ldrh	r3, [r7, #32]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe7f 	bl	8001344 <TFT_Write_Data>
	for(i=0; i < length*width; i++)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	887b      	ldrh	r3, [r7, #2]
 800164e:	883a      	ldrh	r2, [r7, #0]
 8001650:	fb02 f303 	mul.w	r3, r2, r3
 8001654:	461a      	mov	r2, r3
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	4293      	cmp	r3, r2
 800165a:	d3f0      	bcc.n	800163e <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3714      	adds	r7, #20
 8001662:	46bd      	mov	sp, r7
 8001664:	bd90      	pop	{r4, r7, pc}

08001666 <LCD_Char>:
}



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001666:	b590      	push	{r4, r7, lr}
 8001668:	b08b      	sub	sp, #44	; 0x2c
 800166a:	af02      	add	r7, sp, #8
 800166c:	60ba      	str	r2, [r7, #8]
 800166e:	607b      	str	r3, [r7, #4]
 8001670:	4603      	mov	r3, r0
 8001672:	81fb      	strh	r3, [r7, #14]
 8001674:	460b      	mov	r3, r1
 8001676:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	881b      	ldrh	r3, [r3, #0]
 8001682:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001684:	2300      	movs	r3, #0
 8001686:	777b      	strb	r3, [r7, #29]
 8001688:	2300      	movs	r3, #0
 800168a:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001690:	2300      	movs	r3, #0
 8001692:	763b      	strb	r3, [r7, #24]
 8001694:	e095      	b.n	80017c2 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001696:	2300      	movs	r3, #0
 8001698:	767b      	strb	r3, [r7, #25]
 800169a:	e053      	b.n	8001744 <LCD_Char+0xde>
		{
			if(bit == 0)
 800169c:	7f3b      	ldrb	r3, [r7, #28]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d109      	bne.n	80016b6 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 80016a2:	8bfb      	ldrh	r3, [r7, #30]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	83fa      	strh	r2, [r7, #30]
 80016a8:	461a      	mov	r2, r3
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 80016b6:	7f7a      	ldrb	r2, [r7, #29]
 80016b8:	7f3b      	ldrb	r3, [r7, #28]
 80016ba:	4013      	ands	r3, r2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <LCD_Char+0x64>
			{
				set_pixels++;
 80016c2:	8b7b      	ldrh	r3, [r7, #26]
 80016c4:	3301      	adds	r3, #1
 80016c6:	837b      	strh	r3, [r7, #26]
 80016c8:	e036      	b.n	8001738 <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 80016ca:	8b7b      	ldrh	r3, [r7, #26]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d033      	beq.n	8001738 <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80016d6:	461a      	mov	r2, r3
 80016d8:	7e7b      	ldrb	r3, [r7, #25]
 80016da:	441a      	add	r2, r3
 80016dc:	8b7b      	ldrh	r3, [r7, #26]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	fb12 f303 	smulbb	r3, r2, r3
 80016ec:	b29a      	uxth	r2, r3
 80016ee:	89fb      	ldrh	r3, [r7, #14]
 80016f0:	4413      	add	r3, r2
 80016f2:	b298      	uxth	r0, r3
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80016fa:	461a      	mov	r2, r3
 80016fc:	7e3b      	ldrb	r3, [r7, #24]
 80016fe:	4413      	add	r3, r2
 8001700:	b29a      	uxth	r2, r3
 8001702:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001706:	b29b      	uxth	r3, r3
 8001708:	fb12 f303 	smulbb	r3, r2, r3
 800170c:	b29a      	uxth	r2, r3
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	b299      	uxth	r1, r3
 8001714:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001718:	b29b      	uxth	r3, r3
 800171a:	8b7a      	ldrh	r2, [r7, #26]
 800171c:	fb12 f303 	smulbb	r3, r2, r3
 8001720:	b29a      	uxth	r2, r3
 8001722:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001726:	b29c      	uxth	r4, r3
 8001728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800172a:	b29b      	uxth	r3, r3
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4623      	mov	r3, r4
 8001730:	f7ff ff6b 	bl	800160a <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001738:	7f3b      	ldrb	r3, [r7, #28]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 800173e:	7e7b      	ldrb	r3, [r7, #25]
 8001740:	3301      	adds	r3, #1
 8001742:	767b      	strb	r3, [r7, #25]
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	789b      	ldrb	r3, [r3, #2]
 8001748:	7e7a      	ldrb	r2, [r7, #25]
 800174a:	429a      	cmp	r2, r3
 800174c:	d3a6      	bcc.n	800169c <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 800174e:	8b7b      	ldrh	r3, [r7, #26]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d033      	beq.n	80017bc <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800175a:	461a      	mov	r2, r3
 800175c:	7e7b      	ldrb	r3, [r7, #25]
 800175e:	441a      	add	r2, r3
 8001760:	8b7b      	ldrh	r3, [r7, #26]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	b29a      	uxth	r2, r3
 8001766:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800176a:	b29b      	uxth	r3, r3
 800176c:	fb12 f303 	smulbb	r3, r2, r3
 8001770:	b29a      	uxth	r2, r3
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	4413      	add	r3, r2
 8001776:	b298      	uxth	r0, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800177e:	461a      	mov	r2, r3
 8001780:	7e3b      	ldrb	r3, [r7, #24]
 8001782:	4413      	add	r3, r2
 8001784:	b29a      	uxth	r2, r3
 8001786:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800178a:	b29b      	uxth	r3, r3
 800178c:	fb12 f303 	smulbb	r3, r2, r3
 8001790:	b29a      	uxth	r2, r3
 8001792:	89bb      	ldrh	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	b299      	uxth	r1, r3
 8001798:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800179c:	b29b      	uxth	r3, r3
 800179e:	8b7a      	ldrh	r2, [r7, #26]
 80017a0:	fb12 f303 	smulbb	r3, r2, r3
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80017aa:	b29c      	uxth	r4, r3
 80017ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	f7ff ff29 	bl	800160a <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 80017bc:	7e3b      	ldrb	r3, [r7, #24]
 80017be:	3301      	adds	r3, #1
 80017c0:	763b      	strb	r3, [r7, #24]
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	78db      	ldrb	r3, [r3, #3]
 80017c6:	7e3a      	ldrb	r2, [r7, #24]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f4ff af64 	bcc.w	8001696 <LCD_Char+0x30>
		}
	}
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	3724      	adds	r7, #36	; 0x24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b08f      	sub	sp, #60	; 0x3c
 80017dc:	af02      	add	r7, sp, #8
 80017de:	60ba      	str	r2, [r7, #8]
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	4603      	mov	r3, r0
 80017e4:	81fb      	strh	r3, [r7, #14]
 80017e6:	460b      	mov	r3, r1
 80017e8:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 80017ea:	89fb      	ldrh	r3, [r7, #14]
 80017ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 80017ee:	89bb      	ldrh	r3, [r7, #12]
 80017f0:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	220c      	movs	r2, #12
 80017f8:	6879      	ldr	r1, [r7, #4]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 ff3b 	bl	8004676 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001800:	2300      	movs	r3, #0
 8001802:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001804:	e056      	b.n	80018b4 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001806:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	4413      	add	r3, r2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8001812:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d10f      	bne.n	800183a <LCD_Font+0x62>
		{
			cursor_x = x;
 800181a:	89fb      	ldrh	r3, [r7, #14]
 800181c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800181e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001822:	b29a      	uxth	r2, r3
 8001824:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001828:	b29b      	uxth	r3, r3
 800182a:	fb12 f303 	smulbb	r3, r2, r3
 800182e:	b29a      	uxth	r2, r3
 8001830:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001832:	4413      	add	r3, r2
 8001834:	b29b      	uxth	r3, r3
 8001836:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001838:	e039      	b.n	80018ae <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800183a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800183e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001842:	429a      	cmp	r2, r3
 8001844:	d333      	bcc.n	80018ae <LCD_Font+0xd6>
 8001846:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800184a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800184e:	429a      	cmp	r2, r3
 8001850:	d82d      	bhi.n	80018ae <LCD_Font+0xd6>
 8001852:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001856:	2b0d      	cmp	r3, #13
 8001858:	d029      	beq.n	80018ae <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800185a:	6a3a      	ldr	r2, [r7, #32]
 800185c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001860:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001864:	1a5b      	subs	r3, r3, r1
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	18d1      	adds	r1, r2, r3
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	2208      	movs	r2, #8
 8001870:	4618      	mov	r0, r3
 8001872:	f002 ff00 	bl	8004676 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001876:	f107 041c 	add.w	r4, r7, #28
 800187a:	f107 0214 	add.w	r2, r7, #20
 800187e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001882:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001886:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	4623      	mov	r3, r4
 8001892:	f7ff fee8 	bl	8001666 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001896:	7e3b      	ldrb	r3, [r7, #24]
 8001898:	b29a      	uxth	r2, r3
 800189a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800189e:	b29b      	uxth	r3, r3
 80018a0:	fb12 f303 	smulbb	r3, r2, r3
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80018ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018b0:	3301      	adds	r3, #1
 80018b2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80018b4:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80018b6:	68b8      	ldr	r0, [r7, #8]
 80018b8:	f7fe fce2 	bl	8000280 <strlen>
 80018bc:	4603      	mov	r3, r0
 80018be:	429c      	cmp	r4, r3
 80018c0:	d3a1      	bcc.n	8001806 <LCD_Font+0x2e>
		}
	}
}
 80018c2:	bf00      	nop
 80018c4:	bf00      	nop
 80018c6:	3734      	adds	r7, #52	; 0x34
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd90      	pop	{r4, r7, pc}

080018cc <LCD_FillTriangle>:

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80018cc:	b590      	push	{r4, r7, lr}
 80018ce:	b091      	sub	sp, #68	; 0x44
 80018d0:	af02      	add	r7, sp, #8
 80018d2:	4604      	mov	r4, r0
 80018d4:	4608      	mov	r0, r1
 80018d6:	4611      	mov	r1, r2
 80018d8:	461a      	mov	r2, r3
 80018da:	4623      	mov	r3, r4
 80018dc:	80fb      	strh	r3, [r7, #6]
 80018de:	4603      	mov	r3, r0
 80018e0:	80bb      	strh	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	807b      	strh	r3, [r7, #2]
 80018e6:	4613      	mov	r3, r2
 80018e8:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 80018ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80018ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	dd0b      	ble.n	800190e <LCD_FillTriangle+0x42>
		swap(y0, y1);
 80018f6:	88bb      	ldrh	r3, [r7, #4]
 80018f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80018fa:	883b      	ldrh	r3, [r7, #0]
 80018fc:	80bb      	strh	r3, [r7, #4]
 80018fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001900:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001906:	887b      	ldrh	r3, [r7, #2]
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800190c:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 800190e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001912:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001916:	429a      	cmp	r2, r3
 8001918:	dd0f      	ble.n	800193a <LCD_FillTriangle+0x6e>
		swap(y2, y1);
 800191a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800191e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001920:	883b      	ldrh	r3, [r7, #0]
 8001922:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001928:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 800192a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800192e:	843b      	strh	r3, [r7, #32]
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001936:	8c3b      	ldrh	r3, [r7, #32]
 8001938:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800193a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800193e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001942:	429a      	cmp	r2, r3
 8001944:	dd0b      	ble.n	800195e <LCD_FillTriangle+0x92>
		swap(y0, y1);
 8001946:	88bb      	ldrh	r3, [r7, #4]
 8001948:	83fb      	strh	r3, [r7, #30]
 800194a:	883b      	ldrh	r3, [r7, #0]
 800194c:	80bb      	strh	r3, [r7, #4]
 800194e:	8bfb      	ldrh	r3, [r7, #30]
 8001950:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	83bb      	strh	r3, [r7, #28]
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	8bbb      	ldrh	r3, [r7, #28]
 800195c:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800195e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001962:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001966:	429a      	cmp	r2, r3
 8001968:	d136      	bne.n	80019d8 <LCD_FillTriangle+0x10c>
		a = b = x0;
 800196a:	88fb      	ldrh	r3, [r7, #6]
 800196c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800196e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001970:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(x1 < a)      a = x1;
 8001972:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001976:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800197a:	429a      	cmp	r2, r3
 800197c:	da02      	bge.n	8001984 <LCD_FillTriangle+0xb8>
 800197e:	887b      	ldrh	r3, [r7, #2]
 8001980:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001982:	e007      	b.n	8001994 <LCD_FillTriangle+0xc8>
		else if(x1 > b) b = x1;
 8001984:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001988:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800198c:	429a      	cmp	r2, r3
 800198e:	dd01      	ble.n	8001994 <LCD_FillTriangle+0xc8>
 8001990:	887b      	ldrh	r3, [r7, #2]
 8001992:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(x2 < a)      a = x2;
 8001994:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001998:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800199c:	429a      	cmp	r2, r3
 800199e:	da03      	bge.n	80019a8 <LCD_FillTriangle+0xdc>
 80019a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80019a6:	e008      	b.n	80019ba <LCD_FillTriangle+0xee>
		else if(x2 > b) b = x2;
 80019a8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80019ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80019b0:	429a      	cmp	r2, r3
 80019b2:	dd02      	ble.n	80019ba <LCD_FillTriangle+0xee>
 80019b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80019b8:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y0, b - a + 1,1, color);
 80019ba:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80019bc:	88b9      	ldrh	r1, [r7, #4]
 80019be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	3301      	adds	r3, #1
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2301      	movs	r3, #1
 80019d2:	f7ff fded 	bl	80015b0 <TFT_Draw_HLine>
		return;
 80019d6:	e0d2      	b.n	8001b7e <LCD_FillTriangle+0x2b2>
	}

	int16_t	dx01 = x1 - x0,
 80019d8:	887a      	ldrh	r2, [r7, #2]
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	837b      	strh	r3, [r7, #26]
			dy01 = y1 - y0,
 80019e2:	883a      	ldrh	r2, [r7, #0]
 80019e4:	88bb      	ldrh	r3, [r7, #4]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	b29b      	uxth	r3, r3
 80019ea:	833b      	strh	r3, [r7, #24]
			dx02 = x2 - x0,
 80019ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	82fb      	strh	r3, [r7, #22]
			dy02 = y2 - y0,
 80019f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80019fc:	88bb      	ldrh	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	82bb      	strh	r3, [r7, #20]
			dx12 = x2 - x1,
 8001a04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	827b      	strh	r3, [r7, #18]
			dy12 = y2 - y1;
 8001a10:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001a14:	883b      	ldrh	r3, [r7, #0]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	823b      	strh	r3, [r7, #16]
	int32_t	sa   = 0,
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			sb   = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2) last = y1;   // Include y1 scanline
 8001a24:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001a28:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d102      	bne.n	8001a36 <LCD_FillTriangle+0x16a>
 8001a30:	883b      	ldrh	r3, [r7, #0]
 8001a32:	863b      	strh	r3, [r7, #48]	; 0x30
 8001a34:	e003      	b.n	8001a3e <LCD_FillTriangle+0x172>
	else last = y1 - 1; // Skip it
 8001a36:	883b      	ldrh	r3, [r7, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	863b      	strh	r3, [r7, #48]	; 0x30

	for(y = y0; y <= last; y++) {
 8001a3e:	88bb      	ldrh	r3, [r7, #4]
 8001a40:	867b      	strh	r3, [r7, #50]	; 0x32
 8001a42:	e03d      	b.n	8001ac0 <LCD_FillTriangle+0x1f4>
		a = x0 + sa / dy01;
 8001a44:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	88fb      	ldrh	r3, [r7, #6]
 8001a52:	4413      	add	r3, r2
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8001a58:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001a5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx01;
 8001a6c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a72:	4413      	add	r3, r2
 8001a74:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8001a76:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a7c:	4413      	add	r3, r2
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8001a80:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001a84:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dd05      	ble.n	8001a98 <LCD_FillTriangle+0x1cc>
 8001a8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001a8e:	81bb      	strh	r3, [r7, #12]
 8001a90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001a92:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b-a+1,1, color);
 8001a98:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001a9a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001a9c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001a9e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2301      	movs	r3, #1
 8001ab0:	f7ff fd7e 	bl	80015b0 <TFT_Draw_HLine>
	for(y = y0; y <= last; y++) {
 8001ab4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	867b      	strh	r3, [r7, #50]	; 0x32
 8001ac0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001ac4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	ddbb      	ble.n	8001a44 <LCD_FillTriangle+0x178>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 8001acc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ad0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001ad4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001ad8:	1a8a      	subs	r2, r1, r2
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	sb = dx02 * (y - y0);
 8001ae0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ae4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001ae8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001aec:	1a8a      	subs	r2, r1, r2
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	62bb      	str	r3, [r7, #40]	; 0x28
	for(; y <= y2; y++) {
 8001af4:	e03d      	b.n	8001b72 <LCD_FillTriangle+0x2a6>
		a = x1 + sa / dy12;
 8001af6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001afc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	887b      	ldrh	r3, [r7, #2]
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8001b0a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b10:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	88fb      	ldrh	r3, [r7, #6]
 8001b18:	4413      	add	r3, r2
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx12;
 8001b1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b24:	4413      	add	r3, r2
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8001b28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b2e:	4413      	add	r3, r2
 8001b30:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8001b32:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001b36:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dd05      	ble.n	8001b4a <LCD_FillTriangle+0x27e>
 8001b3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b40:	81fb      	strh	r3, [r7, #14]
 8001b42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b44:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001b46:	89fb      	ldrh	r3, [r7, #14]
 8001b48:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b - a + 1,1, color);
 8001b4a:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001b4c:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001b4e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001b52:	1ad3      	subs	r3, r2, r3
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2301      	movs	r3, #1
 8001b62:	f7ff fd25 	bl	80015b0 <TFT_Draw_HLine>
	for(; y <= y2; y++) {
 8001b66:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	867b      	strh	r3, [r7, #50]	; 0x32
 8001b72:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001b76:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	ddbb      	ble.n	8001af6 <LCD_FillTriangle+0x22a>
	}
}
 8001b7e:	373c      	adds	r7, #60	; 0x3c
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd90      	pop	{r4, r7, pc}

08001b84 <rainbow>:


uint16_t rainbow(uint16_t value)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	80fb      	strh	r3, [r7, #6]
  // Value is expected to be in range 0-127
  // The value is converted to a spectrum colour from 0 = blue through to 127 = red

	uint16_t red = 0; // Red is the top 5 bits of a 16 bit colour value
 8001b8e:	2300      	movs	r3, #0
 8001b90:	81fb      	strh	r3, [r7, #14]
	uint16_t green = 0;// Green is the middle 6 bits
 8001b92:	2300      	movs	r3, #0
 8001b94:	81bb      	strh	r3, [r7, #12]
	uint16_t blue = 0; // Blue is the bottom 5 bits
 8001b96:	2300      	movs	r3, #0
 8001b98:	817b      	strh	r3, [r7, #10]

	uint16_t quadrant = value / 32;
 8001b9a:	88fb      	ldrh	r3, [r7, #6]
 8001b9c:	095b      	lsrs	r3, r3, #5
 8001b9e:	813b      	strh	r3, [r7, #8]

  if (quadrant == 0) {
 8001ba0:	893b      	ldrh	r3, [r7, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <rainbow+0x36>
    blue = 31;
 8001ba6:	231f      	movs	r3, #31
 8001ba8:	817b      	strh	r3, [r7, #10]
    green = 2 * (value % 32);
 8001baa:	88fb      	ldrh	r3, [r7, #6]
 8001bac:	f003 031f 	and.w	r3, r3, #31
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 1) {
 8001bba:	893b      	ldrh	r3, [r7, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d109      	bne.n	8001bd4 <rainbow+0x50>
    blue = 31 - (value % 32);
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f003 031f 	and.w	r3, r3, #31
 8001bca:	817b      	strh	r3, [r7, #10]
    green = 63;
 8001bcc:	233f      	movs	r3, #63	; 0x3f
 8001bce:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 2) {
 8001bd4:	893b      	ldrh	r3, [r7, #8]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <rainbow+0x66>
    blue = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	817b      	strh	r3, [r7, #10]
    green = 63;
 8001bde:	233f      	movs	r3, #63	; 0x3f
 8001be0:	81bb      	strh	r3, [r7, #12]
    red = value % 32;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 3) {
 8001bea:	893b      	ldrh	r3, [r7, #8]
 8001bec:	2b03      	cmp	r3, #3
 8001bee:	d10c      	bne.n	8001c0a <rainbow+0x86>
    blue = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	817b      	strh	r3, [r7, #10]
    green = 63 - 2 * (value % 32);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	f003 031f 	and.w	r3, r3, #31
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001c04:	81bb      	strh	r3, [r7, #12]
    red = 31;
 8001c06:	231f      	movs	r3, #31
 8001c08:	81fb      	strh	r3, [r7, #14]
  }
  return (red << 11) + (green << 5) + blue;
 8001c0a:	89fb      	ldrh	r3, [r7, #14]
 8001c0c:	02db      	lsls	r3, r3, #11
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	89bb      	ldrh	r3, [r7, #12]
 8001c12:	015b      	lsls	r3, r3, #5
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	4413      	add	r3, r2
 8001c1e:	b29b      	uxth	r3, r3
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3714      	adds	r7, #20
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	607a      	str	r2, [r7, #4]
 8001c38:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	69b9      	ldr	r1, [r7, #24]
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	1a8a      	subs	r2, r1, r2
 8001c46:	fb03 f202 	mul.w	r2, r3, r2
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1acb      	subs	r3, r1, r3
 8001c50:	fb92 f2f3 	sdiv	r2, r2, r3
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	4413      	add	r3, r2
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	0000      	movs	r0, r0
	...

08001c68 <ringMeter>:

int ringMeter(int value, int vmin, int vmax, int x, int y, int r, uint16_t scheme){
 8001c68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c6a:	b099      	sub	sp, #100	; 0x64
 8001c6c:	af04      	add	r7, sp, #16
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	603b      	str	r3, [r7, #0]
  // Minimum value of r is about 52 before value text intrudes on ring
  // drawing the text first is an option
  x += r; y += r;   // Calculate coords of centre of ring
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c7a:	4413      	add	r3, r2
 8001c7c:	603b      	str	r3, [r7, #0]
 8001c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c82:	4413      	add	r3, r2
 8001c84:	66bb      	str	r3, [r7, #104]	; 0x68
  int w = r / 6;    // Width of outer ring is 1/4 of radius
 8001c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c88:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <ringMeter+0xfc>)
 8001c8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001c8e:	17db      	asrs	r3, r3, #31
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	647b      	str	r3, [r7, #68]	; 0x44
  int angle = 180;  // Half the sweep angle of meter (300 degrees)
 8001c94:	23b4      	movs	r3, #180	; 0xb4
 8001c96:	643b      	str	r3, [r7, #64]	; 0x40
//  int text_colour = 0; // To hold the text colour
  int v = map(value, vmin, vmax, -angle, angle); // Map the value to an angle v
 8001c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9a:	425a      	negs	r2, r3
 8001c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff ffc0 	bl	8001c2c <map>
 8001cac:	63f8      	str	r0, [r7, #60]	; 0x3c
  uint16_t seg = 5; // Segments are 5 degrees wide = 60 segments for 300 degrees
 8001cae:	2305      	movs	r3, #5
 8001cb0:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t inc = 5; // Draw segments every 5 degrees, increase to 10 for segmented ring
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	873b      	strh	r3, [r7, #56]	; 0x38

  // Draw colour blocks every inc degrees
  for (int i = -angle; i < angle; i += inc) {
 8001cb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cb8:	425b      	negs	r3, r3
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cbc:	e1d8      	b.n	8002070 <ringMeter+0x408>
    // Choose colour from scheme
    int colour = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (scheme) {
 8001cc2:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d84e      	bhi.n	8001d68 <ringMeter+0x100>
 8001cca:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <ringMeter+0x68>)
 8001ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd0:	08001ce9 	.word	0x08001ce9
 8001cd4:	08001cf1 	.word	0x08001cf1
 8001cd8:	08001cf9 	.word	0x08001cf9
 8001cdc:	08001cff 	.word	0x08001cff
 8001ce0:	08001d21 	.word	0x08001d21
 8001ce4:	08001d43 	.word	0x08001d43
      case 0: colour = RED; break; // Fixed colour
 8001ce8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cee:	e03e      	b.n	8001d6e <ringMeter+0x106>
      case 1: colour = GREEN; break; // Fixed colour
 8001cf0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cf4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cf6:	e03a      	b.n	8001d6e <ringMeter+0x106>
      case 2: colour = BLUE; break; // Fixed colour
 8001cf8:	231f      	movs	r3, #31
 8001cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8001cfc:	e037      	b.n	8001d6e <ringMeter+0x106>
      case 3: colour = rainbow(map(i, -angle, angle, 0, 127)); break; // Full spectrum blue to red
 8001cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d00:	4259      	negs	r1, r3
 8001d02:	237f      	movs	r3, #127	; 0x7f
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d0a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d0c:	f7ff ff8e 	bl	8001c2c <map>
 8001d10:	4603      	mov	r3, r0
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff35 	bl	8001b84 <rainbow>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d1e:	e026      	b.n	8001d6e <ringMeter+0x106>
      case 4: colour = rainbow(map(i, -angle, angle, 63, 127)); break; // Green to red (high temperature etc)
 8001d20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d22:	4259      	negs	r1, r3
 8001d24:	237f      	movs	r3, #127	; 0x7f
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	233f      	movs	r3, #63	; 0x3f
 8001d2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d2c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d2e:	f7ff ff7d 	bl	8001c2c <map>
 8001d32:	4603      	mov	r3, r0
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff ff24 	bl	8001b84 <rainbow>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d40:	e015      	b.n	8001d6e <ringMeter+0x106>
      case 5: colour = rainbow(map(i, -angle, angle, 127, 63)); break; // Red to green (low battery etc)
 8001d42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d44:	4259      	negs	r1, r3
 8001d46:	233f      	movs	r3, #63	; 0x3f
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	237f      	movs	r3, #127	; 0x7f
 8001d4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d4e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001d50:	f7ff ff6c 	bl	8001c2c <map>
 8001d54:	4603      	mov	r3, r0
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff13 	bl	8001b84 <rainbow>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d62:	e004      	b.n	8001d6e <ringMeter+0x106>
 8001d64:	2aaaaaab 	.word	0x2aaaaaab
      default: colour = BLUE; break; // Fixed colour
 8001d68:	231f      	movs	r3, #31
 8001d6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d6c:	bf00      	nop
    }

    // Calculate pair of coordinates for segment start
    float sx = cos((i - 90) * 0.0174532925);
 8001d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d70:	3b5a      	subs	r3, #90	; 0x5a
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbde 	bl	8000534 <__aeabi_i2d>
 8001d78:	a3c3      	add	r3, pc, #780	; (adr r3, 8002088 <ringMeter+0x420>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b17 	vmov	d7, r2, r3
 8001d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8e:	eef0 0a67 	vmov.f32	s1, s15
 8001d92:	f004 fced 	bl	8006770 <cos>
 8001d96:	ec53 2b10 	vmov	r2, r3, d0
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7fe ff0b 	bl	8000bb8 <__aeabi_d2f>
 8001da2:	4603      	mov	r3, r0
 8001da4:	637b      	str	r3, [r7, #52]	; 0x34
    float sy = sin((i - 90) * 0.0174532925);
 8001da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001da8:	3b5a      	subs	r3, #90	; 0x5a
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fbc2 	bl	8000534 <__aeabi_i2d>
 8001db0:	a3b5      	add	r3, pc, #724	; (adr r3, 8002088 <ringMeter+0x420>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fc27 	bl	8000608 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	ec43 2b17 	vmov	d7, r2, r3
 8001dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8001dc6:	eef0 0a67 	vmov.f32	s1, s15
 8001dca:	f004 fd25 	bl	8006818 <sin>
 8001dce:	ec53 2b10 	vmov	r2, r3, d0
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f7fe feef 	bl	8000bb8 <__aeabi_d2f>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t x0 = sx * (r - w) + x;
 8001dde:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	ee07 3a90 	vmov	s15, r3
 8001de8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001df0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e06:	ee17 3a90 	vmov	r3, s15
 8001e0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t y0 = sy * (r - w) + y;
 8001e0c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	ee07 3a90 	vmov	s15, r3
 8001e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e24:	ee07 3a90 	vmov	s15, r3
 8001e28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e34:	ee17 3a90 	vmov	r3, s15
 8001e38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t x1 = sx * r + x;
 8001e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e3c:	ee07 3a90 	vmov	s15, r3
 8001e40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e44:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	ee07 3a90 	vmov	s15, r3
 8001e52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5e:	ee17 3a90 	vmov	r3, s15
 8001e62:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t y1 = sy * r + y;
 8001e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e66:	ee07 3a90 	vmov	s15, r3
 8001e6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e6e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001e72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e78:	ee07 3a90 	vmov	s15, r3
 8001e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e88:	ee17 3a90 	vmov	r3, s15
 8001e8c:	853b      	strh	r3, [r7, #40]	; 0x28

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * 0.0174532925);
 8001e8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8001e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e92:	4413      	add	r3, r2
 8001e94:	3b5a      	subs	r3, #90	; 0x5a
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fb4c 	bl	8000534 <__aeabi_i2d>
 8001e9c:	a37a      	add	r3, pc, #488	; (adr r3, 8002088 <ringMeter+0x420>)
 8001e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea2:	f7fe fbb1 	bl	8000608 <__aeabi_dmul>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ec43 2b17 	vmov	d7, r2, r3
 8001eae:	eeb0 0a47 	vmov.f32	s0, s14
 8001eb2:	eef0 0a67 	vmov.f32	s1, s15
 8001eb6:	f004 fc5b 	bl	8006770 <cos>
 8001eba:	ec53 2b10 	vmov	r2, r3, d0
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	f7fe fe79 	bl	8000bb8 <__aeabi_d2f>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    float sy2 = sin((i + seg - 90) * 0.0174532925);
 8001eca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8001ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ece:	4413      	add	r3, r2
 8001ed0:	3b5a      	subs	r3, #90	; 0x5a
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fb2e 	bl	8000534 <__aeabi_i2d>
 8001ed8:	a36b      	add	r3, pc, #428	; (adr r3, 8002088 <ringMeter+0x420>)
 8001eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ede:	f7fe fb93 	bl	8000608 <__aeabi_dmul>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	ec43 2b17 	vmov	d7, r2, r3
 8001eea:	eeb0 0a47 	vmov.f32	s0, s14
 8001eee:	eef0 0a67 	vmov.f32	s1, s15
 8001ef2:	f004 fc91 	bl	8006818 <sin>
 8001ef6:	ec53 2b10 	vmov	r2, r3, d0
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fe5b 	bl	8000bb8 <__aeabi_d2f>
 8001f02:	4603      	mov	r3, r0
 8001f04:	623b      	str	r3, [r7, #32]
    int x2 = sx2 * (r - w) + x;
 8001f06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	ee07 3a90 	vmov	s15, r3
 8001f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f14:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f2e:	ee17 3a90 	vmov	r3, s15
 8001f32:	61fb      	str	r3, [r7, #28]
    int y2 = sy2 * (r - w) + y;
 8001f34:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8001f36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f42:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4c:	ee07 3a90 	vmov	s15, r3
 8001f50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	61bb      	str	r3, [r7, #24]
    int x3 = sx2 * r + x;
 8001f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f64:	ee07 3a90 	vmov	s15, r3
 8001f68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f6c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f86:	ee17 3a90 	vmov	r3, s15
 8001f8a:	617b      	str	r3, [r7, #20]
    int y3 = sy2 * r + y;
 8001f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f8e:	ee07 3a90 	vmov	s15, r3
 8001f92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f96:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fa0:	ee07 3a90 	vmov	s15, r3
 8001fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	613b      	str	r3, [r7, #16]

    if (i < v) { // Fill in coloured segments with 2 triangles
 8001fb6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	da2c      	bge.n	8002018 <ringMeter+0x3b0>
//      my_lcd.Set_Draw_color(colour);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);
//      text_colour = colour; // Save the last colour drawn

    	LCD_FillTriangle(x0, y0, x1, y1, x2, y2, colour);
 8001fbe:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001fc2:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	; 0x2c
 8001fc6:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 8001fca:	f9b7 6028 	ldrsh.w	r6, [r7, #40]	; 0x28
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	b212      	sxth	r2, r2
 8001fd6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001fd8:	b289      	uxth	r1, r1
 8001fda:	9102      	str	r1, [sp, #8]
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4633      	mov	r3, r6
 8001fe2:	462a      	mov	r2, r5
 8001fe4:	4621      	mov	r1, r4
 8001fe6:	f7ff fc71 	bl	80018cc <LCD_FillTriangle>
    	LCD_FillTriangle(x1, y1, x2, y2, x3, y3, colour);
 8001fea:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 8001fee:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	b21d      	sxth	r5, r3
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	b21e      	sxth	r6, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	b212      	sxth	r2, r2
 8002002:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002004:	b289      	uxth	r1, r1
 8002006:	9102      	str	r1, [sp, #8]
 8002008:	9201      	str	r2, [sp, #4]
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	4633      	mov	r3, r6
 800200e:	462a      	mov	r2, r5
 8002010:	4621      	mov	r1, r4
 8002012:	f7ff fc5b 	bl	80018cc <LCD_FillTriangle>
 8002016:	e027      	b.n	8002068 <ringMeter+0x400>
    {
//      my_lcd.Set_Draw_color(GRAY);
//      my_lcd.Fill_Triangle(x0, y0, x1, y1, x2, y2);
//      my_lcd.Fill_Triangle(x1, y1, x2, y2, x3, y3);

    	LCD_FillTriangle(x0, y0, x1, y1, x2, y2, BLUE);
 8002018:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800201c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8002020:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8002024:	f9b7 5028 	ldrsh.w	r5, [r7, #40]	; 0x28
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	b21b      	sxth	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	b212      	sxth	r2, r2
 8002030:	261f      	movs	r6, #31
 8002032:	9602      	str	r6, [sp, #8]
 8002034:	9201      	str	r2, [sp, #4]
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	462b      	mov	r3, r5
 800203a:	4622      	mov	r2, r4
 800203c:	f7ff fc46 	bl	80018cc <LCD_FillTriangle>
    	LCD_FillTriangle(x1, y1, x2, y2, x3, y3, BLUE);
 8002040:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 8002044:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	b21c      	sxth	r4, r3
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	b21d      	sxth	r5, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	b21b      	sxth	r3, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	b212      	sxth	r2, r2
 8002058:	261f      	movs	r6, #31
 800205a:	9602      	str	r6, [sp, #8]
 800205c:	9201      	str	r2, [sp, #4]
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	462b      	mov	r3, r5
 8002062:	4622      	mov	r2, r4
 8002064:	f7ff fc32 	bl	80018cc <LCD_FillTriangle>
  for (int i = -angle; i < angle; i += inc) {
 8002068:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800206a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800206c:	4413      	add	r3, r2
 800206e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002070:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002072:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002074:	429a      	cmp	r2, r3
 8002076:	f6ff ae22 	blt.w	8001cbe <ringMeter+0x56>
//  } else if (value>9 && value<100){
//    my_lcd.Print_String(String(value), x-30, y-15);
//  } else {
//    my_lcd.Print_String(String(value), x-15, y-15);
//  }
  return x + r;
 800207a:	683a      	ldr	r2, [r7, #0]
 800207c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800207e:	4413      	add	r3, r2
}
 8002080:	4618      	mov	r0, r3
 8002082:	3754      	adds	r7, #84	; 0x54
 8002084:	46bd      	mov	sp, r7
 8002086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002088:	a1fae711 	.word	0xa1fae711
 800208c:	3f91df46 	.word	0x3f91df46

08002090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002096:	f107 030c 	add.w	r3, r7, #12
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	4b2b      	ldr	r3, [pc, #172]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	60bb      	str	r3, [r7, #8]
 80020c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4b24      	ldr	r3, [pc, #144]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a23      	ldr	r2, [pc, #140]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	607b      	str	r3, [r7, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a1c      	ldr	r2, [pc, #112]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020e8:	f043 0302 	orr.w	r3, r3, #2
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_GPIO_Init+0xc8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80020fa:	2200      	movs	r2, #0
 80020fc:	f248 31ff 	movw	r1, #33791	; 0x83ff
 8002100:	4816      	ldr	r0, [pc, #88]	; (800215c <MX_GPIO_Init+0xcc>)
 8002102:	f001 f86f 	bl	80031e4 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002106:	2200      	movs	r2, #0
 8002108:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800210c:	4814      	ldr	r0, [pc, #80]	; (8002160 <MX_GPIO_Init+0xd0>)
 800210e:	f001 f869 	bl	80031e4 <HAL_GPIO_WritePin>
                          |WR_Pin|RD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002112:	f248 33ff 	movw	r3, #33791	; 0x83ff
 8002116:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002120:	2303      	movs	r3, #3
 8002122:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	4619      	mov	r1, r3
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <MX_GPIO_Init+0xcc>)
 800212c:	f000 fed6 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002130:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002134:	60fb      	str	r3, [r7, #12]
                          |D12_Pin|D13_Pin|D14_Pin|D15_Pin
                          |WR_Pin|RD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002136:	2301      	movs	r3, #1
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4805      	ldr	r0, [pc, #20]	; (8002160 <MX_GPIO_Init+0xd0>)
 800214a:	f000 fec7 	bl	8002edc <HAL_GPIO_Init>

}
 800214e:	bf00      	nop
 8002150:	3720      	adds	r7, #32
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	00000000 	.word	0x00000000

08002168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002168:	b590      	push	{r4, r7, lr}
 800216a:	b099      	sub	sp, #100	; 0x64
 800216c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800216e:	f000 fd39 	bl	8002be4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002172:	f000 fb73 	bl	800285c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002176:	f7ff ff8b 	bl	8002090 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 800217a:	f7fe ffd3 	bl	8001124 <Init_SSD1963>


  //  XPT2046_Init();
    TFT_Clear_Screen(RED);
 800217e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002182:	f7ff f975 	bl	8001470 <TFT_Clear_Screen>
    LCD_Font(120, 450, "SSD1963", _Open_Sans_Bold_128, 1, RED);
 8002186:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800218a:	9301      	str	r3, [sp, #4]
 800218c:	2301      	movs	r3, #1
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4ba3      	ldr	r3, [pc, #652]	; (8002420 <main+0x2b8>)
 8002192:	4aa4      	ldr	r2, [pc, #656]	; (8002424 <main+0x2bc>)
 8002194:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002198:	2078      	movs	r0, #120	; 0x78
 800219a:	f7ff fb1d 	bl	80017d8 <LCD_Font>
  	for(int i = 0; i<360; i+= 30) {
 800219e:	2300      	movs	r3, #0
 80021a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021a2:	e0a8      	b.n	80022f6 <main+0x18e>

  	    sx = cos((i-90)*0.0174532925);
 80021a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021a6:	3b5a      	subs	r3, #90	; 0x5a
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f9c3 	bl	8000534 <__aeabi_i2d>
 80021ae:	a39a      	add	r3, pc, #616	; (adr r3, 8002418 <main+0x2b0>)
 80021b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b4:	f7fe fa28 	bl	8000608 <__aeabi_dmul>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	ec43 2b17 	vmov	d7, r2, r3
 80021c0:	eeb0 0a47 	vmov.f32	s0, s14
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	f004 fad2 	bl	8006770 <cos>
 80021cc:	ec53 2b10 	vmov	r2, r3, d0
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f7fe fcf0 	bl	8000bb8 <__aeabi_d2f>
 80021d8:	4603      	mov	r3, r0
 80021da:	4a93      	ldr	r2, [pc, #588]	; (8002428 <main+0x2c0>)
 80021dc:	6013      	str	r3, [r2, #0]
  	    sy = sin((i-90)*0.0174532925);
 80021de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021e0:	3b5a      	subs	r3, #90	; 0x5a
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9a6 	bl	8000534 <__aeabi_i2d>
 80021e8:	a38b      	add	r3, pc, #556	; (adr r3, 8002418 <main+0x2b0>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe fa0b 	bl	8000608 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	ec43 2b17 	vmov	d7, r2, r3
 80021fa:	eeb0 0a47 	vmov.f32	s0, s14
 80021fe:	eef0 0a67 	vmov.f32	s1, s15
 8002202:	f004 fb09 	bl	8006818 <sin>
 8002206:	ec53 2b10 	vmov	r2, r3, d0
 800220a:	4610      	mov	r0, r2
 800220c:	4619      	mov	r1, r3
 800220e:	f7fe fcd3 	bl	8000bb8 <__aeabi_d2f>
 8002212:	4603      	mov	r3, r0
 8002214:	4a85      	ldr	r2, [pc, #532]	; (800242c <main+0x2c4>)
 8002216:	6013      	str	r3, [r2, #0]
  	    x00 = sx*114+240;
 8002218:	4b83      	ldr	r3, [pc, #524]	; (8002428 <main+0x2c0>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002430 <main+0x2c8>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002434 <main+0x2cc>
 800222a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800222e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002232:	ee17 3a90 	vmov	r3, s15
 8002236:	b29a      	uxth	r2, r3
 8002238:	4b7f      	ldr	r3, [pc, #508]	; (8002438 <main+0x2d0>)
 800223a:	801a      	strh	r2, [r3, #0]
  	    y00 = sy*114+160;
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <main+0x2c4>)
 800223e:	edd3 7a00 	vldr	s15, [r3]
 8002242:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002430 <main+0x2c8>
 8002246:	ee67 7a87 	vmul.f32	s15, s15, s14
 800224a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800243c <main+0x2d4>
 800224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002256:	ee17 3a90 	vmov	r3, s15
 800225a:	b29a      	uxth	r2, r3
 800225c:	4b78      	ldr	r3, [pc, #480]	; (8002440 <main+0x2d8>)
 800225e:	801a      	strh	r2, [r3, #0]
  	    x11 = sx*100+240;
 8002260:	4b71      	ldr	r3, [pc, #452]	; (8002428 <main+0x2c0>)
 8002262:	edd3 7a00 	vldr	s15, [r3]
 8002266:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002444 <main+0x2dc>
 800226a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800226e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002434 <main+0x2cc>
 8002272:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002276:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800227a:	ee17 3a90 	vmov	r3, s15
 800227e:	b29a      	uxth	r2, r3
 8002280:	4b71      	ldr	r3, [pc, #452]	; (8002448 <main+0x2e0>)
 8002282:	801a      	strh	r2, [r3, #0]
  	    y11 = sy*100+160;
 8002284:	4b69      	ldr	r3, [pc, #420]	; (800242c <main+0x2c4>)
 8002286:	edd3 7a00 	vldr	s15, [r3]
 800228a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002444 <main+0x2dc>
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800243c <main+0x2d4>
 8002296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800229a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800229e:	ee17 3a90 	vmov	r3, s15
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	4b69      	ldr	r3, [pc, #420]	; (800244c <main+0x2e4>)
 80022a6:	801a      	strh	r2, [r3, #0]

  	    TFT_Draw_Line(x00-1, y00-1, x11, y11,1,WHITE);
 80022a8:	4b63      	ldr	r3, [pc, #396]	; (8002438 <main+0x2d0>)
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	b298      	uxth	r0, r3
 80022b0:	4b63      	ldr	r3, [pc, #396]	; (8002440 <main+0x2d8>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b299      	uxth	r1, r3
 80022b8:	4b63      	ldr	r3, [pc, #396]	; (8002448 <main+0x2e0>)
 80022ba:	881a      	ldrh	r2, [r3, #0]
 80022bc:	4b63      	ldr	r3, [pc, #396]	; (800244c <main+0x2e4>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80022c4:	9401      	str	r4, [sp, #4]
 80022c6:	2401      	movs	r4, #1
 80022c8:	9400      	str	r4, [sp, #0]
 80022ca:	f7ff f903 	bl	80014d4 <TFT_Draw_Line>
  	    if (i == 150) {
 80022ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d0:	2b96      	cmp	r3, #150	; 0x96
 80022d2:	d10d      	bne.n	80022f0 <main+0x188>
  	    	TFT_Draw_Line(x00, y00, x11, y11,1,BLACK);
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <main+0x2d0>)
 80022d6:	8818      	ldrh	r0, [r3, #0]
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <main+0x2d8>)
 80022da:	8819      	ldrh	r1, [r3, #0]
 80022dc:	4b5a      	ldr	r3, [pc, #360]	; (8002448 <main+0x2e0>)
 80022de:	881a      	ldrh	r2, [r3, #0]
 80022e0:	4b5a      	ldr	r3, [pc, #360]	; (800244c <main+0x2e4>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	2400      	movs	r4, #0
 80022e6:	9401      	str	r4, [sp, #4]
 80022e8:	2401      	movs	r4, #1
 80022ea:	9400      	str	r4, [sp, #0]
 80022ec:	f7ff f8f2 	bl	80014d4 <TFT_Draw_Line>
  	for(int i = 0; i<360; i+= 30) {
 80022f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f2:	331e      	adds	r3, #30
 80022f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80022f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022f8:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80022fc:	f6ff af52 	blt.w	80021a4 <main+0x3c>
  	    }
  	  }

  	LCD_Font(235, 254, "0", _Open_Sans_Bold_18, 1, WHITE);
 8002300:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002304:	9301      	str	r3, [sp, #4]
 8002306:	2301      	movs	r3, #1
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4b51      	ldr	r3, [pc, #324]	; (8002450 <main+0x2e8>)
 800230c:	4a51      	ldr	r2, [pc, #324]	; (8002454 <main+0x2ec>)
 800230e:	21fe      	movs	r1, #254	; 0xfe
 8002310:	20eb      	movs	r0, #235	; 0xeb
 8002312:	f7ff fa61 	bl	80017d8 <LCD_Font>
  	LCD_Font(193, 240, "10", _Open_Sans_Bold_18, 1, WHITE);
 8002316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	2301      	movs	r3, #1
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4b4b      	ldr	r3, [pc, #300]	; (8002450 <main+0x2e8>)
 8002322:	4a4d      	ldr	r2, [pc, #308]	; (8002458 <main+0x2f0>)
 8002324:	21f0      	movs	r1, #240	; 0xf0
 8002326:	20c1      	movs	r0, #193	; 0xc1
 8002328:	f7ff fa56 	bl	80017d8 <LCD_Font>
  	LCD_Font(158, 210, "20", _Open_Sans_Bold_18, 1, WHITE);
 800232c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2301      	movs	r3, #1
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	4b46      	ldr	r3, [pc, #280]	; (8002450 <main+0x2e8>)
 8002338:	4a48      	ldr	r2, [pc, #288]	; (800245c <main+0x2f4>)
 800233a:	21d2      	movs	r1, #210	; 0xd2
 800233c:	209e      	movs	r0, #158	; 0x9e
 800233e:	f7ff fa4b 	bl	80017d8 <LCD_Font>
  	LCD_Font(142, 165, "30", _Open_Sans_Bold_18, 1, WHITE);
 8002342:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002346:	9301      	str	r3, [sp, #4]
 8002348:	2301      	movs	r3, #1
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	4b40      	ldr	r3, [pc, #256]	; (8002450 <main+0x2e8>)
 800234e:	4a44      	ldr	r2, [pc, #272]	; (8002460 <main+0x2f8>)
 8002350:	21a5      	movs	r1, #165	; 0xa5
 8002352:	208e      	movs	r0, #142	; 0x8e
 8002354:	f7ff fa40 	bl	80017d8 <LCD_Font>
  	LCD_Font(155, 120, "40", _Open_Sans_Bold_18, 1, WHITE);
 8002358:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2301      	movs	r3, #1
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	4b3b      	ldr	r3, [pc, #236]	; (8002450 <main+0x2e8>)
 8002364:	4a3f      	ldr	r2, [pc, #252]	; (8002464 <main+0x2fc>)
 8002366:	2178      	movs	r1, #120	; 0x78
 8002368:	209b      	movs	r0, #155	; 0x9b
 800236a:	f7ff fa35 	bl	80017d8 <LCD_Font>
  	LCD_Font(185, 91, "50", _Open_Sans_Bold_18, 1, WHITE);
 800236e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2301      	movs	r3, #1
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	4b35      	ldr	r3, [pc, #212]	; (8002450 <main+0x2e8>)
 800237a:	4a3b      	ldr	r2, [pc, #236]	; (8002468 <main+0x300>)
 800237c:	215b      	movs	r1, #91	; 0x5b
 800237e:	20b9      	movs	r0, #185	; 0xb9
 8002380:	f7ff fa2a 	bl	80017d8 <LCD_Font>
  	LCD_Font(230, 76, "60", _Open_Sans_Bold_18, 1, WHITE);
 8002384:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	2301      	movs	r3, #1
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4b30      	ldr	r3, [pc, #192]	; (8002450 <main+0x2e8>)
 8002390:	4a36      	ldr	r2, [pc, #216]	; (800246c <main+0x304>)
 8002392:	214c      	movs	r1, #76	; 0x4c
 8002394:	20e6      	movs	r0, #230	; 0xe6
 8002396:	f7ff fa1f 	bl	80017d8 <LCD_Font>
  	LCD_Font(275, 91, "70", _Open_Sans_Bold_18, 1, WHITE);
 800239a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800239e:	9301      	str	r3, [sp, #4]
 80023a0:	2301      	movs	r3, #1
 80023a2:	9300      	str	r3, [sp, #0]
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <main+0x2e8>)
 80023a6:	4a32      	ldr	r2, [pc, #200]	; (8002470 <main+0x308>)
 80023a8:	215b      	movs	r1, #91	; 0x5b
 80023aa:	f240 1013 	movw	r0, #275	; 0x113
 80023ae:	f7ff fa13 	bl	80017d8 <LCD_Font>
  	LCD_Font(300, 120, "80", _Open_Sans_Bold_18, 1, WHITE);
 80023b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b6:	9301      	str	r3, [sp, #4]
 80023b8:	2301      	movs	r3, #1
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	4b24      	ldr	r3, [pc, #144]	; (8002450 <main+0x2e8>)
 80023be:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <main+0x30c>)
 80023c0:	2178      	movs	r1, #120	; 0x78
 80023c2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023c6:	f7ff fa07 	bl	80017d8 <LCD_Font>
  	LCD_Font(315, 165, "90", _Open_Sans_Bold_18, 1, WHITE);
 80023ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	2301      	movs	r3, #1
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <main+0x2e8>)
 80023d6:	4a28      	ldr	r2, [pc, #160]	; (8002478 <main+0x310>)
 80023d8:	21a5      	movs	r1, #165	; 0xa5
 80023da:	f240 103b 	movw	r0, #315	; 0x13b
 80023de:	f7ff f9fb 	bl	80017d8 <LCD_Font>
  	LCD_Font(290, 215, "100", _Open_Sans_Bold_18, 1, WHITE);
 80023e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	2301      	movs	r3, #1
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4b18      	ldr	r3, [pc, #96]	; (8002450 <main+0x2e8>)
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <main+0x314>)
 80023f0:	21d7      	movs	r1, #215	; 0xd7
 80023f2:	f44f 7091 	mov.w	r0, #290	; 0x122
 80023f6:	f7ff f9ef 	bl	80017d8 <LCD_Font>
  	LCD_Font(228, 210, "C", _Open_Sans_Bold_48, 1, WHITE);
 80023fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023fe:	9301      	str	r3, [sp, #4]
 8002400:	2301      	movs	r3, #1
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4b1e      	ldr	r3, [pc, #120]	; (8002480 <main+0x318>)
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <main+0x31c>)
 8002408:	21d2      	movs	r1, #210	; 0xd2
 800240a:	20e4      	movs	r0, #228	; 0xe4
 800240c:	f7ff f9e4 	bl	80017d8 <LCD_Font>




  	for(int i = 0; i<360; i+= 30) {
 8002410:	2300      	movs	r3, #0
 8002412:	64bb      	str	r3, [r7, #72]	; 0x48
 8002414:	e0e1      	b.n	80025da <main+0x472>
 8002416:	bf00      	nop
 8002418:	a1fae711 	.word	0xa1fae711
 800241c:	3f91df46 	.word	0x3f91df46
 8002420:	080199d4 	.word	0x080199d4
 8002424:	080078b0 	.word	0x080078b0
 8002428:	200001fc 	.word	0x200001fc
 800242c:	20000000 	.word	0x20000000
 8002430:	42e40000 	.word	0x42e40000
 8002434:	43700000 	.word	0x43700000
 8002438:	200001f4 	.word	0x200001f4
 800243c:	43200000 	.word	0x43200000
 8002440:	200001f8 	.word	0x200001f8
 8002444:	42c80000 	.word	0x42c80000
 8002448:	200001f6 	.word	0x200001f6
 800244c:	200001fa 	.word	0x200001fa
 8002450:	08008120 	.word	0x08008120
 8002454:	080078b8 	.word	0x080078b8
 8002458:	080078bc 	.word	0x080078bc
 800245c:	080078c0 	.word	0x080078c0
 8002460:	080078c4 	.word	0x080078c4
 8002464:	080078c8 	.word	0x080078c8
 8002468:	080078cc 	.word	0x080078cc
 800246c:	080078d0 	.word	0x080078d0
 8002470:	080078d4 	.word	0x080078d4
 8002474:	080078d8 	.word	0x080078d8
 8002478:	080078dc 	.word	0x080078dc
 800247c:	080078e0 	.word	0x080078e0
 8002480:	0800a68c 	.word	0x0800a68c
 8002484:	080078e4 	.word	0x080078e4

  	    sx = cos((i-90)*0.0174532925);
 8002488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800248a:	3b5a      	subs	r3, #90	; 0x5a
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f851 	bl	8000534 <__aeabi_i2d>
 8002492:	a39f      	add	r3, pc, #636	; (adr r3, 8002710 <main+0x5a8>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8b6 	bl	8000608 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	ec43 2b17 	vmov	d7, r2, r3
 80024a4:	eeb0 0a47 	vmov.f32	s0, s14
 80024a8:	eef0 0a67 	vmov.f32	s1, s15
 80024ac:	f004 f960 	bl	8006770 <cos>
 80024b0:	ec53 2b10 	vmov	r2, r3, d0
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	f7fe fb7e 	bl	8000bb8 <__aeabi_d2f>
 80024bc:	4603      	mov	r3, r0
 80024be:	4a96      	ldr	r2, [pc, #600]	; (8002718 <main+0x5b0>)
 80024c0:	6013      	str	r3, [r2, #0]
  	    sy = sin((i-90)*0.0174532925);
 80024c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024c4:	3b5a      	subs	r3, #90	; 0x5a
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7fe f834 	bl	8000534 <__aeabi_i2d>
 80024cc:	a390      	add	r3, pc, #576	; (adr r3, 8002710 <main+0x5a8>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	f7fe f899 	bl	8000608 <__aeabi_dmul>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	ec43 2b17 	vmov	d7, r2, r3
 80024de:	eeb0 0a47 	vmov.f32	s0, s14
 80024e2:	eef0 0a67 	vmov.f32	s1, s15
 80024e6:	f004 f997 	bl	8006818 <sin>
 80024ea:	ec53 2b10 	vmov	r2, r3, d0
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f7fe fb61 	bl	8000bb8 <__aeabi_d2f>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4a88      	ldr	r2, [pc, #544]	; (800271c <main+0x5b4>)
 80024fa:	6013      	str	r3, [r2, #0]
  	    x00 = sx*114+540;  //240
 80024fc:	4b86      	ldr	r3, [pc, #536]	; (8002718 <main+0x5b0>)
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002720 <main+0x5b8>
 8002506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800250a:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8002724 <main+0x5bc>
 800250e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002512:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002516:	ee17 3a90 	vmov	r3, s15
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b82      	ldr	r3, [pc, #520]	; (8002728 <main+0x5c0>)
 800251e:	801a      	strh	r2, [r3, #0]
  	    y00 = sy*114+160;
 8002520:	4b7e      	ldr	r3, [pc, #504]	; (800271c <main+0x5b4>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002720 <main+0x5b8>
 800252a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800252e:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 800272c <main+0x5c4>
 8002532:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253a:	ee17 3a90 	vmov	r3, s15
 800253e:	b29a      	uxth	r2, r3
 8002540:	4b7b      	ldr	r3, [pc, #492]	; (8002730 <main+0x5c8>)
 8002542:	801a      	strh	r2, [r3, #0]
  	    x11 = sx*100+540;   //240
 8002544:	4b74      	ldr	r3, [pc, #464]	; (8002718 <main+0x5b0>)
 8002546:	edd3 7a00 	vldr	s15, [r3]
 800254a:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8002734 <main+0x5cc>
 800254e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002552:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8002724 <main+0x5bc>
 8002556:	ee77 7a87 	vadd.f32	s15, s15, s14
 800255a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800255e:	ee17 3a90 	vmov	r3, s15
 8002562:	b29a      	uxth	r2, r3
 8002564:	4b74      	ldr	r3, [pc, #464]	; (8002738 <main+0x5d0>)
 8002566:	801a      	strh	r2, [r3, #0]
  	    y11 = sy*100+160;
 8002568:	4b6c      	ldr	r3, [pc, #432]	; (800271c <main+0x5b4>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002734 <main+0x5cc>
 8002572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002576:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800272c <main+0x5c4>
 800257a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800257e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002582:	ee17 3a90 	vmov	r3, s15
 8002586:	b29a      	uxth	r2, r3
 8002588:	4b6c      	ldr	r3, [pc, #432]	; (800273c <main+0x5d4>)
 800258a:	801a      	strh	r2, [r3, #0]

  	    TFT_Draw_Line(x00-1, y00-1, x11, y11,1,WHITE);
 800258c:	4b66      	ldr	r3, [pc, #408]	; (8002728 <main+0x5c0>)
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	b298      	uxth	r0, r3
 8002594:	4b66      	ldr	r3, [pc, #408]	; (8002730 <main+0x5c8>)
 8002596:	881b      	ldrh	r3, [r3, #0]
 8002598:	3b01      	subs	r3, #1
 800259a:	b299      	uxth	r1, r3
 800259c:	4b66      	ldr	r3, [pc, #408]	; (8002738 <main+0x5d0>)
 800259e:	881a      	ldrh	r2, [r3, #0]
 80025a0:	4b66      	ldr	r3, [pc, #408]	; (800273c <main+0x5d4>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80025a8:	9401      	str	r4, [sp, #4]
 80025aa:	2401      	movs	r4, #1
 80025ac:	9400      	str	r4, [sp, #0]
 80025ae:	f7fe ff91 	bl	80014d4 <TFT_Draw_Line>
  	    if (i == 150) {
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	2b96      	cmp	r3, #150	; 0x96
 80025b6:	d10d      	bne.n	80025d4 <main+0x46c>
  	    	TFT_Draw_Line(x00, y00, x11, y11,1,BLACK);
 80025b8:	4b5b      	ldr	r3, [pc, #364]	; (8002728 <main+0x5c0>)
 80025ba:	8818      	ldrh	r0, [r3, #0]
 80025bc:	4b5c      	ldr	r3, [pc, #368]	; (8002730 <main+0x5c8>)
 80025be:	8819      	ldrh	r1, [r3, #0]
 80025c0:	4b5d      	ldr	r3, [pc, #372]	; (8002738 <main+0x5d0>)
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	4b5d      	ldr	r3, [pc, #372]	; (800273c <main+0x5d4>)
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2400      	movs	r4, #0
 80025ca:	9401      	str	r4, [sp, #4]
 80025cc:	2401      	movs	r4, #1
 80025ce:	9400      	str	r4, [sp, #0]
 80025d0:	f7fe ff80 	bl	80014d4 <TFT_Draw_Line>
  	for(int i = 0; i<360; i+= 30) {
 80025d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025d6:	331e      	adds	r3, #30
 80025d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025dc:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80025e0:	f6ff af52 	blt.w	8002488 <main+0x320>
  	    }
  	  }

  	LCD_Font(535, 254, "0", _Open_Sans_Bold_18, 1, WHITE);
 80025e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	2301      	movs	r3, #1
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	4b54      	ldr	r3, [pc, #336]	; (8002740 <main+0x5d8>)
 80025f0:	4a54      	ldr	r2, [pc, #336]	; (8002744 <main+0x5dc>)
 80025f2:	21fe      	movs	r1, #254	; 0xfe
 80025f4:	f240 2017 	movw	r0, #535	; 0x217
 80025f8:	f7ff f8ee 	bl	80017d8 <LCD_Font>
  	LCD_Font(493, 240, "10", _Open_Sans_Bold_18, 1, WHITE);
 80025fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002600:	9301      	str	r3, [sp, #4]
 8002602:	2301      	movs	r3, #1
 8002604:	9300      	str	r3, [sp, #0]
 8002606:	4b4e      	ldr	r3, [pc, #312]	; (8002740 <main+0x5d8>)
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <main+0x5e0>)
 800260a:	21f0      	movs	r1, #240	; 0xf0
 800260c:	f240 10ed 	movw	r0, #493	; 0x1ed
 8002610:	f7ff f8e2 	bl	80017d8 <LCD_Font>
  	LCD_Font(458, 210, "20", _Open_Sans_Bold_18, 1, WHITE);
 8002614:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002618:	9301      	str	r3, [sp, #4]
 800261a:	2301      	movs	r3, #1
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <main+0x5d8>)
 8002620:	4a4a      	ldr	r2, [pc, #296]	; (800274c <main+0x5e4>)
 8002622:	21d2      	movs	r1, #210	; 0xd2
 8002624:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
 8002628:	f7ff f8d6 	bl	80017d8 <LCD_Font>
  	LCD_Font(442, 165, "30", _Open_Sans_Bold_18, 1, WHITE);
 800262c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	2301      	movs	r3, #1
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <main+0x5d8>)
 8002638:	4a45      	ldr	r2, [pc, #276]	; (8002750 <main+0x5e8>)
 800263a:	21a5      	movs	r1, #165	; 0xa5
 800263c:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
 8002640:	f7ff f8ca 	bl	80017d8 <LCD_Font>
  	LCD_Font(455, 120, "40", _Open_Sans_Bold_18, 1, WHITE);
 8002644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	2301      	movs	r3, #1
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <main+0x5d8>)
 8002650:	4a40      	ldr	r2, [pc, #256]	; (8002754 <main+0x5ec>)
 8002652:	2178      	movs	r1, #120	; 0x78
 8002654:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002658:	f7ff f8be 	bl	80017d8 <LCD_Font>
  	LCD_Font(485, 91, "50", _Open_Sans_Bold_18, 1, WHITE);
 800265c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	2301      	movs	r3, #1
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	4b36      	ldr	r3, [pc, #216]	; (8002740 <main+0x5d8>)
 8002668:	4a3b      	ldr	r2, [pc, #236]	; (8002758 <main+0x5f0>)
 800266a:	215b      	movs	r1, #91	; 0x5b
 800266c:	f240 10e5 	movw	r0, #485	; 0x1e5
 8002670:	f7ff f8b2 	bl	80017d8 <LCD_Font>
  	LCD_Font(530, 76, "60", _Open_Sans_Bold_18, 1, WHITE);
 8002674:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002678:	9301      	str	r3, [sp, #4]
 800267a:	2301      	movs	r3, #1
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	4b30      	ldr	r3, [pc, #192]	; (8002740 <main+0x5d8>)
 8002680:	4a36      	ldr	r2, [pc, #216]	; (800275c <main+0x5f4>)
 8002682:	214c      	movs	r1, #76	; 0x4c
 8002684:	f240 2012 	movw	r0, #530	; 0x212
 8002688:	f7ff f8a6 	bl	80017d8 <LCD_Font>
  	LCD_Font(575, 91, "70", _Open_Sans_Bold_18, 1, WHITE);
 800268c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002690:	9301      	str	r3, [sp, #4]
 8002692:	2301      	movs	r3, #1
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <main+0x5d8>)
 8002698:	4a31      	ldr	r2, [pc, #196]	; (8002760 <main+0x5f8>)
 800269a:	215b      	movs	r1, #91	; 0x5b
 800269c:	f240 203f 	movw	r0, #575	; 0x23f
 80026a0:	f7ff f89a 	bl	80017d8 <LCD_Font>
  	LCD_Font(600, 120, "80", _Open_Sans_Bold_18, 1, WHITE);
 80026a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a8:	9301      	str	r3, [sp, #4]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <main+0x5d8>)
 80026b0:	4a2c      	ldr	r2, [pc, #176]	; (8002764 <main+0x5fc>)
 80026b2:	2178      	movs	r1, #120	; 0x78
 80026b4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80026b8:	f7ff f88e 	bl	80017d8 <LCD_Font>
  	LCD_Font(615, 165, "90", _Open_Sans_Bold_18, 1, WHITE);
 80026bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	2301      	movs	r3, #1
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <main+0x5d8>)
 80026c8:	4a27      	ldr	r2, [pc, #156]	; (8002768 <main+0x600>)
 80026ca:	21a5      	movs	r1, #165	; 0xa5
 80026cc:	f240 2067 	movw	r0, #615	; 0x267
 80026d0:	f7ff f882 	bl	80017d8 <LCD_Font>
  	LCD_Font(590, 215, "100", _Open_Sans_Bold_18, 1, WHITE);
 80026d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d8:	9301      	str	r3, [sp, #4]
 80026da:	2301      	movs	r3, #1
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <main+0x5d8>)
 80026e0:	4a22      	ldr	r2, [pc, #136]	; (800276c <main+0x604>)
 80026e2:	21d7      	movs	r1, #215	; 0xd7
 80026e4:	f240 204e 	movw	r0, #590	; 0x24e
 80026e8:	f7ff f876 	bl	80017d8 <LCD_Font>
  	LCD_Font(528, 210, "C", _Open_Sans_Bold_48, 1, WHITE);
 80026ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <main+0x608>)
 80026f8:	4a1e      	ldr	r2, [pc, #120]	; (8002774 <main+0x60c>)
 80026fa:	21d2      	movs	r1, #210	; 0xd2
 80026fc:	f44f 7004 	mov.w	r0, #528	; 0x210
 8002700:	f7ff f86a 	bl	80017d8 <LCD_Font>
	  	  //	  TFT_Clear_Screen(RED);




	  	  					 	for(int j = 0; j<850; j+= 30) {
 8002704:	2300      	movs	r3, #0
 8002706:	647b      	str	r3, [r7, #68]	; 0x44
 8002708:	e09c      	b.n	8002844 <main+0x6dc>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	a1fae711 	.word	0xa1fae711
 8002714:	3f91df46 	.word	0x3f91df46
 8002718:	200001fc 	.word	0x200001fc
 800271c:	20000000 	.word	0x20000000
 8002720:	42e40000 	.word	0x42e40000
 8002724:	44070000 	.word	0x44070000
 8002728:	200001f4 	.word	0x200001f4
 800272c:	43200000 	.word	0x43200000
 8002730:	200001f8 	.word	0x200001f8
 8002734:	42c80000 	.word	0x42c80000
 8002738:	200001f6 	.word	0x200001f6
 800273c:	200001fa 	.word	0x200001fa
 8002740:	08008120 	.word	0x08008120
 8002744:	080078b8 	.word	0x080078b8
 8002748:	080078bc 	.word	0x080078bc
 800274c:	080078c0 	.word	0x080078c0
 8002750:	080078c4 	.word	0x080078c4
 8002754:	080078c8 	.word	0x080078c8
 8002758:	080078cc 	.word	0x080078cc
 800275c:	080078d0 	.word	0x080078d0
 8002760:	080078d4 	.word	0x080078d4
 8002764:	080078d8 	.word	0x080078d8
 8002768:	080078dc 	.word	0x080078dc
 800276c:	080078e0 	.word	0x080078e0
 8002770:	0800a68c 	.word	0x0800a68c
 8002774:	080078e4 	.word	0x080078e4
	  	  					 		ringMeter(j, 0, 1020, 100, 20, 140, RED2GREEN);
 8002778:	2305      	movs	r3, #5
 800277a:	9302      	str	r3, [sp, #8]
 800277c:	238c      	movs	r3, #140	; 0x8c
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	2314      	movs	r3, #20
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2364      	movs	r3, #100	; 0x64
 8002786:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800278a:	2100      	movs	r1, #0
 800278c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800278e:	f7ff fa6b 	bl	8001c68 <ringMeter>
	  	  					 		sprintf(string, "%.1f", j/8.5);
 8002792:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002794:	f7fd fece 	bl	8000534 <__aeabi_i2d>
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <main+0x6e8>)
 800279e:	f7fe f85d 	bl	800085c <__aeabi_ddiv>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80027aa:	492a      	ldr	r1, [pc, #168]	; (8002854 <main+0x6ec>)
 80027ac:	f001 fe80 	bl	80044b0 <siprintf>
	  	  					 		TFT_Draw_Fill_Rectangle(190,115, 100, 50,BLACK);
 80027b0:	2300      	movs	r3, #0
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2332      	movs	r3, #50	; 0x32
 80027b6:	2264      	movs	r2, #100	; 0x64
 80027b8:	2173      	movs	r1, #115	; 0x73
 80027ba:	20be      	movs	r0, #190	; 0xbe
 80027bc:	f7fe ff25 	bl	800160a <TFT_Draw_Fill_Rectangle>
	  	  					 		  LCD_Font(190, 165, string, _Open_Sans_Bold_48, 1, WHITE);
 80027c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4b22      	ldr	r3, [pc, #136]	; (8002858 <main+0x6f0>)
 80027d0:	21a5      	movs	r1, #165	; 0xa5
 80027d2:	20be      	movs	r0, #190	; 0xbe
 80027d4:	f7ff f800 	bl	80017d8 <LCD_Font>


	  	  						 		ringMeter(j, 0, 1020, 400, 20, 140, GREEN2RED);
 80027d8:	2304      	movs	r3, #4
 80027da:	9302      	str	r3, [sp, #8]
 80027dc:	238c      	movs	r3, #140	; 0x8c
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2314      	movs	r3, #20
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80027e8:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80027ec:	2100      	movs	r1, #0
 80027ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027f0:	f7ff fa3a 	bl	8001c68 <ringMeter>
	  	  						 		sprintf(string, "%.1f", j/8.5);
 80027f4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027f6:	f7fd fe9d 	bl	8000534 <__aeabi_i2d>
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	4b14      	ldr	r3, [pc, #80]	; (8002850 <main+0x6e8>)
 8002800:	f7fe f82c 	bl	800085c <__aeabi_ddiv>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800280c:	4911      	ldr	r1, [pc, #68]	; (8002854 <main+0x6ec>)
 800280e:	f001 fe4f 	bl	80044b0 <siprintf>
	  	  						 		TFT_Draw_Fill_Rectangle(490,115, 100, 50,BLACK);
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2332      	movs	r3, #50	; 0x32
 8002818:	2264      	movs	r2, #100	; 0x64
 800281a:	2173      	movs	r1, #115	; 0x73
 800281c:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8002820:	f7fe fef3 	bl	800160a <TFT_Draw_Fill_Rectangle>
	  	  						 		  LCD_Font(490, 165, string, _Open_Sans_Bold_48, 1, WHITE);
 8002824:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282c:	9301      	str	r3, [sp, #4]
 800282e:	2301      	movs	r3, #1
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	4b09      	ldr	r3, [pc, #36]	; (8002858 <main+0x6f0>)
 8002834:	21a5      	movs	r1, #165	; 0xa5
 8002836:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 800283a:	f7fe ffcd 	bl	80017d8 <LCD_Font>
	  	  					 	for(int j = 0; j<850; j+= 30) {
 800283e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002840:	331e      	adds	r3, #30
 8002842:	647b      	str	r3, [r7, #68]	; 0x44
 8002844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002846:	f240 3251 	movw	r2, #849	; 0x351
 800284a:	4293      	cmp	r3, r2
 800284c:	dd94      	ble.n	8002778 <main+0x610>
 800284e:	e759      	b.n	8002704 <main+0x59c>
 8002850:	40210000 	.word	0x40210000
 8002854:	080078e8 	.word	0x080078e8
 8002858:	0800a68c 	.word	0x0800a68c

0800285c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b094      	sub	sp, #80	; 0x50
 8002860:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	2230      	movs	r2, #48	; 0x30
 8002868:	2100      	movs	r1, #0
 800286a:	4618      	mov	r0, r3
 800286c:	f001 fe83 	bl	8004576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002870:	f107 030c 	add.w	r3, r7, #12
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60bb      	str	r3, [r7, #8]
 8002884:	4b28      	ldr	r3, [pc, #160]	; (8002928 <SystemClock_Config+0xcc>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a27      	ldr	r2, [pc, #156]	; (8002928 <SystemClock_Config+0xcc>)
 800288a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
 8002890:	4b25      	ldr	r3, [pc, #148]	; (8002928 <SystemClock_Config+0xcc>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	4b22      	ldr	r3, [pc, #136]	; (800292c <SystemClock_Config+0xd0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80028a8:	4a20      	ldr	r2, [pc, #128]	; (800292c <SystemClock_Config+0xd0>)
 80028aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	4b1e      	ldr	r3, [pc, #120]	; (800292c <SystemClock_Config+0xd0>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028bc:	2302      	movs	r3, #2
 80028be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028c0:	2301      	movs	r3, #1
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028c4:	2310      	movs	r3, #16
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028c8:	2302      	movs	r3, #2
 80028ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028cc:	2300      	movs	r3, #0
 80028ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80028d0:	2308      	movs	r3, #8
 80028d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80028d4:	2354      	movs	r3, #84	; 0x54
 80028d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028d8:	2302      	movs	r3, #2
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80028dc:	2304      	movs	r3, #4
 80028de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028e0:	f107 0320 	add.w	r3, r7, #32
 80028e4:	4618      	mov	r0, r3
 80028e6:	f000 fc97 	bl	8003218 <HAL_RCC_OscConfig>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80028f0:	f000 f81e 	bl	8002930 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028f4:	230f      	movs	r3, #15
 80028f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028f8:	2302      	movs	r3, #2
 80028fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028fc:	2300      	movs	r3, #0
 80028fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002900:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002904:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800290a:	f107 030c 	add.w	r3, r7, #12
 800290e:	2102      	movs	r1, #2
 8002910:	4618      	mov	r0, r3
 8002912:	f000 fef9 	bl	8003708 <HAL_RCC_ClockConfig>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800291c:	f000 f808 	bl	8002930 <Error_Handler>
  }
}
 8002920:	bf00      	nop
 8002922:	3750      	adds	r7, #80	; 0x50
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40023800 	.word	0x40023800
 800292c:	40007000 	.word	0x40007000

08002930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002934:	b672      	cpsid	i
}
 8002936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002938:	e7fe      	b.n	8002938 <Error_Handler+0x8>
	...

0800293c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	607b      	str	r3, [r7, #4]
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_MspInit+0x4c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294a:	4a0f      	ldr	r2, [pc, #60]	; (8002988 <HAL_MspInit+0x4c>)
 800294c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002950:	6453      	str	r3, [r2, #68]	; 0x44
 8002952:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <HAL_MspInit+0x4c>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295a:	607b      	str	r3, [r7, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_MspInit+0x4c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_MspInit+0x4c>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	; 0x40
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_MspInit+0x4c>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002976:	603b      	str	r3, [r7, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800

0800298c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <NMI_Handler+0x4>

08002992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002996:	e7fe      	b.n	8002996 <HardFault_Handler+0x4>

08002998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800299c:	e7fe      	b.n	800299c <MemManage_Handler+0x4>

0800299e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <UsageFault_Handler+0x4>

080029aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029d8:	f000 f956 	bl	8002c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029dc:	bf00      	nop
 80029de:	bd80      	pop	{r7, pc}

080029e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return 1;
 80029e4:	2301      	movs	r3, #1
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <_kill>:

int _kill(int pid, int sig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029fa:	f001 fe0f 	bl	800461c <__errno>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2216      	movs	r2, #22
 8002a02:	601a      	str	r2, [r3, #0]
  return -1;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}

08002a10 <_exit>:

void _exit (int status)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a18:	f04f 31ff 	mov.w	r1, #4294967295
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ffe7 	bl	80029f0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a22:	e7fe      	b.n	8002a22 <_exit+0x12>

08002a24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a30:	2300      	movs	r3, #0
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	e00a      	b.n	8002a4c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a36:	f3af 8000 	nop.w
 8002a3a:	4601      	mov	r1, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	60ba      	str	r2, [r7, #8]
 8002a42:	b2ca      	uxtb	r2, r1
 8002a44:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	617b      	str	r3, [r7, #20]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	dbf0      	blt.n	8002a36 <_read+0x12>
  }

  return len;
 8002a54:	687b      	ldr	r3, [r7, #4]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3718      	adds	r7, #24
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	60f8      	str	r0, [r7, #12]
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
 8002a6e:	e009      	b.n	8002a84 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	60ba      	str	r2, [r7, #8]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	3301      	adds	r3, #1
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	dbf1      	blt.n	8002a70 <_write+0x12>
  }
  return len;
 8002a8c:	687b      	ldr	r3, [r7, #4]
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3718      	adds	r7, #24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}

08002a96 <_close>:

int _close(int file)
{
 8002a96:	b480      	push	{r7}
 8002a98:	b083      	sub	sp, #12
 8002a9a:	af00      	add	r7, sp, #0
 8002a9c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abe:	605a      	str	r2, [r3, #4]
  return 0;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <_isatty>:

int _isatty(int file)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
	...

08002b00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b08:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <_sbrk+0x5c>)
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <_sbrk+0x60>)
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b14:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <_sbrk+0x64>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d102      	bne.n	8002b22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b1c:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <_sbrk+0x64>)
 8002b1e:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <_sbrk+0x68>)
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d207      	bcs.n	8002b40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b30:	f001 fd74 	bl	800461c <__errno>
 8002b34:	4603      	mov	r3, r0
 8002b36:	220c      	movs	r2, #12
 8002b38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b3e:	e009      	b.n	8002b54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b40:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <_sbrk+0x64>)
 8002b50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3718      	adds	r7, #24
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20018000 	.word	0x20018000
 8002b60:	00000400 	.word	0x00000400
 8002b64:	20000200 	.word	0x20000200
 8002b68:	20000358 	.word	0x20000358

08002b6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b70:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <SystemInit+0x20>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <SystemInit+0x20>)
 8002b78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	e000ed00 	.word	0xe000ed00

08002b90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b96:	490e      	ldr	r1, [pc, #56]	; (8002bd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b98:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002baa:	4a0b      	ldr	r2, [pc, #44]	; (8002bd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bac:	4c0b      	ldr	r4, [pc, #44]	; (8002bdc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002bba:	f7ff ffd7 	bl	8002b6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bbe:	f001 fd33 	bl	8004628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bc2:	f7ff fad1 	bl	8002168 <main>
  bx  lr    
 8002bc6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002bc8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bd0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002bd4:	08019f50 	.word	0x08019f50
  ldr r2, =_sbss
 8002bd8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002bdc:	20000354 	.word	0x20000354

08002be0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002be0:	e7fe      	b.n	8002be0 <ADC_IRQHandler>
	...

08002be4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002be8:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_Init+0x40>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a0d      	ldr	r2, [pc, #52]	; (8002c24 <HAL_Init+0x40>)
 8002bee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bf2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	; (8002c24 <HAL_Init+0x40>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_Init+0x40>)
 8002bfa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bfe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <HAL_Init+0x40>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a07      	ldr	r2, [pc, #28]	; (8002c24 <HAL_Init+0x40>)
 8002c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c0c:	2003      	movs	r0, #3
 8002c0e:	f000 f931 	bl	8002e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c12:	200f      	movs	r0, #15
 8002c14:	f000 f808 	bl	8002c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c18:	f7ff fe90 	bl	800293c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00

08002c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x54>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b12      	ldr	r3, [pc, #72]	; (8002c80 <HAL_InitTick+0x58>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	4619      	mov	r1, r3
 8002c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c46:	4618      	mov	r0, r3
 8002c48:	f000 f93b 	bl	8002ec2 <HAL_SYSTICK_Config>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00e      	b.n	8002c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b0f      	cmp	r3, #15
 8002c5a:	d80a      	bhi.n	8002c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f000 f911 	bl	8002e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c68:	4a06      	ldr	r2, [pc, #24]	; (8002c84 <HAL_InitTick+0x5c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e000      	b.n	8002c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	20000004 	.word	0x20000004
 8002c80:	2000000c 	.word	0x2000000c
 8002c84:	20000008 	.word	0x20000008

08002c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_IncTick+0x24>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <HAL_IncTick+0x24>)
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	2000000c 	.word	0x2000000c
 8002cac:	20000204 	.word	0x20000204

08002cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_GetTick+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	20000204 	.word	0x20000204

08002cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cd0:	f7ff ffee 	bl	8002cb0 <HAL_GetTick>
 8002cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ce0:	d005      	beq.n	8002cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	; (8002d0c <HAL_Delay+0x44>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4413      	add	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cee:	bf00      	nop
 8002cf0:	f7ff ffde 	bl	8002cb0 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d8f7      	bhi.n	8002cf0 <HAL_Delay+0x28>
  {
  }
}
 8002d00:	bf00      	nop
 8002d02:	bf00      	nop
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2000000c 	.word	0x2000000c

08002d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d20:	4b0c      	ldr	r3, [pc, #48]	; (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <__NVIC_SetPriorityGrouping+0x44>)
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	60d3      	str	r3, [r2, #12]
}
 8002d48:	bf00      	nop
 8002d4a:	3714      	adds	r7, #20
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr
 8002d54:	e000ed00 	.word	0xe000ed00

08002d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d5c:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <__NVIC_GetPriorityGrouping+0x18>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	0a1b      	lsrs	r3, r3, #8
 8002d62:	f003 0307 	and.w	r3, r3, #7
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000ed00 	.word	0xe000ed00

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	db0a      	blt.n	8002d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	490c      	ldr	r1, [pc, #48]	; (8002dc0 <__NVIC_SetPriority+0x4c>)
 8002d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d92:	0112      	lsls	r2, r2, #4
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	440b      	add	r3, r1
 8002d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d9c:	e00a      	b.n	8002db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	4908      	ldr	r1, [pc, #32]	; (8002dc4 <__NVIC_SetPriority+0x50>)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	3b04      	subs	r3, #4
 8002dac:	0112      	lsls	r2, r2, #4
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	440b      	add	r3, r1
 8002db2:	761a      	strb	r2, [r3, #24]
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	e000e100 	.word	0xe000e100
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b089      	sub	sp, #36	; 0x24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f1c3 0307 	rsb	r3, r3, #7
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	bf28      	it	cs
 8002de6:	2304      	movcs	r3, #4
 8002de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d902      	bls.n	8002df8 <NVIC_EncodePriority+0x30>
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3b03      	subs	r3, #3
 8002df6:	e000      	b.n	8002dfa <NVIC_EncodePriority+0x32>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	fa01 f303 	lsl.w	r3, r1, r3
 8002e1a:	43d9      	mvns	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	4313      	orrs	r3, r2
         );
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e40:	d301      	bcc.n	8002e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e42:	2301      	movs	r3, #1
 8002e44:	e00f      	b.n	8002e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e46:	4a0a      	ldr	r2, [pc, #40]	; (8002e70 <SysTick_Config+0x40>)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e4e:	210f      	movs	r1, #15
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	f7ff ff8e 	bl	8002d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e58:	4b05      	ldr	r3, [pc, #20]	; (8002e70 <SysTick_Config+0x40>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e5e:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <SysTick_Config+0x40>)
 8002e60:	2207      	movs	r2, #7
 8002e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	e000e010 	.word	0xe000e010

08002e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f7ff ff47 	bl	8002d10 <__NVIC_SetPriorityGrouping>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
 8002e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e9c:	f7ff ff5c 	bl	8002d58 <__NVIC_GetPriorityGrouping>
 8002ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	6978      	ldr	r0, [r7, #20]
 8002ea8:	f7ff ff8e 	bl	8002dc8 <NVIC_EncodePriority>
 8002eac:	4602      	mov	r2, r0
 8002eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eb2:	4611      	mov	r1, r2
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff5d 	bl	8002d74 <__NVIC_SetPriority>
}
 8002eba:	bf00      	nop
 8002ebc:	3718      	adds	r7, #24
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffb0 	bl	8002e30 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b089      	sub	sp, #36	; 0x24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
 8002ef6:	e159      	b.n	80031ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	f040 8148 	bne.w	80031a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d005      	beq.n	8002f2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d130      	bne.n	8002f90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f64:	2201      	movs	r2, #1
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 0201 	and.w	r2, r3, #1
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0303 	and.w	r3, r3, #3
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d017      	beq.n	8002fcc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	2203      	movs	r2, #3
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d123      	bne.n	8003020 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	08da      	lsrs	r2, r3, #3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3208      	adds	r2, #8
 8002fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	220f      	movs	r2, #15
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f003 0307 	and.w	r3, r3, #7
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4313      	orrs	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	08da      	lsrs	r2, r3, #3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3208      	adds	r2, #8
 800301a:	69b9      	ldr	r1, [r7, #24]
 800301c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4013      	ands	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0203 	and.w	r2, r3, #3
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 80a2 	beq.w	80031a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b57      	ldr	r3, [pc, #348]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b54      	ldr	r3, [pc, #336]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800307e:	4a52      	ldr	r2, [pc, #328]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	089b      	lsrs	r3, r3, #2
 8003084:	3302      	adds	r3, #2
 8003086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	220f      	movs	r2, #15
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a49      	ldr	r2, [pc, #292]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d019      	beq.n	80030de <HAL_GPIO_Init+0x202>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a48      	ldr	r2, [pc, #288]	; (80031d0 <HAL_GPIO_Init+0x2f4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d013      	beq.n	80030da <HAL_GPIO_Init+0x1fe>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a47      	ldr	r2, [pc, #284]	; (80031d4 <HAL_GPIO_Init+0x2f8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d00d      	beq.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a46      	ldr	r2, [pc, #280]	; (80031d8 <HAL_GPIO_Init+0x2fc>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d007      	beq.n	80030d2 <HAL_GPIO_Init+0x1f6>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a45      	ldr	r2, [pc, #276]	; (80031dc <HAL_GPIO_Init+0x300>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d101      	bne.n	80030ce <HAL_GPIO_Init+0x1f2>
 80030ca:	2304      	movs	r3, #4
 80030cc:	e008      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030ce:	2307      	movs	r3, #7
 80030d0:	e006      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030d2:	2303      	movs	r3, #3
 80030d4:	e004      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e002      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x204>
 80030de:	2300      	movs	r3, #0
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f002 0203 	and.w	r2, r2, #3
 80030e6:	0092      	lsls	r2, r2, #2
 80030e8:	4093      	lsls	r3, r2
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f0:	4935      	ldr	r1, [pc, #212]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	089b      	lsrs	r3, r3, #2
 80030f6:	3302      	adds	r3, #2
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030fe:	4b38      	ldr	r3, [pc, #224]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	4313      	orrs	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003122:	4a2f      	ldr	r2, [pc, #188]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d003      	beq.n	800314c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800314c:	4a24      	ldr	r2, [pc, #144]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003152:	4b23      	ldr	r3, [pc, #140]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	4313      	orrs	r3, r2
 8003174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_GPIO_Init+0x304>)
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800317c:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <HAL_GPIO_Init+0x304>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a0:	4a0f      	ldr	r2, [pc, #60]	; (80031e0 <HAL_GPIO_Init+0x304>)
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	3301      	adds	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	2b0f      	cmp	r3, #15
 80031b0:	f67f aea2 	bls.w	8002ef8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3724      	adds	r7, #36	; 0x24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40013800 	.word	0x40013800
 80031cc:	40020000 	.word	0x40020000
 80031d0:	40020400 	.word	0x40020400
 80031d4:	40020800 	.word	0x40020800
 80031d8:	40020c00 	.word	0x40020c00
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40013c00 	.word	0x40013c00

080031e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
 80031f0:	4613      	mov	r3, r2
 80031f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031f4:	787b      	ldrb	r3, [r7, #1]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031fa:	887a      	ldrh	r2, [r7, #2]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003200:	e003      	b.n	800320a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003202:	887b      	ldrh	r3, [r7, #2]
 8003204:	041a      	lsls	r2, r3, #16
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	619a      	str	r2, [r3, #24]
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e267      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d075      	beq.n	8003322 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003236:	4b88      	ldr	r3, [pc, #544]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b04      	cmp	r3, #4
 8003240:	d00c      	beq.n	800325c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003242:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800324a:	2b08      	cmp	r3, #8
 800324c:	d112      	bne.n	8003274 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800324e:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325a:	d10b      	bne.n	8003274 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800325c:	4b7e      	ldr	r3, [pc, #504]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05b      	beq.n	8003320 <HAL_RCC_OscConfig+0x108>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d157      	bne.n	8003320 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e242      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d106      	bne.n	800328c <HAL_RCC_OscConfig+0x74>
 800327e:	4b76      	ldr	r3, [pc, #472]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a75      	ldr	r2, [pc, #468]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e01d      	b.n	80032c8 <HAL_RCC_OscConfig+0xb0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003294:	d10c      	bne.n	80032b0 <HAL_RCC_OscConfig+0x98>
 8003296:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a6f      	ldr	r2, [pc, #444]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 800329c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]
 80032a2:	4b6d      	ldr	r3, [pc, #436]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a6c      	ldr	r2, [pc, #432]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ac:	6013      	str	r3, [r2, #0]
 80032ae:	e00b      	b.n	80032c8 <HAL_RCC_OscConfig+0xb0>
 80032b0:	4b69      	ldr	r3, [pc, #420]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a68      	ldr	r2, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	4b66      	ldr	r3, [pc, #408]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a65      	ldr	r2, [pc, #404]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d013      	beq.n	80032f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7ff fcee 	bl	8002cb0 <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d8:	f7ff fcea 	bl	8002cb0 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b64      	cmp	r3, #100	; 0x64
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e207      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b5b      	ldr	r3, [pc, #364]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d0f0      	beq.n	80032d8 <HAL_RCC_OscConfig+0xc0>
 80032f6:	e014      	b.n	8003322 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f8:	f7ff fcda 	bl	8002cb0 <HAL_GetTick>
 80032fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	e008      	b.n	8003312 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003300:	f7ff fcd6 	bl	8002cb0 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	1ad3      	subs	r3, r2, r3
 800330a:	2b64      	cmp	r3, #100	; 0x64
 800330c:	d901      	bls.n	8003312 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e1f3      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	4b51      	ldr	r3, [pc, #324]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f0      	bne.n	8003300 <HAL_RCC_OscConfig+0xe8>
 800331e:	e000      	b.n	8003322 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d063      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332e:	4b4a      	ldr	r3, [pc, #296]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 030c 	and.w	r3, r3, #12
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00b      	beq.n	8003352 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800333a:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003342:	2b08      	cmp	r3, #8
 8003344:	d11c      	bne.n	8003380 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003346:	4b44      	ldr	r3, [pc, #272]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d116      	bne.n	8003380 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d005      	beq.n	800336a <HAL_RCC_OscConfig+0x152>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d001      	beq.n	800336a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e1c7      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336a:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4937      	ldr	r1, [pc, #220]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 800337a:	4313      	orrs	r3, r2
 800337c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	e03a      	b.n	80033f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d020      	beq.n	80033ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003388:	4b34      	ldr	r3, [pc, #208]	; (800345c <HAL_RCC_OscConfig+0x244>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338e:	f7ff fc8f 	bl	8002cb0 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003396:	f7ff fc8b 	bl	8002cb0 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e1a8      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a8:	4b2b      	ldr	r3, [pc, #172]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4925      	ldr	r1, [pc, #148]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	600b      	str	r3, [r1, #0]
 80033c8:	e015      	b.n	80033f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ca:	4b24      	ldr	r3, [pc, #144]	; (800345c <HAL_RCC_OscConfig+0x244>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d0:	f7ff fc6e 	bl	8002cb0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d8:	f7ff fc6a 	bl	8002cb0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e187      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033ea:	4b1b      	ldr	r3, [pc, #108]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d036      	beq.n	8003470 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800340a:	4b15      	ldr	r3, [pc, #84]	; (8003460 <HAL_RCC_OscConfig+0x248>)
 800340c:	2201      	movs	r2, #1
 800340e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7ff fc4e 	bl	8002cb0 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003418:	f7ff fc4a 	bl	8002cb0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e167      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_OscConfig+0x240>)
 800342c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0f0      	beq.n	8003418 <HAL_RCC_OscConfig+0x200>
 8003436:	e01b      	b.n	8003470 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <HAL_RCC_OscConfig+0x248>)
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343e:	f7ff fc37 	bl	8002cb0 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	e00e      	b.n	8003464 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003446:	f7ff fc33 	bl	8002cb0 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d907      	bls.n	8003464 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e150      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
 8003458:	40023800 	.word	0x40023800
 800345c:	42470000 	.word	0x42470000
 8003460:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1ea      	bne.n	8003446 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0304 	and.w	r3, r3, #4
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 8097 	beq.w	80035ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800347e:	2300      	movs	r3, #0
 8003480:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003482:	4b81      	ldr	r3, [pc, #516]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10f      	bne.n	80034ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	4b7d      	ldr	r3, [pc, #500]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003496:	4a7c      	ldr	r2, [pc, #496]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349c:	6413      	str	r3, [r2, #64]	; 0x40
 800349e:	4b7a      	ldr	r3, [pc, #488]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80034a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ae:	4b77      	ldr	r3, [pc, #476]	; (800368c <HAL_RCC_OscConfig+0x474>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d118      	bne.n	80034ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ba:	4b74      	ldr	r3, [pc, #464]	; (800368c <HAL_RCC_OscConfig+0x474>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a73      	ldr	r2, [pc, #460]	; (800368c <HAL_RCC_OscConfig+0x474>)
 80034c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034c6:	f7ff fbf3 	bl	8002cb0 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ce:	f7ff fbef 	bl	8002cb0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e10c      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e0:	4b6a      	ldr	r3, [pc, #424]	; (800368c <HAL_RCC_OscConfig+0x474>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d106      	bne.n	8003502 <HAL_RCC_OscConfig+0x2ea>
 80034f4:	4b64      	ldr	r3, [pc, #400]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80034f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f8:	4a63      	ldr	r2, [pc, #396]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003500:	e01c      	b.n	800353c <HAL_RCC_OscConfig+0x324>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b05      	cmp	r3, #5
 8003508:	d10c      	bne.n	8003524 <HAL_RCC_OscConfig+0x30c>
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 800350c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350e:	4a5e      	ldr	r2, [pc, #376]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003510:	f043 0304 	orr.w	r3, r3, #4
 8003514:	6713      	str	r3, [r2, #112]	; 0x70
 8003516:	4b5c      	ldr	r3, [pc, #368]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a5b      	ldr	r2, [pc, #364]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 800351c:	f043 0301 	orr.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	e00b      	b.n	800353c <HAL_RCC_OscConfig+0x324>
 8003524:	4b58      	ldr	r3, [pc, #352]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	4a57      	ldr	r2, [pc, #348]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6713      	str	r3, [r2, #112]	; 0x70
 8003530:	4b55      	ldr	r3, [pc, #340]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003534:	4a54      	ldr	r2, [pc, #336]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003536:	f023 0304 	bic.w	r3, r3, #4
 800353a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d015      	beq.n	8003570 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003544:	f7ff fbb4 	bl	8002cb0 <HAL_GetTick>
 8003548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7ff fbb0 	bl	8002cb0 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e0cb      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	4b49      	ldr	r3, [pc, #292]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ee      	beq.n	800354c <HAL_RCC_OscConfig+0x334>
 800356e:	e014      	b.n	800359a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7ff fb9e 	bl	8002cb0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003576:	e00a      	b.n	800358e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003578:	f7ff fb9a 	bl	8002cb0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0b5      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800358e:	4b3e      	ldr	r3, [pc, #248]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ee      	bne.n	8003578 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800359a:	7dfb      	ldrb	r3, [r7, #23]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d105      	bne.n	80035ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a0:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	4a38      	ldr	r2, [pc, #224]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80035a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 80a1 	beq.w	80036f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035b6:	4b34      	ldr	r3, [pc, #208]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d05c      	beq.n	800367c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d141      	bne.n	800364e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ca:	4b31      	ldr	r3, [pc, #196]	; (8003690 <HAL_RCC_OscConfig+0x478>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7ff fb6e 	bl	8002cb0 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d8:	f7ff fb6a 	bl	8002cb0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e087      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035ea:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	019b      	lsls	r3, r3, #6
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	3b01      	subs	r3, #1
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003618:	061b      	lsls	r3, r3, #24
 800361a:	491b      	ldr	r1, [pc, #108]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003620:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_OscConfig+0x478>)
 8003622:	2201      	movs	r2, #1
 8003624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003626:	f7ff fb43 	bl	8002cb0 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362e:	f7ff fb3f 	bl	8002cb0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e05c      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d0f0      	beq.n	800362e <HAL_RCC_OscConfig+0x416>
 800364c:	e054      	b.n	80036f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800364e:	4b10      	ldr	r3, [pc, #64]	; (8003690 <HAL_RCC_OscConfig+0x478>)
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003654:	f7ff fb2c 	bl	8002cb0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800365c:	f7ff fb28 	bl	8002cb0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e045      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_RCC_OscConfig+0x470>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1f0      	bne.n	800365c <HAL_RCC_OscConfig+0x444>
 800367a:	e03d      	b.n	80036f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d107      	bne.n	8003694 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e038      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
 8003688:	40023800 	.word	0x40023800
 800368c:	40007000 	.word	0x40007000
 8003690:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_RCC_OscConfig+0x4ec>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d028      	beq.n	80036f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d121      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d11a      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d111      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036da:	085b      	lsrs	r3, r3, #1
 80036dc:	3b01      	subs	r3, #1
 80036de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d107      	bne.n	80036f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d001      	beq.n	80036f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e000      	b.n	80036fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800

08003708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0cc      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800371c:	4b68      	ldr	r3, [pc, #416]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d90c      	bls.n	8003744 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b65      	ldr	r3, [pc, #404]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b63      	ldr	r3, [pc, #396]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e0b8      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	d005      	beq.n	8003768 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800375c:	4b59      	ldr	r3, [pc, #356]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	4a58      	ldr	r2, [pc, #352]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003762:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003766:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003774:	4b53      	ldr	r3, [pc, #332]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a52      	ldr	r2, [pc, #328]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800377a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800377e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	494d      	ldr	r1, [pc, #308]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	4313      	orrs	r3, r2
 8003790:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d044      	beq.n	8003828 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	4b47      	ldr	r3, [pc, #284]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d119      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e07f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d003      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d107      	bne.n	80037d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c6:	4b3f      	ldr	r3, [pc, #252]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e06f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037d6:	4b3b      	ldr	r3, [pc, #236]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d101      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e067      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037e6:	4b37      	ldr	r3, [pc, #220]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f023 0203 	bic.w	r2, r3, #3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	4934      	ldr	r1, [pc, #208]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037f8:	f7ff fa5a 	bl	8002cb0 <HAL_GetTick>
 80037fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fe:	e00a      	b.n	8003816 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003800:	f7ff fa56 	bl	8002cb0 <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	f241 3288 	movw	r2, #5000	; 0x1388
 800380e:	4293      	cmp	r3, r2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e04f      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003816:	4b2b      	ldr	r3, [pc, #172]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 020c 	and.w	r2, r3, #12
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	429a      	cmp	r2, r3
 8003826:	d1eb      	bne.n	8003800 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003828:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	429a      	cmp	r2, r3
 8003834:	d20c      	bcs.n	8003850 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b20      	ldr	r3, [pc, #128]	; (80038c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e032      	b.n	80038b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800385c:	4b19      	ldr	r3, [pc, #100]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	4916      	ldr	r1, [pc, #88]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	4313      	orrs	r3, r2
 800386c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d009      	beq.n	800388e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	691b      	ldr	r3, [r3, #16]
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	490e      	ldr	r1, [pc, #56]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	4313      	orrs	r3, r2
 800388c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800388e:	f000 f821 	bl	80038d4 <HAL_RCC_GetSysClockFreq>
 8003892:	4602      	mov	r2, r0
 8003894:	4b0b      	ldr	r3, [pc, #44]	; (80038c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	091b      	lsrs	r3, r3, #4
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	490a      	ldr	r1, [pc, #40]	; (80038c8 <HAL_RCC_ClockConfig+0x1c0>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	fa22 f303 	lsr.w	r3, r2, r3
 80038a6:	4a09      	ldr	r2, [pc, #36]	; (80038cc <HAL_RCC_ClockConfig+0x1c4>)
 80038a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038aa:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_RCC_ClockConfig+0x1c8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7ff f9ba 	bl	8002c28 <HAL_InitTick>

  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40023c00 	.word	0x40023c00
 80038c4:	40023800 	.word	0x40023800
 80038c8:	080199e0 	.word	0x080199e0
 80038cc:	20000004 	.word	0x20000004
 80038d0:	20000008 	.word	0x20000008

080038d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b090      	sub	sp, #64	; 0x40
 80038da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038dc:	2300      	movs	r3, #0
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
 80038e0:	2300      	movs	r3, #0
 80038e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80038e4:	2300      	movs	r3, #0
 80038e6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ec:	4b59      	ldr	r3, [pc, #356]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 030c 	and.w	r3, r3, #12
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d00d      	beq.n	8003914 <HAL_RCC_GetSysClockFreq+0x40>
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	f200 80a1 	bhi.w	8003a40 <HAL_RCC_GetSysClockFreq+0x16c>
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_RCC_GetSysClockFreq+0x34>
 8003902:	2b04      	cmp	r3, #4
 8003904:	d003      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x3a>
 8003906:	e09b      	b.n	8003a40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x184>)
 800390a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800390c:	e09b      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390e:	4b53      	ldr	r3, [pc, #332]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003910:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003912:	e098      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003914:	4b4f      	ldr	r3, [pc, #316]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800391e:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d028      	beq.n	800397c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392a:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x180>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	2200      	movs	r2, #0
 8003932:	623b      	str	r3, [r7, #32]
 8003934:	627a      	str	r2, [r7, #36]	; 0x24
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800393c:	2100      	movs	r1, #0
 800393e:	4b47      	ldr	r3, [pc, #284]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x188>)
 8003940:	fb03 f201 	mul.w	r2, r3, r1
 8003944:	2300      	movs	r3, #0
 8003946:	fb00 f303 	mul.w	r3, r0, r3
 800394a:	4413      	add	r3, r2
 800394c:	4a43      	ldr	r2, [pc, #268]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x188>)
 800394e:	fba0 1202 	umull	r1, r2, r0, r2
 8003952:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003954:	460a      	mov	r2, r1
 8003956:	62ba      	str	r2, [r7, #40]	; 0x28
 8003958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395a:	4413      	add	r3, r2
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003960:	2200      	movs	r2, #0
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	61fa      	str	r2, [r7, #28]
 8003966:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800396a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800396e:	f7fd f973 	bl	8000c58 <__aeabi_uldivmod>
 8003972:	4602      	mov	r2, r0
 8003974:	460b      	mov	r3, r1
 8003976:	4613      	mov	r3, r2
 8003978:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397a:	e053      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800397c:	4b35      	ldr	r3, [pc, #212]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x180>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	099b      	lsrs	r3, r3, #6
 8003982:	2200      	movs	r2, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	617a      	str	r2, [r7, #20]
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800398e:	f04f 0b00 	mov.w	fp, #0
 8003992:	4652      	mov	r2, sl
 8003994:	465b      	mov	r3, fp
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	0159      	lsls	r1, r3, #5
 80039a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039a4:	0150      	lsls	r0, r2, #5
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	ebb2 080a 	subs.w	r8, r2, sl
 80039ae:	eb63 090b 	sbc.w	r9, r3, fp
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039c6:	ebb2 0408 	subs.w	r4, r2, r8
 80039ca:	eb63 0509 	sbc.w	r5, r3, r9
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	00eb      	lsls	r3, r5, #3
 80039d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039dc:	00e2      	lsls	r2, r4, #3
 80039de:	4614      	mov	r4, r2
 80039e0:	461d      	mov	r5, r3
 80039e2:	eb14 030a 	adds.w	r3, r4, sl
 80039e6:	603b      	str	r3, [r7, #0]
 80039e8:	eb45 030b 	adc.w	r3, r5, fp
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	f04f 0200 	mov.w	r2, #0
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039fa:	4629      	mov	r1, r5
 80039fc:	028b      	lsls	r3, r1, #10
 80039fe:	4621      	mov	r1, r4
 8003a00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a04:	4621      	mov	r1, r4
 8003a06:	028a      	lsls	r2, r1, #10
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a0e:	2200      	movs	r2, #0
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	60fa      	str	r2, [r7, #12]
 8003a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a18:	f7fd f91e 	bl	8000c58 <__aeabi_uldivmod>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4613      	mov	r3, r2
 8003a22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a24:	4b0b      	ldr	r3, [pc, #44]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003a34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a3e:	e002      	b.n	8003a46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a40:	4b05      	ldr	r3, [pc, #20]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3740      	adds	r7, #64	; 0x40
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	017d7840 	.word	0x017d7840

08003a60 <__cvt>:
 8003a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	ec55 4b10 	vmov	r4, r5, d0
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	460e      	mov	r6, r1
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	462b      	mov	r3, r5
 8003a70:	bfbb      	ittet	lt
 8003a72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003a76:	461d      	movlt	r5, r3
 8003a78:	2300      	movge	r3, #0
 8003a7a:	232d      	movlt	r3, #45	; 0x2d
 8003a7c:	700b      	strb	r3, [r1, #0]
 8003a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003a84:	4691      	mov	r9, r2
 8003a86:	f023 0820 	bic.w	r8, r3, #32
 8003a8a:	bfbc      	itt	lt
 8003a8c:	4622      	movlt	r2, r4
 8003a8e:	4614      	movlt	r4, r2
 8003a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003a94:	d005      	beq.n	8003aa2 <__cvt+0x42>
 8003a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003a9a:	d100      	bne.n	8003a9e <__cvt+0x3e>
 8003a9c:	3601      	adds	r6, #1
 8003a9e:	2102      	movs	r1, #2
 8003aa0:	e000      	b.n	8003aa4 <__cvt+0x44>
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	ab03      	add	r3, sp, #12
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	ab02      	add	r3, sp, #8
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	ec45 4b10 	vmov	d0, r4, r5
 8003ab0:	4653      	mov	r3, sl
 8003ab2:	4632      	mov	r2, r6
 8003ab4:	f000 fe78 	bl	80047a8 <_dtoa_r>
 8003ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003abc:	4607      	mov	r7, r0
 8003abe:	d102      	bne.n	8003ac6 <__cvt+0x66>
 8003ac0:	f019 0f01 	tst.w	r9, #1
 8003ac4:	d022      	beq.n	8003b0c <__cvt+0xac>
 8003ac6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003aca:	eb07 0906 	add.w	r9, r7, r6
 8003ace:	d110      	bne.n	8003af2 <__cvt+0x92>
 8003ad0:	783b      	ldrb	r3, [r7, #0]
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d10a      	bne.n	8003aec <__cvt+0x8c>
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2300      	movs	r3, #0
 8003ada:	4620      	mov	r0, r4
 8003adc:	4629      	mov	r1, r5
 8003ade:	f7fc fffb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ae2:	b918      	cbnz	r0, 8003aec <__cvt+0x8c>
 8003ae4:	f1c6 0601 	rsb	r6, r6, #1
 8003ae8:	f8ca 6000 	str.w	r6, [sl]
 8003aec:	f8da 3000 	ldr.w	r3, [sl]
 8003af0:	4499      	add	r9, r3
 8003af2:	2200      	movs	r2, #0
 8003af4:	2300      	movs	r3, #0
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	f7fc ffed 	bl	8000ad8 <__aeabi_dcmpeq>
 8003afe:	b108      	cbz	r0, 8003b04 <__cvt+0xa4>
 8003b00:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b04:	2230      	movs	r2, #48	; 0x30
 8003b06:	9b03      	ldr	r3, [sp, #12]
 8003b08:	454b      	cmp	r3, r9
 8003b0a:	d307      	bcc.n	8003b1c <__cvt+0xbc>
 8003b0c:	9b03      	ldr	r3, [sp, #12]
 8003b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b10:	1bdb      	subs	r3, r3, r7
 8003b12:	4638      	mov	r0, r7
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	b004      	add	sp, #16
 8003b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b1c:	1c59      	adds	r1, r3, #1
 8003b1e:	9103      	str	r1, [sp, #12]
 8003b20:	701a      	strb	r2, [r3, #0]
 8003b22:	e7f0      	b.n	8003b06 <__cvt+0xa6>

08003b24 <__exponent>:
 8003b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b26:	4603      	mov	r3, r0
 8003b28:	2900      	cmp	r1, #0
 8003b2a:	bfb8      	it	lt
 8003b2c:	4249      	neglt	r1, r1
 8003b2e:	f803 2b02 	strb.w	r2, [r3], #2
 8003b32:	bfb4      	ite	lt
 8003b34:	222d      	movlt	r2, #45	; 0x2d
 8003b36:	222b      	movge	r2, #43	; 0x2b
 8003b38:	2909      	cmp	r1, #9
 8003b3a:	7042      	strb	r2, [r0, #1]
 8003b3c:	dd2a      	ble.n	8003b94 <__exponent+0x70>
 8003b3e:	f10d 0207 	add.w	r2, sp, #7
 8003b42:	4617      	mov	r7, r2
 8003b44:	260a      	movs	r6, #10
 8003b46:	4694      	mov	ip, r2
 8003b48:	fb91 f5f6 	sdiv	r5, r1, r6
 8003b4c:	fb06 1415 	mls	r4, r6, r5, r1
 8003b50:	3430      	adds	r4, #48	; 0x30
 8003b52:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003b56:	460c      	mov	r4, r1
 8003b58:	2c63      	cmp	r4, #99	; 0x63
 8003b5a:	f102 32ff 	add.w	r2, r2, #4294967295
 8003b5e:	4629      	mov	r1, r5
 8003b60:	dcf1      	bgt.n	8003b46 <__exponent+0x22>
 8003b62:	3130      	adds	r1, #48	; 0x30
 8003b64:	f1ac 0402 	sub.w	r4, ip, #2
 8003b68:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003b6c:	1c41      	adds	r1, r0, #1
 8003b6e:	4622      	mov	r2, r4
 8003b70:	42ba      	cmp	r2, r7
 8003b72:	d30a      	bcc.n	8003b8a <__exponent+0x66>
 8003b74:	f10d 0209 	add.w	r2, sp, #9
 8003b78:	eba2 020c 	sub.w	r2, r2, ip
 8003b7c:	42bc      	cmp	r4, r7
 8003b7e:	bf88      	it	hi
 8003b80:	2200      	movhi	r2, #0
 8003b82:	4413      	add	r3, r2
 8003b84:	1a18      	subs	r0, r3, r0
 8003b86:	b003      	add	sp, #12
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003b8e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003b92:	e7ed      	b.n	8003b70 <__exponent+0x4c>
 8003b94:	2330      	movs	r3, #48	; 0x30
 8003b96:	3130      	adds	r1, #48	; 0x30
 8003b98:	7083      	strb	r3, [r0, #2]
 8003b9a:	70c1      	strb	r1, [r0, #3]
 8003b9c:	1d03      	adds	r3, r0, #4
 8003b9e:	e7f1      	b.n	8003b84 <__exponent+0x60>

08003ba0 <_printf_float>:
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	ed2d 8b02 	vpush	{d8}
 8003ba8:	b08d      	sub	sp, #52	; 0x34
 8003baa:	460c      	mov	r4, r1
 8003bac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003bb0:	4616      	mov	r6, r2
 8003bb2:	461f      	mov	r7, r3
 8003bb4:	4605      	mov	r5, r0
 8003bb6:	f000 fce7 	bl	8004588 <_localeconv_r>
 8003bba:	f8d0 a000 	ldr.w	sl, [r0]
 8003bbe:	4650      	mov	r0, sl
 8003bc0:	f7fc fb5e 	bl	8000280 <strlen>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	9305      	str	r3, [sp, #20]
 8003bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8003bd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003bd4:	3307      	adds	r3, #7
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	f103 0208 	add.w	r2, r3, #8
 8003bde:	f8c8 2000 	str.w	r2, [r8]
 8003be2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003be6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003bea:	9307      	str	r3, [sp, #28]
 8003bec:	f8cd 8018 	str.w	r8, [sp, #24]
 8003bf0:	ee08 0a10 	vmov	s16, r0
 8003bf4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003bf8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003bfc:	4b9e      	ldr	r3, [pc, #632]	; (8003e78 <_printf_float+0x2d8>)
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003c02:	f7fc ff9b 	bl	8000b3c <__aeabi_dcmpun>
 8003c06:	bb88      	cbnz	r0, 8003c6c <_printf_float+0xcc>
 8003c08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c0c:	4b9a      	ldr	r3, [pc, #616]	; (8003e78 <_printf_float+0x2d8>)
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c12:	f7fc ff75 	bl	8000b00 <__aeabi_dcmple>
 8003c16:	bb48      	cbnz	r0, 8003c6c <_printf_float+0xcc>
 8003c18:	2200      	movs	r2, #0
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	4640      	mov	r0, r8
 8003c1e:	4649      	mov	r1, r9
 8003c20:	f7fc ff64 	bl	8000aec <__aeabi_dcmplt>
 8003c24:	b110      	cbz	r0, 8003c2c <_printf_float+0x8c>
 8003c26:	232d      	movs	r3, #45	; 0x2d
 8003c28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c2c:	4a93      	ldr	r2, [pc, #588]	; (8003e7c <_printf_float+0x2dc>)
 8003c2e:	4b94      	ldr	r3, [pc, #592]	; (8003e80 <_printf_float+0x2e0>)
 8003c30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003c34:	bf94      	ite	ls
 8003c36:	4690      	movls	r8, r2
 8003c38:	4698      	movhi	r8, r3
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	6123      	str	r3, [r4, #16]
 8003c3e:	9b05      	ldr	r3, [sp, #20]
 8003c40:	f023 0304 	bic.w	r3, r3, #4
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	f04f 0900 	mov.w	r9, #0
 8003c4a:	9700      	str	r7, [sp, #0]
 8003c4c:	4633      	mov	r3, r6
 8003c4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003c50:	4621      	mov	r1, r4
 8003c52:	4628      	mov	r0, r5
 8003c54:	f000 f9da 	bl	800400c <_printf_common>
 8003c58:	3001      	adds	r0, #1
 8003c5a:	f040 8090 	bne.w	8003d7e <_printf_float+0x1de>
 8003c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003c62:	b00d      	add	sp, #52	; 0x34
 8003c64:	ecbd 8b02 	vpop	{d8}
 8003c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c6c:	4642      	mov	r2, r8
 8003c6e:	464b      	mov	r3, r9
 8003c70:	4640      	mov	r0, r8
 8003c72:	4649      	mov	r1, r9
 8003c74:	f7fc ff62 	bl	8000b3c <__aeabi_dcmpun>
 8003c78:	b140      	cbz	r0, 8003c8c <_printf_float+0xec>
 8003c7a:	464b      	mov	r3, r9
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	bfbc      	itt	lt
 8003c80:	232d      	movlt	r3, #45	; 0x2d
 8003c82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003c86:	4a7f      	ldr	r2, [pc, #508]	; (8003e84 <_printf_float+0x2e4>)
 8003c88:	4b7f      	ldr	r3, [pc, #508]	; (8003e88 <_printf_float+0x2e8>)
 8003c8a:	e7d1      	b.n	8003c30 <_printf_float+0x90>
 8003c8c:	6863      	ldr	r3, [r4, #4]
 8003c8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003c92:	9206      	str	r2, [sp, #24]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	d13f      	bne.n	8003d18 <_printf_float+0x178>
 8003c98:	2306      	movs	r3, #6
 8003c9a:	6063      	str	r3, [r4, #4]
 8003c9c:	9b05      	ldr	r3, [sp, #20]
 8003c9e:	6861      	ldr	r1, [r4, #4]
 8003ca0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	ab0a      	add	r3, sp, #40	; 0x28
 8003caa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003cae:	ab09      	add	r3, sp, #36	; 0x24
 8003cb0:	ec49 8b10 	vmov	d0, r8, r9
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	6022      	str	r2, [r4, #0]
 8003cb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f7ff fecf 	bl	8003a60 <__cvt>
 8003cc2:	9b06      	ldr	r3, [sp, #24]
 8003cc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003cc6:	2b47      	cmp	r3, #71	; 0x47
 8003cc8:	4680      	mov	r8, r0
 8003cca:	d108      	bne.n	8003cde <_printf_float+0x13e>
 8003ccc:	1cc8      	adds	r0, r1, #3
 8003cce:	db02      	blt.n	8003cd6 <_printf_float+0x136>
 8003cd0:	6863      	ldr	r3, [r4, #4]
 8003cd2:	4299      	cmp	r1, r3
 8003cd4:	dd41      	ble.n	8003d5a <_printf_float+0x1ba>
 8003cd6:	f1ab 0302 	sub.w	r3, fp, #2
 8003cda:	fa5f fb83 	uxtb.w	fp, r3
 8003cde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003ce2:	d820      	bhi.n	8003d26 <_printf_float+0x186>
 8003ce4:	3901      	subs	r1, #1
 8003ce6:	465a      	mov	r2, fp
 8003ce8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003cec:	9109      	str	r1, [sp, #36]	; 0x24
 8003cee:	f7ff ff19 	bl	8003b24 <__exponent>
 8003cf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003cf4:	1813      	adds	r3, r2, r0
 8003cf6:	2a01      	cmp	r2, #1
 8003cf8:	4681      	mov	r9, r0
 8003cfa:	6123      	str	r3, [r4, #16]
 8003cfc:	dc02      	bgt.n	8003d04 <_printf_float+0x164>
 8003cfe:	6822      	ldr	r2, [r4, #0]
 8003d00:	07d2      	lsls	r2, r2, #31
 8003d02:	d501      	bpl.n	8003d08 <_printf_float+0x168>
 8003d04:	3301      	adds	r3, #1
 8003d06:	6123      	str	r3, [r4, #16]
 8003d08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d09c      	beq.n	8003c4a <_printf_float+0xaa>
 8003d10:	232d      	movs	r3, #45	; 0x2d
 8003d12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d16:	e798      	b.n	8003c4a <_printf_float+0xaa>
 8003d18:	9a06      	ldr	r2, [sp, #24]
 8003d1a:	2a47      	cmp	r2, #71	; 0x47
 8003d1c:	d1be      	bne.n	8003c9c <_printf_float+0xfc>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1bc      	bne.n	8003c9c <_printf_float+0xfc>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e7b9      	b.n	8003c9a <_printf_float+0xfa>
 8003d26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8003d2a:	d118      	bne.n	8003d5e <_printf_float+0x1be>
 8003d2c:	2900      	cmp	r1, #0
 8003d2e:	6863      	ldr	r3, [r4, #4]
 8003d30:	dd0b      	ble.n	8003d4a <_printf_float+0x1aa>
 8003d32:	6121      	str	r1, [r4, #16]
 8003d34:	b913      	cbnz	r3, 8003d3c <_printf_float+0x19c>
 8003d36:	6822      	ldr	r2, [r4, #0]
 8003d38:	07d0      	lsls	r0, r2, #31
 8003d3a:	d502      	bpl.n	8003d42 <_printf_float+0x1a2>
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	440b      	add	r3, r1
 8003d40:	6123      	str	r3, [r4, #16]
 8003d42:	65a1      	str	r1, [r4, #88]	; 0x58
 8003d44:	f04f 0900 	mov.w	r9, #0
 8003d48:	e7de      	b.n	8003d08 <_printf_float+0x168>
 8003d4a:	b913      	cbnz	r3, 8003d52 <_printf_float+0x1b2>
 8003d4c:	6822      	ldr	r2, [r4, #0]
 8003d4e:	07d2      	lsls	r2, r2, #31
 8003d50:	d501      	bpl.n	8003d56 <_printf_float+0x1b6>
 8003d52:	3302      	adds	r3, #2
 8003d54:	e7f4      	b.n	8003d40 <_printf_float+0x1a0>
 8003d56:	2301      	movs	r3, #1
 8003d58:	e7f2      	b.n	8003d40 <_printf_float+0x1a0>
 8003d5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8003d5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d60:	4299      	cmp	r1, r3
 8003d62:	db05      	blt.n	8003d70 <_printf_float+0x1d0>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	6121      	str	r1, [r4, #16]
 8003d68:	07d8      	lsls	r0, r3, #31
 8003d6a:	d5ea      	bpl.n	8003d42 <_printf_float+0x1a2>
 8003d6c:	1c4b      	adds	r3, r1, #1
 8003d6e:	e7e7      	b.n	8003d40 <_printf_float+0x1a0>
 8003d70:	2900      	cmp	r1, #0
 8003d72:	bfd4      	ite	le
 8003d74:	f1c1 0202 	rsble	r2, r1, #2
 8003d78:	2201      	movgt	r2, #1
 8003d7a:	4413      	add	r3, r2
 8003d7c:	e7e0      	b.n	8003d40 <_printf_float+0x1a0>
 8003d7e:	6823      	ldr	r3, [r4, #0]
 8003d80:	055a      	lsls	r2, r3, #21
 8003d82:	d407      	bmi.n	8003d94 <_printf_float+0x1f4>
 8003d84:	6923      	ldr	r3, [r4, #16]
 8003d86:	4642      	mov	r2, r8
 8003d88:	4631      	mov	r1, r6
 8003d8a:	4628      	mov	r0, r5
 8003d8c:	47b8      	blx	r7
 8003d8e:	3001      	adds	r0, #1
 8003d90:	d12c      	bne.n	8003dec <_printf_float+0x24c>
 8003d92:	e764      	b.n	8003c5e <_printf_float+0xbe>
 8003d94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003d98:	f240 80e0 	bls.w	8003f5c <_printf_float+0x3bc>
 8003d9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003da0:	2200      	movs	r2, #0
 8003da2:	2300      	movs	r3, #0
 8003da4:	f7fc fe98 	bl	8000ad8 <__aeabi_dcmpeq>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	d034      	beq.n	8003e16 <_printf_float+0x276>
 8003dac:	4a37      	ldr	r2, [pc, #220]	; (8003e8c <_printf_float+0x2ec>)
 8003dae:	2301      	movs	r3, #1
 8003db0:	4631      	mov	r1, r6
 8003db2:	4628      	mov	r0, r5
 8003db4:	47b8      	blx	r7
 8003db6:	3001      	adds	r0, #1
 8003db8:	f43f af51 	beq.w	8003c5e <_printf_float+0xbe>
 8003dbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	db02      	blt.n	8003dca <_printf_float+0x22a>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	07d8      	lsls	r0, r3, #31
 8003dc8:	d510      	bpl.n	8003dec <_printf_float+0x24c>
 8003dca:	ee18 3a10 	vmov	r3, s16
 8003dce:	4652      	mov	r2, sl
 8003dd0:	4631      	mov	r1, r6
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	47b8      	blx	r7
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	f43f af41 	beq.w	8003c5e <_printf_float+0xbe>
 8003ddc:	f04f 0800 	mov.w	r8, #0
 8003de0:	f104 091a 	add.w	r9, r4, #26
 8003de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003de6:	3b01      	subs	r3, #1
 8003de8:	4543      	cmp	r3, r8
 8003dea:	dc09      	bgt.n	8003e00 <_printf_float+0x260>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	079b      	lsls	r3, r3, #30
 8003df0:	f100 8107 	bmi.w	8004002 <_printf_float+0x462>
 8003df4:	68e0      	ldr	r0, [r4, #12]
 8003df6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003df8:	4298      	cmp	r0, r3
 8003dfa:	bfb8      	it	lt
 8003dfc:	4618      	movlt	r0, r3
 8003dfe:	e730      	b.n	8003c62 <_printf_float+0xc2>
 8003e00:	2301      	movs	r3, #1
 8003e02:	464a      	mov	r2, r9
 8003e04:	4631      	mov	r1, r6
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f43f af27 	beq.w	8003c5e <_printf_float+0xbe>
 8003e10:	f108 0801 	add.w	r8, r8, #1
 8003e14:	e7e6      	b.n	8003de4 <_printf_float+0x244>
 8003e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	dc39      	bgt.n	8003e90 <_printf_float+0x2f0>
 8003e1c:	4a1b      	ldr	r2, [pc, #108]	; (8003e8c <_printf_float+0x2ec>)
 8003e1e:	2301      	movs	r3, #1
 8003e20:	4631      	mov	r1, r6
 8003e22:	4628      	mov	r0, r5
 8003e24:	47b8      	blx	r7
 8003e26:	3001      	adds	r0, #1
 8003e28:	f43f af19 	beq.w	8003c5e <_printf_float+0xbe>
 8003e2c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003e30:	4313      	orrs	r3, r2
 8003e32:	d102      	bne.n	8003e3a <_printf_float+0x29a>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	07d9      	lsls	r1, r3, #31
 8003e38:	d5d8      	bpl.n	8003dec <_printf_float+0x24c>
 8003e3a:	ee18 3a10 	vmov	r3, s16
 8003e3e:	4652      	mov	r2, sl
 8003e40:	4631      	mov	r1, r6
 8003e42:	4628      	mov	r0, r5
 8003e44:	47b8      	blx	r7
 8003e46:	3001      	adds	r0, #1
 8003e48:	f43f af09 	beq.w	8003c5e <_printf_float+0xbe>
 8003e4c:	f04f 0900 	mov.w	r9, #0
 8003e50:	f104 0a1a 	add.w	sl, r4, #26
 8003e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e56:	425b      	negs	r3, r3
 8003e58:	454b      	cmp	r3, r9
 8003e5a:	dc01      	bgt.n	8003e60 <_printf_float+0x2c0>
 8003e5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e5e:	e792      	b.n	8003d86 <_printf_float+0x1e6>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4652      	mov	r2, sl
 8003e64:	4631      	mov	r1, r6
 8003e66:	4628      	mov	r0, r5
 8003e68:	47b8      	blx	r7
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	f43f aef7 	beq.w	8003c5e <_printf_float+0xbe>
 8003e70:	f109 0901 	add.w	r9, r9, #1
 8003e74:	e7ee      	b.n	8003e54 <_printf_float+0x2b4>
 8003e76:	bf00      	nop
 8003e78:	7fefffff 	.word	0x7fefffff
 8003e7c:	080199f0 	.word	0x080199f0
 8003e80:	080199f4 	.word	0x080199f4
 8003e84:	080199f8 	.word	0x080199f8
 8003e88:	080199fc 	.word	0x080199fc
 8003e8c:	08019a00 	.word	0x08019a00
 8003e90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003e92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bfa8      	it	ge
 8003e98:	461a      	movge	r2, r3
 8003e9a:	2a00      	cmp	r2, #0
 8003e9c:	4691      	mov	r9, r2
 8003e9e:	dc37      	bgt.n	8003f10 <_printf_float+0x370>
 8003ea0:	f04f 0b00 	mov.w	fp, #0
 8003ea4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ea8:	f104 021a 	add.w	r2, r4, #26
 8003eac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003eae:	9305      	str	r3, [sp, #20]
 8003eb0:	eba3 0309 	sub.w	r3, r3, r9
 8003eb4:	455b      	cmp	r3, fp
 8003eb6:	dc33      	bgt.n	8003f20 <_printf_float+0x380>
 8003eb8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	db3b      	blt.n	8003f38 <_printf_float+0x398>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	07da      	lsls	r2, r3, #31
 8003ec4:	d438      	bmi.n	8003f38 <_printf_float+0x398>
 8003ec6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003eca:	eba2 0903 	sub.w	r9, r2, r3
 8003ece:	9b05      	ldr	r3, [sp, #20]
 8003ed0:	1ad2      	subs	r2, r2, r3
 8003ed2:	4591      	cmp	r9, r2
 8003ed4:	bfa8      	it	ge
 8003ed6:	4691      	movge	r9, r2
 8003ed8:	f1b9 0f00 	cmp.w	r9, #0
 8003edc:	dc35      	bgt.n	8003f4a <_printf_float+0x3aa>
 8003ede:	f04f 0800 	mov.w	r8, #0
 8003ee2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ee6:	f104 0a1a 	add.w	sl, r4, #26
 8003eea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	eba3 0309 	sub.w	r3, r3, r9
 8003ef4:	4543      	cmp	r3, r8
 8003ef6:	f77f af79 	ble.w	8003dec <_printf_float+0x24c>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4652      	mov	r2, sl
 8003efe:	4631      	mov	r1, r6
 8003f00:	4628      	mov	r0, r5
 8003f02:	47b8      	blx	r7
 8003f04:	3001      	adds	r0, #1
 8003f06:	f43f aeaa 	beq.w	8003c5e <_printf_float+0xbe>
 8003f0a:	f108 0801 	add.w	r8, r8, #1
 8003f0e:	e7ec      	b.n	8003eea <_printf_float+0x34a>
 8003f10:	4613      	mov	r3, r2
 8003f12:	4631      	mov	r1, r6
 8003f14:	4642      	mov	r2, r8
 8003f16:	4628      	mov	r0, r5
 8003f18:	47b8      	blx	r7
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d1c0      	bne.n	8003ea0 <_printf_float+0x300>
 8003f1e:	e69e      	b.n	8003c5e <_printf_float+0xbe>
 8003f20:	2301      	movs	r3, #1
 8003f22:	4631      	mov	r1, r6
 8003f24:	4628      	mov	r0, r5
 8003f26:	9205      	str	r2, [sp, #20]
 8003f28:	47b8      	blx	r7
 8003f2a:	3001      	adds	r0, #1
 8003f2c:	f43f ae97 	beq.w	8003c5e <_printf_float+0xbe>
 8003f30:	9a05      	ldr	r2, [sp, #20]
 8003f32:	f10b 0b01 	add.w	fp, fp, #1
 8003f36:	e7b9      	b.n	8003eac <_printf_float+0x30c>
 8003f38:	ee18 3a10 	vmov	r3, s16
 8003f3c:	4652      	mov	r2, sl
 8003f3e:	4631      	mov	r1, r6
 8003f40:	4628      	mov	r0, r5
 8003f42:	47b8      	blx	r7
 8003f44:	3001      	adds	r0, #1
 8003f46:	d1be      	bne.n	8003ec6 <_printf_float+0x326>
 8003f48:	e689      	b.n	8003c5e <_printf_float+0xbe>
 8003f4a:	9a05      	ldr	r2, [sp, #20]
 8003f4c:	464b      	mov	r3, r9
 8003f4e:	4442      	add	r2, r8
 8003f50:	4631      	mov	r1, r6
 8003f52:	4628      	mov	r0, r5
 8003f54:	47b8      	blx	r7
 8003f56:	3001      	adds	r0, #1
 8003f58:	d1c1      	bne.n	8003ede <_printf_float+0x33e>
 8003f5a:	e680      	b.n	8003c5e <_printf_float+0xbe>
 8003f5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003f5e:	2a01      	cmp	r2, #1
 8003f60:	dc01      	bgt.n	8003f66 <_printf_float+0x3c6>
 8003f62:	07db      	lsls	r3, r3, #31
 8003f64:	d53a      	bpl.n	8003fdc <_printf_float+0x43c>
 8003f66:	2301      	movs	r3, #1
 8003f68:	4642      	mov	r2, r8
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f ae74 	beq.w	8003c5e <_printf_float+0xbe>
 8003f76:	ee18 3a10 	vmov	r3, s16
 8003f7a:	4652      	mov	r2, sl
 8003f7c:	4631      	mov	r1, r6
 8003f7e:	4628      	mov	r0, r5
 8003f80:	47b8      	blx	r7
 8003f82:	3001      	adds	r0, #1
 8003f84:	f43f ae6b 	beq.w	8003c5e <_printf_float+0xbe>
 8003f88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8003f94:	f7fc fda0 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f98:	b9d8      	cbnz	r0, 8003fd2 <_printf_float+0x432>
 8003f9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8003f9e:	f108 0201 	add.w	r2, r8, #1
 8003fa2:	4631      	mov	r1, r6
 8003fa4:	4628      	mov	r0, r5
 8003fa6:	47b8      	blx	r7
 8003fa8:	3001      	adds	r0, #1
 8003faa:	d10e      	bne.n	8003fca <_printf_float+0x42a>
 8003fac:	e657      	b.n	8003c5e <_printf_float+0xbe>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	4652      	mov	r2, sl
 8003fb2:	4631      	mov	r1, r6
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	47b8      	blx	r7
 8003fb8:	3001      	adds	r0, #1
 8003fba:	f43f ae50 	beq.w	8003c5e <_printf_float+0xbe>
 8003fbe:	f108 0801 	add.w	r8, r8, #1
 8003fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	4543      	cmp	r3, r8
 8003fc8:	dcf1      	bgt.n	8003fae <_printf_float+0x40e>
 8003fca:	464b      	mov	r3, r9
 8003fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003fd0:	e6da      	b.n	8003d88 <_printf_float+0x1e8>
 8003fd2:	f04f 0800 	mov.w	r8, #0
 8003fd6:	f104 0a1a 	add.w	sl, r4, #26
 8003fda:	e7f2      	b.n	8003fc2 <_printf_float+0x422>
 8003fdc:	2301      	movs	r3, #1
 8003fde:	4642      	mov	r2, r8
 8003fe0:	e7df      	b.n	8003fa2 <_printf_float+0x402>
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	464a      	mov	r2, r9
 8003fe6:	4631      	mov	r1, r6
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b8      	blx	r7
 8003fec:	3001      	adds	r0, #1
 8003fee:	f43f ae36 	beq.w	8003c5e <_printf_float+0xbe>
 8003ff2:	f108 0801 	add.w	r8, r8, #1
 8003ff6:	68e3      	ldr	r3, [r4, #12]
 8003ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ffa:	1a5b      	subs	r3, r3, r1
 8003ffc:	4543      	cmp	r3, r8
 8003ffe:	dcf0      	bgt.n	8003fe2 <_printf_float+0x442>
 8004000:	e6f8      	b.n	8003df4 <_printf_float+0x254>
 8004002:	f04f 0800 	mov.w	r8, #0
 8004006:	f104 0919 	add.w	r9, r4, #25
 800400a:	e7f4      	b.n	8003ff6 <_printf_float+0x456>

0800400c <_printf_common>:
 800400c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004010:	4616      	mov	r6, r2
 8004012:	4699      	mov	r9, r3
 8004014:	688a      	ldr	r2, [r1, #8]
 8004016:	690b      	ldr	r3, [r1, #16]
 8004018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800401c:	4293      	cmp	r3, r2
 800401e:	bfb8      	it	lt
 8004020:	4613      	movlt	r3, r2
 8004022:	6033      	str	r3, [r6, #0]
 8004024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004028:	4607      	mov	r7, r0
 800402a:	460c      	mov	r4, r1
 800402c:	b10a      	cbz	r2, 8004032 <_printf_common+0x26>
 800402e:	3301      	adds	r3, #1
 8004030:	6033      	str	r3, [r6, #0]
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	0699      	lsls	r1, r3, #26
 8004036:	bf42      	ittt	mi
 8004038:	6833      	ldrmi	r3, [r6, #0]
 800403a:	3302      	addmi	r3, #2
 800403c:	6033      	strmi	r3, [r6, #0]
 800403e:	6825      	ldr	r5, [r4, #0]
 8004040:	f015 0506 	ands.w	r5, r5, #6
 8004044:	d106      	bne.n	8004054 <_printf_common+0x48>
 8004046:	f104 0a19 	add.w	sl, r4, #25
 800404a:	68e3      	ldr	r3, [r4, #12]
 800404c:	6832      	ldr	r2, [r6, #0]
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	42ab      	cmp	r3, r5
 8004052:	dc26      	bgt.n	80040a2 <_printf_common+0x96>
 8004054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004058:	1e13      	subs	r3, r2, #0
 800405a:	6822      	ldr	r2, [r4, #0]
 800405c:	bf18      	it	ne
 800405e:	2301      	movne	r3, #1
 8004060:	0692      	lsls	r2, r2, #26
 8004062:	d42b      	bmi.n	80040bc <_printf_common+0xb0>
 8004064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004068:	4649      	mov	r1, r9
 800406a:	4638      	mov	r0, r7
 800406c:	47c0      	blx	r8
 800406e:	3001      	adds	r0, #1
 8004070:	d01e      	beq.n	80040b0 <_printf_common+0xa4>
 8004072:	6823      	ldr	r3, [r4, #0]
 8004074:	6922      	ldr	r2, [r4, #16]
 8004076:	f003 0306 	and.w	r3, r3, #6
 800407a:	2b04      	cmp	r3, #4
 800407c:	bf02      	ittt	eq
 800407e:	68e5      	ldreq	r5, [r4, #12]
 8004080:	6833      	ldreq	r3, [r6, #0]
 8004082:	1aed      	subeq	r5, r5, r3
 8004084:	68a3      	ldr	r3, [r4, #8]
 8004086:	bf0c      	ite	eq
 8004088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800408c:	2500      	movne	r5, #0
 800408e:	4293      	cmp	r3, r2
 8004090:	bfc4      	itt	gt
 8004092:	1a9b      	subgt	r3, r3, r2
 8004094:	18ed      	addgt	r5, r5, r3
 8004096:	2600      	movs	r6, #0
 8004098:	341a      	adds	r4, #26
 800409a:	42b5      	cmp	r5, r6
 800409c:	d11a      	bne.n	80040d4 <_printf_common+0xc8>
 800409e:	2000      	movs	r0, #0
 80040a0:	e008      	b.n	80040b4 <_printf_common+0xa8>
 80040a2:	2301      	movs	r3, #1
 80040a4:	4652      	mov	r2, sl
 80040a6:	4649      	mov	r1, r9
 80040a8:	4638      	mov	r0, r7
 80040aa:	47c0      	blx	r8
 80040ac:	3001      	adds	r0, #1
 80040ae:	d103      	bne.n	80040b8 <_printf_common+0xac>
 80040b0:	f04f 30ff 	mov.w	r0, #4294967295
 80040b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040b8:	3501      	adds	r5, #1
 80040ba:	e7c6      	b.n	800404a <_printf_common+0x3e>
 80040bc:	18e1      	adds	r1, r4, r3
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	2030      	movs	r0, #48	; 0x30
 80040c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040c6:	4422      	add	r2, r4
 80040c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80040d0:	3302      	adds	r3, #2
 80040d2:	e7c7      	b.n	8004064 <_printf_common+0x58>
 80040d4:	2301      	movs	r3, #1
 80040d6:	4622      	mov	r2, r4
 80040d8:	4649      	mov	r1, r9
 80040da:	4638      	mov	r0, r7
 80040dc:	47c0      	blx	r8
 80040de:	3001      	adds	r0, #1
 80040e0:	d0e6      	beq.n	80040b0 <_printf_common+0xa4>
 80040e2:	3601      	adds	r6, #1
 80040e4:	e7d9      	b.n	800409a <_printf_common+0x8e>
	...

080040e8 <_printf_i>:
 80040e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040ec:	7e0f      	ldrb	r7, [r1, #24]
 80040ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80040f0:	2f78      	cmp	r7, #120	; 0x78
 80040f2:	4691      	mov	r9, r2
 80040f4:	4680      	mov	r8, r0
 80040f6:	460c      	mov	r4, r1
 80040f8:	469a      	mov	sl, r3
 80040fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80040fe:	d807      	bhi.n	8004110 <_printf_i+0x28>
 8004100:	2f62      	cmp	r7, #98	; 0x62
 8004102:	d80a      	bhi.n	800411a <_printf_i+0x32>
 8004104:	2f00      	cmp	r7, #0
 8004106:	f000 80d4 	beq.w	80042b2 <_printf_i+0x1ca>
 800410a:	2f58      	cmp	r7, #88	; 0x58
 800410c:	f000 80c0 	beq.w	8004290 <_printf_i+0x1a8>
 8004110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004118:	e03a      	b.n	8004190 <_printf_i+0xa8>
 800411a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800411e:	2b15      	cmp	r3, #21
 8004120:	d8f6      	bhi.n	8004110 <_printf_i+0x28>
 8004122:	a101      	add	r1, pc, #4	; (adr r1, 8004128 <_printf_i+0x40>)
 8004124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004128:	08004181 	.word	0x08004181
 800412c:	08004195 	.word	0x08004195
 8004130:	08004111 	.word	0x08004111
 8004134:	08004111 	.word	0x08004111
 8004138:	08004111 	.word	0x08004111
 800413c:	08004111 	.word	0x08004111
 8004140:	08004195 	.word	0x08004195
 8004144:	08004111 	.word	0x08004111
 8004148:	08004111 	.word	0x08004111
 800414c:	08004111 	.word	0x08004111
 8004150:	08004111 	.word	0x08004111
 8004154:	08004299 	.word	0x08004299
 8004158:	080041c1 	.word	0x080041c1
 800415c:	08004253 	.word	0x08004253
 8004160:	08004111 	.word	0x08004111
 8004164:	08004111 	.word	0x08004111
 8004168:	080042bb 	.word	0x080042bb
 800416c:	08004111 	.word	0x08004111
 8004170:	080041c1 	.word	0x080041c1
 8004174:	08004111 	.word	0x08004111
 8004178:	08004111 	.word	0x08004111
 800417c:	0800425b 	.word	0x0800425b
 8004180:	682b      	ldr	r3, [r5, #0]
 8004182:	1d1a      	adds	r2, r3, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	602a      	str	r2, [r5, #0]
 8004188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800418c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004190:	2301      	movs	r3, #1
 8004192:	e09f      	b.n	80042d4 <_printf_i+0x1ec>
 8004194:	6820      	ldr	r0, [r4, #0]
 8004196:	682b      	ldr	r3, [r5, #0]
 8004198:	0607      	lsls	r7, r0, #24
 800419a:	f103 0104 	add.w	r1, r3, #4
 800419e:	6029      	str	r1, [r5, #0]
 80041a0:	d501      	bpl.n	80041a6 <_printf_i+0xbe>
 80041a2:	681e      	ldr	r6, [r3, #0]
 80041a4:	e003      	b.n	80041ae <_printf_i+0xc6>
 80041a6:	0646      	lsls	r6, r0, #25
 80041a8:	d5fb      	bpl.n	80041a2 <_printf_i+0xba>
 80041aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80041ae:	2e00      	cmp	r6, #0
 80041b0:	da03      	bge.n	80041ba <_printf_i+0xd2>
 80041b2:	232d      	movs	r3, #45	; 0x2d
 80041b4:	4276      	negs	r6, r6
 80041b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ba:	485a      	ldr	r0, [pc, #360]	; (8004324 <_printf_i+0x23c>)
 80041bc:	230a      	movs	r3, #10
 80041be:	e012      	b.n	80041e6 <_printf_i+0xfe>
 80041c0:	682b      	ldr	r3, [r5, #0]
 80041c2:	6820      	ldr	r0, [r4, #0]
 80041c4:	1d19      	adds	r1, r3, #4
 80041c6:	6029      	str	r1, [r5, #0]
 80041c8:	0605      	lsls	r5, r0, #24
 80041ca:	d501      	bpl.n	80041d0 <_printf_i+0xe8>
 80041cc:	681e      	ldr	r6, [r3, #0]
 80041ce:	e002      	b.n	80041d6 <_printf_i+0xee>
 80041d0:	0641      	lsls	r1, r0, #25
 80041d2:	d5fb      	bpl.n	80041cc <_printf_i+0xe4>
 80041d4:	881e      	ldrh	r6, [r3, #0]
 80041d6:	4853      	ldr	r0, [pc, #332]	; (8004324 <_printf_i+0x23c>)
 80041d8:	2f6f      	cmp	r7, #111	; 0x6f
 80041da:	bf0c      	ite	eq
 80041dc:	2308      	moveq	r3, #8
 80041de:	230a      	movne	r3, #10
 80041e0:	2100      	movs	r1, #0
 80041e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80041e6:	6865      	ldr	r5, [r4, #4]
 80041e8:	60a5      	str	r5, [r4, #8]
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	bfa2      	ittt	ge
 80041ee:	6821      	ldrge	r1, [r4, #0]
 80041f0:	f021 0104 	bicge.w	r1, r1, #4
 80041f4:	6021      	strge	r1, [r4, #0]
 80041f6:	b90e      	cbnz	r6, 80041fc <_printf_i+0x114>
 80041f8:	2d00      	cmp	r5, #0
 80041fa:	d04b      	beq.n	8004294 <_printf_i+0x1ac>
 80041fc:	4615      	mov	r5, r2
 80041fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8004202:	fb03 6711 	mls	r7, r3, r1, r6
 8004206:	5dc7      	ldrb	r7, [r0, r7]
 8004208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800420c:	4637      	mov	r7, r6
 800420e:	42bb      	cmp	r3, r7
 8004210:	460e      	mov	r6, r1
 8004212:	d9f4      	bls.n	80041fe <_printf_i+0x116>
 8004214:	2b08      	cmp	r3, #8
 8004216:	d10b      	bne.n	8004230 <_printf_i+0x148>
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	07de      	lsls	r6, r3, #31
 800421c:	d508      	bpl.n	8004230 <_printf_i+0x148>
 800421e:	6923      	ldr	r3, [r4, #16]
 8004220:	6861      	ldr	r1, [r4, #4]
 8004222:	4299      	cmp	r1, r3
 8004224:	bfde      	ittt	le
 8004226:	2330      	movle	r3, #48	; 0x30
 8004228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800422c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004230:	1b52      	subs	r2, r2, r5
 8004232:	6122      	str	r2, [r4, #16]
 8004234:	f8cd a000 	str.w	sl, [sp]
 8004238:	464b      	mov	r3, r9
 800423a:	aa03      	add	r2, sp, #12
 800423c:	4621      	mov	r1, r4
 800423e:	4640      	mov	r0, r8
 8004240:	f7ff fee4 	bl	800400c <_printf_common>
 8004244:	3001      	adds	r0, #1
 8004246:	d14a      	bne.n	80042de <_printf_i+0x1f6>
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	b004      	add	sp, #16
 800424e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	f043 0320 	orr.w	r3, r3, #32
 8004258:	6023      	str	r3, [r4, #0]
 800425a:	4833      	ldr	r0, [pc, #204]	; (8004328 <_printf_i+0x240>)
 800425c:	2778      	movs	r7, #120	; 0x78
 800425e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	6829      	ldr	r1, [r5, #0]
 8004266:	061f      	lsls	r7, r3, #24
 8004268:	f851 6b04 	ldr.w	r6, [r1], #4
 800426c:	d402      	bmi.n	8004274 <_printf_i+0x18c>
 800426e:	065f      	lsls	r7, r3, #25
 8004270:	bf48      	it	mi
 8004272:	b2b6      	uxthmi	r6, r6
 8004274:	07df      	lsls	r7, r3, #31
 8004276:	bf48      	it	mi
 8004278:	f043 0320 	orrmi.w	r3, r3, #32
 800427c:	6029      	str	r1, [r5, #0]
 800427e:	bf48      	it	mi
 8004280:	6023      	strmi	r3, [r4, #0]
 8004282:	b91e      	cbnz	r6, 800428c <_printf_i+0x1a4>
 8004284:	6823      	ldr	r3, [r4, #0]
 8004286:	f023 0320 	bic.w	r3, r3, #32
 800428a:	6023      	str	r3, [r4, #0]
 800428c:	2310      	movs	r3, #16
 800428e:	e7a7      	b.n	80041e0 <_printf_i+0xf8>
 8004290:	4824      	ldr	r0, [pc, #144]	; (8004324 <_printf_i+0x23c>)
 8004292:	e7e4      	b.n	800425e <_printf_i+0x176>
 8004294:	4615      	mov	r5, r2
 8004296:	e7bd      	b.n	8004214 <_printf_i+0x12c>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	6826      	ldr	r6, [r4, #0]
 800429c:	6961      	ldr	r1, [r4, #20]
 800429e:	1d18      	adds	r0, r3, #4
 80042a0:	6028      	str	r0, [r5, #0]
 80042a2:	0635      	lsls	r5, r6, #24
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	d501      	bpl.n	80042ac <_printf_i+0x1c4>
 80042a8:	6019      	str	r1, [r3, #0]
 80042aa:	e002      	b.n	80042b2 <_printf_i+0x1ca>
 80042ac:	0670      	lsls	r0, r6, #25
 80042ae:	d5fb      	bpl.n	80042a8 <_printf_i+0x1c0>
 80042b0:	8019      	strh	r1, [r3, #0]
 80042b2:	2300      	movs	r3, #0
 80042b4:	6123      	str	r3, [r4, #16]
 80042b6:	4615      	mov	r5, r2
 80042b8:	e7bc      	b.n	8004234 <_printf_i+0x14c>
 80042ba:	682b      	ldr	r3, [r5, #0]
 80042bc:	1d1a      	adds	r2, r3, #4
 80042be:	602a      	str	r2, [r5, #0]
 80042c0:	681d      	ldr	r5, [r3, #0]
 80042c2:	6862      	ldr	r2, [r4, #4]
 80042c4:	2100      	movs	r1, #0
 80042c6:	4628      	mov	r0, r5
 80042c8:	f7fb ff8a 	bl	80001e0 <memchr>
 80042cc:	b108      	cbz	r0, 80042d2 <_printf_i+0x1ea>
 80042ce:	1b40      	subs	r0, r0, r5
 80042d0:	6060      	str	r0, [r4, #4]
 80042d2:	6863      	ldr	r3, [r4, #4]
 80042d4:	6123      	str	r3, [r4, #16]
 80042d6:	2300      	movs	r3, #0
 80042d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042dc:	e7aa      	b.n	8004234 <_printf_i+0x14c>
 80042de:	6923      	ldr	r3, [r4, #16]
 80042e0:	462a      	mov	r2, r5
 80042e2:	4649      	mov	r1, r9
 80042e4:	4640      	mov	r0, r8
 80042e6:	47d0      	blx	sl
 80042e8:	3001      	adds	r0, #1
 80042ea:	d0ad      	beq.n	8004248 <_printf_i+0x160>
 80042ec:	6823      	ldr	r3, [r4, #0]
 80042ee:	079b      	lsls	r3, r3, #30
 80042f0:	d413      	bmi.n	800431a <_printf_i+0x232>
 80042f2:	68e0      	ldr	r0, [r4, #12]
 80042f4:	9b03      	ldr	r3, [sp, #12]
 80042f6:	4298      	cmp	r0, r3
 80042f8:	bfb8      	it	lt
 80042fa:	4618      	movlt	r0, r3
 80042fc:	e7a6      	b.n	800424c <_printf_i+0x164>
 80042fe:	2301      	movs	r3, #1
 8004300:	4632      	mov	r2, r6
 8004302:	4649      	mov	r1, r9
 8004304:	4640      	mov	r0, r8
 8004306:	47d0      	blx	sl
 8004308:	3001      	adds	r0, #1
 800430a:	d09d      	beq.n	8004248 <_printf_i+0x160>
 800430c:	3501      	adds	r5, #1
 800430e:	68e3      	ldr	r3, [r4, #12]
 8004310:	9903      	ldr	r1, [sp, #12]
 8004312:	1a5b      	subs	r3, r3, r1
 8004314:	42ab      	cmp	r3, r5
 8004316:	dcf2      	bgt.n	80042fe <_printf_i+0x216>
 8004318:	e7eb      	b.n	80042f2 <_printf_i+0x20a>
 800431a:	2500      	movs	r5, #0
 800431c:	f104 0619 	add.w	r6, r4, #25
 8004320:	e7f5      	b.n	800430e <_printf_i+0x226>
 8004322:	bf00      	nop
 8004324:	08019a02 	.word	0x08019a02
 8004328:	08019a13 	.word	0x08019a13

0800432c <std>:
 800432c:	2300      	movs	r3, #0
 800432e:	b510      	push	{r4, lr}
 8004330:	4604      	mov	r4, r0
 8004332:	e9c0 3300 	strd	r3, r3, [r0]
 8004336:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800433a:	6083      	str	r3, [r0, #8]
 800433c:	8181      	strh	r1, [r0, #12]
 800433e:	6643      	str	r3, [r0, #100]	; 0x64
 8004340:	81c2      	strh	r2, [r0, #14]
 8004342:	6183      	str	r3, [r0, #24]
 8004344:	4619      	mov	r1, r3
 8004346:	2208      	movs	r2, #8
 8004348:	305c      	adds	r0, #92	; 0x5c
 800434a:	f000 f914 	bl	8004576 <memset>
 800434e:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <std+0x58>)
 8004350:	6263      	str	r3, [r4, #36]	; 0x24
 8004352:	4b0d      	ldr	r3, [pc, #52]	; (8004388 <std+0x5c>)
 8004354:	62a3      	str	r3, [r4, #40]	; 0x28
 8004356:	4b0d      	ldr	r3, [pc, #52]	; (800438c <std+0x60>)
 8004358:	62e3      	str	r3, [r4, #44]	; 0x2c
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <std+0x64>)
 800435c:	6323      	str	r3, [r4, #48]	; 0x30
 800435e:	4b0d      	ldr	r3, [pc, #52]	; (8004394 <std+0x68>)
 8004360:	6224      	str	r4, [r4, #32]
 8004362:	429c      	cmp	r4, r3
 8004364:	d006      	beq.n	8004374 <std+0x48>
 8004366:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800436a:	4294      	cmp	r4, r2
 800436c:	d002      	beq.n	8004374 <std+0x48>
 800436e:	33d0      	adds	r3, #208	; 0xd0
 8004370:	429c      	cmp	r4, r3
 8004372:	d105      	bne.n	8004380 <std+0x54>
 8004374:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800437c:	f000 b978 	b.w	8004670 <__retarget_lock_init_recursive>
 8004380:	bd10      	pop	{r4, pc}
 8004382:	bf00      	nop
 8004384:	080044f1 	.word	0x080044f1
 8004388:	08004513 	.word	0x08004513
 800438c:	0800454b 	.word	0x0800454b
 8004390:	0800456f 	.word	0x0800456f
 8004394:	20000208 	.word	0x20000208

08004398 <stdio_exit_handler>:
 8004398:	4a02      	ldr	r2, [pc, #8]	; (80043a4 <stdio_exit_handler+0xc>)
 800439a:	4903      	ldr	r1, [pc, #12]	; (80043a8 <stdio_exit_handler+0x10>)
 800439c:	4803      	ldr	r0, [pc, #12]	; (80043ac <stdio_exit_handler+0x14>)
 800439e:	f000 b869 	b.w	8004474 <_fwalk_sglue>
 80043a2:	bf00      	nop
 80043a4:	20000010 	.word	0x20000010
 80043a8:	08006041 	.word	0x08006041
 80043ac:	2000001c 	.word	0x2000001c

080043b0 <cleanup_stdio>:
 80043b0:	6841      	ldr	r1, [r0, #4]
 80043b2:	4b0c      	ldr	r3, [pc, #48]	; (80043e4 <cleanup_stdio+0x34>)
 80043b4:	4299      	cmp	r1, r3
 80043b6:	b510      	push	{r4, lr}
 80043b8:	4604      	mov	r4, r0
 80043ba:	d001      	beq.n	80043c0 <cleanup_stdio+0x10>
 80043bc:	f001 fe40 	bl	8006040 <_fflush_r>
 80043c0:	68a1      	ldr	r1, [r4, #8]
 80043c2:	4b09      	ldr	r3, [pc, #36]	; (80043e8 <cleanup_stdio+0x38>)
 80043c4:	4299      	cmp	r1, r3
 80043c6:	d002      	beq.n	80043ce <cleanup_stdio+0x1e>
 80043c8:	4620      	mov	r0, r4
 80043ca:	f001 fe39 	bl	8006040 <_fflush_r>
 80043ce:	68e1      	ldr	r1, [r4, #12]
 80043d0:	4b06      	ldr	r3, [pc, #24]	; (80043ec <cleanup_stdio+0x3c>)
 80043d2:	4299      	cmp	r1, r3
 80043d4:	d004      	beq.n	80043e0 <cleanup_stdio+0x30>
 80043d6:	4620      	mov	r0, r4
 80043d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043dc:	f001 be30 	b.w	8006040 <_fflush_r>
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	bf00      	nop
 80043e4:	20000208 	.word	0x20000208
 80043e8:	20000270 	.word	0x20000270
 80043ec:	200002d8 	.word	0x200002d8

080043f0 <global_stdio_init.part.0>:
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <global_stdio_init.part.0+0x30>)
 80043f4:	4c0b      	ldr	r4, [pc, #44]	; (8004424 <global_stdio_init.part.0+0x34>)
 80043f6:	4a0c      	ldr	r2, [pc, #48]	; (8004428 <global_stdio_init.part.0+0x38>)
 80043f8:	601a      	str	r2, [r3, #0]
 80043fa:	4620      	mov	r0, r4
 80043fc:	2200      	movs	r2, #0
 80043fe:	2104      	movs	r1, #4
 8004400:	f7ff ff94 	bl	800432c <std>
 8004404:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004408:	2201      	movs	r2, #1
 800440a:	2109      	movs	r1, #9
 800440c:	f7ff ff8e 	bl	800432c <std>
 8004410:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004414:	2202      	movs	r2, #2
 8004416:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800441a:	2112      	movs	r1, #18
 800441c:	f7ff bf86 	b.w	800432c <std>
 8004420:	20000340 	.word	0x20000340
 8004424:	20000208 	.word	0x20000208
 8004428:	08004399 	.word	0x08004399

0800442c <__sfp_lock_acquire>:
 800442c:	4801      	ldr	r0, [pc, #4]	; (8004434 <__sfp_lock_acquire+0x8>)
 800442e:	f000 b920 	b.w	8004672 <__retarget_lock_acquire_recursive>
 8004432:	bf00      	nop
 8004434:	20000349 	.word	0x20000349

08004438 <__sfp_lock_release>:
 8004438:	4801      	ldr	r0, [pc, #4]	; (8004440 <__sfp_lock_release+0x8>)
 800443a:	f000 b91b 	b.w	8004674 <__retarget_lock_release_recursive>
 800443e:	bf00      	nop
 8004440:	20000349 	.word	0x20000349

08004444 <__sinit>:
 8004444:	b510      	push	{r4, lr}
 8004446:	4604      	mov	r4, r0
 8004448:	f7ff fff0 	bl	800442c <__sfp_lock_acquire>
 800444c:	6a23      	ldr	r3, [r4, #32]
 800444e:	b11b      	cbz	r3, 8004458 <__sinit+0x14>
 8004450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004454:	f7ff bff0 	b.w	8004438 <__sfp_lock_release>
 8004458:	4b04      	ldr	r3, [pc, #16]	; (800446c <__sinit+0x28>)
 800445a:	6223      	str	r3, [r4, #32]
 800445c:	4b04      	ldr	r3, [pc, #16]	; (8004470 <__sinit+0x2c>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1f5      	bne.n	8004450 <__sinit+0xc>
 8004464:	f7ff ffc4 	bl	80043f0 <global_stdio_init.part.0>
 8004468:	e7f2      	b.n	8004450 <__sinit+0xc>
 800446a:	bf00      	nop
 800446c:	080043b1 	.word	0x080043b1
 8004470:	20000340 	.word	0x20000340

08004474 <_fwalk_sglue>:
 8004474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004478:	4607      	mov	r7, r0
 800447a:	4688      	mov	r8, r1
 800447c:	4614      	mov	r4, r2
 800447e:	2600      	movs	r6, #0
 8004480:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004484:	f1b9 0901 	subs.w	r9, r9, #1
 8004488:	d505      	bpl.n	8004496 <_fwalk_sglue+0x22>
 800448a:	6824      	ldr	r4, [r4, #0]
 800448c:	2c00      	cmp	r4, #0
 800448e:	d1f7      	bne.n	8004480 <_fwalk_sglue+0xc>
 8004490:	4630      	mov	r0, r6
 8004492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004496:	89ab      	ldrh	r3, [r5, #12]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d907      	bls.n	80044ac <_fwalk_sglue+0x38>
 800449c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044a0:	3301      	adds	r3, #1
 80044a2:	d003      	beq.n	80044ac <_fwalk_sglue+0x38>
 80044a4:	4629      	mov	r1, r5
 80044a6:	4638      	mov	r0, r7
 80044a8:	47c0      	blx	r8
 80044aa:	4306      	orrs	r6, r0
 80044ac:	3568      	adds	r5, #104	; 0x68
 80044ae:	e7e9      	b.n	8004484 <_fwalk_sglue+0x10>

080044b0 <siprintf>:
 80044b0:	b40e      	push	{r1, r2, r3}
 80044b2:	b500      	push	{lr}
 80044b4:	b09c      	sub	sp, #112	; 0x70
 80044b6:	ab1d      	add	r3, sp, #116	; 0x74
 80044b8:	9002      	str	r0, [sp, #8]
 80044ba:	9006      	str	r0, [sp, #24]
 80044bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044c0:	4809      	ldr	r0, [pc, #36]	; (80044e8 <siprintf+0x38>)
 80044c2:	9107      	str	r1, [sp, #28]
 80044c4:	9104      	str	r1, [sp, #16]
 80044c6:	4909      	ldr	r1, [pc, #36]	; (80044ec <siprintf+0x3c>)
 80044c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80044cc:	9105      	str	r1, [sp, #20]
 80044ce:	6800      	ldr	r0, [r0, #0]
 80044d0:	9301      	str	r3, [sp, #4]
 80044d2:	a902      	add	r1, sp, #8
 80044d4:	f001 fc30 	bl	8005d38 <_svfiprintf_r>
 80044d8:	9b02      	ldr	r3, [sp, #8]
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	b01c      	add	sp, #112	; 0x70
 80044e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044e4:	b003      	add	sp, #12
 80044e6:	4770      	bx	lr
 80044e8:	20000068 	.word	0x20000068
 80044ec:	ffff0208 	.word	0xffff0208

080044f0 <__sread>:
 80044f0:	b510      	push	{r4, lr}
 80044f2:	460c      	mov	r4, r1
 80044f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044f8:	f000 f86c 	bl	80045d4 <_read_r>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	bfab      	itete	ge
 8004500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004502:	89a3      	ldrhlt	r3, [r4, #12]
 8004504:	181b      	addge	r3, r3, r0
 8004506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800450a:	bfac      	ite	ge
 800450c:	6563      	strge	r3, [r4, #84]	; 0x54
 800450e:	81a3      	strhlt	r3, [r4, #12]
 8004510:	bd10      	pop	{r4, pc}

08004512 <__swrite>:
 8004512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	461f      	mov	r7, r3
 8004518:	898b      	ldrh	r3, [r1, #12]
 800451a:	05db      	lsls	r3, r3, #23
 800451c:	4605      	mov	r5, r0
 800451e:	460c      	mov	r4, r1
 8004520:	4616      	mov	r6, r2
 8004522:	d505      	bpl.n	8004530 <__swrite+0x1e>
 8004524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004528:	2302      	movs	r3, #2
 800452a:	2200      	movs	r2, #0
 800452c:	f000 f840 	bl	80045b0 <_lseek_r>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004536:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	4632      	mov	r2, r6
 800453e:	463b      	mov	r3, r7
 8004540:	4628      	mov	r0, r5
 8004542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004546:	f000 b857 	b.w	80045f8 <_write_r>

0800454a <__sseek>:
 800454a:	b510      	push	{r4, lr}
 800454c:	460c      	mov	r4, r1
 800454e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004552:	f000 f82d 	bl	80045b0 <_lseek_r>
 8004556:	1c43      	adds	r3, r0, #1
 8004558:	89a3      	ldrh	r3, [r4, #12]
 800455a:	bf15      	itete	ne
 800455c:	6560      	strne	r0, [r4, #84]	; 0x54
 800455e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004566:	81a3      	strheq	r3, [r4, #12]
 8004568:	bf18      	it	ne
 800456a:	81a3      	strhne	r3, [r4, #12]
 800456c:	bd10      	pop	{r4, pc}

0800456e <__sclose>:
 800456e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004572:	f000 b80d 	b.w	8004590 <_close_r>

08004576 <memset>:
 8004576:	4402      	add	r2, r0
 8004578:	4603      	mov	r3, r0
 800457a:	4293      	cmp	r3, r2
 800457c:	d100      	bne.n	8004580 <memset+0xa>
 800457e:	4770      	bx	lr
 8004580:	f803 1b01 	strb.w	r1, [r3], #1
 8004584:	e7f9      	b.n	800457a <memset+0x4>
	...

08004588 <_localeconv_r>:
 8004588:	4800      	ldr	r0, [pc, #0]	; (800458c <_localeconv_r+0x4>)
 800458a:	4770      	bx	lr
 800458c:	2000015c 	.word	0x2000015c

08004590 <_close_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4d06      	ldr	r5, [pc, #24]	; (80045ac <_close_r+0x1c>)
 8004594:	2300      	movs	r3, #0
 8004596:	4604      	mov	r4, r0
 8004598:	4608      	mov	r0, r1
 800459a:	602b      	str	r3, [r5, #0]
 800459c:	f7fe fa7b 	bl	8002a96 <_close>
 80045a0:	1c43      	adds	r3, r0, #1
 80045a2:	d102      	bne.n	80045aa <_close_r+0x1a>
 80045a4:	682b      	ldr	r3, [r5, #0]
 80045a6:	b103      	cbz	r3, 80045aa <_close_r+0x1a>
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	bd38      	pop	{r3, r4, r5, pc}
 80045ac:	20000344 	.word	0x20000344

080045b0 <_lseek_r>:
 80045b0:	b538      	push	{r3, r4, r5, lr}
 80045b2:	4d07      	ldr	r5, [pc, #28]	; (80045d0 <_lseek_r+0x20>)
 80045b4:	4604      	mov	r4, r0
 80045b6:	4608      	mov	r0, r1
 80045b8:	4611      	mov	r1, r2
 80045ba:	2200      	movs	r2, #0
 80045bc:	602a      	str	r2, [r5, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	f7fe fa90 	bl	8002ae4 <_lseek>
 80045c4:	1c43      	adds	r3, r0, #1
 80045c6:	d102      	bne.n	80045ce <_lseek_r+0x1e>
 80045c8:	682b      	ldr	r3, [r5, #0]
 80045ca:	b103      	cbz	r3, 80045ce <_lseek_r+0x1e>
 80045cc:	6023      	str	r3, [r4, #0]
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	20000344 	.word	0x20000344

080045d4 <_read_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	4d07      	ldr	r5, [pc, #28]	; (80045f4 <_read_r+0x20>)
 80045d8:	4604      	mov	r4, r0
 80045da:	4608      	mov	r0, r1
 80045dc:	4611      	mov	r1, r2
 80045de:	2200      	movs	r2, #0
 80045e0:	602a      	str	r2, [r5, #0]
 80045e2:	461a      	mov	r2, r3
 80045e4:	f7fe fa1e 	bl	8002a24 <_read>
 80045e8:	1c43      	adds	r3, r0, #1
 80045ea:	d102      	bne.n	80045f2 <_read_r+0x1e>
 80045ec:	682b      	ldr	r3, [r5, #0]
 80045ee:	b103      	cbz	r3, 80045f2 <_read_r+0x1e>
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	bd38      	pop	{r3, r4, r5, pc}
 80045f4:	20000344 	.word	0x20000344

080045f8 <_write_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4d07      	ldr	r5, [pc, #28]	; (8004618 <_write_r+0x20>)
 80045fc:	4604      	mov	r4, r0
 80045fe:	4608      	mov	r0, r1
 8004600:	4611      	mov	r1, r2
 8004602:	2200      	movs	r2, #0
 8004604:	602a      	str	r2, [r5, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	f7fe fa29 	bl	8002a5e <_write>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_write_r+0x1e>
 8004610:	682b      	ldr	r3, [r5, #0]
 8004612:	b103      	cbz	r3, 8004616 <_write_r+0x1e>
 8004614:	6023      	str	r3, [r4, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	20000344 	.word	0x20000344

0800461c <__errno>:
 800461c:	4b01      	ldr	r3, [pc, #4]	; (8004624 <__errno+0x8>)
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	20000068 	.word	0x20000068

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	4d0d      	ldr	r5, [pc, #52]	; (8004660 <__libc_init_array+0x38>)
 800462c:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 800462e:	1b64      	subs	r4, r4, r5
 8004630:	10a4      	asrs	r4, r4, #2
 8004632:	2600      	movs	r6, #0
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	4d0b      	ldr	r5, [pc, #44]	; (8004668 <__libc_init_array+0x40>)
 800463a:	4c0c      	ldr	r4, [pc, #48]	; (800466c <__libc_init_array+0x44>)
 800463c:	f003 f92c 	bl	8007898 <_init>
 8004640:	1b64      	subs	r4, r4, r5
 8004642:	10a4      	asrs	r4, r4, #2
 8004644:	2600      	movs	r6, #0
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	f855 3b04 	ldr.w	r3, [r5], #4
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	08019f48 	.word	0x08019f48
 8004664:	08019f48 	.word	0x08019f48
 8004668:	08019f48 	.word	0x08019f48
 800466c:	08019f4c 	.word	0x08019f4c

08004670 <__retarget_lock_init_recursive>:
 8004670:	4770      	bx	lr

08004672 <__retarget_lock_acquire_recursive>:
 8004672:	4770      	bx	lr

08004674 <__retarget_lock_release_recursive>:
 8004674:	4770      	bx	lr

08004676 <memcpy>:
 8004676:	440a      	add	r2, r1
 8004678:	4291      	cmp	r1, r2
 800467a:	f100 33ff 	add.w	r3, r0, #4294967295
 800467e:	d100      	bne.n	8004682 <memcpy+0xc>
 8004680:	4770      	bx	lr
 8004682:	b510      	push	{r4, lr}
 8004684:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004688:	f803 4f01 	strb.w	r4, [r3, #1]!
 800468c:	4291      	cmp	r1, r2
 800468e:	d1f9      	bne.n	8004684 <memcpy+0xe>
 8004690:	bd10      	pop	{r4, pc}

08004692 <quorem>:
 8004692:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004696:	6903      	ldr	r3, [r0, #16]
 8004698:	690c      	ldr	r4, [r1, #16]
 800469a:	42a3      	cmp	r3, r4
 800469c:	4607      	mov	r7, r0
 800469e:	db7e      	blt.n	800479e <quorem+0x10c>
 80046a0:	3c01      	subs	r4, #1
 80046a2:	f101 0814 	add.w	r8, r1, #20
 80046a6:	f100 0514 	add.w	r5, r0, #20
 80046aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046ae:	9301      	str	r3, [sp, #4]
 80046b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046b8:	3301      	adds	r3, #1
 80046ba:	429a      	cmp	r2, r3
 80046bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80046c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046c8:	d331      	bcc.n	800472e <quorem+0x9c>
 80046ca:	f04f 0e00 	mov.w	lr, #0
 80046ce:	4640      	mov	r0, r8
 80046d0:	46ac      	mov	ip, r5
 80046d2:	46f2      	mov	sl, lr
 80046d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80046d8:	b293      	uxth	r3, r2
 80046da:	fb06 e303 	mla	r3, r6, r3, lr
 80046de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046e2:	0c1a      	lsrs	r2, r3, #16
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	ebaa 0303 	sub.w	r3, sl, r3
 80046ea:	f8dc a000 	ldr.w	sl, [ip]
 80046ee:	fa13 f38a 	uxtah	r3, r3, sl
 80046f2:	fb06 220e 	mla	r2, r6, lr, r2
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	9b00      	ldr	r3, [sp, #0]
 80046fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80046fe:	b292      	uxth	r2, r2
 8004700:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004708:	f8bd 3000 	ldrh.w	r3, [sp]
 800470c:	4581      	cmp	r9, r0
 800470e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004712:	f84c 3b04 	str.w	r3, [ip], #4
 8004716:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800471a:	d2db      	bcs.n	80046d4 <quorem+0x42>
 800471c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004720:	b92b      	cbnz	r3, 800472e <quorem+0x9c>
 8004722:	9b01      	ldr	r3, [sp, #4]
 8004724:	3b04      	subs	r3, #4
 8004726:	429d      	cmp	r5, r3
 8004728:	461a      	mov	r2, r3
 800472a:	d32c      	bcc.n	8004786 <quorem+0xf4>
 800472c:	613c      	str	r4, [r7, #16]
 800472e:	4638      	mov	r0, r7
 8004730:	f001 f9a8 	bl	8005a84 <__mcmp>
 8004734:	2800      	cmp	r0, #0
 8004736:	db22      	blt.n	800477e <quorem+0xec>
 8004738:	3601      	adds	r6, #1
 800473a:	4629      	mov	r1, r5
 800473c:	2000      	movs	r0, #0
 800473e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004742:	f8d1 c000 	ldr.w	ip, [r1]
 8004746:	b293      	uxth	r3, r2
 8004748:	1ac3      	subs	r3, r0, r3
 800474a:	0c12      	lsrs	r2, r2, #16
 800474c:	fa13 f38c 	uxtah	r3, r3, ip
 8004750:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004754:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004758:	b29b      	uxth	r3, r3
 800475a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800475e:	45c1      	cmp	r9, r8
 8004760:	f841 3b04 	str.w	r3, [r1], #4
 8004764:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004768:	d2e9      	bcs.n	800473e <quorem+0xac>
 800476a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800476e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004772:	b922      	cbnz	r2, 800477e <quorem+0xec>
 8004774:	3b04      	subs	r3, #4
 8004776:	429d      	cmp	r5, r3
 8004778:	461a      	mov	r2, r3
 800477a:	d30a      	bcc.n	8004792 <quorem+0x100>
 800477c:	613c      	str	r4, [r7, #16]
 800477e:	4630      	mov	r0, r6
 8004780:	b003      	add	sp, #12
 8004782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	3b04      	subs	r3, #4
 800478a:	2a00      	cmp	r2, #0
 800478c:	d1ce      	bne.n	800472c <quorem+0x9a>
 800478e:	3c01      	subs	r4, #1
 8004790:	e7c9      	b.n	8004726 <quorem+0x94>
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	3b04      	subs	r3, #4
 8004796:	2a00      	cmp	r2, #0
 8004798:	d1f0      	bne.n	800477c <quorem+0xea>
 800479a:	3c01      	subs	r4, #1
 800479c:	e7eb      	b.n	8004776 <quorem+0xe4>
 800479e:	2000      	movs	r0, #0
 80047a0:	e7ee      	b.n	8004780 <quorem+0xee>
 80047a2:	0000      	movs	r0, r0
 80047a4:	0000      	movs	r0, r0
	...

080047a8 <_dtoa_r>:
 80047a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ac:	ed2d 8b04 	vpush	{d8-d9}
 80047b0:	69c5      	ldr	r5, [r0, #28]
 80047b2:	b093      	sub	sp, #76	; 0x4c
 80047b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80047b8:	ec57 6b10 	vmov	r6, r7, d0
 80047bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80047c0:	9107      	str	r1, [sp, #28]
 80047c2:	4604      	mov	r4, r0
 80047c4:	920a      	str	r2, [sp, #40]	; 0x28
 80047c6:	930d      	str	r3, [sp, #52]	; 0x34
 80047c8:	b975      	cbnz	r5, 80047e8 <_dtoa_r+0x40>
 80047ca:	2010      	movs	r0, #16
 80047cc:	f000 fe2a 	bl	8005424 <malloc>
 80047d0:	4602      	mov	r2, r0
 80047d2:	61e0      	str	r0, [r4, #28]
 80047d4:	b920      	cbnz	r0, 80047e0 <_dtoa_r+0x38>
 80047d6:	4bae      	ldr	r3, [pc, #696]	; (8004a90 <_dtoa_r+0x2e8>)
 80047d8:	21ef      	movs	r1, #239	; 0xef
 80047da:	48ae      	ldr	r0, [pc, #696]	; (8004a94 <_dtoa_r+0x2ec>)
 80047dc:	f001 fc82 	bl	80060e4 <__assert_func>
 80047e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80047e4:	6005      	str	r5, [r0, #0]
 80047e6:	60c5      	str	r5, [r0, #12]
 80047e8:	69e3      	ldr	r3, [r4, #28]
 80047ea:	6819      	ldr	r1, [r3, #0]
 80047ec:	b151      	cbz	r1, 8004804 <_dtoa_r+0x5c>
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	604a      	str	r2, [r1, #4]
 80047f2:	2301      	movs	r3, #1
 80047f4:	4093      	lsls	r3, r2
 80047f6:	608b      	str	r3, [r1, #8]
 80047f8:	4620      	mov	r0, r4
 80047fa:	f000 ff07 	bl	800560c <_Bfree>
 80047fe:	69e3      	ldr	r3, [r4, #28]
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	1e3b      	subs	r3, r7, #0
 8004806:	bfbb      	ittet	lt
 8004808:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800480c:	9303      	strlt	r3, [sp, #12]
 800480e:	2300      	movge	r3, #0
 8004810:	2201      	movlt	r2, #1
 8004812:	bfac      	ite	ge
 8004814:	f8c8 3000 	strge.w	r3, [r8]
 8004818:	f8c8 2000 	strlt.w	r2, [r8]
 800481c:	4b9e      	ldr	r3, [pc, #632]	; (8004a98 <_dtoa_r+0x2f0>)
 800481e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004822:	ea33 0308 	bics.w	r3, r3, r8
 8004826:	d11b      	bne.n	8004860 <_dtoa_r+0xb8>
 8004828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800482a:	f242 730f 	movw	r3, #9999	; 0x270f
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004834:	4333      	orrs	r3, r6
 8004836:	f000 8593 	beq.w	8005360 <_dtoa_r+0xbb8>
 800483a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800483c:	b963      	cbnz	r3, 8004858 <_dtoa_r+0xb0>
 800483e:	4b97      	ldr	r3, [pc, #604]	; (8004a9c <_dtoa_r+0x2f4>)
 8004840:	e027      	b.n	8004892 <_dtoa_r+0xea>
 8004842:	4b97      	ldr	r3, [pc, #604]	; (8004aa0 <_dtoa_r+0x2f8>)
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	3308      	adds	r3, #8
 8004848:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	9800      	ldr	r0, [sp, #0]
 800484e:	b013      	add	sp, #76	; 0x4c
 8004850:	ecbd 8b04 	vpop	{d8-d9}
 8004854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004858:	4b90      	ldr	r3, [pc, #576]	; (8004a9c <_dtoa_r+0x2f4>)
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	3303      	adds	r3, #3
 800485e:	e7f3      	b.n	8004848 <_dtoa_r+0xa0>
 8004860:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004864:	2200      	movs	r2, #0
 8004866:	ec51 0b17 	vmov	r0, r1, d7
 800486a:	eeb0 8a47 	vmov.f32	s16, s14
 800486e:	eef0 8a67 	vmov.f32	s17, s15
 8004872:	2300      	movs	r3, #0
 8004874:	f7fc f930 	bl	8000ad8 <__aeabi_dcmpeq>
 8004878:	4681      	mov	r9, r0
 800487a:	b160      	cbz	r0, 8004896 <_dtoa_r+0xee>
 800487c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800487e:	2301      	movs	r3, #1
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 8568 	beq.w	800535a <_dtoa_r+0xbb2>
 800488a:	4b86      	ldr	r3, [pc, #536]	; (8004aa4 <_dtoa_r+0x2fc>)
 800488c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	3b01      	subs	r3, #1
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	e7da      	b.n	800484c <_dtoa_r+0xa4>
 8004896:	aa10      	add	r2, sp, #64	; 0x40
 8004898:	a911      	add	r1, sp, #68	; 0x44
 800489a:	4620      	mov	r0, r4
 800489c:	eeb0 0a48 	vmov.f32	s0, s16
 80048a0:	eef0 0a68 	vmov.f32	s1, s17
 80048a4:	f001 f994 	bl	8005bd0 <__d2b>
 80048a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80048ac:	4682      	mov	sl, r0
 80048ae:	2d00      	cmp	r5, #0
 80048b0:	d07f      	beq.n	80049b2 <_dtoa_r+0x20a>
 80048b2:	ee18 3a90 	vmov	r3, s17
 80048b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80048be:	ec51 0b18 	vmov	r0, r1, d8
 80048c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80048c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80048ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80048ce:	4619      	mov	r1, r3
 80048d0:	2200      	movs	r2, #0
 80048d2:	4b75      	ldr	r3, [pc, #468]	; (8004aa8 <_dtoa_r+0x300>)
 80048d4:	f7fb fce0 	bl	8000298 <__aeabi_dsub>
 80048d8:	a367      	add	r3, pc, #412	; (adr r3, 8004a78 <_dtoa_r+0x2d0>)
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f7fb fe93 	bl	8000608 <__aeabi_dmul>
 80048e2:	a367      	add	r3, pc, #412	; (adr r3, 8004a80 <_dtoa_r+0x2d8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fcd8 	bl	800029c <__adddf3>
 80048ec:	4606      	mov	r6, r0
 80048ee:	4628      	mov	r0, r5
 80048f0:	460f      	mov	r7, r1
 80048f2:	f7fb fe1f 	bl	8000534 <__aeabi_i2d>
 80048f6:	a364      	add	r3, pc, #400	; (adr r3, 8004a88 <_dtoa_r+0x2e0>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fe84 	bl	8000608 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	4630      	mov	r0, r6
 8004906:	4639      	mov	r1, r7
 8004908:	f7fb fcc8 	bl	800029c <__adddf3>
 800490c:	4606      	mov	r6, r0
 800490e:	460f      	mov	r7, r1
 8004910:	f7fc f92a 	bl	8000b68 <__aeabi_d2iz>
 8004914:	2200      	movs	r2, #0
 8004916:	4683      	mov	fp, r0
 8004918:	2300      	movs	r3, #0
 800491a:	4630      	mov	r0, r6
 800491c:	4639      	mov	r1, r7
 800491e:	f7fc f8e5 	bl	8000aec <__aeabi_dcmplt>
 8004922:	b148      	cbz	r0, 8004938 <_dtoa_r+0x190>
 8004924:	4658      	mov	r0, fp
 8004926:	f7fb fe05 	bl	8000534 <__aeabi_i2d>
 800492a:	4632      	mov	r2, r6
 800492c:	463b      	mov	r3, r7
 800492e:	f7fc f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004932:	b908      	cbnz	r0, 8004938 <_dtoa_r+0x190>
 8004934:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004938:	f1bb 0f16 	cmp.w	fp, #22
 800493c:	d857      	bhi.n	80049ee <_dtoa_r+0x246>
 800493e:	4b5b      	ldr	r3, [pc, #364]	; (8004aac <_dtoa_r+0x304>)
 8004940:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004948:	ec51 0b18 	vmov	r0, r1, d8
 800494c:	f7fc f8ce 	bl	8000aec <__aeabi_dcmplt>
 8004950:	2800      	cmp	r0, #0
 8004952:	d04e      	beq.n	80049f2 <_dtoa_r+0x24a>
 8004954:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004958:	2300      	movs	r3, #0
 800495a:	930c      	str	r3, [sp, #48]	; 0x30
 800495c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800495e:	1b5b      	subs	r3, r3, r5
 8004960:	1e5a      	subs	r2, r3, #1
 8004962:	bf45      	ittet	mi
 8004964:	f1c3 0301 	rsbmi	r3, r3, #1
 8004968:	9305      	strmi	r3, [sp, #20]
 800496a:	2300      	movpl	r3, #0
 800496c:	2300      	movmi	r3, #0
 800496e:	9206      	str	r2, [sp, #24]
 8004970:	bf54      	ite	pl
 8004972:	9305      	strpl	r3, [sp, #20]
 8004974:	9306      	strmi	r3, [sp, #24]
 8004976:	f1bb 0f00 	cmp.w	fp, #0
 800497a:	db3c      	blt.n	80049f6 <_dtoa_r+0x24e>
 800497c:	9b06      	ldr	r3, [sp, #24]
 800497e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004982:	445b      	add	r3, fp
 8004984:	9306      	str	r3, [sp, #24]
 8004986:	2300      	movs	r3, #0
 8004988:	9308      	str	r3, [sp, #32]
 800498a:	9b07      	ldr	r3, [sp, #28]
 800498c:	2b09      	cmp	r3, #9
 800498e:	d868      	bhi.n	8004a62 <_dtoa_r+0x2ba>
 8004990:	2b05      	cmp	r3, #5
 8004992:	bfc4      	itt	gt
 8004994:	3b04      	subgt	r3, #4
 8004996:	9307      	strgt	r3, [sp, #28]
 8004998:	9b07      	ldr	r3, [sp, #28]
 800499a:	f1a3 0302 	sub.w	r3, r3, #2
 800499e:	bfcc      	ite	gt
 80049a0:	2500      	movgt	r5, #0
 80049a2:	2501      	movle	r5, #1
 80049a4:	2b03      	cmp	r3, #3
 80049a6:	f200 8085 	bhi.w	8004ab4 <_dtoa_r+0x30c>
 80049aa:	e8df f003 	tbb	[pc, r3]
 80049ae:	3b2e      	.short	0x3b2e
 80049b0:	5839      	.short	0x5839
 80049b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80049b6:	441d      	add	r5, r3
 80049b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80049bc:	2b20      	cmp	r3, #32
 80049be:	bfc1      	itttt	gt
 80049c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80049c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80049c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80049cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80049d0:	bfd6      	itet	le
 80049d2:	f1c3 0320 	rsble	r3, r3, #32
 80049d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80049da:	fa06 f003 	lslle.w	r0, r6, r3
 80049de:	f7fb fd99 	bl	8000514 <__aeabi_ui2d>
 80049e2:	2201      	movs	r2, #1
 80049e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80049e8:	3d01      	subs	r5, #1
 80049ea:	920e      	str	r2, [sp, #56]	; 0x38
 80049ec:	e76f      	b.n	80048ce <_dtoa_r+0x126>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e7b3      	b.n	800495a <_dtoa_r+0x1b2>
 80049f2:	900c      	str	r0, [sp, #48]	; 0x30
 80049f4:	e7b2      	b.n	800495c <_dtoa_r+0x1b4>
 80049f6:	9b05      	ldr	r3, [sp, #20]
 80049f8:	eba3 030b 	sub.w	r3, r3, fp
 80049fc:	9305      	str	r3, [sp, #20]
 80049fe:	f1cb 0300 	rsb	r3, fp, #0
 8004a02:	9308      	str	r3, [sp, #32]
 8004a04:	2300      	movs	r3, #0
 8004a06:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a08:	e7bf      	b.n	800498a <_dtoa_r+0x1e2>
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dc52      	bgt.n	8004aba <_dtoa_r+0x312>
 8004a14:	2301      	movs	r3, #1
 8004a16:	9301      	str	r3, [sp, #4]
 8004a18:	9304      	str	r3, [sp, #16]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8004a1e:	e00b      	b.n	8004a38 <_dtoa_r+0x290>
 8004a20:	2301      	movs	r3, #1
 8004a22:	e7f3      	b.n	8004a0c <_dtoa_r+0x264>
 8004a24:	2300      	movs	r3, #0
 8004a26:	9309      	str	r3, [sp, #36]	; 0x24
 8004a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a2a:	445b      	add	r3, fp
 8004a2c:	9301      	str	r3, [sp, #4]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	bfb8      	it	lt
 8004a36:	2301      	movlt	r3, #1
 8004a38:	69e0      	ldr	r0, [r4, #28]
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	2204      	movs	r2, #4
 8004a3e:	f102 0614 	add.w	r6, r2, #20
 8004a42:	429e      	cmp	r6, r3
 8004a44:	d93d      	bls.n	8004ac2 <_dtoa_r+0x31a>
 8004a46:	6041      	str	r1, [r0, #4]
 8004a48:	4620      	mov	r0, r4
 8004a4a:	f000 fd9f 	bl	800558c <_Balloc>
 8004a4e:	9000      	str	r0, [sp, #0]
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d139      	bne.n	8004ac8 <_dtoa_r+0x320>
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <_dtoa_r+0x308>)
 8004a56:	4602      	mov	r2, r0
 8004a58:	f240 11af 	movw	r1, #431	; 0x1af
 8004a5c:	e6bd      	b.n	80047da <_dtoa_r+0x32>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e7e1      	b.n	8004a26 <_dtoa_r+0x27e>
 8004a62:	2501      	movs	r5, #1
 8004a64:	2300      	movs	r3, #0
 8004a66:	9307      	str	r3, [sp, #28]
 8004a68:	9509      	str	r5, [sp, #36]	; 0x24
 8004a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004a6e:	9301      	str	r3, [sp, #4]
 8004a70:	9304      	str	r3, [sp, #16]
 8004a72:	2200      	movs	r2, #0
 8004a74:	2312      	movs	r3, #18
 8004a76:	e7d1      	b.n	8004a1c <_dtoa_r+0x274>
 8004a78:	636f4361 	.word	0x636f4361
 8004a7c:	3fd287a7 	.word	0x3fd287a7
 8004a80:	8b60c8b3 	.word	0x8b60c8b3
 8004a84:	3fc68a28 	.word	0x3fc68a28
 8004a88:	509f79fb 	.word	0x509f79fb
 8004a8c:	3fd34413 	.word	0x3fd34413
 8004a90:	08019a31 	.word	0x08019a31
 8004a94:	08019a48 	.word	0x08019a48
 8004a98:	7ff00000 	.word	0x7ff00000
 8004a9c:	08019a2d 	.word	0x08019a2d
 8004aa0:	08019a24 	.word	0x08019a24
 8004aa4:	08019a01 	.word	0x08019a01
 8004aa8:	3ff80000 	.word	0x3ff80000
 8004aac:	08019b38 	.word	0x08019b38
 8004ab0:	08019aa0 	.word	0x08019aa0
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ab8:	e7d7      	b.n	8004a6a <_dtoa_r+0x2c2>
 8004aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004abc:	9301      	str	r3, [sp, #4]
 8004abe:	9304      	str	r3, [sp, #16]
 8004ac0:	e7ba      	b.n	8004a38 <_dtoa_r+0x290>
 8004ac2:	3101      	adds	r1, #1
 8004ac4:	0052      	lsls	r2, r2, #1
 8004ac6:	e7ba      	b.n	8004a3e <_dtoa_r+0x296>
 8004ac8:	69e3      	ldr	r3, [r4, #28]
 8004aca:	9a00      	ldr	r2, [sp, #0]
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	9b04      	ldr	r3, [sp, #16]
 8004ad0:	2b0e      	cmp	r3, #14
 8004ad2:	f200 80a8 	bhi.w	8004c26 <_dtoa_r+0x47e>
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	f000 80a5 	beq.w	8004c26 <_dtoa_r+0x47e>
 8004adc:	f1bb 0f00 	cmp.w	fp, #0
 8004ae0:	dd38      	ble.n	8004b54 <_dtoa_r+0x3ac>
 8004ae2:	4bc0      	ldr	r3, [pc, #768]	; (8004de4 <_dtoa_r+0x63c>)
 8004ae4:	f00b 020f 	and.w	r2, fp, #15
 8004ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004aec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004af0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004af4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004af8:	d019      	beq.n	8004b2e <_dtoa_r+0x386>
 8004afa:	4bbb      	ldr	r3, [pc, #748]	; (8004de8 <_dtoa_r+0x640>)
 8004afc:	ec51 0b18 	vmov	r0, r1, d8
 8004b00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004b04:	f7fb feaa 	bl	800085c <__aeabi_ddiv>
 8004b08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b0c:	f008 080f 	and.w	r8, r8, #15
 8004b10:	2503      	movs	r5, #3
 8004b12:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004de8 <_dtoa_r+0x640>
 8004b16:	f1b8 0f00 	cmp.w	r8, #0
 8004b1a:	d10a      	bne.n	8004b32 <_dtoa_r+0x38a>
 8004b1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b20:	4632      	mov	r2, r6
 8004b22:	463b      	mov	r3, r7
 8004b24:	f7fb fe9a 	bl	800085c <__aeabi_ddiv>
 8004b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b2c:	e02b      	b.n	8004b86 <_dtoa_r+0x3de>
 8004b2e:	2502      	movs	r5, #2
 8004b30:	e7ef      	b.n	8004b12 <_dtoa_r+0x36a>
 8004b32:	f018 0f01 	tst.w	r8, #1
 8004b36:	d008      	beq.n	8004b4a <_dtoa_r+0x3a2>
 8004b38:	4630      	mov	r0, r6
 8004b3a:	4639      	mov	r1, r7
 8004b3c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004b40:	f7fb fd62 	bl	8000608 <__aeabi_dmul>
 8004b44:	3501      	adds	r5, #1
 8004b46:	4606      	mov	r6, r0
 8004b48:	460f      	mov	r7, r1
 8004b4a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004b4e:	f109 0908 	add.w	r9, r9, #8
 8004b52:	e7e0      	b.n	8004b16 <_dtoa_r+0x36e>
 8004b54:	f000 809f 	beq.w	8004c96 <_dtoa_r+0x4ee>
 8004b58:	f1cb 0600 	rsb	r6, fp, #0
 8004b5c:	4ba1      	ldr	r3, [pc, #644]	; (8004de4 <_dtoa_r+0x63c>)
 8004b5e:	4fa2      	ldr	r7, [pc, #648]	; (8004de8 <_dtoa_r+0x640>)
 8004b60:	f006 020f 	and.w	r2, r6, #15
 8004b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6c:	ec51 0b18 	vmov	r0, r1, d8
 8004b70:	f7fb fd4a 	bl	8000608 <__aeabi_dmul>
 8004b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b78:	1136      	asrs	r6, r6, #4
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2502      	movs	r5, #2
 8004b7e:	2e00      	cmp	r6, #0
 8004b80:	d17e      	bne.n	8004c80 <_dtoa_r+0x4d8>
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1d0      	bne.n	8004b28 <_dtoa_r+0x380>
 8004b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b88:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 8084 	beq.w	8004c9a <_dtoa_r+0x4f2>
 8004b92:	4b96      	ldr	r3, [pc, #600]	; (8004dec <_dtoa_r+0x644>)
 8004b94:	2200      	movs	r2, #0
 8004b96:	4640      	mov	r0, r8
 8004b98:	4649      	mov	r1, r9
 8004b9a:	f7fb ffa7 	bl	8000aec <__aeabi_dcmplt>
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	d07b      	beq.n	8004c9a <_dtoa_r+0x4f2>
 8004ba2:	9b04      	ldr	r3, [sp, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d078      	beq.n	8004c9a <_dtoa_r+0x4f2>
 8004ba8:	9b01      	ldr	r3, [sp, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dd39      	ble.n	8004c22 <_dtoa_r+0x47a>
 8004bae:	4b90      	ldr	r3, [pc, #576]	; (8004df0 <_dtoa_r+0x648>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	4640      	mov	r0, r8
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	f7fb fd27 	bl	8000608 <__aeabi_dmul>
 8004bba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004bbe:	9e01      	ldr	r6, [sp, #4]
 8004bc0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7fb fcb2 	bl	8000534 <__aeabi_i2d>
 8004bd0:	4642      	mov	r2, r8
 8004bd2:	464b      	mov	r3, r9
 8004bd4:	f7fb fd18 	bl	8000608 <__aeabi_dmul>
 8004bd8:	4b86      	ldr	r3, [pc, #536]	; (8004df4 <_dtoa_r+0x64c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f7fb fb5e 	bl	800029c <__adddf3>
 8004be0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004be4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004be8:	9303      	str	r3, [sp, #12]
 8004bea:	2e00      	cmp	r6, #0
 8004bec:	d158      	bne.n	8004ca0 <_dtoa_r+0x4f8>
 8004bee:	4b82      	ldr	r3, [pc, #520]	; (8004df8 <_dtoa_r+0x650>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	f7fb fb4f 	bl	8000298 <__aeabi_dsub>
 8004bfa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004bfe:	4680      	mov	r8, r0
 8004c00:	4689      	mov	r9, r1
 8004c02:	f7fb ff91 	bl	8000b28 <__aeabi_dcmpgt>
 8004c06:	2800      	cmp	r0, #0
 8004c08:	f040 8296 	bne.w	8005138 <_dtoa_r+0x990>
 8004c0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004c10:	4640      	mov	r0, r8
 8004c12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c16:	4649      	mov	r1, r9
 8004c18:	f7fb ff68 	bl	8000aec <__aeabi_dcmplt>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	f040 8289 	bne.w	8005134 <_dtoa_r+0x98c>
 8004c22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004c26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f2c0 814e 	blt.w	8004eca <_dtoa_r+0x722>
 8004c2e:	f1bb 0f0e 	cmp.w	fp, #14
 8004c32:	f300 814a 	bgt.w	8004eca <_dtoa_r+0x722>
 8004c36:	4b6b      	ldr	r3, [pc, #428]	; (8004de4 <_dtoa_r+0x63c>)
 8004c38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f280 80dc 	bge.w	8004e00 <_dtoa_r+0x658>
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f300 80d8 	bgt.w	8004e00 <_dtoa_r+0x658>
 8004c50:	f040 826f 	bne.w	8005132 <_dtoa_r+0x98a>
 8004c54:	4b68      	ldr	r3, [pc, #416]	; (8004df8 <_dtoa_r+0x650>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	4640      	mov	r0, r8
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	f7fb fcd4 	bl	8000608 <__aeabi_dmul>
 8004c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c64:	f7fb ff56 	bl	8000b14 <__aeabi_dcmpge>
 8004c68:	9e04      	ldr	r6, [sp, #16]
 8004c6a:	4637      	mov	r7, r6
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	f040 8245 	bne.w	80050fc <_dtoa_r+0x954>
 8004c72:	9d00      	ldr	r5, [sp, #0]
 8004c74:	2331      	movs	r3, #49	; 0x31
 8004c76:	f805 3b01 	strb.w	r3, [r5], #1
 8004c7a:	f10b 0b01 	add.w	fp, fp, #1
 8004c7e:	e241      	b.n	8005104 <_dtoa_r+0x95c>
 8004c80:	07f2      	lsls	r2, r6, #31
 8004c82:	d505      	bpl.n	8004c90 <_dtoa_r+0x4e8>
 8004c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c88:	f7fb fcbe 	bl	8000608 <__aeabi_dmul>
 8004c8c:	3501      	adds	r5, #1
 8004c8e:	2301      	movs	r3, #1
 8004c90:	1076      	asrs	r6, r6, #1
 8004c92:	3708      	adds	r7, #8
 8004c94:	e773      	b.n	8004b7e <_dtoa_r+0x3d6>
 8004c96:	2502      	movs	r5, #2
 8004c98:	e775      	b.n	8004b86 <_dtoa_r+0x3de>
 8004c9a:	9e04      	ldr	r6, [sp, #16]
 8004c9c:	465f      	mov	r7, fp
 8004c9e:	e792      	b.n	8004bc6 <_dtoa_r+0x41e>
 8004ca0:	9900      	ldr	r1, [sp, #0]
 8004ca2:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <_dtoa_r+0x63c>)
 8004ca4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004ca8:	4431      	add	r1, r6
 8004caa:	9102      	str	r1, [sp, #8]
 8004cac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cae:	eeb0 9a47 	vmov.f32	s18, s14
 8004cb2:	eef0 9a67 	vmov.f32	s19, s15
 8004cb6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cbe:	2900      	cmp	r1, #0
 8004cc0:	d044      	beq.n	8004d4c <_dtoa_r+0x5a4>
 8004cc2:	494e      	ldr	r1, [pc, #312]	; (8004dfc <_dtoa_r+0x654>)
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fb fdc9 	bl	800085c <__aeabi_ddiv>
 8004cca:	ec53 2b19 	vmov	r2, r3, d9
 8004cce:	f7fb fae3 	bl	8000298 <__aeabi_dsub>
 8004cd2:	9d00      	ldr	r5, [sp, #0]
 8004cd4:	ec41 0b19 	vmov	d9, r0, r1
 8004cd8:	4649      	mov	r1, r9
 8004cda:	4640      	mov	r0, r8
 8004cdc:	f7fb ff44 	bl	8000b68 <__aeabi_d2iz>
 8004ce0:	4606      	mov	r6, r0
 8004ce2:	f7fb fc27 	bl	8000534 <__aeabi_i2d>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	460b      	mov	r3, r1
 8004cea:	4640      	mov	r0, r8
 8004cec:	4649      	mov	r1, r9
 8004cee:	f7fb fad3 	bl	8000298 <__aeabi_dsub>
 8004cf2:	3630      	adds	r6, #48	; 0x30
 8004cf4:	f805 6b01 	strb.w	r6, [r5], #1
 8004cf8:	ec53 2b19 	vmov	r2, r3, d9
 8004cfc:	4680      	mov	r8, r0
 8004cfe:	4689      	mov	r9, r1
 8004d00:	f7fb fef4 	bl	8000aec <__aeabi_dcmplt>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d164      	bne.n	8004dd2 <_dtoa_r+0x62a>
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	4937      	ldr	r1, [pc, #220]	; (8004dec <_dtoa_r+0x644>)
 8004d0e:	2000      	movs	r0, #0
 8004d10:	f7fb fac2 	bl	8000298 <__aeabi_dsub>
 8004d14:	ec53 2b19 	vmov	r2, r3, d9
 8004d18:	f7fb fee8 	bl	8000aec <__aeabi_dcmplt>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f040 80b6 	bne.w	8004e8e <_dtoa_r+0x6e6>
 8004d22:	9b02      	ldr	r3, [sp, #8]
 8004d24:	429d      	cmp	r5, r3
 8004d26:	f43f af7c 	beq.w	8004c22 <_dtoa_r+0x47a>
 8004d2a:	4b31      	ldr	r3, [pc, #196]	; (8004df0 <_dtoa_r+0x648>)
 8004d2c:	ec51 0b19 	vmov	r0, r1, d9
 8004d30:	2200      	movs	r2, #0
 8004d32:	f7fb fc69 	bl	8000608 <__aeabi_dmul>
 8004d36:	4b2e      	ldr	r3, [pc, #184]	; (8004df0 <_dtoa_r+0x648>)
 8004d38:	ec41 0b19 	vmov	d9, r0, r1
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	4640      	mov	r0, r8
 8004d40:	4649      	mov	r1, r9
 8004d42:	f7fb fc61 	bl	8000608 <__aeabi_dmul>
 8004d46:	4680      	mov	r8, r0
 8004d48:	4689      	mov	r9, r1
 8004d4a:	e7c5      	b.n	8004cd8 <_dtoa_r+0x530>
 8004d4c:	ec51 0b17 	vmov	r0, r1, d7
 8004d50:	f7fb fc5a 	bl	8000608 <__aeabi_dmul>
 8004d54:	9b02      	ldr	r3, [sp, #8]
 8004d56:	9d00      	ldr	r5, [sp, #0]
 8004d58:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d5a:	ec41 0b19 	vmov	d9, r0, r1
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	f7fb ff01 	bl	8000b68 <__aeabi_d2iz>
 8004d66:	4606      	mov	r6, r0
 8004d68:	f7fb fbe4 	bl	8000534 <__aeabi_i2d>
 8004d6c:	3630      	adds	r6, #48	; 0x30
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	4640      	mov	r0, r8
 8004d74:	4649      	mov	r1, r9
 8004d76:	f7fb fa8f 	bl	8000298 <__aeabi_dsub>
 8004d7a:	f805 6b01 	strb.w	r6, [r5], #1
 8004d7e:	9b02      	ldr	r3, [sp, #8]
 8004d80:	429d      	cmp	r5, r3
 8004d82:	4680      	mov	r8, r0
 8004d84:	4689      	mov	r9, r1
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	d124      	bne.n	8004dd6 <_dtoa_r+0x62e>
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <_dtoa_r+0x654>)
 8004d8e:	ec51 0b19 	vmov	r0, r1, d9
 8004d92:	f7fb fa83 	bl	800029c <__adddf3>
 8004d96:	4602      	mov	r2, r0
 8004d98:	460b      	mov	r3, r1
 8004d9a:	4640      	mov	r0, r8
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	f7fb fec3 	bl	8000b28 <__aeabi_dcmpgt>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d173      	bne.n	8004e8e <_dtoa_r+0x6e6>
 8004da6:	ec53 2b19 	vmov	r2, r3, d9
 8004daa:	4914      	ldr	r1, [pc, #80]	; (8004dfc <_dtoa_r+0x654>)
 8004dac:	2000      	movs	r0, #0
 8004dae:	f7fb fa73 	bl	8000298 <__aeabi_dsub>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	4640      	mov	r0, r8
 8004db8:	4649      	mov	r1, r9
 8004dba:	f7fb fe97 	bl	8000aec <__aeabi_dcmplt>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	f43f af2f 	beq.w	8004c22 <_dtoa_r+0x47a>
 8004dc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004dc6:	1e6b      	subs	r3, r5, #1
 8004dc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004dce:	2b30      	cmp	r3, #48	; 0x30
 8004dd0:	d0f8      	beq.n	8004dc4 <_dtoa_r+0x61c>
 8004dd2:	46bb      	mov	fp, r7
 8004dd4:	e04a      	b.n	8004e6c <_dtoa_r+0x6c4>
 8004dd6:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <_dtoa_r+0x648>)
 8004dd8:	f7fb fc16 	bl	8000608 <__aeabi_dmul>
 8004ddc:	4680      	mov	r8, r0
 8004dde:	4689      	mov	r9, r1
 8004de0:	e7bd      	b.n	8004d5e <_dtoa_r+0x5b6>
 8004de2:	bf00      	nop
 8004de4:	08019b38 	.word	0x08019b38
 8004de8:	08019b10 	.word	0x08019b10
 8004dec:	3ff00000 	.word	0x3ff00000
 8004df0:	40240000 	.word	0x40240000
 8004df4:	401c0000 	.word	0x401c0000
 8004df8:	40140000 	.word	0x40140000
 8004dfc:	3fe00000 	.word	0x3fe00000
 8004e00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004e04:	9d00      	ldr	r5, [sp, #0]
 8004e06:	4642      	mov	r2, r8
 8004e08:	464b      	mov	r3, r9
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	f7fb fd25 	bl	800085c <__aeabi_ddiv>
 8004e12:	f7fb fea9 	bl	8000b68 <__aeabi_d2iz>
 8004e16:	9001      	str	r0, [sp, #4]
 8004e18:	f7fb fb8c 	bl	8000534 <__aeabi_i2d>
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	464b      	mov	r3, r9
 8004e20:	f7fb fbf2 	bl	8000608 <__aeabi_dmul>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4630      	mov	r0, r6
 8004e2a:	4639      	mov	r1, r7
 8004e2c:	f7fb fa34 	bl	8000298 <__aeabi_dsub>
 8004e30:	9e01      	ldr	r6, [sp, #4]
 8004e32:	9f04      	ldr	r7, [sp, #16]
 8004e34:	3630      	adds	r6, #48	; 0x30
 8004e36:	f805 6b01 	strb.w	r6, [r5], #1
 8004e3a:	9e00      	ldr	r6, [sp, #0]
 8004e3c:	1bae      	subs	r6, r5, r6
 8004e3e:	42b7      	cmp	r7, r6
 8004e40:	4602      	mov	r2, r0
 8004e42:	460b      	mov	r3, r1
 8004e44:	d134      	bne.n	8004eb0 <_dtoa_r+0x708>
 8004e46:	f7fb fa29 	bl	800029c <__adddf3>
 8004e4a:	4642      	mov	r2, r8
 8004e4c:	464b      	mov	r3, r9
 8004e4e:	4606      	mov	r6, r0
 8004e50:	460f      	mov	r7, r1
 8004e52:	f7fb fe69 	bl	8000b28 <__aeabi_dcmpgt>
 8004e56:	b9c8      	cbnz	r0, 8004e8c <_dtoa_r+0x6e4>
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	4639      	mov	r1, r7
 8004e60:	f7fb fe3a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e64:	b110      	cbz	r0, 8004e6c <_dtoa_r+0x6c4>
 8004e66:	9b01      	ldr	r3, [sp, #4]
 8004e68:	07db      	lsls	r3, r3, #31
 8004e6a:	d40f      	bmi.n	8004e8c <_dtoa_r+0x6e4>
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	4620      	mov	r0, r4
 8004e70:	f000 fbcc 	bl	800560c <_Bfree>
 8004e74:	2300      	movs	r3, #0
 8004e76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e78:	702b      	strb	r3, [r5, #0]
 8004e7a:	f10b 0301 	add.w	r3, fp, #1
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f43f ace2 	beq.w	800484c <_dtoa_r+0xa4>
 8004e88:	601d      	str	r5, [r3, #0]
 8004e8a:	e4df      	b.n	800484c <_dtoa_r+0xa4>
 8004e8c:	465f      	mov	r7, fp
 8004e8e:	462b      	mov	r3, r5
 8004e90:	461d      	mov	r5, r3
 8004e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e96:	2a39      	cmp	r2, #57	; 0x39
 8004e98:	d106      	bne.n	8004ea8 <_dtoa_r+0x700>
 8004e9a:	9a00      	ldr	r2, [sp, #0]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1f7      	bne.n	8004e90 <_dtoa_r+0x6e8>
 8004ea0:	9900      	ldr	r1, [sp, #0]
 8004ea2:	2230      	movs	r2, #48	; 0x30
 8004ea4:	3701      	adds	r7, #1
 8004ea6:	700a      	strb	r2, [r1, #0]
 8004ea8:	781a      	ldrb	r2, [r3, #0]
 8004eaa:	3201      	adds	r2, #1
 8004eac:	701a      	strb	r2, [r3, #0]
 8004eae:	e790      	b.n	8004dd2 <_dtoa_r+0x62a>
 8004eb0:	4ba3      	ldr	r3, [pc, #652]	; (8005140 <_dtoa_r+0x998>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f7fb fba8 	bl	8000608 <__aeabi_dmul>
 8004eb8:	2200      	movs	r2, #0
 8004eba:	2300      	movs	r3, #0
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	f7fb fe0a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	d09e      	beq.n	8004e06 <_dtoa_r+0x65e>
 8004ec8:	e7d0      	b.n	8004e6c <_dtoa_r+0x6c4>
 8004eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	f000 80ca 	beq.w	8005066 <_dtoa_r+0x8be>
 8004ed2:	9a07      	ldr	r2, [sp, #28]
 8004ed4:	2a01      	cmp	r2, #1
 8004ed6:	f300 80ad 	bgt.w	8005034 <_dtoa_r+0x88c>
 8004eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004edc:	2a00      	cmp	r2, #0
 8004ede:	f000 80a5 	beq.w	800502c <_dtoa_r+0x884>
 8004ee2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004ee6:	9e08      	ldr	r6, [sp, #32]
 8004ee8:	9d05      	ldr	r5, [sp, #20]
 8004eea:	9a05      	ldr	r2, [sp, #20]
 8004eec:	441a      	add	r2, r3
 8004eee:	9205      	str	r2, [sp, #20]
 8004ef0:	9a06      	ldr	r2, [sp, #24]
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	441a      	add	r2, r3
 8004ef6:	4620      	mov	r0, r4
 8004ef8:	9206      	str	r2, [sp, #24]
 8004efa:	f000 fc3d 	bl	8005778 <__i2b>
 8004efe:	4607      	mov	r7, r0
 8004f00:	b165      	cbz	r5, 8004f1c <_dtoa_r+0x774>
 8004f02:	9b06      	ldr	r3, [sp, #24]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	dd09      	ble.n	8004f1c <_dtoa_r+0x774>
 8004f08:	42ab      	cmp	r3, r5
 8004f0a:	9a05      	ldr	r2, [sp, #20]
 8004f0c:	bfa8      	it	ge
 8004f0e:	462b      	movge	r3, r5
 8004f10:	1ad2      	subs	r2, r2, r3
 8004f12:	9205      	str	r2, [sp, #20]
 8004f14:	9a06      	ldr	r2, [sp, #24]
 8004f16:	1aed      	subs	r5, r5, r3
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	9306      	str	r3, [sp, #24]
 8004f1c:	9b08      	ldr	r3, [sp, #32]
 8004f1e:	b1f3      	cbz	r3, 8004f5e <_dtoa_r+0x7b6>
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80a3 	beq.w	800506e <_dtoa_r+0x8c6>
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	dd10      	ble.n	8004f4e <_dtoa_r+0x7a6>
 8004f2c:	4639      	mov	r1, r7
 8004f2e:	4632      	mov	r2, r6
 8004f30:	4620      	mov	r0, r4
 8004f32:	f000 fce1 	bl	80058f8 <__pow5mult>
 8004f36:	4652      	mov	r2, sl
 8004f38:	4601      	mov	r1, r0
 8004f3a:	4607      	mov	r7, r0
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 fc31 	bl	80057a4 <__multiply>
 8004f42:	4651      	mov	r1, sl
 8004f44:	4680      	mov	r8, r0
 8004f46:	4620      	mov	r0, r4
 8004f48:	f000 fb60 	bl	800560c <_Bfree>
 8004f4c:	46c2      	mov	sl, r8
 8004f4e:	9b08      	ldr	r3, [sp, #32]
 8004f50:	1b9a      	subs	r2, r3, r6
 8004f52:	d004      	beq.n	8004f5e <_dtoa_r+0x7b6>
 8004f54:	4651      	mov	r1, sl
 8004f56:	4620      	mov	r0, r4
 8004f58:	f000 fcce 	bl	80058f8 <__pow5mult>
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	2101      	movs	r1, #1
 8004f60:	4620      	mov	r0, r4
 8004f62:	f000 fc09 	bl	8005778 <__i2b>
 8004f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	4606      	mov	r6, r0
 8004f6c:	f340 8081 	ble.w	8005072 <_dtoa_r+0x8ca>
 8004f70:	461a      	mov	r2, r3
 8004f72:	4601      	mov	r1, r0
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 fcbf 	bl	80058f8 <__pow5mult>
 8004f7a:	9b07      	ldr	r3, [sp, #28]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	4606      	mov	r6, r0
 8004f80:	dd7a      	ble.n	8005078 <_dtoa_r+0x8d0>
 8004f82:	f04f 0800 	mov.w	r8, #0
 8004f86:	6933      	ldr	r3, [r6, #16]
 8004f88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004f8c:	6918      	ldr	r0, [r3, #16]
 8004f8e:	f000 fba5 	bl	80056dc <__hi0bits>
 8004f92:	f1c0 0020 	rsb	r0, r0, #32
 8004f96:	9b06      	ldr	r3, [sp, #24]
 8004f98:	4418      	add	r0, r3
 8004f9a:	f010 001f 	ands.w	r0, r0, #31
 8004f9e:	f000 8094 	beq.w	80050ca <_dtoa_r+0x922>
 8004fa2:	f1c0 0320 	rsb	r3, r0, #32
 8004fa6:	2b04      	cmp	r3, #4
 8004fa8:	f340 8085 	ble.w	80050b6 <_dtoa_r+0x90e>
 8004fac:	9b05      	ldr	r3, [sp, #20]
 8004fae:	f1c0 001c 	rsb	r0, r0, #28
 8004fb2:	4403      	add	r3, r0
 8004fb4:	9305      	str	r3, [sp, #20]
 8004fb6:	9b06      	ldr	r3, [sp, #24]
 8004fb8:	4403      	add	r3, r0
 8004fba:	4405      	add	r5, r0
 8004fbc:	9306      	str	r3, [sp, #24]
 8004fbe:	9b05      	ldr	r3, [sp, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dd05      	ble.n	8004fd0 <_dtoa_r+0x828>
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4620      	mov	r0, r4
 8004fca:	f000 fcef 	bl	80059ac <__lshift>
 8004fce:	4682      	mov	sl, r0
 8004fd0:	9b06      	ldr	r3, [sp, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	dd05      	ble.n	8004fe2 <_dtoa_r+0x83a>
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	461a      	mov	r2, r3
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f000 fce6 	bl	80059ac <__lshift>
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d072      	beq.n	80050ce <_dtoa_r+0x926>
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4650      	mov	r0, sl
 8004fec:	f000 fd4a 	bl	8005a84 <__mcmp>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	da6c      	bge.n	80050ce <_dtoa_r+0x926>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	220a      	movs	r2, #10
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f000 fb28 	bl	8005650 <__multadd>
 8005000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005002:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005006:	4682      	mov	sl, r0
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 81b0 	beq.w	800536e <_dtoa_r+0xbc6>
 800500e:	2300      	movs	r3, #0
 8005010:	4639      	mov	r1, r7
 8005012:	220a      	movs	r2, #10
 8005014:	4620      	mov	r0, r4
 8005016:	f000 fb1b 	bl	8005650 <__multadd>
 800501a:	9b01      	ldr	r3, [sp, #4]
 800501c:	2b00      	cmp	r3, #0
 800501e:	4607      	mov	r7, r0
 8005020:	f300 8096 	bgt.w	8005150 <_dtoa_r+0x9a8>
 8005024:	9b07      	ldr	r3, [sp, #28]
 8005026:	2b02      	cmp	r3, #2
 8005028:	dc59      	bgt.n	80050de <_dtoa_r+0x936>
 800502a:	e091      	b.n	8005150 <_dtoa_r+0x9a8>
 800502c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800502e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005032:	e758      	b.n	8004ee6 <_dtoa_r+0x73e>
 8005034:	9b04      	ldr	r3, [sp, #16]
 8005036:	1e5e      	subs	r6, r3, #1
 8005038:	9b08      	ldr	r3, [sp, #32]
 800503a:	42b3      	cmp	r3, r6
 800503c:	bfbf      	itttt	lt
 800503e:	9b08      	ldrlt	r3, [sp, #32]
 8005040:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005042:	9608      	strlt	r6, [sp, #32]
 8005044:	1af3      	sublt	r3, r6, r3
 8005046:	bfb4      	ite	lt
 8005048:	18d2      	addlt	r2, r2, r3
 800504a:	1b9e      	subge	r6, r3, r6
 800504c:	9b04      	ldr	r3, [sp, #16]
 800504e:	bfbc      	itt	lt
 8005050:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005052:	2600      	movlt	r6, #0
 8005054:	2b00      	cmp	r3, #0
 8005056:	bfb7      	itett	lt
 8005058:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800505c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005060:	1a9d      	sublt	r5, r3, r2
 8005062:	2300      	movlt	r3, #0
 8005064:	e741      	b.n	8004eea <_dtoa_r+0x742>
 8005066:	9e08      	ldr	r6, [sp, #32]
 8005068:	9d05      	ldr	r5, [sp, #20]
 800506a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800506c:	e748      	b.n	8004f00 <_dtoa_r+0x758>
 800506e:	9a08      	ldr	r2, [sp, #32]
 8005070:	e770      	b.n	8004f54 <_dtoa_r+0x7ac>
 8005072:	9b07      	ldr	r3, [sp, #28]
 8005074:	2b01      	cmp	r3, #1
 8005076:	dc19      	bgt.n	80050ac <_dtoa_r+0x904>
 8005078:	9b02      	ldr	r3, [sp, #8]
 800507a:	b9bb      	cbnz	r3, 80050ac <_dtoa_r+0x904>
 800507c:	9b03      	ldr	r3, [sp, #12]
 800507e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005082:	b99b      	cbnz	r3, 80050ac <_dtoa_r+0x904>
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800508a:	0d1b      	lsrs	r3, r3, #20
 800508c:	051b      	lsls	r3, r3, #20
 800508e:	b183      	cbz	r3, 80050b2 <_dtoa_r+0x90a>
 8005090:	9b05      	ldr	r3, [sp, #20]
 8005092:	3301      	adds	r3, #1
 8005094:	9305      	str	r3, [sp, #20]
 8005096:	9b06      	ldr	r3, [sp, #24]
 8005098:	3301      	adds	r3, #1
 800509a:	9306      	str	r3, [sp, #24]
 800509c:	f04f 0801 	mov.w	r8, #1
 80050a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f47f af6f 	bne.w	8004f86 <_dtoa_r+0x7de>
 80050a8:	2001      	movs	r0, #1
 80050aa:	e774      	b.n	8004f96 <_dtoa_r+0x7ee>
 80050ac:	f04f 0800 	mov.w	r8, #0
 80050b0:	e7f6      	b.n	80050a0 <_dtoa_r+0x8f8>
 80050b2:	4698      	mov	r8, r3
 80050b4:	e7f4      	b.n	80050a0 <_dtoa_r+0x8f8>
 80050b6:	d082      	beq.n	8004fbe <_dtoa_r+0x816>
 80050b8:	9a05      	ldr	r2, [sp, #20]
 80050ba:	331c      	adds	r3, #28
 80050bc:	441a      	add	r2, r3
 80050be:	9205      	str	r2, [sp, #20]
 80050c0:	9a06      	ldr	r2, [sp, #24]
 80050c2:	441a      	add	r2, r3
 80050c4:	441d      	add	r5, r3
 80050c6:	9206      	str	r2, [sp, #24]
 80050c8:	e779      	b.n	8004fbe <_dtoa_r+0x816>
 80050ca:	4603      	mov	r3, r0
 80050cc:	e7f4      	b.n	80050b8 <_dtoa_r+0x910>
 80050ce:	9b04      	ldr	r3, [sp, #16]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dc37      	bgt.n	8005144 <_dtoa_r+0x99c>
 80050d4:	9b07      	ldr	r3, [sp, #28]
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	dd34      	ble.n	8005144 <_dtoa_r+0x99c>
 80050da:	9b04      	ldr	r3, [sp, #16]
 80050dc:	9301      	str	r3, [sp, #4]
 80050de:	9b01      	ldr	r3, [sp, #4]
 80050e0:	b963      	cbnz	r3, 80050fc <_dtoa_r+0x954>
 80050e2:	4631      	mov	r1, r6
 80050e4:	2205      	movs	r2, #5
 80050e6:	4620      	mov	r0, r4
 80050e8:	f000 fab2 	bl	8005650 <__multadd>
 80050ec:	4601      	mov	r1, r0
 80050ee:	4606      	mov	r6, r0
 80050f0:	4650      	mov	r0, sl
 80050f2:	f000 fcc7 	bl	8005a84 <__mcmp>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f73f adbb 	bgt.w	8004c72 <_dtoa_r+0x4ca>
 80050fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050fe:	9d00      	ldr	r5, [sp, #0]
 8005100:	ea6f 0b03 	mvn.w	fp, r3
 8005104:	f04f 0800 	mov.w	r8, #0
 8005108:	4631      	mov	r1, r6
 800510a:	4620      	mov	r0, r4
 800510c:	f000 fa7e 	bl	800560c <_Bfree>
 8005110:	2f00      	cmp	r7, #0
 8005112:	f43f aeab 	beq.w	8004e6c <_dtoa_r+0x6c4>
 8005116:	f1b8 0f00 	cmp.w	r8, #0
 800511a:	d005      	beq.n	8005128 <_dtoa_r+0x980>
 800511c:	45b8      	cmp	r8, r7
 800511e:	d003      	beq.n	8005128 <_dtoa_r+0x980>
 8005120:	4641      	mov	r1, r8
 8005122:	4620      	mov	r0, r4
 8005124:	f000 fa72 	bl	800560c <_Bfree>
 8005128:	4639      	mov	r1, r7
 800512a:	4620      	mov	r0, r4
 800512c:	f000 fa6e 	bl	800560c <_Bfree>
 8005130:	e69c      	b.n	8004e6c <_dtoa_r+0x6c4>
 8005132:	2600      	movs	r6, #0
 8005134:	4637      	mov	r7, r6
 8005136:	e7e1      	b.n	80050fc <_dtoa_r+0x954>
 8005138:	46bb      	mov	fp, r7
 800513a:	4637      	mov	r7, r6
 800513c:	e599      	b.n	8004c72 <_dtoa_r+0x4ca>
 800513e:	bf00      	nop
 8005140:	40240000 	.word	0x40240000
 8005144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005146:	2b00      	cmp	r3, #0
 8005148:	f000 80c8 	beq.w	80052dc <_dtoa_r+0xb34>
 800514c:	9b04      	ldr	r3, [sp, #16]
 800514e:	9301      	str	r3, [sp, #4]
 8005150:	2d00      	cmp	r5, #0
 8005152:	dd05      	ble.n	8005160 <_dtoa_r+0x9b8>
 8005154:	4639      	mov	r1, r7
 8005156:	462a      	mov	r2, r5
 8005158:	4620      	mov	r0, r4
 800515a:	f000 fc27 	bl	80059ac <__lshift>
 800515e:	4607      	mov	r7, r0
 8005160:	f1b8 0f00 	cmp.w	r8, #0
 8005164:	d05b      	beq.n	800521e <_dtoa_r+0xa76>
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4620      	mov	r0, r4
 800516a:	f000 fa0f 	bl	800558c <_Balloc>
 800516e:	4605      	mov	r5, r0
 8005170:	b928      	cbnz	r0, 800517e <_dtoa_r+0x9d6>
 8005172:	4b83      	ldr	r3, [pc, #524]	; (8005380 <_dtoa_r+0xbd8>)
 8005174:	4602      	mov	r2, r0
 8005176:	f240 21ef 	movw	r1, #751	; 0x2ef
 800517a:	f7ff bb2e 	b.w	80047da <_dtoa_r+0x32>
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	3202      	adds	r2, #2
 8005182:	0092      	lsls	r2, r2, #2
 8005184:	f107 010c 	add.w	r1, r7, #12
 8005188:	300c      	adds	r0, #12
 800518a:	f7ff fa74 	bl	8004676 <memcpy>
 800518e:	2201      	movs	r2, #1
 8005190:	4629      	mov	r1, r5
 8005192:	4620      	mov	r0, r4
 8005194:	f000 fc0a 	bl	80059ac <__lshift>
 8005198:	9b00      	ldr	r3, [sp, #0]
 800519a:	3301      	adds	r3, #1
 800519c:	9304      	str	r3, [sp, #16]
 800519e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051a2:	4413      	add	r3, r2
 80051a4:	9308      	str	r3, [sp, #32]
 80051a6:	9b02      	ldr	r3, [sp, #8]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	46b8      	mov	r8, r7
 80051ae:	9306      	str	r3, [sp, #24]
 80051b0:	4607      	mov	r7, r0
 80051b2:	9b04      	ldr	r3, [sp, #16]
 80051b4:	4631      	mov	r1, r6
 80051b6:	3b01      	subs	r3, #1
 80051b8:	4650      	mov	r0, sl
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	f7ff fa69 	bl	8004692 <quorem>
 80051c0:	4641      	mov	r1, r8
 80051c2:	9002      	str	r0, [sp, #8]
 80051c4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80051c8:	4650      	mov	r0, sl
 80051ca:	f000 fc5b 	bl	8005a84 <__mcmp>
 80051ce:	463a      	mov	r2, r7
 80051d0:	9005      	str	r0, [sp, #20]
 80051d2:	4631      	mov	r1, r6
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 fc71 	bl	8005abc <__mdiff>
 80051da:	68c2      	ldr	r2, [r0, #12]
 80051dc:	4605      	mov	r5, r0
 80051de:	bb02      	cbnz	r2, 8005222 <_dtoa_r+0xa7a>
 80051e0:	4601      	mov	r1, r0
 80051e2:	4650      	mov	r0, sl
 80051e4:	f000 fc4e 	bl	8005a84 <__mcmp>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4629      	mov	r1, r5
 80051ec:	4620      	mov	r0, r4
 80051ee:	9209      	str	r2, [sp, #36]	; 0x24
 80051f0:	f000 fa0c 	bl	800560c <_Bfree>
 80051f4:	9b07      	ldr	r3, [sp, #28]
 80051f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051f8:	9d04      	ldr	r5, [sp, #16]
 80051fa:	ea43 0102 	orr.w	r1, r3, r2
 80051fe:	9b06      	ldr	r3, [sp, #24]
 8005200:	4319      	orrs	r1, r3
 8005202:	d110      	bne.n	8005226 <_dtoa_r+0xa7e>
 8005204:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005208:	d029      	beq.n	800525e <_dtoa_r+0xab6>
 800520a:	9b05      	ldr	r3, [sp, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	dd02      	ble.n	8005216 <_dtoa_r+0xa6e>
 8005210:	9b02      	ldr	r3, [sp, #8]
 8005212:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005216:	9b01      	ldr	r3, [sp, #4]
 8005218:	f883 9000 	strb.w	r9, [r3]
 800521c:	e774      	b.n	8005108 <_dtoa_r+0x960>
 800521e:	4638      	mov	r0, r7
 8005220:	e7ba      	b.n	8005198 <_dtoa_r+0x9f0>
 8005222:	2201      	movs	r2, #1
 8005224:	e7e1      	b.n	80051ea <_dtoa_r+0xa42>
 8005226:	9b05      	ldr	r3, [sp, #20]
 8005228:	2b00      	cmp	r3, #0
 800522a:	db04      	blt.n	8005236 <_dtoa_r+0xa8e>
 800522c:	9907      	ldr	r1, [sp, #28]
 800522e:	430b      	orrs	r3, r1
 8005230:	9906      	ldr	r1, [sp, #24]
 8005232:	430b      	orrs	r3, r1
 8005234:	d120      	bne.n	8005278 <_dtoa_r+0xad0>
 8005236:	2a00      	cmp	r2, #0
 8005238:	dded      	ble.n	8005216 <_dtoa_r+0xa6e>
 800523a:	4651      	mov	r1, sl
 800523c:	2201      	movs	r2, #1
 800523e:	4620      	mov	r0, r4
 8005240:	f000 fbb4 	bl	80059ac <__lshift>
 8005244:	4631      	mov	r1, r6
 8005246:	4682      	mov	sl, r0
 8005248:	f000 fc1c 	bl	8005a84 <__mcmp>
 800524c:	2800      	cmp	r0, #0
 800524e:	dc03      	bgt.n	8005258 <_dtoa_r+0xab0>
 8005250:	d1e1      	bne.n	8005216 <_dtoa_r+0xa6e>
 8005252:	f019 0f01 	tst.w	r9, #1
 8005256:	d0de      	beq.n	8005216 <_dtoa_r+0xa6e>
 8005258:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800525c:	d1d8      	bne.n	8005210 <_dtoa_r+0xa68>
 800525e:	9a01      	ldr	r2, [sp, #4]
 8005260:	2339      	movs	r3, #57	; 0x39
 8005262:	7013      	strb	r3, [r2, #0]
 8005264:	462b      	mov	r3, r5
 8005266:	461d      	mov	r5, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800526e:	2a39      	cmp	r2, #57	; 0x39
 8005270:	d06c      	beq.n	800534c <_dtoa_r+0xba4>
 8005272:	3201      	adds	r2, #1
 8005274:	701a      	strb	r2, [r3, #0]
 8005276:	e747      	b.n	8005108 <_dtoa_r+0x960>
 8005278:	2a00      	cmp	r2, #0
 800527a:	dd07      	ble.n	800528c <_dtoa_r+0xae4>
 800527c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005280:	d0ed      	beq.n	800525e <_dtoa_r+0xab6>
 8005282:	9a01      	ldr	r2, [sp, #4]
 8005284:	f109 0301 	add.w	r3, r9, #1
 8005288:	7013      	strb	r3, [r2, #0]
 800528a:	e73d      	b.n	8005108 <_dtoa_r+0x960>
 800528c:	9b04      	ldr	r3, [sp, #16]
 800528e:	9a08      	ldr	r2, [sp, #32]
 8005290:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005294:	4293      	cmp	r3, r2
 8005296:	d043      	beq.n	8005320 <_dtoa_r+0xb78>
 8005298:	4651      	mov	r1, sl
 800529a:	2300      	movs	r3, #0
 800529c:	220a      	movs	r2, #10
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 f9d6 	bl	8005650 <__multadd>
 80052a4:	45b8      	cmp	r8, r7
 80052a6:	4682      	mov	sl, r0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	f04f 020a 	mov.w	r2, #10
 80052b0:	4641      	mov	r1, r8
 80052b2:	4620      	mov	r0, r4
 80052b4:	d107      	bne.n	80052c6 <_dtoa_r+0xb1e>
 80052b6:	f000 f9cb 	bl	8005650 <__multadd>
 80052ba:	4680      	mov	r8, r0
 80052bc:	4607      	mov	r7, r0
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	3301      	adds	r3, #1
 80052c2:	9304      	str	r3, [sp, #16]
 80052c4:	e775      	b.n	80051b2 <_dtoa_r+0xa0a>
 80052c6:	f000 f9c3 	bl	8005650 <__multadd>
 80052ca:	4639      	mov	r1, r7
 80052cc:	4680      	mov	r8, r0
 80052ce:	2300      	movs	r3, #0
 80052d0:	220a      	movs	r2, #10
 80052d2:	4620      	mov	r0, r4
 80052d4:	f000 f9bc 	bl	8005650 <__multadd>
 80052d8:	4607      	mov	r7, r0
 80052da:	e7f0      	b.n	80052be <_dtoa_r+0xb16>
 80052dc:	9b04      	ldr	r3, [sp, #16]
 80052de:	9301      	str	r3, [sp, #4]
 80052e0:	9d00      	ldr	r5, [sp, #0]
 80052e2:	4631      	mov	r1, r6
 80052e4:	4650      	mov	r0, sl
 80052e6:	f7ff f9d4 	bl	8004692 <quorem>
 80052ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	f805 9b01 	strb.w	r9, [r5], #1
 80052f4:	1aea      	subs	r2, r5, r3
 80052f6:	9b01      	ldr	r3, [sp, #4]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	dd07      	ble.n	800530c <_dtoa_r+0xb64>
 80052fc:	4651      	mov	r1, sl
 80052fe:	2300      	movs	r3, #0
 8005300:	220a      	movs	r2, #10
 8005302:	4620      	mov	r0, r4
 8005304:	f000 f9a4 	bl	8005650 <__multadd>
 8005308:	4682      	mov	sl, r0
 800530a:	e7ea      	b.n	80052e2 <_dtoa_r+0xb3a>
 800530c:	9b01      	ldr	r3, [sp, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bfc8      	it	gt
 8005312:	461d      	movgt	r5, r3
 8005314:	9b00      	ldr	r3, [sp, #0]
 8005316:	bfd8      	it	le
 8005318:	2501      	movle	r5, #1
 800531a:	441d      	add	r5, r3
 800531c:	f04f 0800 	mov.w	r8, #0
 8005320:	4651      	mov	r1, sl
 8005322:	2201      	movs	r2, #1
 8005324:	4620      	mov	r0, r4
 8005326:	f000 fb41 	bl	80059ac <__lshift>
 800532a:	4631      	mov	r1, r6
 800532c:	4682      	mov	sl, r0
 800532e:	f000 fba9 	bl	8005a84 <__mcmp>
 8005332:	2800      	cmp	r0, #0
 8005334:	dc96      	bgt.n	8005264 <_dtoa_r+0xabc>
 8005336:	d102      	bne.n	800533e <_dtoa_r+0xb96>
 8005338:	f019 0f01 	tst.w	r9, #1
 800533c:	d192      	bne.n	8005264 <_dtoa_r+0xabc>
 800533e:	462b      	mov	r3, r5
 8005340:	461d      	mov	r5, r3
 8005342:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005346:	2a30      	cmp	r2, #48	; 0x30
 8005348:	d0fa      	beq.n	8005340 <_dtoa_r+0xb98>
 800534a:	e6dd      	b.n	8005108 <_dtoa_r+0x960>
 800534c:	9a00      	ldr	r2, [sp, #0]
 800534e:	429a      	cmp	r2, r3
 8005350:	d189      	bne.n	8005266 <_dtoa_r+0xabe>
 8005352:	f10b 0b01 	add.w	fp, fp, #1
 8005356:	2331      	movs	r3, #49	; 0x31
 8005358:	e796      	b.n	8005288 <_dtoa_r+0xae0>
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <_dtoa_r+0xbdc>)
 800535c:	f7ff ba99 	b.w	8004892 <_dtoa_r+0xea>
 8005360:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005362:	2b00      	cmp	r3, #0
 8005364:	f47f aa6d 	bne.w	8004842 <_dtoa_r+0x9a>
 8005368:	4b07      	ldr	r3, [pc, #28]	; (8005388 <_dtoa_r+0xbe0>)
 800536a:	f7ff ba92 	b.w	8004892 <_dtoa_r+0xea>
 800536e:	9b01      	ldr	r3, [sp, #4]
 8005370:	2b00      	cmp	r3, #0
 8005372:	dcb5      	bgt.n	80052e0 <_dtoa_r+0xb38>
 8005374:	9b07      	ldr	r3, [sp, #28]
 8005376:	2b02      	cmp	r3, #2
 8005378:	f73f aeb1 	bgt.w	80050de <_dtoa_r+0x936>
 800537c:	e7b0      	b.n	80052e0 <_dtoa_r+0xb38>
 800537e:	bf00      	nop
 8005380:	08019aa0 	.word	0x08019aa0
 8005384:	08019a00 	.word	0x08019a00
 8005388:	08019a24 	.word	0x08019a24

0800538c <_free_r>:
 800538c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800538e:	2900      	cmp	r1, #0
 8005390:	d044      	beq.n	800541c <_free_r+0x90>
 8005392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005396:	9001      	str	r0, [sp, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f1a1 0404 	sub.w	r4, r1, #4
 800539e:	bfb8      	it	lt
 80053a0:	18e4      	addlt	r4, r4, r3
 80053a2:	f000 f8e7 	bl	8005574 <__malloc_lock>
 80053a6:	4a1e      	ldr	r2, [pc, #120]	; (8005420 <_free_r+0x94>)
 80053a8:	9801      	ldr	r0, [sp, #4]
 80053aa:	6813      	ldr	r3, [r2, #0]
 80053ac:	b933      	cbnz	r3, 80053bc <_free_r+0x30>
 80053ae:	6063      	str	r3, [r4, #4]
 80053b0:	6014      	str	r4, [r2, #0]
 80053b2:	b003      	add	sp, #12
 80053b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053b8:	f000 b8e2 	b.w	8005580 <__malloc_unlock>
 80053bc:	42a3      	cmp	r3, r4
 80053be:	d908      	bls.n	80053d2 <_free_r+0x46>
 80053c0:	6825      	ldr	r5, [r4, #0]
 80053c2:	1961      	adds	r1, r4, r5
 80053c4:	428b      	cmp	r3, r1
 80053c6:	bf01      	itttt	eq
 80053c8:	6819      	ldreq	r1, [r3, #0]
 80053ca:	685b      	ldreq	r3, [r3, #4]
 80053cc:	1949      	addeq	r1, r1, r5
 80053ce:	6021      	streq	r1, [r4, #0]
 80053d0:	e7ed      	b.n	80053ae <_free_r+0x22>
 80053d2:	461a      	mov	r2, r3
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	b10b      	cbz	r3, 80053dc <_free_r+0x50>
 80053d8:	42a3      	cmp	r3, r4
 80053da:	d9fa      	bls.n	80053d2 <_free_r+0x46>
 80053dc:	6811      	ldr	r1, [r2, #0]
 80053de:	1855      	adds	r5, r2, r1
 80053e0:	42a5      	cmp	r5, r4
 80053e2:	d10b      	bne.n	80053fc <_free_r+0x70>
 80053e4:	6824      	ldr	r4, [r4, #0]
 80053e6:	4421      	add	r1, r4
 80053e8:	1854      	adds	r4, r2, r1
 80053ea:	42a3      	cmp	r3, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	d1e0      	bne.n	80053b2 <_free_r+0x26>
 80053f0:	681c      	ldr	r4, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	6053      	str	r3, [r2, #4]
 80053f6:	440c      	add	r4, r1
 80053f8:	6014      	str	r4, [r2, #0]
 80053fa:	e7da      	b.n	80053b2 <_free_r+0x26>
 80053fc:	d902      	bls.n	8005404 <_free_r+0x78>
 80053fe:	230c      	movs	r3, #12
 8005400:	6003      	str	r3, [r0, #0]
 8005402:	e7d6      	b.n	80053b2 <_free_r+0x26>
 8005404:	6825      	ldr	r5, [r4, #0]
 8005406:	1961      	adds	r1, r4, r5
 8005408:	428b      	cmp	r3, r1
 800540a:	bf04      	itt	eq
 800540c:	6819      	ldreq	r1, [r3, #0]
 800540e:	685b      	ldreq	r3, [r3, #4]
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	bf04      	itt	eq
 8005414:	1949      	addeq	r1, r1, r5
 8005416:	6021      	streq	r1, [r4, #0]
 8005418:	6054      	str	r4, [r2, #4]
 800541a:	e7ca      	b.n	80053b2 <_free_r+0x26>
 800541c:	b003      	add	sp, #12
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	2000034c 	.word	0x2000034c

08005424 <malloc>:
 8005424:	4b02      	ldr	r3, [pc, #8]	; (8005430 <malloc+0xc>)
 8005426:	4601      	mov	r1, r0
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f000 b823 	b.w	8005474 <_malloc_r>
 800542e:	bf00      	nop
 8005430:	20000068 	.word	0x20000068

08005434 <sbrk_aligned>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4e0e      	ldr	r6, [pc, #56]	; (8005470 <sbrk_aligned+0x3c>)
 8005438:	460c      	mov	r4, r1
 800543a:	6831      	ldr	r1, [r6, #0]
 800543c:	4605      	mov	r5, r0
 800543e:	b911      	cbnz	r1, 8005446 <sbrk_aligned+0x12>
 8005440:	f000 fe40 	bl	80060c4 <_sbrk_r>
 8005444:	6030      	str	r0, [r6, #0]
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fe3b 	bl	80060c4 <_sbrk_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	d00a      	beq.n	8005468 <sbrk_aligned+0x34>
 8005452:	1cc4      	adds	r4, r0, #3
 8005454:	f024 0403 	bic.w	r4, r4, #3
 8005458:	42a0      	cmp	r0, r4
 800545a:	d007      	beq.n	800546c <sbrk_aligned+0x38>
 800545c:	1a21      	subs	r1, r4, r0
 800545e:	4628      	mov	r0, r5
 8005460:	f000 fe30 	bl	80060c4 <_sbrk_r>
 8005464:	3001      	adds	r0, #1
 8005466:	d101      	bne.n	800546c <sbrk_aligned+0x38>
 8005468:	f04f 34ff 	mov.w	r4, #4294967295
 800546c:	4620      	mov	r0, r4
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	20000350 	.word	0x20000350

08005474 <_malloc_r>:
 8005474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005478:	1ccd      	adds	r5, r1, #3
 800547a:	f025 0503 	bic.w	r5, r5, #3
 800547e:	3508      	adds	r5, #8
 8005480:	2d0c      	cmp	r5, #12
 8005482:	bf38      	it	cc
 8005484:	250c      	movcc	r5, #12
 8005486:	2d00      	cmp	r5, #0
 8005488:	4607      	mov	r7, r0
 800548a:	db01      	blt.n	8005490 <_malloc_r+0x1c>
 800548c:	42a9      	cmp	r1, r5
 800548e:	d905      	bls.n	800549c <_malloc_r+0x28>
 8005490:	230c      	movs	r3, #12
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	2600      	movs	r6, #0
 8005496:	4630      	mov	r0, r6
 8005498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800549c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005570 <_malloc_r+0xfc>
 80054a0:	f000 f868 	bl	8005574 <__malloc_lock>
 80054a4:	f8d8 3000 	ldr.w	r3, [r8]
 80054a8:	461c      	mov	r4, r3
 80054aa:	bb5c      	cbnz	r4, 8005504 <_malloc_r+0x90>
 80054ac:	4629      	mov	r1, r5
 80054ae:	4638      	mov	r0, r7
 80054b0:	f7ff ffc0 	bl	8005434 <sbrk_aligned>
 80054b4:	1c43      	adds	r3, r0, #1
 80054b6:	4604      	mov	r4, r0
 80054b8:	d155      	bne.n	8005566 <_malloc_r+0xf2>
 80054ba:	f8d8 4000 	ldr.w	r4, [r8]
 80054be:	4626      	mov	r6, r4
 80054c0:	2e00      	cmp	r6, #0
 80054c2:	d145      	bne.n	8005550 <_malloc_r+0xdc>
 80054c4:	2c00      	cmp	r4, #0
 80054c6:	d048      	beq.n	800555a <_malloc_r+0xe6>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	4631      	mov	r1, r6
 80054cc:	4638      	mov	r0, r7
 80054ce:	eb04 0903 	add.w	r9, r4, r3
 80054d2:	f000 fdf7 	bl	80060c4 <_sbrk_r>
 80054d6:	4581      	cmp	r9, r0
 80054d8:	d13f      	bne.n	800555a <_malloc_r+0xe6>
 80054da:	6821      	ldr	r1, [r4, #0]
 80054dc:	1a6d      	subs	r5, r5, r1
 80054de:	4629      	mov	r1, r5
 80054e0:	4638      	mov	r0, r7
 80054e2:	f7ff ffa7 	bl	8005434 <sbrk_aligned>
 80054e6:	3001      	adds	r0, #1
 80054e8:	d037      	beq.n	800555a <_malloc_r+0xe6>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	442b      	add	r3, r5
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	f8d8 3000 	ldr.w	r3, [r8]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d038      	beq.n	800556a <_malloc_r+0xf6>
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	42a2      	cmp	r2, r4
 80054fc:	d12b      	bne.n	8005556 <_malloc_r+0xe2>
 80054fe:	2200      	movs	r2, #0
 8005500:	605a      	str	r2, [r3, #4]
 8005502:	e00f      	b.n	8005524 <_malloc_r+0xb0>
 8005504:	6822      	ldr	r2, [r4, #0]
 8005506:	1b52      	subs	r2, r2, r5
 8005508:	d41f      	bmi.n	800554a <_malloc_r+0xd6>
 800550a:	2a0b      	cmp	r2, #11
 800550c:	d917      	bls.n	800553e <_malloc_r+0xca>
 800550e:	1961      	adds	r1, r4, r5
 8005510:	42a3      	cmp	r3, r4
 8005512:	6025      	str	r5, [r4, #0]
 8005514:	bf18      	it	ne
 8005516:	6059      	strne	r1, [r3, #4]
 8005518:	6863      	ldr	r3, [r4, #4]
 800551a:	bf08      	it	eq
 800551c:	f8c8 1000 	streq.w	r1, [r8]
 8005520:	5162      	str	r2, [r4, r5]
 8005522:	604b      	str	r3, [r1, #4]
 8005524:	4638      	mov	r0, r7
 8005526:	f104 060b 	add.w	r6, r4, #11
 800552a:	f000 f829 	bl	8005580 <__malloc_unlock>
 800552e:	f026 0607 	bic.w	r6, r6, #7
 8005532:	1d23      	adds	r3, r4, #4
 8005534:	1af2      	subs	r2, r6, r3
 8005536:	d0ae      	beq.n	8005496 <_malloc_r+0x22>
 8005538:	1b9b      	subs	r3, r3, r6
 800553a:	50a3      	str	r3, [r4, r2]
 800553c:	e7ab      	b.n	8005496 <_malloc_r+0x22>
 800553e:	42a3      	cmp	r3, r4
 8005540:	6862      	ldr	r2, [r4, #4]
 8005542:	d1dd      	bne.n	8005500 <_malloc_r+0x8c>
 8005544:	f8c8 2000 	str.w	r2, [r8]
 8005548:	e7ec      	b.n	8005524 <_malloc_r+0xb0>
 800554a:	4623      	mov	r3, r4
 800554c:	6864      	ldr	r4, [r4, #4]
 800554e:	e7ac      	b.n	80054aa <_malloc_r+0x36>
 8005550:	4634      	mov	r4, r6
 8005552:	6876      	ldr	r6, [r6, #4]
 8005554:	e7b4      	b.n	80054c0 <_malloc_r+0x4c>
 8005556:	4613      	mov	r3, r2
 8005558:	e7cc      	b.n	80054f4 <_malloc_r+0x80>
 800555a:	230c      	movs	r3, #12
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	4638      	mov	r0, r7
 8005560:	f000 f80e 	bl	8005580 <__malloc_unlock>
 8005564:	e797      	b.n	8005496 <_malloc_r+0x22>
 8005566:	6025      	str	r5, [r4, #0]
 8005568:	e7dc      	b.n	8005524 <_malloc_r+0xb0>
 800556a:	605b      	str	r3, [r3, #4]
 800556c:	deff      	udf	#255	; 0xff
 800556e:	bf00      	nop
 8005570:	2000034c 	.word	0x2000034c

08005574 <__malloc_lock>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__malloc_lock+0x8>)
 8005576:	f7ff b87c 	b.w	8004672 <__retarget_lock_acquire_recursive>
 800557a:	bf00      	nop
 800557c:	20000348 	.word	0x20000348

08005580 <__malloc_unlock>:
 8005580:	4801      	ldr	r0, [pc, #4]	; (8005588 <__malloc_unlock+0x8>)
 8005582:	f7ff b877 	b.w	8004674 <__retarget_lock_release_recursive>
 8005586:	bf00      	nop
 8005588:	20000348 	.word	0x20000348

0800558c <_Balloc>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	69c6      	ldr	r6, [r0, #28]
 8005590:	4604      	mov	r4, r0
 8005592:	460d      	mov	r5, r1
 8005594:	b976      	cbnz	r6, 80055b4 <_Balloc+0x28>
 8005596:	2010      	movs	r0, #16
 8005598:	f7ff ff44 	bl	8005424 <malloc>
 800559c:	4602      	mov	r2, r0
 800559e:	61e0      	str	r0, [r4, #28]
 80055a0:	b920      	cbnz	r0, 80055ac <_Balloc+0x20>
 80055a2:	4b18      	ldr	r3, [pc, #96]	; (8005604 <_Balloc+0x78>)
 80055a4:	4818      	ldr	r0, [pc, #96]	; (8005608 <_Balloc+0x7c>)
 80055a6:	216b      	movs	r1, #107	; 0x6b
 80055a8:	f000 fd9c 	bl	80060e4 <__assert_func>
 80055ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80055b0:	6006      	str	r6, [r0, #0]
 80055b2:	60c6      	str	r6, [r0, #12]
 80055b4:	69e6      	ldr	r6, [r4, #28]
 80055b6:	68f3      	ldr	r3, [r6, #12]
 80055b8:	b183      	cbz	r3, 80055dc <_Balloc+0x50>
 80055ba:	69e3      	ldr	r3, [r4, #28]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80055c2:	b9b8      	cbnz	r0, 80055f4 <_Balloc+0x68>
 80055c4:	2101      	movs	r1, #1
 80055c6:	fa01 f605 	lsl.w	r6, r1, r5
 80055ca:	1d72      	adds	r2, r6, #5
 80055cc:	0092      	lsls	r2, r2, #2
 80055ce:	4620      	mov	r0, r4
 80055d0:	f000 fda6 	bl	8006120 <_calloc_r>
 80055d4:	b160      	cbz	r0, 80055f0 <_Balloc+0x64>
 80055d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055da:	e00e      	b.n	80055fa <_Balloc+0x6e>
 80055dc:	2221      	movs	r2, #33	; 0x21
 80055de:	2104      	movs	r1, #4
 80055e0:	4620      	mov	r0, r4
 80055e2:	f000 fd9d 	bl	8006120 <_calloc_r>
 80055e6:	69e3      	ldr	r3, [r4, #28]
 80055e8:	60f0      	str	r0, [r6, #12]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e4      	bne.n	80055ba <_Balloc+0x2e>
 80055f0:	2000      	movs	r0, #0
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	6802      	ldr	r2, [r0, #0]
 80055f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055fa:	2300      	movs	r3, #0
 80055fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005600:	e7f7      	b.n	80055f2 <_Balloc+0x66>
 8005602:	bf00      	nop
 8005604:	08019a31 	.word	0x08019a31
 8005608:	08019ab1 	.word	0x08019ab1

0800560c <_Bfree>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	69c6      	ldr	r6, [r0, #28]
 8005610:	4605      	mov	r5, r0
 8005612:	460c      	mov	r4, r1
 8005614:	b976      	cbnz	r6, 8005634 <_Bfree+0x28>
 8005616:	2010      	movs	r0, #16
 8005618:	f7ff ff04 	bl	8005424 <malloc>
 800561c:	4602      	mov	r2, r0
 800561e:	61e8      	str	r0, [r5, #28]
 8005620:	b920      	cbnz	r0, 800562c <_Bfree+0x20>
 8005622:	4b09      	ldr	r3, [pc, #36]	; (8005648 <_Bfree+0x3c>)
 8005624:	4809      	ldr	r0, [pc, #36]	; (800564c <_Bfree+0x40>)
 8005626:	218f      	movs	r1, #143	; 0x8f
 8005628:	f000 fd5c 	bl	80060e4 <__assert_func>
 800562c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005630:	6006      	str	r6, [r0, #0]
 8005632:	60c6      	str	r6, [r0, #12]
 8005634:	b13c      	cbz	r4, 8005646 <_Bfree+0x3a>
 8005636:	69eb      	ldr	r3, [r5, #28]
 8005638:	6862      	ldr	r2, [r4, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005640:	6021      	str	r1, [r4, #0]
 8005642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005646:	bd70      	pop	{r4, r5, r6, pc}
 8005648:	08019a31 	.word	0x08019a31
 800564c:	08019ab1 	.word	0x08019ab1

08005650 <__multadd>:
 8005650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005654:	690d      	ldr	r5, [r1, #16]
 8005656:	4607      	mov	r7, r0
 8005658:	460c      	mov	r4, r1
 800565a:	461e      	mov	r6, r3
 800565c:	f101 0c14 	add.w	ip, r1, #20
 8005660:	2000      	movs	r0, #0
 8005662:	f8dc 3000 	ldr.w	r3, [ip]
 8005666:	b299      	uxth	r1, r3
 8005668:	fb02 6101 	mla	r1, r2, r1, r6
 800566c:	0c1e      	lsrs	r6, r3, #16
 800566e:	0c0b      	lsrs	r3, r1, #16
 8005670:	fb02 3306 	mla	r3, r2, r6, r3
 8005674:	b289      	uxth	r1, r1
 8005676:	3001      	adds	r0, #1
 8005678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800567c:	4285      	cmp	r5, r0
 800567e:	f84c 1b04 	str.w	r1, [ip], #4
 8005682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005686:	dcec      	bgt.n	8005662 <__multadd+0x12>
 8005688:	b30e      	cbz	r6, 80056ce <__multadd+0x7e>
 800568a:	68a3      	ldr	r3, [r4, #8]
 800568c:	42ab      	cmp	r3, r5
 800568e:	dc19      	bgt.n	80056c4 <__multadd+0x74>
 8005690:	6861      	ldr	r1, [r4, #4]
 8005692:	4638      	mov	r0, r7
 8005694:	3101      	adds	r1, #1
 8005696:	f7ff ff79 	bl	800558c <_Balloc>
 800569a:	4680      	mov	r8, r0
 800569c:	b928      	cbnz	r0, 80056aa <__multadd+0x5a>
 800569e:	4602      	mov	r2, r0
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <__multadd+0x84>)
 80056a2:	480d      	ldr	r0, [pc, #52]	; (80056d8 <__multadd+0x88>)
 80056a4:	21ba      	movs	r1, #186	; 0xba
 80056a6:	f000 fd1d 	bl	80060e4 <__assert_func>
 80056aa:	6922      	ldr	r2, [r4, #16]
 80056ac:	3202      	adds	r2, #2
 80056ae:	f104 010c 	add.w	r1, r4, #12
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	300c      	adds	r0, #12
 80056b6:	f7fe ffde 	bl	8004676 <memcpy>
 80056ba:	4621      	mov	r1, r4
 80056bc:	4638      	mov	r0, r7
 80056be:	f7ff ffa5 	bl	800560c <_Bfree>
 80056c2:	4644      	mov	r4, r8
 80056c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80056c8:	3501      	adds	r5, #1
 80056ca:	615e      	str	r6, [r3, #20]
 80056cc:	6125      	str	r5, [r4, #16]
 80056ce:	4620      	mov	r0, r4
 80056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d4:	08019aa0 	.word	0x08019aa0
 80056d8:	08019ab1 	.word	0x08019ab1

080056dc <__hi0bits>:
 80056dc:	0c03      	lsrs	r3, r0, #16
 80056de:	041b      	lsls	r3, r3, #16
 80056e0:	b9d3      	cbnz	r3, 8005718 <__hi0bits+0x3c>
 80056e2:	0400      	lsls	r0, r0, #16
 80056e4:	2310      	movs	r3, #16
 80056e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80056ea:	bf04      	itt	eq
 80056ec:	0200      	lsleq	r0, r0, #8
 80056ee:	3308      	addeq	r3, #8
 80056f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80056f4:	bf04      	itt	eq
 80056f6:	0100      	lsleq	r0, r0, #4
 80056f8:	3304      	addeq	r3, #4
 80056fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80056fe:	bf04      	itt	eq
 8005700:	0080      	lsleq	r0, r0, #2
 8005702:	3302      	addeq	r3, #2
 8005704:	2800      	cmp	r0, #0
 8005706:	db05      	blt.n	8005714 <__hi0bits+0x38>
 8005708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800570c:	f103 0301 	add.w	r3, r3, #1
 8005710:	bf08      	it	eq
 8005712:	2320      	moveq	r3, #32
 8005714:	4618      	mov	r0, r3
 8005716:	4770      	bx	lr
 8005718:	2300      	movs	r3, #0
 800571a:	e7e4      	b.n	80056e6 <__hi0bits+0xa>

0800571c <__lo0bits>:
 800571c:	6803      	ldr	r3, [r0, #0]
 800571e:	f013 0207 	ands.w	r2, r3, #7
 8005722:	d00c      	beq.n	800573e <__lo0bits+0x22>
 8005724:	07d9      	lsls	r1, r3, #31
 8005726:	d422      	bmi.n	800576e <__lo0bits+0x52>
 8005728:	079a      	lsls	r2, r3, #30
 800572a:	bf49      	itett	mi
 800572c:	085b      	lsrmi	r3, r3, #1
 800572e:	089b      	lsrpl	r3, r3, #2
 8005730:	6003      	strmi	r3, [r0, #0]
 8005732:	2201      	movmi	r2, #1
 8005734:	bf5c      	itt	pl
 8005736:	6003      	strpl	r3, [r0, #0]
 8005738:	2202      	movpl	r2, #2
 800573a:	4610      	mov	r0, r2
 800573c:	4770      	bx	lr
 800573e:	b299      	uxth	r1, r3
 8005740:	b909      	cbnz	r1, 8005746 <__lo0bits+0x2a>
 8005742:	0c1b      	lsrs	r3, r3, #16
 8005744:	2210      	movs	r2, #16
 8005746:	b2d9      	uxtb	r1, r3
 8005748:	b909      	cbnz	r1, 800574e <__lo0bits+0x32>
 800574a:	3208      	adds	r2, #8
 800574c:	0a1b      	lsrs	r3, r3, #8
 800574e:	0719      	lsls	r1, r3, #28
 8005750:	bf04      	itt	eq
 8005752:	091b      	lsreq	r3, r3, #4
 8005754:	3204      	addeq	r2, #4
 8005756:	0799      	lsls	r1, r3, #30
 8005758:	bf04      	itt	eq
 800575a:	089b      	lsreq	r3, r3, #2
 800575c:	3202      	addeq	r2, #2
 800575e:	07d9      	lsls	r1, r3, #31
 8005760:	d403      	bmi.n	800576a <__lo0bits+0x4e>
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	f102 0201 	add.w	r2, r2, #1
 8005768:	d003      	beq.n	8005772 <__lo0bits+0x56>
 800576a:	6003      	str	r3, [r0, #0]
 800576c:	e7e5      	b.n	800573a <__lo0bits+0x1e>
 800576e:	2200      	movs	r2, #0
 8005770:	e7e3      	b.n	800573a <__lo0bits+0x1e>
 8005772:	2220      	movs	r2, #32
 8005774:	e7e1      	b.n	800573a <__lo0bits+0x1e>
	...

08005778 <__i2b>:
 8005778:	b510      	push	{r4, lr}
 800577a:	460c      	mov	r4, r1
 800577c:	2101      	movs	r1, #1
 800577e:	f7ff ff05 	bl	800558c <_Balloc>
 8005782:	4602      	mov	r2, r0
 8005784:	b928      	cbnz	r0, 8005792 <__i2b+0x1a>
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <__i2b+0x24>)
 8005788:	4805      	ldr	r0, [pc, #20]	; (80057a0 <__i2b+0x28>)
 800578a:	f240 1145 	movw	r1, #325	; 0x145
 800578e:	f000 fca9 	bl	80060e4 <__assert_func>
 8005792:	2301      	movs	r3, #1
 8005794:	6144      	str	r4, [r0, #20]
 8005796:	6103      	str	r3, [r0, #16]
 8005798:	bd10      	pop	{r4, pc}
 800579a:	bf00      	nop
 800579c:	08019aa0 	.word	0x08019aa0
 80057a0:	08019ab1 	.word	0x08019ab1

080057a4 <__multiply>:
 80057a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a8:	4691      	mov	r9, r2
 80057aa:	690a      	ldr	r2, [r1, #16]
 80057ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	bfb8      	it	lt
 80057b4:	460b      	movlt	r3, r1
 80057b6:	460c      	mov	r4, r1
 80057b8:	bfbc      	itt	lt
 80057ba:	464c      	movlt	r4, r9
 80057bc:	4699      	movlt	r9, r3
 80057be:	6927      	ldr	r7, [r4, #16]
 80057c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	6861      	ldr	r1, [r4, #4]
 80057c8:	eb07 060a 	add.w	r6, r7, sl
 80057cc:	42b3      	cmp	r3, r6
 80057ce:	b085      	sub	sp, #20
 80057d0:	bfb8      	it	lt
 80057d2:	3101      	addlt	r1, #1
 80057d4:	f7ff feda 	bl	800558c <_Balloc>
 80057d8:	b930      	cbnz	r0, 80057e8 <__multiply+0x44>
 80057da:	4602      	mov	r2, r0
 80057dc:	4b44      	ldr	r3, [pc, #272]	; (80058f0 <__multiply+0x14c>)
 80057de:	4845      	ldr	r0, [pc, #276]	; (80058f4 <__multiply+0x150>)
 80057e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80057e4:	f000 fc7e 	bl	80060e4 <__assert_func>
 80057e8:	f100 0514 	add.w	r5, r0, #20
 80057ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80057f0:	462b      	mov	r3, r5
 80057f2:	2200      	movs	r2, #0
 80057f4:	4543      	cmp	r3, r8
 80057f6:	d321      	bcc.n	800583c <__multiply+0x98>
 80057f8:	f104 0314 	add.w	r3, r4, #20
 80057fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005800:	f109 0314 	add.w	r3, r9, #20
 8005804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005808:	9202      	str	r2, [sp, #8]
 800580a:	1b3a      	subs	r2, r7, r4
 800580c:	3a15      	subs	r2, #21
 800580e:	f022 0203 	bic.w	r2, r2, #3
 8005812:	3204      	adds	r2, #4
 8005814:	f104 0115 	add.w	r1, r4, #21
 8005818:	428f      	cmp	r7, r1
 800581a:	bf38      	it	cc
 800581c:	2204      	movcc	r2, #4
 800581e:	9201      	str	r2, [sp, #4]
 8005820:	9a02      	ldr	r2, [sp, #8]
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	429a      	cmp	r2, r3
 8005826:	d80c      	bhi.n	8005842 <__multiply+0x9e>
 8005828:	2e00      	cmp	r6, #0
 800582a:	dd03      	ble.n	8005834 <__multiply+0x90>
 800582c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005830:	2b00      	cmp	r3, #0
 8005832:	d05b      	beq.n	80058ec <__multiply+0x148>
 8005834:	6106      	str	r6, [r0, #16]
 8005836:	b005      	add	sp, #20
 8005838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800583c:	f843 2b04 	str.w	r2, [r3], #4
 8005840:	e7d8      	b.n	80057f4 <__multiply+0x50>
 8005842:	f8b3 a000 	ldrh.w	sl, [r3]
 8005846:	f1ba 0f00 	cmp.w	sl, #0
 800584a:	d024      	beq.n	8005896 <__multiply+0xf2>
 800584c:	f104 0e14 	add.w	lr, r4, #20
 8005850:	46a9      	mov	r9, r5
 8005852:	f04f 0c00 	mov.w	ip, #0
 8005856:	f85e 2b04 	ldr.w	r2, [lr], #4
 800585a:	f8d9 1000 	ldr.w	r1, [r9]
 800585e:	fa1f fb82 	uxth.w	fp, r2
 8005862:	b289      	uxth	r1, r1
 8005864:	fb0a 110b 	mla	r1, sl, fp, r1
 8005868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800586c:	f8d9 2000 	ldr.w	r2, [r9]
 8005870:	4461      	add	r1, ip
 8005872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005876:	fb0a c20b 	mla	r2, sl, fp, ip
 800587a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800587e:	b289      	uxth	r1, r1
 8005880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005884:	4577      	cmp	r7, lr
 8005886:	f849 1b04 	str.w	r1, [r9], #4
 800588a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800588e:	d8e2      	bhi.n	8005856 <__multiply+0xb2>
 8005890:	9a01      	ldr	r2, [sp, #4]
 8005892:	f845 c002 	str.w	ip, [r5, r2]
 8005896:	9a03      	ldr	r2, [sp, #12]
 8005898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800589c:	3304      	adds	r3, #4
 800589e:	f1b9 0f00 	cmp.w	r9, #0
 80058a2:	d021      	beq.n	80058e8 <__multiply+0x144>
 80058a4:	6829      	ldr	r1, [r5, #0]
 80058a6:	f104 0c14 	add.w	ip, r4, #20
 80058aa:	46ae      	mov	lr, r5
 80058ac:	f04f 0a00 	mov.w	sl, #0
 80058b0:	f8bc b000 	ldrh.w	fp, [ip]
 80058b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80058b8:	fb09 220b 	mla	r2, r9, fp, r2
 80058bc:	4452      	add	r2, sl
 80058be:	b289      	uxth	r1, r1
 80058c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80058c4:	f84e 1b04 	str.w	r1, [lr], #4
 80058c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80058cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058d0:	f8be 1000 	ldrh.w	r1, [lr]
 80058d4:	fb09 110a 	mla	r1, r9, sl, r1
 80058d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80058dc:	4567      	cmp	r7, ip
 80058de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80058e2:	d8e5      	bhi.n	80058b0 <__multiply+0x10c>
 80058e4:	9a01      	ldr	r2, [sp, #4]
 80058e6:	50a9      	str	r1, [r5, r2]
 80058e8:	3504      	adds	r5, #4
 80058ea:	e799      	b.n	8005820 <__multiply+0x7c>
 80058ec:	3e01      	subs	r6, #1
 80058ee:	e79b      	b.n	8005828 <__multiply+0x84>
 80058f0:	08019aa0 	.word	0x08019aa0
 80058f4:	08019ab1 	.word	0x08019ab1

080058f8 <__pow5mult>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4615      	mov	r5, r2
 80058fe:	f012 0203 	ands.w	r2, r2, #3
 8005902:	4606      	mov	r6, r0
 8005904:	460f      	mov	r7, r1
 8005906:	d007      	beq.n	8005918 <__pow5mult+0x20>
 8005908:	4c25      	ldr	r4, [pc, #148]	; (80059a0 <__pow5mult+0xa8>)
 800590a:	3a01      	subs	r2, #1
 800590c:	2300      	movs	r3, #0
 800590e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005912:	f7ff fe9d 	bl	8005650 <__multadd>
 8005916:	4607      	mov	r7, r0
 8005918:	10ad      	asrs	r5, r5, #2
 800591a:	d03d      	beq.n	8005998 <__pow5mult+0xa0>
 800591c:	69f4      	ldr	r4, [r6, #28]
 800591e:	b97c      	cbnz	r4, 8005940 <__pow5mult+0x48>
 8005920:	2010      	movs	r0, #16
 8005922:	f7ff fd7f 	bl	8005424 <malloc>
 8005926:	4602      	mov	r2, r0
 8005928:	61f0      	str	r0, [r6, #28]
 800592a:	b928      	cbnz	r0, 8005938 <__pow5mult+0x40>
 800592c:	4b1d      	ldr	r3, [pc, #116]	; (80059a4 <__pow5mult+0xac>)
 800592e:	481e      	ldr	r0, [pc, #120]	; (80059a8 <__pow5mult+0xb0>)
 8005930:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005934:	f000 fbd6 	bl	80060e4 <__assert_func>
 8005938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800593c:	6004      	str	r4, [r0, #0]
 800593e:	60c4      	str	r4, [r0, #12]
 8005940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005948:	b94c      	cbnz	r4, 800595e <__pow5mult+0x66>
 800594a:	f240 2171 	movw	r1, #625	; 0x271
 800594e:	4630      	mov	r0, r6
 8005950:	f7ff ff12 	bl	8005778 <__i2b>
 8005954:	2300      	movs	r3, #0
 8005956:	f8c8 0008 	str.w	r0, [r8, #8]
 800595a:	4604      	mov	r4, r0
 800595c:	6003      	str	r3, [r0, #0]
 800595e:	f04f 0900 	mov.w	r9, #0
 8005962:	07eb      	lsls	r3, r5, #31
 8005964:	d50a      	bpl.n	800597c <__pow5mult+0x84>
 8005966:	4639      	mov	r1, r7
 8005968:	4622      	mov	r2, r4
 800596a:	4630      	mov	r0, r6
 800596c:	f7ff ff1a 	bl	80057a4 <__multiply>
 8005970:	4639      	mov	r1, r7
 8005972:	4680      	mov	r8, r0
 8005974:	4630      	mov	r0, r6
 8005976:	f7ff fe49 	bl	800560c <_Bfree>
 800597a:	4647      	mov	r7, r8
 800597c:	106d      	asrs	r5, r5, #1
 800597e:	d00b      	beq.n	8005998 <__pow5mult+0xa0>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	b938      	cbnz	r0, 8005994 <__pow5mult+0x9c>
 8005984:	4622      	mov	r2, r4
 8005986:	4621      	mov	r1, r4
 8005988:	4630      	mov	r0, r6
 800598a:	f7ff ff0b 	bl	80057a4 <__multiply>
 800598e:	6020      	str	r0, [r4, #0]
 8005990:	f8c0 9000 	str.w	r9, [r0]
 8005994:	4604      	mov	r4, r0
 8005996:	e7e4      	b.n	8005962 <__pow5mult+0x6a>
 8005998:	4638      	mov	r0, r7
 800599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800599e:	bf00      	nop
 80059a0:	08019c00 	.word	0x08019c00
 80059a4:	08019a31 	.word	0x08019a31
 80059a8:	08019ab1 	.word	0x08019ab1

080059ac <__lshift>:
 80059ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b0:	460c      	mov	r4, r1
 80059b2:	6849      	ldr	r1, [r1, #4]
 80059b4:	6923      	ldr	r3, [r4, #16]
 80059b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80059ba:	68a3      	ldr	r3, [r4, #8]
 80059bc:	4607      	mov	r7, r0
 80059be:	4691      	mov	r9, r2
 80059c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80059c4:	f108 0601 	add.w	r6, r8, #1
 80059c8:	42b3      	cmp	r3, r6
 80059ca:	db0b      	blt.n	80059e4 <__lshift+0x38>
 80059cc:	4638      	mov	r0, r7
 80059ce:	f7ff fddd 	bl	800558c <_Balloc>
 80059d2:	4605      	mov	r5, r0
 80059d4:	b948      	cbnz	r0, 80059ea <__lshift+0x3e>
 80059d6:	4602      	mov	r2, r0
 80059d8:	4b28      	ldr	r3, [pc, #160]	; (8005a7c <__lshift+0xd0>)
 80059da:	4829      	ldr	r0, [pc, #164]	; (8005a80 <__lshift+0xd4>)
 80059dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80059e0:	f000 fb80 	bl	80060e4 <__assert_func>
 80059e4:	3101      	adds	r1, #1
 80059e6:	005b      	lsls	r3, r3, #1
 80059e8:	e7ee      	b.n	80059c8 <__lshift+0x1c>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f100 0114 	add.w	r1, r0, #20
 80059f0:	f100 0210 	add.w	r2, r0, #16
 80059f4:	4618      	mov	r0, r3
 80059f6:	4553      	cmp	r3, sl
 80059f8:	db33      	blt.n	8005a62 <__lshift+0xb6>
 80059fa:	6920      	ldr	r0, [r4, #16]
 80059fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005a00:	f104 0314 	add.w	r3, r4, #20
 8005a04:	f019 091f 	ands.w	r9, r9, #31
 8005a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005a10:	d02b      	beq.n	8005a6a <__lshift+0xbe>
 8005a12:	f1c9 0e20 	rsb	lr, r9, #32
 8005a16:	468a      	mov	sl, r1
 8005a18:	2200      	movs	r2, #0
 8005a1a:	6818      	ldr	r0, [r3, #0]
 8005a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8005a20:	4310      	orrs	r0, r2
 8005a22:	f84a 0b04 	str.w	r0, [sl], #4
 8005a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2a:	459c      	cmp	ip, r3
 8005a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005a30:	d8f3      	bhi.n	8005a1a <__lshift+0x6e>
 8005a32:	ebac 0304 	sub.w	r3, ip, r4
 8005a36:	3b15      	subs	r3, #21
 8005a38:	f023 0303 	bic.w	r3, r3, #3
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	f104 0015 	add.w	r0, r4, #21
 8005a42:	4584      	cmp	ip, r0
 8005a44:	bf38      	it	cc
 8005a46:	2304      	movcc	r3, #4
 8005a48:	50ca      	str	r2, [r1, r3]
 8005a4a:	b10a      	cbz	r2, 8005a50 <__lshift+0xa4>
 8005a4c:	f108 0602 	add.w	r6, r8, #2
 8005a50:	3e01      	subs	r6, #1
 8005a52:	4638      	mov	r0, r7
 8005a54:	612e      	str	r6, [r5, #16]
 8005a56:	4621      	mov	r1, r4
 8005a58:	f7ff fdd8 	bl	800560c <_Bfree>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a66:	3301      	adds	r3, #1
 8005a68:	e7c5      	b.n	80059f6 <__lshift+0x4a>
 8005a6a:	3904      	subs	r1, #4
 8005a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a74:	459c      	cmp	ip, r3
 8005a76:	d8f9      	bhi.n	8005a6c <__lshift+0xc0>
 8005a78:	e7ea      	b.n	8005a50 <__lshift+0xa4>
 8005a7a:	bf00      	nop
 8005a7c:	08019aa0 	.word	0x08019aa0
 8005a80:	08019ab1 	.word	0x08019ab1

08005a84 <__mcmp>:
 8005a84:	b530      	push	{r4, r5, lr}
 8005a86:	6902      	ldr	r2, [r0, #16]
 8005a88:	690c      	ldr	r4, [r1, #16]
 8005a8a:	1b12      	subs	r2, r2, r4
 8005a8c:	d10e      	bne.n	8005aac <__mcmp+0x28>
 8005a8e:	f100 0314 	add.w	r3, r0, #20
 8005a92:	3114      	adds	r1, #20
 8005a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005aa4:	42a5      	cmp	r5, r4
 8005aa6:	d003      	beq.n	8005ab0 <__mcmp+0x2c>
 8005aa8:	d305      	bcc.n	8005ab6 <__mcmp+0x32>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4610      	mov	r0, r2
 8005aae:	bd30      	pop	{r4, r5, pc}
 8005ab0:	4283      	cmp	r3, r0
 8005ab2:	d3f3      	bcc.n	8005a9c <__mcmp+0x18>
 8005ab4:	e7fa      	b.n	8005aac <__mcmp+0x28>
 8005ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8005aba:	e7f7      	b.n	8005aac <__mcmp+0x28>

08005abc <__mdiff>:
 8005abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac0:	460c      	mov	r4, r1
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	4690      	mov	r8, r2
 8005aca:	f7ff ffdb 	bl	8005a84 <__mcmp>
 8005ace:	1e05      	subs	r5, r0, #0
 8005ad0:	d110      	bne.n	8005af4 <__mdiff+0x38>
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	4630      	mov	r0, r6
 8005ad6:	f7ff fd59 	bl	800558c <_Balloc>
 8005ada:	b930      	cbnz	r0, 8005aea <__mdiff+0x2e>
 8005adc:	4b3a      	ldr	r3, [pc, #232]	; (8005bc8 <__mdiff+0x10c>)
 8005ade:	4602      	mov	r2, r0
 8005ae0:	f240 2137 	movw	r1, #567	; 0x237
 8005ae4:	4839      	ldr	r0, [pc, #228]	; (8005bcc <__mdiff+0x110>)
 8005ae6:	f000 fafd 	bl	80060e4 <__assert_func>
 8005aea:	2301      	movs	r3, #1
 8005aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	bfa4      	itt	ge
 8005af6:	4643      	movge	r3, r8
 8005af8:	46a0      	movge	r8, r4
 8005afa:	4630      	mov	r0, r6
 8005afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005b00:	bfa6      	itte	ge
 8005b02:	461c      	movge	r4, r3
 8005b04:	2500      	movge	r5, #0
 8005b06:	2501      	movlt	r5, #1
 8005b08:	f7ff fd40 	bl	800558c <_Balloc>
 8005b0c:	b920      	cbnz	r0, 8005b18 <__mdiff+0x5c>
 8005b0e:	4b2e      	ldr	r3, [pc, #184]	; (8005bc8 <__mdiff+0x10c>)
 8005b10:	4602      	mov	r2, r0
 8005b12:	f240 2145 	movw	r1, #581	; 0x245
 8005b16:	e7e5      	b.n	8005ae4 <__mdiff+0x28>
 8005b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005b1c:	6926      	ldr	r6, [r4, #16]
 8005b1e:	60c5      	str	r5, [r0, #12]
 8005b20:	f104 0914 	add.w	r9, r4, #20
 8005b24:	f108 0514 	add.w	r5, r8, #20
 8005b28:	f100 0e14 	add.w	lr, r0, #20
 8005b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005b34:	f108 0210 	add.w	r2, r8, #16
 8005b38:	46f2      	mov	sl, lr
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005b44:	fa11 f88b 	uxtah	r8, r1, fp
 8005b48:	b299      	uxth	r1, r3
 8005b4a:	0c1b      	lsrs	r3, r3, #16
 8005b4c:	eba8 0801 	sub.w	r8, r8, r1
 8005b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005b54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005b58:	fa1f f888 	uxth.w	r8, r8
 8005b5c:	1419      	asrs	r1, r3, #16
 8005b5e:	454e      	cmp	r6, r9
 8005b60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005b64:	f84a 3b04 	str.w	r3, [sl], #4
 8005b68:	d8e8      	bhi.n	8005b3c <__mdiff+0x80>
 8005b6a:	1b33      	subs	r3, r6, r4
 8005b6c:	3b15      	subs	r3, #21
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	3304      	adds	r3, #4
 8005b74:	3415      	adds	r4, #21
 8005b76:	42a6      	cmp	r6, r4
 8005b78:	bf38      	it	cc
 8005b7a:	2304      	movcc	r3, #4
 8005b7c:	441d      	add	r5, r3
 8005b7e:	4473      	add	r3, lr
 8005b80:	469e      	mov	lr, r3
 8005b82:	462e      	mov	r6, r5
 8005b84:	4566      	cmp	r6, ip
 8005b86:	d30e      	bcc.n	8005ba6 <__mdiff+0xea>
 8005b88:	f10c 0203 	add.w	r2, ip, #3
 8005b8c:	1b52      	subs	r2, r2, r5
 8005b8e:	f022 0203 	bic.w	r2, r2, #3
 8005b92:	3d03      	subs	r5, #3
 8005b94:	45ac      	cmp	ip, r5
 8005b96:	bf38      	it	cc
 8005b98:	2200      	movcc	r2, #0
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ba0:	b17a      	cbz	r2, 8005bc2 <__mdiff+0x106>
 8005ba2:	6107      	str	r7, [r0, #16]
 8005ba4:	e7a4      	b.n	8005af0 <__mdiff+0x34>
 8005ba6:	f856 8b04 	ldr.w	r8, [r6], #4
 8005baa:	fa11 f288 	uxtah	r2, r1, r8
 8005bae:	1414      	asrs	r4, r2, #16
 8005bb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005bb4:	b292      	uxth	r2, r2
 8005bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005bba:	f84e 2b04 	str.w	r2, [lr], #4
 8005bbe:	1421      	asrs	r1, r4, #16
 8005bc0:	e7e0      	b.n	8005b84 <__mdiff+0xc8>
 8005bc2:	3f01      	subs	r7, #1
 8005bc4:	e7ea      	b.n	8005b9c <__mdiff+0xe0>
 8005bc6:	bf00      	nop
 8005bc8:	08019aa0 	.word	0x08019aa0
 8005bcc:	08019ab1 	.word	0x08019ab1

08005bd0 <__d2b>:
 8005bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	460f      	mov	r7, r1
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	ec59 8b10 	vmov	r8, r9, d0
 8005bdc:	4616      	mov	r6, r2
 8005bde:	f7ff fcd5 	bl	800558c <_Balloc>
 8005be2:	4604      	mov	r4, r0
 8005be4:	b930      	cbnz	r0, 8005bf4 <__d2b+0x24>
 8005be6:	4602      	mov	r2, r0
 8005be8:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <__d2b+0xac>)
 8005bea:	4825      	ldr	r0, [pc, #148]	; (8005c80 <__d2b+0xb0>)
 8005bec:	f240 310f 	movw	r1, #783	; 0x30f
 8005bf0:	f000 fa78 	bl	80060e4 <__assert_func>
 8005bf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bfc:	bb2d      	cbnz	r5, 8005c4a <__d2b+0x7a>
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	f1b8 0300 	subs.w	r3, r8, #0
 8005c04:	d026      	beq.n	8005c54 <__d2b+0x84>
 8005c06:	4668      	mov	r0, sp
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	f7ff fd87 	bl	800571c <__lo0bits>
 8005c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005c12:	b1e8      	cbz	r0, 8005c50 <__d2b+0x80>
 8005c14:	f1c0 0320 	rsb	r3, r0, #32
 8005c18:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1c:	430b      	orrs	r3, r1
 8005c1e:	40c2      	lsrs	r2, r0
 8005c20:	6163      	str	r3, [r4, #20]
 8005c22:	9201      	str	r2, [sp, #4]
 8005c24:	9b01      	ldr	r3, [sp, #4]
 8005c26:	61a3      	str	r3, [r4, #24]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	bf14      	ite	ne
 8005c2c:	2202      	movne	r2, #2
 8005c2e:	2201      	moveq	r2, #1
 8005c30:	6122      	str	r2, [r4, #16]
 8005c32:	b1bd      	cbz	r5, 8005c64 <__d2b+0x94>
 8005c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c38:	4405      	add	r5, r0
 8005c3a:	603d      	str	r5, [r7, #0]
 8005c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c40:	6030      	str	r0, [r6, #0]
 8005c42:	4620      	mov	r0, r4
 8005c44:	b003      	add	sp, #12
 8005c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c4e:	e7d6      	b.n	8005bfe <__d2b+0x2e>
 8005c50:	6161      	str	r1, [r4, #20]
 8005c52:	e7e7      	b.n	8005c24 <__d2b+0x54>
 8005c54:	a801      	add	r0, sp, #4
 8005c56:	f7ff fd61 	bl	800571c <__lo0bits>
 8005c5a:	9b01      	ldr	r3, [sp, #4]
 8005c5c:	6163      	str	r3, [r4, #20]
 8005c5e:	3020      	adds	r0, #32
 8005c60:	2201      	movs	r2, #1
 8005c62:	e7e5      	b.n	8005c30 <__d2b+0x60>
 8005c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c6c:	6038      	str	r0, [r7, #0]
 8005c6e:	6918      	ldr	r0, [r3, #16]
 8005c70:	f7ff fd34 	bl	80056dc <__hi0bits>
 8005c74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c78:	e7e2      	b.n	8005c40 <__d2b+0x70>
 8005c7a:	bf00      	nop
 8005c7c:	08019aa0 	.word	0x08019aa0
 8005c80:	08019ab1 	.word	0x08019ab1

08005c84 <__ssputs_r>:
 8005c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	688e      	ldr	r6, [r1, #8]
 8005c8a:	461f      	mov	r7, r3
 8005c8c:	42be      	cmp	r6, r7
 8005c8e:	680b      	ldr	r3, [r1, #0]
 8005c90:	4682      	mov	sl, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	4690      	mov	r8, r2
 8005c96:	d82c      	bhi.n	8005cf2 <__ssputs_r+0x6e>
 8005c98:	898a      	ldrh	r2, [r1, #12]
 8005c9a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c9e:	d026      	beq.n	8005cee <__ssputs_r+0x6a>
 8005ca0:	6965      	ldr	r5, [r4, #20]
 8005ca2:	6909      	ldr	r1, [r1, #16]
 8005ca4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ca8:	eba3 0901 	sub.w	r9, r3, r1
 8005cac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cb0:	1c7b      	adds	r3, r7, #1
 8005cb2:	444b      	add	r3, r9
 8005cb4:	106d      	asrs	r5, r5, #1
 8005cb6:	429d      	cmp	r5, r3
 8005cb8:	bf38      	it	cc
 8005cba:	461d      	movcc	r5, r3
 8005cbc:	0553      	lsls	r3, r2, #21
 8005cbe:	d527      	bpl.n	8005d10 <__ssputs_r+0x8c>
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7ff fbd7 	bl	8005474 <_malloc_r>
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	b360      	cbz	r0, 8005d24 <__ssputs_r+0xa0>
 8005cca:	6921      	ldr	r1, [r4, #16]
 8005ccc:	464a      	mov	r2, r9
 8005cce:	f7fe fcd2 	bl	8004676 <memcpy>
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	6126      	str	r6, [r4, #16]
 8005ce0:	6165      	str	r5, [r4, #20]
 8005ce2:	444e      	add	r6, r9
 8005ce4:	eba5 0509 	sub.w	r5, r5, r9
 8005ce8:	6026      	str	r6, [r4, #0]
 8005cea:	60a5      	str	r5, [r4, #8]
 8005cec:	463e      	mov	r6, r7
 8005cee:	42be      	cmp	r6, r7
 8005cf0:	d900      	bls.n	8005cf4 <__ssputs_r+0x70>
 8005cf2:	463e      	mov	r6, r7
 8005cf4:	6820      	ldr	r0, [r4, #0]
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	4641      	mov	r1, r8
 8005cfa:	f000 f9c9 	bl	8006090 <memmove>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	1b9b      	subs	r3, r3, r6
 8005d02:	60a3      	str	r3, [r4, #8]
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	4433      	add	r3, r6
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d10:	462a      	mov	r2, r5
 8005d12:	f000 fa2d 	bl	8006170 <_realloc_r>
 8005d16:	4606      	mov	r6, r0
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d1e0      	bne.n	8005cde <__ssputs_r+0x5a>
 8005d1c:	6921      	ldr	r1, [r4, #16]
 8005d1e:	4650      	mov	r0, sl
 8005d20:	f7ff fb34 	bl	800538c <_free_r>
 8005d24:	230c      	movs	r3, #12
 8005d26:	f8ca 3000 	str.w	r3, [sl]
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d30:	81a3      	strh	r3, [r4, #12]
 8005d32:	f04f 30ff 	mov.w	r0, #4294967295
 8005d36:	e7e9      	b.n	8005d0c <__ssputs_r+0x88>

08005d38 <_svfiprintf_r>:
 8005d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d3c:	4698      	mov	r8, r3
 8005d3e:	898b      	ldrh	r3, [r1, #12]
 8005d40:	061b      	lsls	r3, r3, #24
 8005d42:	b09d      	sub	sp, #116	; 0x74
 8005d44:	4607      	mov	r7, r0
 8005d46:	460d      	mov	r5, r1
 8005d48:	4614      	mov	r4, r2
 8005d4a:	d50e      	bpl.n	8005d6a <_svfiprintf_r+0x32>
 8005d4c:	690b      	ldr	r3, [r1, #16]
 8005d4e:	b963      	cbnz	r3, 8005d6a <_svfiprintf_r+0x32>
 8005d50:	2140      	movs	r1, #64	; 0x40
 8005d52:	f7ff fb8f 	bl	8005474 <_malloc_r>
 8005d56:	6028      	str	r0, [r5, #0]
 8005d58:	6128      	str	r0, [r5, #16]
 8005d5a:	b920      	cbnz	r0, 8005d66 <_svfiprintf_r+0x2e>
 8005d5c:	230c      	movs	r3, #12
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	f04f 30ff 	mov.w	r0, #4294967295
 8005d64:	e0d0      	b.n	8005f08 <_svfiprintf_r+0x1d0>
 8005d66:	2340      	movs	r3, #64	; 0x40
 8005d68:	616b      	str	r3, [r5, #20]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6e:	2320      	movs	r3, #32
 8005d70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d78:	2330      	movs	r3, #48	; 0x30
 8005d7a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f20 <_svfiprintf_r+0x1e8>
 8005d7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d82:	f04f 0901 	mov.w	r9, #1
 8005d86:	4623      	mov	r3, r4
 8005d88:	469a      	mov	sl, r3
 8005d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d8e:	b10a      	cbz	r2, 8005d94 <_svfiprintf_r+0x5c>
 8005d90:	2a25      	cmp	r2, #37	; 0x25
 8005d92:	d1f9      	bne.n	8005d88 <_svfiprintf_r+0x50>
 8005d94:	ebba 0b04 	subs.w	fp, sl, r4
 8005d98:	d00b      	beq.n	8005db2 <_svfiprintf_r+0x7a>
 8005d9a:	465b      	mov	r3, fp
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	4629      	mov	r1, r5
 8005da0:	4638      	mov	r0, r7
 8005da2:	f7ff ff6f 	bl	8005c84 <__ssputs_r>
 8005da6:	3001      	adds	r0, #1
 8005da8:	f000 80a9 	beq.w	8005efe <_svfiprintf_r+0x1c6>
 8005dac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dae:	445a      	add	r2, fp
 8005db0:	9209      	str	r2, [sp, #36]	; 0x24
 8005db2:	f89a 3000 	ldrb.w	r3, [sl]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 80a1 	beq.w	8005efe <_svfiprintf_r+0x1c6>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dc6:	f10a 0a01 	add.w	sl, sl, #1
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	9307      	str	r3, [sp, #28]
 8005dce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005dd2:	931a      	str	r3, [sp, #104]	; 0x68
 8005dd4:	4654      	mov	r4, sl
 8005dd6:	2205      	movs	r2, #5
 8005dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ddc:	4850      	ldr	r0, [pc, #320]	; (8005f20 <_svfiprintf_r+0x1e8>)
 8005dde:	f7fa f9ff 	bl	80001e0 <memchr>
 8005de2:	9a04      	ldr	r2, [sp, #16]
 8005de4:	b9d8      	cbnz	r0, 8005e1e <_svfiprintf_r+0xe6>
 8005de6:	06d0      	lsls	r0, r2, #27
 8005de8:	bf44      	itt	mi
 8005dea:	2320      	movmi	r3, #32
 8005dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005df0:	0711      	lsls	r1, r2, #28
 8005df2:	bf44      	itt	mi
 8005df4:	232b      	movmi	r3, #43	; 0x2b
 8005df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8005e00:	d015      	beq.n	8005e2e <_svfiprintf_r+0xf6>
 8005e02:	9a07      	ldr	r2, [sp, #28]
 8005e04:	4654      	mov	r4, sl
 8005e06:	2000      	movs	r0, #0
 8005e08:	f04f 0c0a 	mov.w	ip, #10
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e12:	3b30      	subs	r3, #48	; 0x30
 8005e14:	2b09      	cmp	r3, #9
 8005e16:	d94d      	bls.n	8005eb4 <_svfiprintf_r+0x17c>
 8005e18:	b1b0      	cbz	r0, 8005e48 <_svfiprintf_r+0x110>
 8005e1a:	9207      	str	r2, [sp, #28]
 8005e1c:	e014      	b.n	8005e48 <_svfiprintf_r+0x110>
 8005e1e:	eba0 0308 	sub.w	r3, r0, r8
 8005e22:	fa09 f303 	lsl.w	r3, r9, r3
 8005e26:	4313      	orrs	r3, r2
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	46a2      	mov	sl, r4
 8005e2c:	e7d2      	b.n	8005dd4 <_svfiprintf_r+0x9c>
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	1d19      	adds	r1, r3, #4
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	9103      	str	r1, [sp, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	bfbb      	ittet	lt
 8005e3a:	425b      	neglt	r3, r3
 8005e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005e40:	9307      	strge	r3, [sp, #28]
 8005e42:	9307      	strlt	r3, [sp, #28]
 8005e44:	bfb8      	it	lt
 8005e46:	9204      	strlt	r2, [sp, #16]
 8005e48:	7823      	ldrb	r3, [r4, #0]
 8005e4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e4c:	d10c      	bne.n	8005e68 <_svfiprintf_r+0x130>
 8005e4e:	7863      	ldrb	r3, [r4, #1]
 8005e50:	2b2a      	cmp	r3, #42	; 0x2a
 8005e52:	d134      	bne.n	8005ebe <_svfiprintf_r+0x186>
 8005e54:	9b03      	ldr	r3, [sp, #12]
 8005e56:	1d1a      	adds	r2, r3, #4
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	9203      	str	r2, [sp, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfb8      	it	lt
 8005e60:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e64:	3402      	adds	r4, #2
 8005e66:	9305      	str	r3, [sp, #20]
 8005e68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005f30 <_svfiprintf_r+0x1f8>
 8005e6c:	7821      	ldrb	r1, [r4, #0]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	4650      	mov	r0, sl
 8005e72:	f7fa f9b5 	bl	80001e0 <memchr>
 8005e76:	b138      	cbz	r0, 8005e88 <_svfiprintf_r+0x150>
 8005e78:	9b04      	ldr	r3, [sp, #16]
 8005e7a:	eba0 000a 	sub.w	r0, r0, sl
 8005e7e:	2240      	movs	r2, #64	; 0x40
 8005e80:	4082      	lsls	r2, r0
 8005e82:	4313      	orrs	r3, r2
 8005e84:	3401      	adds	r4, #1
 8005e86:	9304      	str	r3, [sp, #16]
 8005e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8c:	4825      	ldr	r0, [pc, #148]	; (8005f24 <_svfiprintf_r+0x1ec>)
 8005e8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e92:	2206      	movs	r2, #6
 8005e94:	f7fa f9a4 	bl	80001e0 <memchr>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d038      	beq.n	8005f0e <_svfiprintf_r+0x1d6>
 8005e9c:	4b22      	ldr	r3, [pc, #136]	; (8005f28 <_svfiprintf_r+0x1f0>)
 8005e9e:	bb1b      	cbnz	r3, 8005ee8 <_svfiprintf_r+0x1b0>
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	3307      	adds	r3, #7
 8005ea4:	f023 0307 	bic.w	r3, r3, #7
 8005ea8:	3308      	adds	r3, #8
 8005eaa:	9303      	str	r3, [sp, #12]
 8005eac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eae:	4433      	add	r3, r6
 8005eb0:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb2:	e768      	b.n	8005d86 <_svfiprintf_r+0x4e>
 8005eb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005eb8:	460c      	mov	r4, r1
 8005eba:	2001      	movs	r0, #1
 8005ebc:	e7a6      	b.n	8005e0c <_svfiprintf_r+0xd4>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	3401      	adds	r4, #1
 8005ec2:	9305      	str	r3, [sp, #20]
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f04f 0c0a 	mov.w	ip, #10
 8005eca:	4620      	mov	r0, r4
 8005ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ed0:	3a30      	subs	r2, #48	; 0x30
 8005ed2:	2a09      	cmp	r2, #9
 8005ed4:	d903      	bls.n	8005ede <_svfiprintf_r+0x1a6>
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d0c6      	beq.n	8005e68 <_svfiprintf_r+0x130>
 8005eda:	9105      	str	r1, [sp, #20]
 8005edc:	e7c4      	b.n	8005e68 <_svfiprintf_r+0x130>
 8005ede:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e7f0      	b.n	8005eca <_svfiprintf_r+0x192>
 8005ee8:	ab03      	add	r3, sp, #12
 8005eea:	9300      	str	r3, [sp, #0]
 8005eec:	462a      	mov	r2, r5
 8005eee:	4b0f      	ldr	r3, [pc, #60]	; (8005f2c <_svfiprintf_r+0x1f4>)
 8005ef0:	a904      	add	r1, sp, #16
 8005ef2:	4638      	mov	r0, r7
 8005ef4:	f7fd fe54 	bl	8003ba0 <_printf_float>
 8005ef8:	1c42      	adds	r2, r0, #1
 8005efa:	4606      	mov	r6, r0
 8005efc:	d1d6      	bne.n	8005eac <_svfiprintf_r+0x174>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	065b      	lsls	r3, r3, #25
 8005f02:	f53f af2d 	bmi.w	8005d60 <_svfiprintf_r+0x28>
 8005f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f08:	b01d      	add	sp, #116	; 0x74
 8005f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0e:	ab03      	add	r3, sp, #12
 8005f10:	9300      	str	r3, [sp, #0]
 8005f12:	462a      	mov	r2, r5
 8005f14:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <_svfiprintf_r+0x1f4>)
 8005f16:	a904      	add	r1, sp, #16
 8005f18:	4638      	mov	r0, r7
 8005f1a:	f7fe f8e5 	bl	80040e8 <_printf_i>
 8005f1e:	e7eb      	b.n	8005ef8 <_svfiprintf_r+0x1c0>
 8005f20:	08019c0c 	.word	0x08019c0c
 8005f24:	08019c16 	.word	0x08019c16
 8005f28:	08003ba1 	.word	0x08003ba1
 8005f2c:	08005c85 	.word	0x08005c85
 8005f30:	08019c12 	.word	0x08019c12

08005f34 <__sflush_r>:
 8005f34:	898a      	ldrh	r2, [r1, #12]
 8005f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3a:	4605      	mov	r5, r0
 8005f3c:	0710      	lsls	r0, r2, #28
 8005f3e:	460c      	mov	r4, r1
 8005f40:	d458      	bmi.n	8005ff4 <__sflush_r+0xc0>
 8005f42:	684b      	ldr	r3, [r1, #4]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	dc05      	bgt.n	8005f54 <__sflush_r+0x20>
 8005f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	dc02      	bgt.n	8005f54 <__sflush_r+0x20>
 8005f4e:	2000      	movs	r0, #0
 8005f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f56:	2e00      	cmp	r6, #0
 8005f58:	d0f9      	beq.n	8005f4e <__sflush_r+0x1a>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005f60:	682f      	ldr	r7, [r5, #0]
 8005f62:	6a21      	ldr	r1, [r4, #32]
 8005f64:	602b      	str	r3, [r5, #0]
 8005f66:	d032      	beq.n	8005fce <__sflush_r+0x9a>
 8005f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	075a      	lsls	r2, r3, #29
 8005f6e:	d505      	bpl.n	8005f7c <__sflush_r+0x48>
 8005f70:	6863      	ldr	r3, [r4, #4]
 8005f72:	1ac0      	subs	r0, r0, r3
 8005f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005f76:	b10b      	cbz	r3, 8005f7c <__sflush_r+0x48>
 8005f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005f7a:	1ac0      	subs	r0, r0, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4602      	mov	r2, r0
 8005f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f82:	6a21      	ldr	r1, [r4, #32]
 8005f84:	4628      	mov	r0, r5
 8005f86:	47b0      	blx	r6
 8005f88:	1c43      	adds	r3, r0, #1
 8005f8a:	89a3      	ldrh	r3, [r4, #12]
 8005f8c:	d106      	bne.n	8005f9c <__sflush_r+0x68>
 8005f8e:	6829      	ldr	r1, [r5, #0]
 8005f90:	291d      	cmp	r1, #29
 8005f92:	d82b      	bhi.n	8005fec <__sflush_r+0xb8>
 8005f94:	4a29      	ldr	r2, [pc, #164]	; (800603c <__sflush_r+0x108>)
 8005f96:	410a      	asrs	r2, r1
 8005f98:	07d6      	lsls	r6, r2, #31
 8005f9a:	d427      	bmi.n	8005fec <__sflush_r+0xb8>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	6062      	str	r2, [r4, #4]
 8005fa0:	04d9      	lsls	r1, r3, #19
 8005fa2:	6922      	ldr	r2, [r4, #16]
 8005fa4:	6022      	str	r2, [r4, #0]
 8005fa6:	d504      	bpl.n	8005fb2 <__sflush_r+0x7e>
 8005fa8:	1c42      	adds	r2, r0, #1
 8005faa:	d101      	bne.n	8005fb0 <__sflush_r+0x7c>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b903      	cbnz	r3, 8005fb2 <__sflush_r+0x7e>
 8005fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8005fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fb4:	602f      	str	r7, [r5, #0]
 8005fb6:	2900      	cmp	r1, #0
 8005fb8:	d0c9      	beq.n	8005f4e <__sflush_r+0x1a>
 8005fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fbe:	4299      	cmp	r1, r3
 8005fc0:	d002      	beq.n	8005fc8 <__sflush_r+0x94>
 8005fc2:	4628      	mov	r0, r5
 8005fc4:	f7ff f9e2 	bl	800538c <_free_r>
 8005fc8:	2000      	movs	r0, #0
 8005fca:	6360      	str	r0, [r4, #52]	; 0x34
 8005fcc:	e7c0      	b.n	8005f50 <__sflush_r+0x1c>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	47b0      	blx	r6
 8005fd4:	1c41      	adds	r1, r0, #1
 8005fd6:	d1c8      	bne.n	8005f6a <__sflush_r+0x36>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0c5      	beq.n	8005f6a <__sflush_r+0x36>
 8005fde:	2b1d      	cmp	r3, #29
 8005fe0:	d001      	beq.n	8005fe6 <__sflush_r+0xb2>
 8005fe2:	2b16      	cmp	r3, #22
 8005fe4:	d101      	bne.n	8005fea <__sflush_r+0xb6>
 8005fe6:	602f      	str	r7, [r5, #0]
 8005fe8:	e7b1      	b.n	8005f4e <__sflush_r+0x1a>
 8005fea:	89a3      	ldrh	r3, [r4, #12]
 8005fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ff0:	81a3      	strh	r3, [r4, #12]
 8005ff2:	e7ad      	b.n	8005f50 <__sflush_r+0x1c>
 8005ff4:	690f      	ldr	r7, [r1, #16]
 8005ff6:	2f00      	cmp	r7, #0
 8005ff8:	d0a9      	beq.n	8005f4e <__sflush_r+0x1a>
 8005ffa:	0793      	lsls	r3, r2, #30
 8005ffc:	680e      	ldr	r6, [r1, #0]
 8005ffe:	bf08      	it	eq
 8006000:	694b      	ldreq	r3, [r1, #20]
 8006002:	600f      	str	r7, [r1, #0]
 8006004:	bf18      	it	ne
 8006006:	2300      	movne	r3, #0
 8006008:	eba6 0807 	sub.w	r8, r6, r7
 800600c:	608b      	str	r3, [r1, #8]
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	dd9c      	ble.n	8005f4e <__sflush_r+0x1a>
 8006014:	6a21      	ldr	r1, [r4, #32]
 8006016:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006018:	4643      	mov	r3, r8
 800601a:	463a      	mov	r2, r7
 800601c:	4628      	mov	r0, r5
 800601e:	47b0      	blx	r6
 8006020:	2800      	cmp	r0, #0
 8006022:	dc06      	bgt.n	8006032 <__sflush_r+0xfe>
 8006024:	89a3      	ldrh	r3, [r4, #12]
 8006026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800602a:	81a3      	strh	r3, [r4, #12]
 800602c:	f04f 30ff 	mov.w	r0, #4294967295
 8006030:	e78e      	b.n	8005f50 <__sflush_r+0x1c>
 8006032:	4407      	add	r7, r0
 8006034:	eba8 0800 	sub.w	r8, r8, r0
 8006038:	e7e9      	b.n	800600e <__sflush_r+0xda>
 800603a:	bf00      	nop
 800603c:	dfbffffe 	.word	0xdfbffffe

08006040 <_fflush_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	690b      	ldr	r3, [r1, #16]
 8006044:	4605      	mov	r5, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b913      	cbnz	r3, 8006050 <_fflush_r+0x10>
 800604a:	2500      	movs	r5, #0
 800604c:	4628      	mov	r0, r5
 800604e:	bd38      	pop	{r3, r4, r5, pc}
 8006050:	b118      	cbz	r0, 800605a <_fflush_r+0x1a>
 8006052:	6a03      	ldr	r3, [r0, #32]
 8006054:	b90b      	cbnz	r3, 800605a <_fflush_r+0x1a>
 8006056:	f7fe f9f5 	bl	8004444 <__sinit>
 800605a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d0f3      	beq.n	800604a <_fflush_r+0xa>
 8006062:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006064:	07d0      	lsls	r0, r2, #31
 8006066:	d404      	bmi.n	8006072 <_fflush_r+0x32>
 8006068:	0599      	lsls	r1, r3, #22
 800606a:	d402      	bmi.n	8006072 <_fflush_r+0x32>
 800606c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800606e:	f7fe fb00 	bl	8004672 <__retarget_lock_acquire_recursive>
 8006072:	4628      	mov	r0, r5
 8006074:	4621      	mov	r1, r4
 8006076:	f7ff ff5d 	bl	8005f34 <__sflush_r>
 800607a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800607c:	07da      	lsls	r2, r3, #31
 800607e:	4605      	mov	r5, r0
 8006080:	d4e4      	bmi.n	800604c <_fflush_r+0xc>
 8006082:	89a3      	ldrh	r3, [r4, #12]
 8006084:	059b      	lsls	r3, r3, #22
 8006086:	d4e1      	bmi.n	800604c <_fflush_r+0xc>
 8006088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800608a:	f7fe faf3 	bl	8004674 <__retarget_lock_release_recursive>
 800608e:	e7dd      	b.n	800604c <_fflush_r+0xc>

08006090 <memmove>:
 8006090:	4288      	cmp	r0, r1
 8006092:	b510      	push	{r4, lr}
 8006094:	eb01 0402 	add.w	r4, r1, r2
 8006098:	d902      	bls.n	80060a0 <memmove+0x10>
 800609a:	4284      	cmp	r4, r0
 800609c:	4623      	mov	r3, r4
 800609e:	d807      	bhi.n	80060b0 <memmove+0x20>
 80060a0:	1e43      	subs	r3, r0, #1
 80060a2:	42a1      	cmp	r1, r4
 80060a4:	d008      	beq.n	80060b8 <memmove+0x28>
 80060a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060ae:	e7f8      	b.n	80060a2 <memmove+0x12>
 80060b0:	4402      	add	r2, r0
 80060b2:	4601      	mov	r1, r0
 80060b4:	428a      	cmp	r2, r1
 80060b6:	d100      	bne.n	80060ba <memmove+0x2a>
 80060b8:	bd10      	pop	{r4, pc}
 80060ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060c2:	e7f7      	b.n	80060b4 <memmove+0x24>

080060c4 <_sbrk_r>:
 80060c4:	b538      	push	{r3, r4, r5, lr}
 80060c6:	4d06      	ldr	r5, [pc, #24]	; (80060e0 <_sbrk_r+0x1c>)
 80060c8:	2300      	movs	r3, #0
 80060ca:	4604      	mov	r4, r0
 80060cc:	4608      	mov	r0, r1
 80060ce:	602b      	str	r3, [r5, #0]
 80060d0:	f7fc fd16 	bl	8002b00 <_sbrk>
 80060d4:	1c43      	adds	r3, r0, #1
 80060d6:	d102      	bne.n	80060de <_sbrk_r+0x1a>
 80060d8:	682b      	ldr	r3, [r5, #0]
 80060da:	b103      	cbz	r3, 80060de <_sbrk_r+0x1a>
 80060dc:	6023      	str	r3, [r4, #0]
 80060de:	bd38      	pop	{r3, r4, r5, pc}
 80060e0:	20000344 	.word	0x20000344

080060e4 <__assert_func>:
 80060e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060e6:	4614      	mov	r4, r2
 80060e8:	461a      	mov	r2, r3
 80060ea:	4b09      	ldr	r3, [pc, #36]	; (8006110 <__assert_func+0x2c>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4605      	mov	r5, r0
 80060f0:	68d8      	ldr	r0, [r3, #12]
 80060f2:	b14c      	cbz	r4, 8006108 <__assert_func+0x24>
 80060f4:	4b07      	ldr	r3, [pc, #28]	; (8006114 <__assert_func+0x30>)
 80060f6:	9100      	str	r1, [sp, #0]
 80060f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060fc:	4906      	ldr	r1, [pc, #24]	; (8006118 <__assert_func+0x34>)
 80060fe:	462b      	mov	r3, r5
 8006100:	f000 f872 	bl	80061e8 <fiprintf>
 8006104:	f000 f882 	bl	800620c <abort>
 8006108:	4b04      	ldr	r3, [pc, #16]	; (800611c <__assert_func+0x38>)
 800610a:	461c      	mov	r4, r3
 800610c:	e7f3      	b.n	80060f6 <__assert_func+0x12>
 800610e:	bf00      	nop
 8006110:	20000068 	.word	0x20000068
 8006114:	08019c27 	.word	0x08019c27
 8006118:	08019c34 	.word	0x08019c34
 800611c:	08019c62 	.word	0x08019c62

08006120 <_calloc_r>:
 8006120:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006122:	fba1 2402 	umull	r2, r4, r1, r2
 8006126:	b94c      	cbnz	r4, 800613c <_calloc_r+0x1c>
 8006128:	4611      	mov	r1, r2
 800612a:	9201      	str	r2, [sp, #4]
 800612c:	f7ff f9a2 	bl	8005474 <_malloc_r>
 8006130:	9a01      	ldr	r2, [sp, #4]
 8006132:	4605      	mov	r5, r0
 8006134:	b930      	cbnz	r0, 8006144 <_calloc_r+0x24>
 8006136:	4628      	mov	r0, r5
 8006138:	b003      	add	sp, #12
 800613a:	bd30      	pop	{r4, r5, pc}
 800613c:	220c      	movs	r2, #12
 800613e:	6002      	str	r2, [r0, #0]
 8006140:	2500      	movs	r5, #0
 8006142:	e7f8      	b.n	8006136 <_calloc_r+0x16>
 8006144:	4621      	mov	r1, r4
 8006146:	f7fe fa16 	bl	8004576 <memset>
 800614a:	e7f4      	b.n	8006136 <_calloc_r+0x16>

0800614c <__ascii_mbtowc>:
 800614c:	b082      	sub	sp, #8
 800614e:	b901      	cbnz	r1, 8006152 <__ascii_mbtowc+0x6>
 8006150:	a901      	add	r1, sp, #4
 8006152:	b142      	cbz	r2, 8006166 <__ascii_mbtowc+0x1a>
 8006154:	b14b      	cbz	r3, 800616a <__ascii_mbtowc+0x1e>
 8006156:	7813      	ldrb	r3, [r2, #0]
 8006158:	600b      	str	r3, [r1, #0]
 800615a:	7812      	ldrb	r2, [r2, #0]
 800615c:	1e10      	subs	r0, r2, #0
 800615e:	bf18      	it	ne
 8006160:	2001      	movne	r0, #1
 8006162:	b002      	add	sp, #8
 8006164:	4770      	bx	lr
 8006166:	4610      	mov	r0, r2
 8006168:	e7fb      	b.n	8006162 <__ascii_mbtowc+0x16>
 800616a:	f06f 0001 	mvn.w	r0, #1
 800616e:	e7f8      	b.n	8006162 <__ascii_mbtowc+0x16>

08006170 <_realloc_r>:
 8006170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006174:	4680      	mov	r8, r0
 8006176:	4614      	mov	r4, r2
 8006178:	460e      	mov	r6, r1
 800617a:	b921      	cbnz	r1, 8006186 <_realloc_r+0x16>
 800617c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006180:	4611      	mov	r1, r2
 8006182:	f7ff b977 	b.w	8005474 <_malloc_r>
 8006186:	b92a      	cbnz	r2, 8006194 <_realloc_r+0x24>
 8006188:	f7ff f900 	bl	800538c <_free_r>
 800618c:	4625      	mov	r5, r4
 800618e:	4628      	mov	r0, r5
 8006190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006194:	f000 f841 	bl	800621a <_malloc_usable_size_r>
 8006198:	4284      	cmp	r4, r0
 800619a:	4607      	mov	r7, r0
 800619c:	d802      	bhi.n	80061a4 <_realloc_r+0x34>
 800619e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80061a2:	d812      	bhi.n	80061ca <_realloc_r+0x5a>
 80061a4:	4621      	mov	r1, r4
 80061a6:	4640      	mov	r0, r8
 80061a8:	f7ff f964 	bl	8005474 <_malloc_r>
 80061ac:	4605      	mov	r5, r0
 80061ae:	2800      	cmp	r0, #0
 80061b0:	d0ed      	beq.n	800618e <_realloc_r+0x1e>
 80061b2:	42bc      	cmp	r4, r7
 80061b4:	4622      	mov	r2, r4
 80061b6:	4631      	mov	r1, r6
 80061b8:	bf28      	it	cs
 80061ba:	463a      	movcs	r2, r7
 80061bc:	f7fe fa5b 	bl	8004676 <memcpy>
 80061c0:	4631      	mov	r1, r6
 80061c2:	4640      	mov	r0, r8
 80061c4:	f7ff f8e2 	bl	800538c <_free_r>
 80061c8:	e7e1      	b.n	800618e <_realloc_r+0x1e>
 80061ca:	4635      	mov	r5, r6
 80061cc:	e7df      	b.n	800618e <_realloc_r+0x1e>

080061ce <__ascii_wctomb>:
 80061ce:	b149      	cbz	r1, 80061e4 <__ascii_wctomb+0x16>
 80061d0:	2aff      	cmp	r2, #255	; 0xff
 80061d2:	bf85      	ittet	hi
 80061d4:	238a      	movhi	r3, #138	; 0x8a
 80061d6:	6003      	strhi	r3, [r0, #0]
 80061d8:	700a      	strbls	r2, [r1, #0]
 80061da:	f04f 30ff 	movhi.w	r0, #4294967295
 80061de:	bf98      	it	ls
 80061e0:	2001      	movls	r0, #1
 80061e2:	4770      	bx	lr
 80061e4:	4608      	mov	r0, r1
 80061e6:	4770      	bx	lr

080061e8 <fiprintf>:
 80061e8:	b40e      	push	{r1, r2, r3}
 80061ea:	b503      	push	{r0, r1, lr}
 80061ec:	4601      	mov	r1, r0
 80061ee:	ab03      	add	r3, sp, #12
 80061f0:	4805      	ldr	r0, [pc, #20]	; (8006208 <fiprintf+0x20>)
 80061f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80061f6:	6800      	ldr	r0, [r0, #0]
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	f000 f83f 	bl	800627c <_vfiprintf_r>
 80061fe:	b002      	add	sp, #8
 8006200:	f85d eb04 	ldr.w	lr, [sp], #4
 8006204:	b003      	add	sp, #12
 8006206:	4770      	bx	lr
 8006208:	20000068 	.word	0x20000068

0800620c <abort>:
 800620c:	b508      	push	{r3, lr}
 800620e:	2006      	movs	r0, #6
 8006210:	f000 fa0c 	bl	800662c <raise>
 8006214:	2001      	movs	r0, #1
 8006216:	f7fc fbfb 	bl	8002a10 <_exit>

0800621a <_malloc_usable_size_r>:
 800621a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621e:	1f18      	subs	r0, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	bfbc      	itt	lt
 8006224:	580b      	ldrlt	r3, [r1, r0]
 8006226:	18c0      	addlt	r0, r0, r3
 8006228:	4770      	bx	lr

0800622a <__sfputc_r>:
 800622a:	6893      	ldr	r3, [r2, #8]
 800622c:	3b01      	subs	r3, #1
 800622e:	2b00      	cmp	r3, #0
 8006230:	b410      	push	{r4}
 8006232:	6093      	str	r3, [r2, #8]
 8006234:	da08      	bge.n	8006248 <__sfputc_r+0x1e>
 8006236:	6994      	ldr	r4, [r2, #24]
 8006238:	42a3      	cmp	r3, r4
 800623a:	db01      	blt.n	8006240 <__sfputc_r+0x16>
 800623c:	290a      	cmp	r1, #10
 800623e:	d103      	bne.n	8006248 <__sfputc_r+0x1e>
 8006240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006244:	f000 b934 	b.w	80064b0 <__swbuf_r>
 8006248:	6813      	ldr	r3, [r2, #0]
 800624a:	1c58      	adds	r0, r3, #1
 800624c:	6010      	str	r0, [r2, #0]
 800624e:	7019      	strb	r1, [r3, #0]
 8006250:	4608      	mov	r0, r1
 8006252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006256:	4770      	bx	lr

08006258 <__sfputs_r>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	4606      	mov	r6, r0
 800625c:	460f      	mov	r7, r1
 800625e:	4614      	mov	r4, r2
 8006260:	18d5      	adds	r5, r2, r3
 8006262:	42ac      	cmp	r4, r5
 8006264:	d101      	bne.n	800626a <__sfputs_r+0x12>
 8006266:	2000      	movs	r0, #0
 8006268:	e007      	b.n	800627a <__sfputs_r+0x22>
 800626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800626e:	463a      	mov	r2, r7
 8006270:	4630      	mov	r0, r6
 8006272:	f7ff ffda 	bl	800622a <__sfputc_r>
 8006276:	1c43      	adds	r3, r0, #1
 8006278:	d1f3      	bne.n	8006262 <__sfputs_r+0xa>
 800627a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800627c <_vfiprintf_r>:
 800627c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006280:	460d      	mov	r5, r1
 8006282:	b09d      	sub	sp, #116	; 0x74
 8006284:	4614      	mov	r4, r2
 8006286:	4698      	mov	r8, r3
 8006288:	4606      	mov	r6, r0
 800628a:	b118      	cbz	r0, 8006294 <_vfiprintf_r+0x18>
 800628c:	6a03      	ldr	r3, [r0, #32]
 800628e:	b90b      	cbnz	r3, 8006294 <_vfiprintf_r+0x18>
 8006290:	f7fe f8d8 	bl	8004444 <__sinit>
 8006294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006296:	07d9      	lsls	r1, r3, #31
 8006298:	d405      	bmi.n	80062a6 <_vfiprintf_r+0x2a>
 800629a:	89ab      	ldrh	r3, [r5, #12]
 800629c:	059a      	lsls	r2, r3, #22
 800629e:	d402      	bmi.n	80062a6 <_vfiprintf_r+0x2a>
 80062a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062a2:	f7fe f9e6 	bl	8004672 <__retarget_lock_acquire_recursive>
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	071b      	lsls	r3, r3, #28
 80062aa:	d501      	bpl.n	80062b0 <_vfiprintf_r+0x34>
 80062ac:	692b      	ldr	r3, [r5, #16]
 80062ae:	b99b      	cbnz	r3, 80062d8 <_vfiprintf_r+0x5c>
 80062b0:	4629      	mov	r1, r5
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 f93a 	bl	800652c <__swsetup_r>
 80062b8:	b170      	cbz	r0, 80062d8 <_vfiprintf_r+0x5c>
 80062ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062bc:	07dc      	lsls	r4, r3, #31
 80062be:	d504      	bpl.n	80062ca <_vfiprintf_r+0x4e>
 80062c0:	f04f 30ff 	mov.w	r0, #4294967295
 80062c4:	b01d      	add	sp, #116	; 0x74
 80062c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ca:	89ab      	ldrh	r3, [r5, #12]
 80062cc:	0598      	lsls	r0, r3, #22
 80062ce:	d4f7      	bmi.n	80062c0 <_vfiprintf_r+0x44>
 80062d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062d2:	f7fe f9cf 	bl	8004674 <__retarget_lock_release_recursive>
 80062d6:	e7f3      	b.n	80062c0 <_vfiprintf_r+0x44>
 80062d8:	2300      	movs	r3, #0
 80062da:	9309      	str	r3, [sp, #36]	; 0x24
 80062dc:	2320      	movs	r3, #32
 80062de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80062e6:	2330      	movs	r3, #48	; 0x30
 80062e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800649c <_vfiprintf_r+0x220>
 80062ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062f0:	f04f 0901 	mov.w	r9, #1
 80062f4:	4623      	mov	r3, r4
 80062f6:	469a      	mov	sl, r3
 80062f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062fc:	b10a      	cbz	r2, 8006302 <_vfiprintf_r+0x86>
 80062fe:	2a25      	cmp	r2, #37	; 0x25
 8006300:	d1f9      	bne.n	80062f6 <_vfiprintf_r+0x7a>
 8006302:	ebba 0b04 	subs.w	fp, sl, r4
 8006306:	d00b      	beq.n	8006320 <_vfiprintf_r+0xa4>
 8006308:	465b      	mov	r3, fp
 800630a:	4622      	mov	r2, r4
 800630c:	4629      	mov	r1, r5
 800630e:	4630      	mov	r0, r6
 8006310:	f7ff ffa2 	bl	8006258 <__sfputs_r>
 8006314:	3001      	adds	r0, #1
 8006316:	f000 80a9 	beq.w	800646c <_vfiprintf_r+0x1f0>
 800631a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800631c:	445a      	add	r2, fp
 800631e:	9209      	str	r2, [sp, #36]	; 0x24
 8006320:	f89a 3000 	ldrb.w	r3, [sl]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f000 80a1 	beq.w	800646c <_vfiprintf_r+0x1f0>
 800632a:	2300      	movs	r3, #0
 800632c:	f04f 32ff 	mov.w	r2, #4294967295
 8006330:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006334:	f10a 0a01 	add.w	sl, sl, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	9307      	str	r3, [sp, #28]
 800633c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006340:	931a      	str	r3, [sp, #104]	; 0x68
 8006342:	4654      	mov	r4, sl
 8006344:	2205      	movs	r2, #5
 8006346:	f814 1b01 	ldrb.w	r1, [r4], #1
 800634a:	4854      	ldr	r0, [pc, #336]	; (800649c <_vfiprintf_r+0x220>)
 800634c:	f7f9 ff48 	bl	80001e0 <memchr>
 8006350:	9a04      	ldr	r2, [sp, #16]
 8006352:	b9d8      	cbnz	r0, 800638c <_vfiprintf_r+0x110>
 8006354:	06d1      	lsls	r1, r2, #27
 8006356:	bf44      	itt	mi
 8006358:	2320      	movmi	r3, #32
 800635a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800635e:	0713      	lsls	r3, r2, #28
 8006360:	bf44      	itt	mi
 8006362:	232b      	movmi	r3, #43	; 0x2b
 8006364:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006368:	f89a 3000 	ldrb.w	r3, [sl]
 800636c:	2b2a      	cmp	r3, #42	; 0x2a
 800636e:	d015      	beq.n	800639c <_vfiprintf_r+0x120>
 8006370:	9a07      	ldr	r2, [sp, #28]
 8006372:	4654      	mov	r4, sl
 8006374:	2000      	movs	r0, #0
 8006376:	f04f 0c0a 	mov.w	ip, #10
 800637a:	4621      	mov	r1, r4
 800637c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006380:	3b30      	subs	r3, #48	; 0x30
 8006382:	2b09      	cmp	r3, #9
 8006384:	d94d      	bls.n	8006422 <_vfiprintf_r+0x1a6>
 8006386:	b1b0      	cbz	r0, 80063b6 <_vfiprintf_r+0x13a>
 8006388:	9207      	str	r2, [sp, #28]
 800638a:	e014      	b.n	80063b6 <_vfiprintf_r+0x13a>
 800638c:	eba0 0308 	sub.w	r3, r0, r8
 8006390:	fa09 f303 	lsl.w	r3, r9, r3
 8006394:	4313      	orrs	r3, r2
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	46a2      	mov	sl, r4
 800639a:	e7d2      	b.n	8006342 <_vfiprintf_r+0xc6>
 800639c:	9b03      	ldr	r3, [sp, #12]
 800639e:	1d19      	adds	r1, r3, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	9103      	str	r1, [sp, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfbb      	ittet	lt
 80063a8:	425b      	neglt	r3, r3
 80063aa:	f042 0202 	orrlt.w	r2, r2, #2
 80063ae:	9307      	strge	r3, [sp, #28]
 80063b0:	9307      	strlt	r3, [sp, #28]
 80063b2:	bfb8      	it	lt
 80063b4:	9204      	strlt	r2, [sp, #16]
 80063b6:	7823      	ldrb	r3, [r4, #0]
 80063b8:	2b2e      	cmp	r3, #46	; 0x2e
 80063ba:	d10c      	bne.n	80063d6 <_vfiprintf_r+0x15a>
 80063bc:	7863      	ldrb	r3, [r4, #1]
 80063be:	2b2a      	cmp	r3, #42	; 0x2a
 80063c0:	d134      	bne.n	800642c <_vfiprintf_r+0x1b0>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	1d1a      	adds	r2, r3, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	9203      	str	r2, [sp, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfb8      	it	lt
 80063ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80063d2:	3402      	adds	r4, #2
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80064ac <_vfiprintf_r+0x230>
 80063da:	7821      	ldrb	r1, [r4, #0]
 80063dc:	2203      	movs	r2, #3
 80063de:	4650      	mov	r0, sl
 80063e0:	f7f9 fefe 	bl	80001e0 <memchr>
 80063e4:	b138      	cbz	r0, 80063f6 <_vfiprintf_r+0x17a>
 80063e6:	9b04      	ldr	r3, [sp, #16]
 80063e8:	eba0 000a 	sub.w	r0, r0, sl
 80063ec:	2240      	movs	r2, #64	; 0x40
 80063ee:	4082      	lsls	r2, r0
 80063f0:	4313      	orrs	r3, r2
 80063f2:	3401      	adds	r4, #1
 80063f4:	9304      	str	r3, [sp, #16]
 80063f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063fa:	4829      	ldr	r0, [pc, #164]	; (80064a0 <_vfiprintf_r+0x224>)
 80063fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006400:	2206      	movs	r2, #6
 8006402:	f7f9 feed 	bl	80001e0 <memchr>
 8006406:	2800      	cmp	r0, #0
 8006408:	d03f      	beq.n	800648a <_vfiprintf_r+0x20e>
 800640a:	4b26      	ldr	r3, [pc, #152]	; (80064a4 <_vfiprintf_r+0x228>)
 800640c:	bb1b      	cbnz	r3, 8006456 <_vfiprintf_r+0x1da>
 800640e:	9b03      	ldr	r3, [sp, #12]
 8006410:	3307      	adds	r3, #7
 8006412:	f023 0307 	bic.w	r3, r3, #7
 8006416:	3308      	adds	r3, #8
 8006418:	9303      	str	r3, [sp, #12]
 800641a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800641c:	443b      	add	r3, r7
 800641e:	9309      	str	r3, [sp, #36]	; 0x24
 8006420:	e768      	b.n	80062f4 <_vfiprintf_r+0x78>
 8006422:	fb0c 3202 	mla	r2, ip, r2, r3
 8006426:	460c      	mov	r4, r1
 8006428:	2001      	movs	r0, #1
 800642a:	e7a6      	b.n	800637a <_vfiprintf_r+0xfe>
 800642c:	2300      	movs	r3, #0
 800642e:	3401      	adds	r4, #1
 8006430:	9305      	str	r3, [sp, #20]
 8006432:	4619      	mov	r1, r3
 8006434:	f04f 0c0a 	mov.w	ip, #10
 8006438:	4620      	mov	r0, r4
 800643a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800643e:	3a30      	subs	r2, #48	; 0x30
 8006440:	2a09      	cmp	r2, #9
 8006442:	d903      	bls.n	800644c <_vfiprintf_r+0x1d0>
 8006444:	2b00      	cmp	r3, #0
 8006446:	d0c6      	beq.n	80063d6 <_vfiprintf_r+0x15a>
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	e7c4      	b.n	80063d6 <_vfiprintf_r+0x15a>
 800644c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006450:	4604      	mov	r4, r0
 8006452:	2301      	movs	r3, #1
 8006454:	e7f0      	b.n	8006438 <_vfiprintf_r+0x1bc>
 8006456:	ab03      	add	r3, sp, #12
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	462a      	mov	r2, r5
 800645c:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <_vfiprintf_r+0x22c>)
 800645e:	a904      	add	r1, sp, #16
 8006460:	4630      	mov	r0, r6
 8006462:	f7fd fb9d 	bl	8003ba0 <_printf_float>
 8006466:	4607      	mov	r7, r0
 8006468:	1c78      	adds	r0, r7, #1
 800646a:	d1d6      	bne.n	800641a <_vfiprintf_r+0x19e>
 800646c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800646e:	07d9      	lsls	r1, r3, #31
 8006470:	d405      	bmi.n	800647e <_vfiprintf_r+0x202>
 8006472:	89ab      	ldrh	r3, [r5, #12]
 8006474:	059a      	lsls	r2, r3, #22
 8006476:	d402      	bmi.n	800647e <_vfiprintf_r+0x202>
 8006478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800647a:	f7fe f8fb 	bl	8004674 <__retarget_lock_release_recursive>
 800647e:	89ab      	ldrh	r3, [r5, #12]
 8006480:	065b      	lsls	r3, r3, #25
 8006482:	f53f af1d 	bmi.w	80062c0 <_vfiprintf_r+0x44>
 8006486:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006488:	e71c      	b.n	80062c4 <_vfiprintf_r+0x48>
 800648a:	ab03      	add	r3, sp, #12
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	462a      	mov	r2, r5
 8006490:	4b05      	ldr	r3, [pc, #20]	; (80064a8 <_vfiprintf_r+0x22c>)
 8006492:	a904      	add	r1, sp, #16
 8006494:	4630      	mov	r0, r6
 8006496:	f7fd fe27 	bl	80040e8 <_printf_i>
 800649a:	e7e4      	b.n	8006466 <_vfiprintf_r+0x1ea>
 800649c:	08019c0c 	.word	0x08019c0c
 80064a0:	08019c16 	.word	0x08019c16
 80064a4:	08003ba1 	.word	0x08003ba1
 80064a8:	08006259 	.word	0x08006259
 80064ac:	08019c12 	.word	0x08019c12

080064b0 <__swbuf_r>:
 80064b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064b2:	460e      	mov	r6, r1
 80064b4:	4614      	mov	r4, r2
 80064b6:	4605      	mov	r5, r0
 80064b8:	b118      	cbz	r0, 80064c2 <__swbuf_r+0x12>
 80064ba:	6a03      	ldr	r3, [r0, #32]
 80064bc:	b90b      	cbnz	r3, 80064c2 <__swbuf_r+0x12>
 80064be:	f7fd ffc1 	bl	8004444 <__sinit>
 80064c2:	69a3      	ldr	r3, [r4, #24]
 80064c4:	60a3      	str	r3, [r4, #8]
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	071a      	lsls	r2, r3, #28
 80064ca:	d525      	bpl.n	8006518 <__swbuf_r+0x68>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	b31b      	cbz	r3, 8006518 <__swbuf_r+0x68>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	6922      	ldr	r2, [r4, #16]
 80064d4:	1a98      	subs	r0, r3, r2
 80064d6:	6963      	ldr	r3, [r4, #20]
 80064d8:	b2f6      	uxtb	r6, r6
 80064da:	4283      	cmp	r3, r0
 80064dc:	4637      	mov	r7, r6
 80064de:	dc04      	bgt.n	80064ea <__swbuf_r+0x3a>
 80064e0:	4621      	mov	r1, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	f7ff fdac 	bl	8006040 <_fflush_r>
 80064e8:	b9e0      	cbnz	r0, 8006524 <__swbuf_r+0x74>
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	3b01      	subs	r3, #1
 80064ee:	60a3      	str	r3, [r4, #8]
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	6022      	str	r2, [r4, #0]
 80064f6:	701e      	strb	r6, [r3, #0]
 80064f8:	6962      	ldr	r2, [r4, #20]
 80064fa:	1c43      	adds	r3, r0, #1
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d004      	beq.n	800650a <__swbuf_r+0x5a>
 8006500:	89a3      	ldrh	r3, [r4, #12]
 8006502:	07db      	lsls	r3, r3, #31
 8006504:	d506      	bpl.n	8006514 <__swbuf_r+0x64>
 8006506:	2e0a      	cmp	r6, #10
 8006508:	d104      	bne.n	8006514 <__swbuf_r+0x64>
 800650a:	4621      	mov	r1, r4
 800650c:	4628      	mov	r0, r5
 800650e:	f7ff fd97 	bl	8006040 <_fflush_r>
 8006512:	b938      	cbnz	r0, 8006524 <__swbuf_r+0x74>
 8006514:	4638      	mov	r0, r7
 8006516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006518:	4621      	mov	r1, r4
 800651a:	4628      	mov	r0, r5
 800651c:	f000 f806 	bl	800652c <__swsetup_r>
 8006520:	2800      	cmp	r0, #0
 8006522:	d0d5      	beq.n	80064d0 <__swbuf_r+0x20>
 8006524:	f04f 37ff 	mov.w	r7, #4294967295
 8006528:	e7f4      	b.n	8006514 <__swbuf_r+0x64>
	...

0800652c <__swsetup_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4b2a      	ldr	r3, [pc, #168]	; (80065d8 <__swsetup_r+0xac>)
 8006530:	4605      	mov	r5, r0
 8006532:	6818      	ldr	r0, [r3, #0]
 8006534:	460c      	mov	r4, r1
 8006536:	b118      	cbz	r0, 8006540 <__swsetup_r+0x14>
 8006538:	6a03      	ldr	r3, [r0, #32]
 800653a:	b90b      	cbnz	r3, 8006540 <__swsetup_r+0x14>
 800653c:	f7fd ff82 	bl	8004444 <__sinit>
 8006540:	89a3      	ldrh	r3, [r4, #12]
 8006542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006546:	0718      	lsls	r0, r3, #28
 8006548:	d422      	bmi.n	8006590 <__swsetup_r+0x64>
 800654a:	06d9      	lsls	r1, r3, #27
 800654c:	d407      	bmi.n	800655e <__swsetup_r+0x32>
 800654e:	2309      	movs	r3, #9
 8006550:	602b      	str	r3, [r5, #0]
 8006552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006556:	81a3      	strh	r3, [r4, #12]
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	e034      	b.n	80065c8 <__swsetup_r+0x9c>
 800655e:	0758      	lsls	r0, r3, #29
 8006560:	d512      	bpl.n	8006588 <__swsetup_r+0x5c>
 8006562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006564:	b141      	cbz	r1, 8006578 <__swsetup_r+0x4c>
 8006566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800656a:	4299      	cmp	r1, r3
 800656c:	d002      	beq.n	8006574 <__swsetup_r+0x48>
 800656e:	4628      	mov	r0, r5
 8006570:	f7fe ff0c 	bl	800538c <_free_r>
 8006574:	2300      	movs	r3, #0
 8006576:	6363      	str	r3, [r4, #52]	; 0x34
 8006578:	89a3      	ldrh	r3, [r4, #12]
 800657a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800657e:	81a3      	strh	r3, [r4, #12]
 8006580:	2300      	movs	r3, #0
 8006582:	6063      	str	r3, [r4, #4]
 8006584:	6923      	ldr	r3, [r4, #16]
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	89a3      	ldrh	r3, [r4, #12]
 800658a:	f043 0308 	orr.w	r3, r3, #8
 800658e:	81a3      	strh	r3, [r4, #12]
 8006590:	6923      	ldr	r3, [r4, #16]
 8006592:	b94b      	cbnz	r3, 80065a8 <__swsetup_r+0x7c>
 8006594:	89a3      	ldrh	r3, [r4, #12]
 8006596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800659a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800659e:	d003      	beq.n	80065a8 <__swsetup_r+0x7c>
 80065a0:	4621      	mov	r1, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f884 	bl	80066b0 <__smakebuf_r>
 80065a8:	89a0      	ldrh	r0, [r4, #12]
 80065aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ae:	f010 0301 	ands.w	r3, r0, #1
 80065b2:	d00a      	beq.n	80065ca <__swsetup_r+0x9e>
 80065b4:	2300      	movs	r3, #0
 80065b6:	60a3      	str	r3, [r4, #8]
 80065b8:	6963      	ldr	r3, [r4, #20]
 80065ba:	425b      	negs	r3, r3
 80065bc:	61a3      	str	r3, [r4, #24]
 80065be:	6923      	ldr	r3, [r4, #16]
 80065c0:	b943      	cbnz	r3, 80065d4 <__swsetup_r+0xa8>
 80065c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80065c6:	d1c4      	bne.n	8006552 <__swsetup_r+0x26>
 80065c8:	bd38      	pop	{r3, r4, r5, pc}
 80065ca:	0781      	lsls	r1, r0, #30
 80065cc:	bf58      	it	pl
 80065ce:	6963      	ldrpl	r3, [r4, #20]
 80065d0:	60a3      	str	r3, [r4, #8]
 80065d2:	e7f4      	b.n	80065be <__swsetup_r+0x92>
 80065d4:	2000      	movs	r0, #0
 80065d6:	e7f7      	b.n	80065c8 <__swsetup_r+0x9c>
 80065d8:	20000068 	.word	0x20000068

080065dc <_raise_r>:
 80065dc:	291f      	cmp	r1, #31
 80065de:	b538      	push	{r3, r4, r5, lr}
 80065e0:	4604      	mov	r4, r0
 80065e2:	460d      	mov	r5, r1
 80065e4:	d904      	bls.n	80065f0 <_raise_r+0x14>
 80065e6:	2316      	movs	r3, #22
 80065e8:	6003      	str	r3, [r0, #0]
 80065ea:	f04f 30ff 	mov.w	r0, #4294967295
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80065f2:	b112      	cbz	r2, 80065fa <_raise_r+0x1e>
 80065f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065f8:	b94b      	cbnz	r3, 800660e <_raise_r+0x32>
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f830 	bl	8006660 <_getpid_r>
 8006600:	462a      	mov	r2, r5
 8006602:	4601      	mov	r1, r0
 8006604:	4620      	mov	r0, r4
 8006606:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800660a:	f000 b817 	b.w	800663c <_kill_r>
 800660e:	2b01      	cmp	r3, #1
 8006610:	d00a      	beq.n	8006628 <_raise_r+0x4c>
 8006612:	1c59      	adds	r1, r3, #1
 8006614:	d103      	bne.n	800661e <_raise_r+0x42>
 8006616:	2316      	movs	r3, #22
 8006618:	6003      	str	r3, [r0, #0]
 800661a:	2001      	movs	r0, #1
 800661c:	e7e7      	b.n	80065ee <_raise_r+0x12>
 800661e:	2400      	movs	r4, #0
 8006620:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006624:	4628      	mov	r0, r5
 8006626:	4798      	blx	r3
 8006628:	2000      	movs	r0, #0
 800662a:	e7e0      	b.n	80065ee <_raise_r+0x12>

0800662c <raise>:
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <raise+0xc>)
 800662e:	4601      	mov	r1, r0
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	f7ff bfd3 	b.w	80065dc <_raise_r>
 8006636:	bf00      	nop
 8006638:	20000068 	.word	0x20000068

0800663c <_kill_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d07      	ldr	r5, [pc, #28]	; (800665c <_kill_r+0x20>)
 8006640:	2300      	movs	r3, #0
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	4611      	mov	r1, r2
 8006648:	602b      	str	r3, [r5, #0]
 800664a:	f7fc f9d1 	bl	80029f0 <_kill>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d102      	bne.n	8006658 <_kill_r+0x1c>
 8006652:	682b      	ldr	r3, [r5, #0]
 8006654:	b103      	cbz	r3, 8006658 <_kill_r+0x1c>
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	bd38      	pop	{r3, r4, r5, pc}
 800665a:	bf00      	nop
 800665c:	20000344 	.word	0x20000344

08006660 <_getpid_r>:
 8006660:	f7fc b9be 	b.w	80029e0 <_getpid>

08006664 <__swhatbuf_r>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	460c      	mov	r4, r1
 8006668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800666c:	2900      	cmp	r1, #0
 800666e:	b096      	sub	sp, #88	; 0x58
 8006670:	4615      	mov	r5, r2
 8006672:	461e      	mov	r6, r3
 8006674:	da0d      	bge.n	8006692 <__swhatbuf_r+0x2e>
 8006676:	89a3      	ldrh	r3, [r4, #12]
 8006678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800667c:	f04f 0100 	mov.w	r1, #0
 8006680:	bf0c      	ite	eq
 8006682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006686:	2340      	movne	r3, #64	; 0x40
 8006688:	2000      	movs	r0, #0
 800668a:	6031      	str	r1, [r6, #0]
 800668c:	602b      	str	r3, [r5, #0]
 800668e:	b016      	add	sp, #88	; 0x58
 8006690:	bd70      	pop	{r4, r5, r6, pc}
 8006692:	466a      	mov	r2, sp
 8006694:	f000 f848 	bl	8006728 <_fstat_r>
 8006698:	2800      	cmp	r0, #0
 800669a:	dbec      	blt.n	8006676 <__swhatbuf_r+0x12>
 800669c:	9901      	ldr	r1, [sp, #4]
 800669e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066a6:	4259      	negs	r1, r3
 80066a8:	4159      	adcs	r1, r3
 80066aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ae:	e7eb      	b.n	8006688 <__swhatbuf_r+0x24>

080066b0 <__smakebuf_r>:
 80066b0:	898b      	ldrh	r3, [r1, #12]
 80066b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066b4:	079d      	lsls	r5, r3, #30
 80066b6:	4606      	mov	r6, r0
 80066b8:	460c      	mov	r4, r1
 80066ba:	d507      	bpl.n	80066cc <__smakebuf_r+0x1c>
 80066bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	6123      	str	r3, [r4, #16]
 80066c4:	2301      	movs	r3, #1
 80066c6:	6163      	str	r3, [r4, #20]
 80066c8:	b002      	add	sp, #8
 80066ca:	bd70      	pop	{r4, r5, r6, pc}
 80066cc:	ab01      	add	r3, sp, #4
 80066ce:	466a      	mov	r2, sp
 80066d0:	f7ff ffc8 	bl	8006664 <__swhatbuf_r>
 80066d4:	9900      	ldr	r1, [sp, #0]
 80066d6:	4605      	mov	r5, r0
 80066d8:	4630      	mov	r0, r6
 80066da:	f7fe fecb 	bl	8005474 <_malloc_r>
 80066de:	b948      	cbnz	r0, 80066f4 <__smakebuf_r+0x44>
 80066e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066e4:	059a      	lsls	r2, r3, #22
 80066e6:	d4ef      	bmi.n	80066c8 <__smakebuf_r+0x18>
 80066e8:	f023 0303 	bic.w	r3, r3, #3
 80066ec:	f043 0302 	orr.w	r3, r3, #2
 80066f0:	81a3      	strh	r3, [r4, #12]
 80066f2:	e7e3      	b.n	80066bc <__smakebuf_r+0xc>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	6020      	str	r0, [r4, #0]
 80066f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066fc:	81a3      	strh	r3, [r4, #12]
 80066fe:	9b00      	ldr	r3, [sp, #0]
 8006700:	6163      	str	r3, [r4, #20]
 8006702:	9b01      	ldr	r3, [sp, #4]
 8006704:	6120      	str	r0, [r4, #16]
 8006706:	b15b      	cbz	r3, 8006720 <__smakebuf_r+0x70>
 8006708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800670c:	4630      	mov	r0, r6
 800670e:	f000 f81d 	bl	800674c <_isatty_r>
 8006712:	b128      	cbz	r0, 8006720 <__smakebuf_r+0x70>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	81a3      	strh	r3, [r4, #12]
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	431d      	orrs	r5, r3
 8006724:	81a5      	strh	r5, [r4, #12]
 8006726:	e7cf      	b.n	80066c8 <__smakebuf_r+0x18>

08006728 <_fstat_r>:
 8006728:	b538      	push	{r3, r4, r5, lr}
 800672a:	4d07      	ldr	r5, [pc, #28]	; (8006748 <_fstat_r+0x20>)
 800672c:	2300      	movs	r3, #0
 800672e:	4604      	mov	r4, r0
 8006730:	4608      	mov	r0, r1
 8006732:	4611      	mov	r1, r2
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	f7fc f9ba 	bl	8002aae <_fstat>
 800673a:	1c43      	adds	r3, r0, #1
 800673c:	d102      	bne.n	8006744 <_fstat_r+0x1c>
 800673e:	682b      	ldr	r3, [r5, #0]
 8006740:	b103      	cbz	r3, 8006744 <_fstat_r+0x1c>
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	bf00      	nop
 8006748:	20000344 	.word	0x20000344

0800674c <_isatty_r>:
 800674c:	b538      	push	{r3, r4, r5, lr}
 800674e:	4d06      	ldr	r5, [pc, #24]	; (8006768 <_isatty_r+0x1c>)
 8006750:	2300      	movs	r3, #0
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	f7fc f9b9 	bl	8002ace <_isatty>
 800675c:	1c43      	adds	r3, r0, #1
 800675e:	d102      	bne.n	8006766 <_isatty_r+0x1a>
 8006760:	682b      	ldr	r3, [r5, #0]
 8006762:	b103      	cbz	r3, 8006766 <_isatty_r+0x1a>
 8006764:	6023      	str	r3, [r4, #0]
 8006766:	bd38      	pop	{r3, r4, r5, pc}
 8006768:	20000344 	.word	0x20000344
 800676c:	00000000 	.word	0x00000000

08006770 <cos>:
 8006770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006772:	ec53 2b10 	vmov	r2, r3, d0
 8006776:	4826      	ldr	r0, [pc, #152]	; (8006810 <cos+0xa0>)
 8006778:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800677c:	4281      	cmp	r1, r0
 800677e:	dc06      	bgt.n	800678e <cos+0x1e>
 8006780:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006808 <cos+0x98>
 8006784:	b005      	add	sp, #20
 8006786:	f85d eb04 	ldr.w	lr, [sp], #4
 800678a:	f000 b89d 	b.w	80068c8 <__kernel_cos>
 800678e:	4821      	ldr	r0, [pc, #132]	; (8006814 <cos+0xa4>)
 8006790:	4281      	cmp	r1, r0
 8006792:	dd09      	ble.n	80067a8 <cos+0x38>
 8006794:	ee10 0a10 	vmov	r0, s0
 8006798:	4619      	mov	r1, r3
 800679a:	f7f9 fd7d 	bl	8000298 <__aeabi_dsub>
 800679e:	ec41 0b10 	vmov	d0, r0, r1
 80067a2:	b005      	add	sp, #20
 80067a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80067a8:	4668      	mov	r0, sp
 80067aa:	f000 fa15 	bl	8006bd8 <__ieee754_rem_pio2>
 80067ae:	f000 0003 	and.w	r0, r0, #3
 80067b2:	2801      	cmp	r0, #1
 80067b4:	d00b      	beq.n	80067ce <cos+0x5e>
 80067b6:	2802      	cmp	r0, #2
 80067b8:	d016      	beq.n	80067e8 <cos+0x78>
 80067ba:	b9e0      	cbnz	r0, 80067f6 <cos+0x86>
 80067bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067c0:	ed9d 0b00 	vldr	d0, [sp]
 80067c4:	f000 f880 	bl	80068c8 <__kernel_cos>
 80067c8:	ec51 0b10 	vmov	r0, r1, d0
 80067cc:	e7e7      	b.n	800679e <cos+0x2e>
 80067ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067d2:	ed9d 0b00 	vldr	d0, [sp]
 80067d6:	f000 f93f 	bl	8006a58 <__kernel_sin>
 80067da:	ec53 2b10 	vmov	r2, r3, d0
 80067de:	ee10 0a10 	vmov	r0, s0
 80067e2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80067e6:	e7da      	b.n	800679e <cos+0x2e>
 80067e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067ec:	ed9d 0b00 	vldr	d0, [sp]
 80067f0:	f000 f86a 	bl	80068c8 <__kernel_cos>
 80067f4:	e7f1      	b.n	80067da <cos+0x6a>
 80067f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80067fa:	ed9d 0b00 	vldr	d0, [sp]
 80067fe:	2001      	movs	r0, #1
 8006800:	f000 f92a 	bl	8006a58 <__kernel_sin>
 8006804:	e7e0      	b.n	80067c8 <cos+0x58>
 8006806:	bf00      	nop
	...
 8006810:	3fe921fb 	.word	0x3fe921fb
 8006814:	7fefffff 	.word	0x7fefffff

08006818 <sin>:
 8006818:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800681a:	ec53 2b10 	vmov	r2, r3, d0
 800681e:	4828      	ldr	r0, [pc, #160]	; (80068c0 <sin+0xa8>)
 8006820:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006824:	4281      	cmp	r1, r0
 8006826:	dc07      	bgt.n	8006838 <sin+0x20>
 8006828:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80068b8 <sin+0xa0>
 800682c:	2000      	movs	r0, #0
 800682e:	b005      	add	sp, #20
 8006830:	f85d eb04 	ldr.w	lr, [sp], #4
 8006834:	f000 b910 	b.w	8006a58 <__kernel_sin>
 8006838:	4822      	ldr	r0, [pc, #136]	; (80068c4 <sin+0xac>)
 800683a:	4281      	cmp	r1, r0
 800683c:	dd09      	ble.n	8006852 <sin+0x3a>
 800683e:	ee10 0a10 	vmov	r0, s0
 8006842:	4619      	mov	r1, r3
 8006844:	f7f9 fd28 	bl	8000298 <__aeabi_dsub>
 8006848:	ec41 0b10 	vmov	d0, r0, r1
 800684c:	b005      	add	sp, #20
 800684e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006852:	4668      	mov	r0, sp
 8006854:	f000 f9c0 	bl	8006bd8 <__ieee754_rem_pio2>
 8006858:	f000 0003 	and.w	r0, r0, #3
 800685c:	2801      	cmp	r0, #1
 800685e:	d00c      	beq.n	800687a <sin+0x62>
 8006860:	2802      	cmp	r0, #2
 8006862:	d011      	beq.n	8006888 <sin+0x70>
 8006864:	b9f0      	cbnz	r0, 80068a4 <sin+0x8c>
 8006866:	ed9d 1b02 	vldr	d1, [sp, #8]
 800686a:	ed9d 0b00 	vldr	d0, [sp]
 800686e:	2001      	movs	r0, #1
 8006870:	f000 f8f2 	bl	8006a58 <__kernel_sin>
 8006874:	ec51 0b10 	vmov	r0, r1, d0
 8006878:	e7e6      	b.n	8006848 <sin+0x30>
 800687a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800687e:	ed9d 0b00 	vldr	d0, [sp]
 8006882:	f000 f821 	bl	80068c8 <__kernel_cos>
 8006886:	e7f5      	b.n	8006874 <sin+0x5c>
 8006888:	ed9d 1b02 	vldr	d1, [sp, #8]
 800688c:	ed9d 0b00 	vldr	d0, [sp]
 8006890:	2001      	movs	r0, #1
 8006892:	f000 f8e1 	bl	8006a58 <__kernel_sin>
 8006896:	ec53 2b10 	vmov	r2, r3, d0
 800689a:	ee10 0a10 	vmov	r0, s0
 800689e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80068a2:	e7d1      	b.n	8006848 <sin+0x30>
 80068a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80068a8:	ed9d 0b00 	vldr	d0, [sp]
 80068ac:	f000 f80c 	bl	80068c8 <__kernel_cos>
 80068b0:	e7f1      	b.n	8006896 <sin+0x7e>
 80068b2:	bf00      	nop
 80068b4:	f3af 8000 	nop.w
	...
 80068c0:	3fe921fb 	.word	0x3fe921fb
 80068c4:	7fefffff 	.word	0x7fefffff

080068c8 <__kernel_cos>:
 80068c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	ec57 6b10 	vmov	r6, r7, d0
 80068d0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80068d4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80068d8:	ed8d 1b00 	vstr	d1, [sp]
 80068dc:	da07      	bge.n	80068ee <__kernel_cos+0x26>
 80068de:	ee10 0a10 	vmov	r0, s0
 80068e2:	4639      	mov	r1, r7
 80068e4:	f7fa f940 	bl	8000b68 <__aeabi_d2iz>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	f000 8088 	beq.w	80069fe <__kernel_cos+0x136>
 80068ee:	4632      	mov	r2, r6
 80068f0:	463b      	mov	r3, r7
 80068f2:	4630      	mov	r0, r6
 80068f4:	4639      	mov	r1, r7
 80068f6:	f7f9 fe87 	bl	8000608 <__aeabi_dmul>
 80068fa:	4b51      	ldr	r3, [pc, #324]	; (8006a40 <__kernel_cos+0x178>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	460d      	mov	r5, r1
 8006902:	f7f9 fe81 	bl	8000608 <__aeabi_dmul>
 8006906:	a340      	add	r3, pc, #256	; (adr r3, 8006a08 <__kernel_cos+0x140>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	4682      	mov	sl, r0
 800690e:	468b      	mov	fp, r1
 8006910:	4620      	mov	r0, r4
 8006912:	4629      	mov	r1, r5
 8006914:	f7f9 fe78 	bl	8000608 <__aeabi_dmul>
 8006918:	a33d      	add	r3, pc, #244	; (adr r3, 8006a10 <__kernel_cos+0x148>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fcbd 	bl	800029c <__adddf3>
 8006922:	4622      	mov	r2, r4
 8006924:	462b      	mov	r3, r5
 8006926:	f7f9 fe6f 	bl	8000608 <__aeabi_dmul>
 800692a:	a33b      	add	r3, pc, #236	; (adr r3, 8006a18 <__kernel_cos+0x150>)
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	f7f9 fcb2 	bl	8000298 <__aeabi_dsub>
 8006934:	4622      	mov	r2, r4
 8006936:	462b      	mov	r3, r5
 8006938:	f7f9 fe66 	bl	8000608 <__aeabi_dmul>
 800693c:	a338      	add	r3, pc, #224	; (adr r3, 8006a20 <__kernel_cos+0x158>)
 800693e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006942:	f7f9 fcab 	bl	800029c <__adddf3>
 8006946:	4622      	mov	r2, r4
 8006948:	462b      	mov	r3, r5
 800694a:	f7f9 fe5d 	bl	8000608 <__aeabi_dmul>
 800694e:	a336      	add	r3, pc, #216	; (adr r3, 8006a28 <__kernel_cos+0x160>)
 8006950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006954:	f7f9 fca0 	bl	8000298 <__aeabi_dsub>
 8006958:	4622      	mov	r2, r4
 800695a:	462b      	mov	r3, r5
 800695c:	f7f9 fe54 	bl	8000608 <__aeabi_dmul>
 8006960:	a333      	add	r3, pc, #204	; (adr r3, 8006a30 <__kernel_cos+0x168>)
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f7f9 fc99 	bl	800029c <__adddf3>
 800696a:	4622      	mov	r2, r4
 800696c:	462b      	mov	r3, r5
 800696e:	f7f9 fe4b 	bl	8000608 <__aeabi_dmul>
 8006972:	4622      	mov	r2, r4
 8006974:	462b      	mov	r3, r5
 8006976:	f7f9 fe47 	bl	8000608 <__aeabi_dmul>
 800697a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800697e:	4604      	mov	r4, r0
 8006980:	460d      	mov	r5, r1
 8006982:	4630      	mov	r0, r6
 8006984:	4639      	mov	r1, r7
 8006986:	f7f9 fe3f 	bl	8000608 <__aeabi_dmul>
 800698a:	460b      	mov	r3, r1
 800698c:	4602      	mov	r2, r0
 800698e:	4629      	mov	r1, r5
 8006990:	4620      	mov	r0, r4
 8006992:	f7f9 fc81 	bl	8000298 <__aeabi_dsub>
 8006996:	4b2b      	ldr	r3, [pc, #172]	; (8006a44 <__kernel_cos+0x17c>)
 8006998:	4598      	cmp	r8, r3
 800699a:	4606      	mov	r6, r0
 800699c:	460f      	mov	r7, r1
 800699e:	dc10      	bgt.n	80069c2 <__kernel_cos+0xfa>
 80069a0:	4602      	mov	r2, r0
 80069a2:	460b      	mov	r3, r1
 80069a4:	4650      	mov	r0, sl
 80069a6:	4659      	mov	r1, fp
 80069a8:	f7f9 fc76 	bl	8000298 <__aeabi_dsub>
 80069ac:	460b      	mov	r3, r1
 80069ae:	4926      	ldr	r1, [pc, #152]	; (8006a48 <__kernel_cos+0x180>)
 80069b0:	4602      	mov	r2, r0
 80069b2:	2000      	movs	r0, #0
 80069b4:	f7f9 fc70 	bl	8000298 <__aeabi_dsub>
 80069b8:	ec41 0b10 	vmov	d0, r0, r1
 80069bc:	b003      	add	sp, #12
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	4b22      	ldr	r3, [pc, #136]	; (8006a4c <__kernel_cos+0x184>)
 80069c4:	4920      	ldr	r1, [pc, #128]	; (8006a48 <__kernel_cos+0x180>)
 80069c6:	4598      	cmp	r8, r3
 80069c8:	bfcc      	ite	gt
 80069ca:	4d21      	ldrgt	r5, [pc, #132]	; (8006a50 <__kernel_cos+0x188>)
 80069cc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80069d0:	2400      	movs	r4, #0
 80069d2:	4622      	mov	r2, r4
 80069d4:	462b      	mov	r3, r5
 80069d6:	2000      	movs	r0, #0
 80069d8:	f7f9 fc5e 	bl	8000298 <__aeabi_dsub>
 80069dc:	4622      	mov	r2, r4
 80069de:	4680      	mov	r8, r0
 80069e0:	4689      	mov	r9, r1
 80069e2:	462b      	mov	r3, r5
 80069e4:	4650      	mov	r0, sl
 80069e6:	4659      	mov	r1, fp
 80069e8:	f7f9 fc56 	bl	8000298 <__aeabi_dsub>
 80069ec:	4632      	mov	r2, r6
 80069ee:	463b      	mov	r3, r7
 80069f0:	f7f9 fc52 	bl	8000298 <__aeabi_dsub>
 80069f4:	4602      	mov	r2, r0
 80069f6:	460b      	mov	r3, r1
 80069f8:	4640      	mov	r0, r8
 80069fa:	4649      	mov	r1, r9
 80069fc:	e7da      	b.n	80069b4 <__kernel_cos+0xec>
 80069fe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006a38 <__kernel_cos+0x170>
 8006a02:	e7db      	b.n	80069bc <__kernel_cos+0xf4>
 8006a04:	f3af 8000 	nop.w
 8006a08:	be8838d4 	.word	0xbe8838d4
 8006a0c:	bda8fae9 	.word	0xbda8fae9
 8006a10:	bdb4b1c4 	.word	0xbdb4b1c4
 8006a14:	3e21ee9e 	.word	0x3e21ee9e
 8006a18:	809c52ad 	.word	0x809c52ad
 8006a1c:	3e927e4f 	.word	0x3e927e4f
 8006a20:	19cb1590 	.word	0x19cb1590
 8006a24:	3efa01a0 	.word	0x3efa01a0
 8006a28:	16c15177 	.word	0x16c15177
 8006a2c:	3f56c16c 	.word	0x3f56c16c
 8006a30:	5555554c 	.word	0x5555554c
 8006a34:	3fa55555 	.word	0x3fa55555
 8006a38:	00000000 	.word	0x00000000
 8006a3c:	3ff00000 	.word	0x3ff00000
 8006a40:	3fe00000 	.word	0x3fe00000
 8006a44:	3fd33332 	.word	0x3fd33332
 8006a48:	3ff00000 	.word	0x3ff00000
 8006a4c:	3fe90000 	.word	0x3fe90000
 8006a50:	3fd20000 	.word	0x3fd20000
 8006a54:	00000000 	.word	0x00000000

08006a58 <__kernel_sin>:
 8006a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5c:	ed2d 8b04 	vpush	{d8-d9}
 8006a60:	eeb0 8a41 	vmov.f32	s16, s2
 8006a64:	eef0 8a61 	vmov.f32	s17, s3
 8006a68:	ec55 4b10 	vmov	r4, r5, d0
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006a76:	9001      	str	r0, [sp, #4]
 8006a78:	da06      	bge.n	8006a88 <__kernel_sin+0x30>
 8006a7a:	ee10 0a10 	vmov	r0, s0
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f7fa f872 	bl	8000b68 <__aeabi_d2iz>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d051      	beq.n	8006b2c <__kernel_sin+0xd4>
 8006a88:	4622      	mov	r2, r4
 8006a8a:	462b      	mov	r3, r5
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	f7f9 fdba 	bl	8000608 <__aeabi_dmul>
 8006a94:	4682      	mov	sl, r0
 8006a96:	468b      	mov	fp, r1
 8006a98:	4602      	mov	r2, r0
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	4620      	mov	r0, r4
 8006a9e:	4629      	mov	r1, r5
 8006aa0:	f7f9 fdb2 	bl	8000608 <__aeabi_dmul>
 8006aa4:	a341      	add	r3, pc, #260	; (adr r3, 8006bac <__kernel_sin+0x154>)
 8006aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aaa:	4680      	mov	r8, r0
 8006aac:	4689      	mov	r9, r1
 8006aae:	4650      	mov	r0, sl
 8006ab0:	4659      	mov	r1, fp
 8006ab2:	f7f9 fda9 	bl	8000608 <__aeabi_dmul>
 8006ab6:	a33f      	add	r3, pc, #252	; (adr r3, 8006bb4 <__kernel_sin+0x15c>)
 8006ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abc:	f7f9 fbec 	bl	8000298 <__aeabi_dsub>
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	f7f9 fda0 	bl	8000608 <__aeabi_dmul>
 8006ac8:	a33c      	add	r3, pc, #240	; (adr r3, 8006bbc <__kernel_sin+0x164>)
 8006aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ace:	f7f9 fbe5 	bl	800029c <__adddf3>
 8006ad2:	4652      	mov	r2, sl
 8006ad4:	465b      	mov	r3, fp
 8006ad6:	f7f9 fd97 	bl	8000608 <__aeabi_dmul>
 8006ada:	a33a      	add	r3, pc, #232	; (adr r3, 8006bc4 <__kernel_sin+0x16c>)
 8006adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ae0:	f7f9 fbda 	bl	8000298 <__aeabi_dsub>
 8006ae4:	4652      	mov	r2, sl
 8006ae6:	465b      	mov	r3, fp
 8006ae8:	f7f9 fd8e 	bl	8000608 <__aeabi_dmul>
 8006aec:	a337      	add	r3, pc, #220	; (adr r3, 8006bcc <__kernel_sin+0x174>)
 8006aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006af2:	f7f9 fbd3 	bl	800029c <__adddf3>
 8006af6:	9b01      	ldr	r3, [sp, #4]
 8006af8:	4606      	mov	r6, r0
 8006afa:	460f      	mov	r7, r1
 8006afc:	b9eb      	cbnz	r3, 8006b3a <__kernel_sin+0xe2>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	4650      	mov	r0, sl
 8006b04:	4659      	mov	r1, fp
 8006b06:	f7f9 fd7f 	bl	8000608 <__aeabi_dmul>
 8006b0a:	a325      	add	r3, pc, #148	; (adr r3, 8006ba0 <__kernel_sin+0x148>)
 8006b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b10:	f7f9 fbc2 	bl	8000298 <__aeabi_dsub>
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	f7f9 fd76 	bl	8000608 <__aeabi_dmul>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	460b      	mov	r3, r1
 8006b20:	4620      	mov	r0, r4
 8006b22:	4629      	mov	r1, r5
 8006b24:	f7f9 fbba 	bl	800029c <__adddf3>
 8006b28:	4604      	mov	r4, r0
 8006b2a:	460d      	mov	r5, r1
 8006b2c:	ec45 4b10 	vmov	d0, r4, r5
 8006b30:	b003      	add	sp, #12
 8006b32:	ecbd 8b04 	vpop	{d8-d9}
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ba8 <__kernel_sin+0x150>)
 8006b3c:	ec51 0b18 	vmov	r0, r1, d8
 8006b40:	2200      	movs	r2, #0
 8006b42:	f7f9 fd61 	bl	8000608 <__aeabi_dmul>
 8006b46:	4632      	mov	r2, r6
 8006b48:	ec41 0b19 	vmov	d9, r0, r1
 8006b4c:	463b      	mov	r3, r7
 8006b4e:	4640      	mov	r0, r8
 8006b50:	4649      	mov	r1, r9
 8006b52:	f7f9 fd59 	bl	8000608 <__aeabi_dmul>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	ec51 0b19 	vmov	r0, r1, d9
 8006b5e:	f7f9 fb9b 	bl	8000298 <__aeabi_dsub>
 8006b62:	4652      	mov	r2, sl
 8006b64:	465b      	mov	r3, fp
 8006b66:	f7f9 fd4f 	bl	8000608 <__aeabi_dmul>
 8006b6a:	ec53 2b18 	vmov	r2, r3, d8
 8006b6e:	f7f9 fb93 	bl	8000298 <__aeabi_dsub>
 8006b72:	a30b      	add	r3, pc, #44	; (adr r3, 8006ba0 <__kernel_sin+0x148>)
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	4606      	mov	r6, r0
 8006b7a:	460f      	mov	r7, r1
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4649      	mov	r1, r9
 8006b80:	f7f9 fd42 	bl	8000608 <__aeabi_dmul>
 8006b84:	4602      	mov	r2, r0
 8006b86:	460b      	mov	r3, r1
 8006b88:	4630      	mov	r0, r6
 8006b8a:	4639      	mov	r1, r7
 8006b8c:	f7f9 fb86 	bl	800029c <__adddf3>
 8006b90:	4602      	mov	r2, r0
 8006b92:	460b      	mov	r3, r1
 8006b94:	4620      	mov	r0, r4
 8006b96:	4629      	mov	r1, r5
 8006b98:	f7f9 fb7e 	bl	8000298 <__aeabi_dsub>
 8006b9c:	e7c4      	b.n	8006b28 <__kernel_sin+0xd0>
 8006b9e:	bf00      	nop
 8006ba0:	55555549 	.word	0x55555549
 8006ba4:	3fc55555 	.word	0x3fc55555
 8006ba8:	3fe00000 	.word	0x3fe00000
 8006bac:	5acfd57c 	.word	0x5acfd57c
 8006bb0:	3de5d93a 	.word	0x3de5d93a
 8006bb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006bb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006bbc:	57b1fe7d 	.word	0x57b1fe7d
 8006bc0:	3ec71de3 	.word	0x3ec71de3
 8006bc4:	19c161d5 	.word	0x19c161d5
 8006bc8:	3f2a01a0 	.word	0x3f2a01a0
 8006bcc:	1110f8a6 	.word	0x1110f8a6
 8006bd0:	3f811111 	.word	0x3f811111
 8006bd4:	00000000 	.word	0x00000000

08006bd8 <__ieee754_rem_pio2>:
 8006bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bdc:	ed2d 8b02 	vpush	{d8}
 8006be0:	ec55 4b10 	vmov	r4, r5, d0
 8006be4:	4bca      	ldr	r3, [pc, #808]	; (8006f10 <__ieee754_rem_pio2+0x338>)
 8006be6:	b08b      	sub	sp, #44	; 0x2c
 8006be8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006bec:	4598      	cmp	r8, r3
 8006bee:	4682      	mov	sl, r0
 8006bf0:	9502      	str	r5, [sp, #8]
 8006bf2:	dc08      	bgt.n	8006c06 <__ieee754_rem_pio2+0x2e>
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	ed80 0b00 	vstr	d0, [r0]
 8006bfc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006c00:	f04f 0b00 	mov.w	fp, #0
 8006c04:	e028      	b.n	8006c58 <__ieee754_rem_pio2+0x80>
 8006c06:	4bc3      	ldr	r3, [pc, #780]	; (8006f14 <__ieee754_rem_pio2+0x33c>)
 8006c08:	4598      	cmp	r8, r3
 8006c0a:	dc78      	bgt.n	8006cfe <__ieee754_rem_pio2+0x126>
 8006c0c:	9b02      	ldr	r3, [sp, #8]
 8006c0e:	4ec2      	ldr	r6, [pc, #776]	; (8006f18 <__ieee754_rem_pio2+0x340>)
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	ee10 0a10 	vmov	r0, s0
 8006c16:	a3b0      	add	r3, pc, #704	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x300>)
 8006c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1c:	4629      	mov	r1, r5
 8006c1e:	dd39      	ble.n	8006c94 <__ieee754_rem_pio2+0xbc>
 8006c20:	f7f9 fb3a 	bl	8000298 <__aeabi_dsub>
 8006c24:	45b0      	cmp	r8, r6
 8006c26:	4604      	mov	r4, r0
 8006c28:	460d      	mov	r5, r1
 8006c2a:	d01b      	beq.n	8006c64 <__ieee754_rem_pio2+0x8c>
 8006c2c:	a3ac      	add	r3, pc, #688	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x308>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	f7f9 fb31 	bl	8000298 <__aeabi_dsub>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	e9ca 2300 	strd	r2, r3, [sl]
 8006c3e:	4620      	mov	r0, r4
 8006c40:	4629      	mov	r1, r5
 8006c42:	f7f9 fb29 	bl	8000298 <__aeabi_dsub>
 8006c46:	a3a6      	add	r3, pc, #664	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x308>)
 8006c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c4c:	f7f9 fb24 	bl	8000298 <__aeabi_dsub>
 8006c50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c54:	f04f 0b01 	mov.w	fp, #1
 8006c58:	4658      	mov	r0, fp
 8006c5a:	b00b      	add	sp, #44	; 0x2c
 8006c5c:	ecbd 8b02 	vpop	{d8}
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c64:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x310>)
 8006c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c6a:	f7f9 fb15 	bl	8000298 <__aeabi_dsub>
 8006c6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x318>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	f7f9 fb0e 	bl	8000298 <__aeabi_dsub>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	e9ca 2300 	strd	r2, r3, [sl]
 8006c84:	4620      	mov	r0, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	f7f9 fb06 	bl	8000298 <__aeabi_dsub>
 8006c8c:	a398      	add	r3, pc, #608	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x318>)
 8006c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c92:	e7db      	b.n	8006c4c <__ieee754_rem_pio2+0x74>
 8006c94:	f7f9 fb02 	bl	800029c <__adddf3>
 8006c98:	45b0      	cmp	r8, r6
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	460d      	mov	r5, r1
 8006c9e:	d016      	beq.n	8006cce <__ieee754_rem_pio2+0xf6>
 8006ca0:	a38f      	add	r3, pc, #572	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x308>)
 8006ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca6:	f7f9 faf9 	bl	800029c <__adddf3>
 8006caa:	4602      	mov	r2, r0
 8006cac:	460b      	mov	r3, r1
 8006cae:	e9ca 2300 	strd	r2, r3, [sl]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	4629      	mov	r1, r5
 8006cb6:	f7f9 faef 	bl	8000298 <__aeabi_dsub>
 8006cba:	a389      	add	r3, pc, #548	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x308>)
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f7f9 faec 	bl	800029c <__adddf3>
 8006cc4:	f04f 3bff 	mov.w	fp, #4294967295
 8006cc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ccc:	e7c4      	b.n	8006c58 <__ieee754_rem_pio2+0x80>
 8006cce:	a386      	add	r3, pc, #536	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x310>)
 8006cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cd4:	f7f9 fae2 	bl	800029c <__adddf3>
 8006cd8:	a385      	add	r3, pc, #532	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x318>)
 8006cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	f7f9 fadb 	bl	800029c <__adddf3>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	e9ca 2300 	strd	r2, r3, [sl]
 8006cee:	4620      	mov	r0, r4
 8006cf0:	4629      	mov	r1, r5
 8006cf2:	f7f9 fad1 	bl	8000298 <__aeabi_dsub>
 8006cf6:	a37e      	add	r3, pc, #504	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x318>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	e7e0      	b.n	8006cc0 <__ieee754_rem_pio2+0xe8>
 8006cfe:	4b87      	ldr	r3, [pc, #540]	; (8006f1c <__ieee754_rem_pio2+0x344>)
 8006d00:	4598      	cmp	r8, r3
 8006d02:	f300 80d8 	bgt.w	8006eb6 <__ieee754_rem_pio2+0x2de>
 8006d06:	f000 f96d 	bl	8006fe4 <fabs>
 8006d0a:	ec55 4b10 	vmov	r4, r5, d0
 8006d0e:	ee10 0a10 	vmov	r0, s0
 8006d12:	a379      	add	r3, pc, #484	; (adr r3, 8006ef8 <__ieee754_rem_pio2+0x320>)
 8006d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d18:	4629      	mov	r1, r5
 8006d1a:	f7f9 fc75 	bl	8000608 <__aeabi_dmul>
 8006d1e:	4b80      	ldr	r3, [pc, #512]	; (8006f20 <__ieee754_rem_pio2+0x348>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	f7f9 fabb 	bl	800029c <__adddf3>
 8006d26:	f7f9 ff1f 	bl	8000b68 <__aeabi_d2iz>
 8006d2a:	4683      	mov	fp, r0
 8006d2c:	f7f9 fc02 	bl	8000534 <__aeabi_i2d>
 8006d30:	4602      	mov	r2, r0
 8006d32:	460b      	mov	r3, r1
 8006d34:	ec43 2b18 	vmov	d8, r2, r3
 8006d38:	a367      	add	r3, pc, #412	; (adr r3, 8006ed8 <__ieee754_rem_pio2+0x300>)
 8006d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3e:	f7f9 fc63 	bl	8000608 <__aeabi_dmul>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4620      	mov	r0, r4
 8006d48:	4629      	mov	r1, r5
 8006d4a:	f7f9 faa5 	bl	8000298 <__aeabi_dsub>
 8006d4e:	a364      	add	r3, pc, #400	; (adr r3, 8006ee0 <__ieee754_rem_pio2+0x308>)
 8006d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d54:	4606      	mov	r6, r0
 8006d56:	460f      	mov	r7, r1
 8006d58:	ec51 0b18 	vmov	r0, r1, d8
 8006d5c:	f7f9 fc54 	bl	8000608 <__aeabi_dmul>
 8006d60:	f1bb 0f1f 	cmp.w	fp, #31
 8006d64:	4604      	mov	r4, r0
 8006d66:	460d      	mov	r5, r1
 8006d68:	dc0d      	bgt.n	8006d86 <__ieee754_rem_pio2+0x1ae>
 8006d6a:	4b6e      	ldr	r3, [pc, #440]	; (8006f24 <__ieee754_rem_pio2+0x34c>)
 8006d6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d74:	4543      	cmp	r3, r8
 8006d76:	d006      	beq.n	8006d86 <__ieee754_rem_pio2+0x1ae>
 8006d78:	4622      	mov	r2, r4
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	4630      	mov	r0, r6
 8006d7e:	4639      	mov	r1, r7
 8006d80:	f7f9 fa8a 	bl	8000298 <__aeabi_dsub>
 8006d84:	e00e      	b.n	8006da4 <__ieee754_rem_pio2+0x1cc>
 8006d86:	462b      	mov	r3, r5
 8006d88:	4622      	mov	r2, r4
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	4639      	mov	r1, r7
 8006d8e:	f7f9 fa83 	bl	8000298 <__aeabi_dsub>
 8006d92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006d96:	9303      	str	r3, [sp, #12]
 8006d98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006d9c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	dc02      	bgt.n	8006daa <__ieee754_rem_pio2+0x1d2>
 8006da4:	e9ca 0100 	strd	r0, r1, [sl]
 8006da8:	e039      	b.n	8006e1e <__ieee754_rem_pio2+0x246>
 8006daa:	a34f      	add	r3, pc, #316	; (adr r3, 8006ee8 <__ieee754_rem_pio2+0x310>)
 8006dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db0:	ec51 0b18 	vmov	r0, r1, d8
 8006db4:	f7f9 fc28 	bl	8000608 <__aeabi_dmul>
 8006db8:	4604      	mov	r4, r0
 8006dba:	460d      	mov	r5, r1
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fa68 	bl	8000298 <__aeabi_dsub>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4680      	mov	r8, r0
 8006dce:	4689      	mov	r9, r1
 8006dd0:	4630      	mov	r0, r6
 8006dd2:	4639      	mov	r1, r7
 8006dd4:	f7f9 fa60 	bl	8000298 <__aeabi_dsub>
 8006dd8:	4622      	mov	r2, r4
 8006dda:	462b      	mov	r3, r5
 8006ddc:	f7f9 fa5c 	bl	8000298 <__aeabi_dsub>
 8006de0:	a343      	add	r3, pc, #268	; (adr r3, 8006ef0 <__ieee754_rem_pio2+0x318>)
 8006de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de6:	4604      	mov	r4, r0
 8006de8:	460d      	mov	r5, r1
 8006dea:	ec51 0b18 	vmov	r0, r1, d8
 8006dee:	f7f9 fc0b 	bl	8000608 <__aeabi_dmul>
 8006df2:	4622      	mov	r2, r4
 8006df4:	462b      	mov	r3, r5
 8006df6:	f7f9 fa4f 	bl	8000298 <__aeabi_dsub>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4604      	mov	r4, r0
 8006e00:	460d      	mov	r5, r1
 8006e02:	4640      	mov	r0, r8
 8006e04:	4649      	mov	r1, r9
 8006e06:	f7f9 fa47 	bl	8000298 <__aeabi_dsub>
 8006e0a:	9a03      	ldr	r2, [sp, #12]
 8006e0c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	2b31      	cmp	r3, #49	; 0x31
 8006e14:	dc24      	bgt.n	8006e60 <__ieee754_rem_pio2+0x288>
 8006e16:	e9ca 0100 	strd	r0, r1, [sl]
 8006e1a:	4646      	mov	r6, r8
 8006e1c:	464f      	mov	r7, r9
 8006e1e:	e9da 8900 	ldrd	r8, r9, [sl]
 8006e22:	4630      	mov	r0, r6
 8006e24:	4642      	mov	r2, r8
 8006e26:	464b      	mov	r3, r9
 8006e28:	4639      	mov	r1, r7
 8006e2a:	f7f9 fa35 	bl	8000298 <__aeabi_dsub>
 8006e2e:	462b      	mov	r3, r5
 8006e30:	4622      	mov	r2, r4
 8006e32:	f7f9 fa31 	bl	8000298 <__aeabi_dsub>
 8006e36:	9b02      	ldr	r3, [sp, #8]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006e3e:	f6bf af0b 	bge.w	8006c58 <__ieee754_rem_pio2+0x80>
 8006e42:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006e46:	f8ca 3004 	str.w	r3, [sl, #4]
 8006e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006e4e:	f8ca 8000 	str.w	r8, [sl]
 8006e52:	f8ca 0008 	str.w	r0, [sl, #8]
 8006e56:	f8ca 300c 	str.w	r3, [sl, #12]
 8006e5a:	f1cb 0b00 	rsb	fp, fp, #0
 8006e5e:	e6fb      	b.n	8006c58 <__ieee754_rem_pio2+0x80>
 8006e60:	a327      	add	r3, pc, #156	; (adr r3, 8006f00 <__ieee754_rem_pio2+0x328>)
 8006e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e66:	ec51 0b18 	vmov	r0, r1, d8
 8006e6a:	f7f9 fbcd 	bl	8000608 <__aeabi_dmul>
 8006e6e:	4604      	mov	r4, r0
 8006e70:	460d      	mov	r5, r1
 8006e72:	4602      	mov	r2, r0
 8006e74:	460b      	mov	r3, r1
 8006e76:	4640      	mov	r0, r8
 8006e78:	4649      	mov	r1, r9
 8006e7a:	f7f9 fa0d 	bl	8000298 <__aeabi_dsub>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	4640      	mov	r0, r8
 8006e88:	4649      	mov	r1, r9
 8006e8a:	f7f9 fa05 	bl	8000298 <__aeabi_dsub>
 8006e8e:	4622      	mov	r2, r4
 8006e90:	462b      	mov	r3, r5
 8006e92:	f7f9 fa01 	bl	8000298 <__aeabi_dsub>
 8006e96:	a31c      	add	r3, pc, #112	; (adr r3, 8006f08 <__ieee754_rem_pio2+0x330>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	ec51 0b18 	vmov	r0, r1, d8
 8006ea4:	f7f9 fbb0 	bl	8000608 <__aeabi_dmul>
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	462b      	mov	r3, r5
 8006eac:	f7f9 f9f4 	bl	8000298 <__aeabi_dsub>
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	e760      	b.n	8006d78 <__ieee754_rem_pio2+0x1a0>
 8006eb6:	4b1c      	ldr	r3, [pc, #112]	; (8006f28 <__ieee754_rem_pio2+0x350>)
 8006eb8:	4598      	cmp	r8, r3
 8006eba:	dd37      	ble.n	8006f2c <__ieee754_rem_pio2+0x354>
 8006ebc:	ee10 2a10 	vmov	r2, s0
 8006ec0:	462b      	mov	r3, r5
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	4629      	mov	r1, r5
 8006ec6:	f7f9 f9e7 	bl	8000298 <__aeabi_dsub>
 8006eca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006ece:	e9ca 0100 	strd	r0, r1, [sl]
 8006ed2:	e695      	b.n	8006c00 <__ieee754_rem_pio2+0x28>
 8006ed4:	f3af 8000 	nop.w
 8006ed8:	54400000 	.word	0x54400000
 8006edc:	3ff921fb 	.word	0x3ff921fb
 8006ee0:	1a626331 	.word	0x1a626331
 8006ee4:	3dd0b461 	.word	0x3dd0b461
 8006ee8:	1a600000 	.word	0x1a600000
 8006eec:	3dd0b461 	.word	0x3dd0b461
 8006ef0:	2e037073 	.word	0x2e037073
 8006ef4:	3ba3198a 	.word	0x3ba3198a
 8006ef8:	6dc9c883 	.word	0x6dc9c883
 8006efc:	3fe45f30 	.word	0x3fe45f30
 8006f00:	2e000000 	.word	0x2e000000
 8006f04:	3ba3198a 	.word	0x3ba3198a
 8006f08:	252049c1 	.word	0x252049c1
 8006f0c:	397b839a 	.word	0x397b839a
 8006f10:	3fe921fb 	.word	0x3fe921fb
 8006f14:	4002d97b 	.word	0x4002d97b
 8006f18:	3ff921fb 	.word	0x3ff921fb
 8006f1c:	413921fb 	.word	0x413921fb
 8006f20:	3fe00000 	.word	0x3fe00000
 8006f24:	08019d64 	.word	0x08019d64
 8006f28:	7fefffff 	.word	0x7fefffff
 8006f2c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006f30:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006f34:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8006f38:	4620      	mov	r0, r4
 8006f3a:	460d      	mov	r5, r1
 8006f3c:	f7f9 fe14 	bl	8000b68 <__aeabi_d2iz>
 8006f40:	f7f9 faf8 	bl	8000534 <__aeabi_i2d>
 8006f44:	4602      	mov	r2, r0
 8006f46:	460b      	mov	r3, r1
 8006f48:	4620      	mov	r0, r4
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f50:	f7f9 f9a2 	bl	8000298 <__aeabi_dsub>
 8006f54:	4b21      	ldr	r3, [pc, #132]	; (8006fdc <__ieee754_rem_pio2+0x404>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	f7f9 fb56 	bl	8000608 <__aeabi_dmul>
 8006f5c:	460d      	mov	r5, r1
 8006f5e:	4604      	mov	r4, r0
 8006f60:	f7f9 fe02 	bl	8000b68 <__aeabi_d2iz>
 8006f64:	f7f9 fae6 	bl	8000534 <__aeabi_i2d>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4620      	mov	r0, r4
 8006f6e:	4629      	mov	r1, r5
 8006f70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006f74:	f7f9 f990 	bl	8000298 <__aeabi_dsub>
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <__ieee754_rem_pio2+0x404>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7f9 fb44 	bl	8000608 <__aeabi_dmul>
 8006f80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006f84:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006f88:	2703      	movs	r7, #3
 8006f8a:	2400      	movs	r4, #0
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006f92:	4622      	mov	r2, r4
 8006f94:	462b      	mov	r3, r5
 8006f96:	46b9      	mov	r9, r7
 8006f98:	3f01      	subs	r7, #1
 8006f9a:	f7f9 fd9d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	d1f5      	bne.n	8006f8e <__ieee754_rem_pio2+0x3b6>
 8006fa2:	4b0f      	ldr	r3, [pc, #60]	; (8006fe0 <__ieee754_rem_pio2+0x408>)
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	4632      	mov	r2, r6
 8006fac:	464b      	mov	r3, r9
 8006fae:	4651      	mov	r1, sl
 8006fb0:	a804      	add	r0, sp, #16
 8006fb2:	f000 f821 	bl	8006ff8 <__kernel_rem_pio2>
 8006fb6:	9b02      	ldr	r3, [sp, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	4683      	mov	fp, r0
 8006fbc:	f6bf ae4c 	bge.w	8006c58 <__ieee754_rem_pio2+0x80>
 8006fc0:	e9da 2100 	ldrd	r2, r1, [sl]
 8006fc4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fc8:	e9ca 2300 	strd	r2, r3, [sl]
 8006fcc:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006fd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006fd4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006fd8:	e73f      	b.n	8006e5a <__ieee754_rem_pio2+0x282>
 8006fda:	bf00      	nop
 8006fdc:	41700000 	.word	0x41700000
 8006fe0:	08019de4 	.word	0x08019de4

08006fe4 <fabs>:
 8006fe4:	ec51 0b10 	vmov	r0, r1, d0
 8006fe8:	ee10 2a10 	vmov	r2, s0
 8006fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006ff0:	ec43 2b10 	vmov	d0, r2, r3
 8006ff4:	4770      	bx	lr
	...

08006ff8 <__kernel_rem_pio2>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	ed2d 8b02 	vpush	{d8}
 8007000:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007004:	f112 0f14 	cmn.w	r2, #20
 8007008:	9306      	str	r3, [sp, #24]
 800700a:	9104      	str	r1, [sp, #16]
 800700c:	4bc2      	ldr	r3, [pc, #776]	; (8007318 <__kernel_rem_pio2+0x320>)
 800700e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007010:	9009      	str	r0, [sp, #36]	; 0x24
 8007012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007016:	9300      	str	r3, [sp, #0]
 8007018:	9b06      	ldr	r3, [sp, #24]
 800701a:	f103 33ff 	add.w	r3, r3, #4294967295
 800701e:	bfa8      	it	ge
 8007020:	1ed4      	subge	r4, r2, #3
 8007022:	9305      	str	r3, [sp, #20]
 8007024:	bfb2      	itee	lt
 8007026:	2400      	movlt	r4, #0
 8007028:	2318      	movge	r3, #24
 800702a:	fb94 f4f3 	sdivge	r4, r4, r3
 800702e:	f06f 0317 	mvn.w	r3, #23
 8007032:	fb04 3303 	mla	r3, r4, r3, r3
 8007036:	eb03 0a02 	add.w	sl, r3, r2
 800703a:	9b00      	ldr	r3, [sp, #0]
 800703c:	9a05      	ldr	r2, [sp, #20]
 800703e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007308 <__kernel_rem_pio2+0x310>
 8007042:	eb03 0802 	add.w	r8, r3, r2
 8007046:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007048:	1aa7      	subs	r7, r4, r2
 800704a:	ae20      	add	r6, sp, #128	; 0x80
 800704c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007050:	2500      	movs	r5, #0
 8007052:	4545      	cmp	r5, r8
 8007054:	dd13      	ble.n	800707e <__kernel_rem_pio2+0x86>
 8007056:	9b06      	ldr	r3, [sp, #24]
 8007058:	aa20      	add	r2, sp, #128	; 0x80
 800705a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800705e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007062:	f04f 0800 	mov.w	r8, #0
 8007066:	9b00      	ldr	r3, [sp, #0]
 8007068:	4598      	cmp	r8, r3
 800706a:	dc31      	bgt.n	80070d0 <__kernel_rem_pio2+0xd8>
 800706c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007308 <__kernel_rem_pio2+0x310>
 8007070:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007074:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007078:	462f      	mov	r7, r5
 800707a:	2600      	movs	r6, #0
 800707c:	e01b      	b.n	80070b6 <__kernel_rem_pio2+0xbe>
 800707e:	42ef      	cmn	r7, r5
 8007080:	d407      	bmi.n	8007092 <__kernel_rem_pio2+0x9a>
 8007082:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007086:	f7f9 fa55 	bl	8000534 <__aeabi_i2d>
 800708a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800708e:	3501      	adds	r5, #1
 8007090:	e7df      	b.n	8007052 <__kernel_rem_pio2+0x5a>
 8007092:	ec51 0b18 	vmov	r0, r1, d8
 8007096:	e7f8      	b.n	800708a <__kernel_rem_pio2+0x92>
 8007098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800709c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80070a0:	f7f9 fab2 	bl	8000608 <__aeabi_dmul>
 80070a4:	4602      	mov	r2, r0
 80070a6:	460b      	mov	r3, r1
 80070a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ac:	f7f9 f8f6 	bl	800029c <__adddf3>
 80070b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070b4:	3601      	adds	r6, #1
 80070b6:	9b05      	ldr	r3, [sp, #20]
 80070b8:	429e      	cmp	r6, r3
 80070ba:	f1a7 0708 	sub.w	r7, r7, #8
 80070be:	ddeb      	ble.n	8007098 <__kernel_rem_pio2+0xa0>
 80070c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80070c4:	f108 0801 	add.w	r8, r8, #1
 80070c8:	ecab 7b02 	vstmia	fp!, {d7}
 80070cc:	3508      	adds	r5, #8
 80070ce:	e7ca      	b.n	8007066 <__kernel_rem_pio2+0x6e>
 80070d0:	9b00      	ldr	r3, [sp, #0]
 80070d2:	aa0c      	add	r2, sp, #48	; 0x30
 80070d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80070d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80070da:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80070dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80070e0:	9c00      	ldr	r4, [sp, #0]
 80070e2:	930a      	str	r3, [sp, #40]	; 0x28
 80070e4:	00e3      	lsls	r3, r4, #3
 80070e6:	9308      	str	r3, [sp, #32]
 80070e8:	ab98      	add	r3, sp, #608	; 0x260
 80070ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80070f2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80070f6:	ab70      	add	r3, sp, #448	; 0x1c0
 80070f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80070fc:	46c3      	mov	fp, r8
 80070fe:	46a1      	mov	r9, r4
 8007100:	f1b9 0f00 	cmp.w	r9, #0
 8007104:	f1a5 0508 	sub.w	r5, r5, #8
 8007108:	dc77      	bgt.n	80071fa <__kernel_rem_pio2+0x202>
 800710a:	ec47 6b10 	vmov	d0, r6, r7
 800710e:	4650      	mov	r0, sl
 8007110:	f000 fac2 	bl	8007698 <scalbn>
 8007114:	ec57 6b10 	vmov	r6, r7, d0
 8007118:	2200      	movs	r2, #0
 800711a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800711e:	ee10 0a10 	vmov	r0, s0
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 fa70 	bl	8000608 <__aeabi_dmul>
 8007128:	ec41 0b10 	vmov	d0, r0, r1
 800712c:	f000 fb34 	bl	8007798 <floor>
 8007130:	4b7a      	ldr	r3, [pc, #488]	; (800731c <__kernel_rem_pio2+0x324>)
 8007132:	ec51 0b10 	vmov	r0, r1, d0
 8007136:	2200      	movs	r2, #0
 8007138:	f7f9 fa66 	bl	8000608 <__aeabi_dmul>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 f8a8 	bl	8000298 <__aeabi_dsub>
 8007148:	460f      	mov	r7, r1
 800714a:	4606      	mov	r6, r0
 800714c:	f7f9 fd0c 	bl	8000b68 <__aeabi_d2iz>
 8007150:	9002      	str	r0, [sp, #8]
 8007152:	f7f9 f9ef 	bl	8000534 <__aeabi_i2d>
 8007156:	4602      	mov	r2, r0
 8007158:	460b      	mov	r3, r1
 800715a:	4630      	mov	r0, r6
 800715c:	4639      	mov	r1, r7
 800715e:	f7f9 f89b 	bl	8000298 <__aeabi_dsub>
 8007162:	f1ba 0f00 	cmp.w	sl, #0
 8007166:	4606      	mov	r6, r0
 8007168:	460f      	mov	r7, r1
 800716a:	dd6d      	ble.n	8007248 <__kernel_rem_pio2+0x250>
 800716c:	1e61      	subs	r1, r4, #1
 800716e:	ab0c      	add	r3, sp, #48	; 0x30
 8007170:	9d02      	ldr	r5, [sp, #8]
 8007172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007176:	f1ca 0018 	rsb	r0, sl, #24
 800717a:	fa43 f200 	asr.w	r2, r3, r0
 800717e:	4415      	add	r5, r2
 8007180:	4082      	lsls	r2, r0
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	aa0c      	add	r2, sp, #48	; 0x30
 8007186:	9502      	str	r5, [sp, #8]
 8007188:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800718c:	f1ca 0217 	rsb	r2, sl, #23
 8007190:	fa43 fb02 	asr.w	fp, r3, r2
 8007194:	f1bb 0f00 	cmp.w	fp, #0
 8007198:	dd65      	ble.n	8007266 <__kernel_rem_pio2+0x26e>
 800719a:	9b02      	ldr	r3, [sp, #8]
 800719c:	2200      	movs	r2, #0
 800719e:	3301      	adds	r3, #1
 80071a0:	9302      	str	r3, [sp, #8]
 80071a2:	4615      	mov	r5, r2
 80071a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80071a8:	4294      	cmp	r4, r2
 80071aa:	f300 809f 	bgt.w	80072ec <__kernel_rem_pio2+0x2f4>
 80071ae:	f1ba 0f00 	cmp.w	sl, #0
 80071b2:	dd07      	ble.n	80071c4 <__kernel_rem_pio2+0x1cc>
 80071b4:	f1ba 0f01 	cmp.w	sl, #1
 80071b8:	f000 80c1 	beq.w	800733e <__kernel_rem_pio2+0x346>
 80071bc:	f1ba 0f02 	cmp.w	sl, #2
 80071c0:	f000 80c7 	beq.w	8007352 <__kernel_rem_pio2+0x35a>
 80071c4:	f1bb 0f02 	cmp.w	fp, #2
 80071c8:	d14d      	bne.n	8007266 <__kernel_rem_pio2+0x26e>
 80071ca:	4632      	mov	r2, r6
 80071cc:	463b      	mov	r3, r7
 80071ce:	4954      	ldr	r1, [pc, #336]	; (8007320 <__kernel_rem_pio2+0x328>)
 80071d0:	2000      	movs	r0, #0
 80071d2:	f7f9 f861 	bl	8000298 <__aeabi_dsub>
 80071d6:	4606      	mov	r6, r0
 80071d8:	460f      	mov	r7, r1
 80071da:	2d00      	cmp	r5, #0
 80071dc:	d043      	beq.n	8007266 <__kernel_rem_pio2+0x26e>
 80071de:	4650      	mov	r0, sl
 80071e0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007310 <__kernel_rem_pio2+0x318>
 80071e4:	f000 fa58 	bl	8007698 <scalbn>
 80071e8:	4630      	mov	r0, r6
 80071ea:	4639      	mov	r1, r7
 80071ec:	ec53 2b10 	vmov	r2, r3, d0
 80071f0:	f7f9 f852 	bl	8000298 <__aeabi_dsub>
 80071f4:	4606      	mov	r6, r0
 80071f6:	460f      	mov	r7, r1
 80071f8:	e035      	b.n	8007266 <__kernel_rem_pio2+0x26e>
 80071fa:	4b4a      	ldr	r3, [pc, #296]	; (8007324 <__kernel_rem_pio2+0x32c>)
 80071fc:	2200      	movs	r2, #0
 80071fe:	4630      	mov	r0, r6
 8007200:	4639      	mov	r1, r7
 8007202:	f7f9 fa01 	bl	8000608 <__aeabi_dmul>
 8007206:	f7f9 fcaf 	bl	8000b68 <__aeabi_d2iz>
 800720a:	f7f9 f993 	bl	8000534 <__aeabi_i2d>
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	ec43 2b18 	vmov	d8, r2, r3
 8007216:	4b44      	ldr	r3, [pc, #272]	; (8007328 <__kernel_rem_pio2+0x330>)
 8007218:	2200      	movs	r2, #0
 800721a:	f7f9 f9f5 	bl	8000608 <__aeabi_dmul>
 800721e:	4602      	mov	r2, r0
 8007220:	460b      	mov	r3, r1
 8007222:	4630      	mov	r0, r6
 8007224:	4639      	mov	r1, r7
 8007226:	f7f9 f837 	bl	8000298 <__aeabi_dsub>
 800722a:	f7f9 fc9d 	bl	8000b68 <__aeabi_d2iz>
 800722e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007232:	f84b 0b04 	str.w	r0, [fp], #4
 8007236:	ec51 0b18 	vmov	r0, r1, d8
 800723a:	f7f9 f82f 	bl	800029c <__adddf3>
 800723e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007242:	4606      	mov	r6, r0
 8007244:	460f      	mov	r7, r1
 8007246:	e75b      	b.n	8007100 <__kernel_rem_pio2+0x108>
 8007248:	d106      	bne.n	8007258 <__kernel_rem_pio2+0x260>
 800724a:	1e63      	subs	r3, r4, #1
 800724c:	aa0c      	add	r2, sp, #48	; 0x30
 800724e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007252:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007256:	e79d      	b.n	8007194 <__kernel_rem_pio2+0x19c>
 8007258:	4b34      	ldr	r3, [pc, #208]	; (800732c <__kernel_rem_pio2+0x334>)
 800725a:	2200      	movs	r2, #0
 800725c:	f7f9 fc5a 	bl	8000b14 <__aeabi_dcmpge>
 8007260:	2800      	cmp	r0, #0
 8007262:	d140      	bne.n	80072e6 <__kernel_rem_pio2+0x2ee>
 8007264:	4683      	mov	fp, r0
 8007266:	2200      	movs	r2, #0
 8007268:	2300      	movs	r3, #0
 800726a:	4630      	mov	r0, r6
 800726c:	4639      	mov	r1, r7
 800726e:	f7f9 fc33 	bl	8000ad8 <__aeabi_dcmpeq>
 8007272:	2800      	cmp	r0, #0
 8007274:	f000 80c1 	beq.w	80073fa <__kernel_rem_pio2+0x402>
 8007278:	1e65      	subs	r5, r4, #1
 800727a:	462b      	mov	r3, r5
 800727c:	2200      	movs	r2, #0
 800727e:	9900      	ldr	r1, [sp, #0]
 8007280:	428b      	cmp	r3, r1
 8007282:	da6d      	bge.n	8007360 <__kernel_rem_pio2+0x368>
 8007284:	2a00      	cmp	r2, #0
 8007286:	f000 808a 	beq.w	800739e <__kernel_rem_pio2+0x3a6>
 800728a:	ab0c      	add	r3, sp, #48	; 0x30
 800728c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007290:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007294:	2b00      	cmp	r3, #0
 8007296:	f000 80ae 	beq.w	80073f6 <__kernel_rem_pio2+0x3fe>
 800729a:	4650      	mov	r0, sl
 800729c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007310 <__kernel_rem_pio2+0x318>
 80072a0:	f000 f9fa 	bl	8007698 <scalbn>
 80072a4:	1c6b      	adds	r3, r5, #1
 80072a6:	00da      	lsls	r2, r3, #3
 80072a8:	9205      	str	r2, [sp, #20]
 80072aa:	ec57 6b10 	vmov	r6, r7, d0
 80072ae:	aa70      	add	r2, sp, #448	; 0x1c0
 80072b0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007324 <__kernel_rem_pio2+0x32c>
 80072b4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80072b8:	462c      	mov	r4, r5
 80072ba:	f04f 0800 	mov.w	r8, #0
 80072be:	2c00      	cmp	r4, #0
 80072c0:	f280 80d4 	bge.w	800746c <__kernel_rem_pio2+0x474>
 80072c4:	462c      	mov	r4, r5
 80072c6:	2c00      	cmp	r4, #0
 80072c8:	f2c0 8102 	blt.w	80074d0 <__kernel_rem_pio2+0x4d8>
 80072cc:	4b18      	ldr	r3, [pc, #96]	; (8007330 <__kernel_rem_pio2+0x338>)
 80072ce:	461e      	mov	r6, r3
 80072d0:	ab70      	add	r3, sp, #448	; 0x1c0
 80072d2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80072d6:	1b2b      	subs	r3, r5, r4
 80072d8:	f04f 0900 	mov.w	r9, #0
 80072dc:	f04f 0a00 	mov.w	sl, #0
 80072e0:	2700      	movs	r7, #0
 80072e2:	9306      	str	r3, [sp, #24]
 80072e4:	e0e6      	b.n	80074b4 <__kernel_rem_pio2+0x4bc>
 80072e6:	f04f 0b02 	mov.w	fp, #2
 80072ea:	e756      	b.n	800719a <__kernel_rem_pio2+0x1a2>
 80072ec:	f8d8 3000 	ldr.w	r3, [r8]
 80072f0:	bb05      	cbnz	r5, 8007334 <__kernel_rem_pio2+0x33c>
 80072f2:	b123      	cbz	r3, 80072fe <__kernel_rem_pio2+0x306>
 80072f4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80072f8:	f8c8 3000 	str.w	r3, [r8]
 80072fc:	2301      	movs	r3, #1
 80072fe:	3201      	adds	r2, #1
 8007300:	f108 0804 	add.w	r8, r8, #4
 8007304:	461d      	mov	r5, r3
 8007306:	e74f      	b.n	80071a8 <__kernel_rem_pio2+0x1b0>
	...
 8007314:	3ff00000 	.word	0x3ff00000
 8007318:	08019f30 	.word	0x08019f30
 800731c:	40200000 	.word	0x40200000
 8007320:	3ff00000 	.word	0x3ff00000
 8007324:	3e700000 	.word	0x3e700000
 8007328:	41700000 	.word	0x41700000
 800732c:	3fe00000 	.word	0x3fe00000
 8007330:	08019ef0 	.word	0x08019ef0
 8007334:	1acb      	subs	r3, r1, r3
 8007336:	f8c8 3000 	str.w	r3, [r8]
 800733a:	462b      	mov	r3, r5
 800733c:	e7df      	b.n	80072fe <__kernel_rem_pio2+0x306>
 800733e:	1e62      	subs	r2, r4, #1
 8007340:	ab0c      	add	r3, sp, #48	; 0x30
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800734a:	a90c      	add	r1, sp, #48	; 0x30
 800734c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007350:	e738      	b.n	80071c4 <__kernel_rem_pio2+0x1cc>
 8007352:	1e62      	subs	r2, r4, #1
 8007354:	ab0c      	add	r3, sp, #48	; 0x30
 8007356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800735a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800735e:	e7f4      	b.n	800734a <__kernel_rem_pio2+0x352>
 8007360:	a90c      	add	r1, sp, #48	; 0x30
 8007362:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007366:	3b01      	subs	r3, #1
 8007368:	430a      	orrs	r2, r1
 800736a:	e788      	b.n	800727e <__kernel_rem_pio2+0x286>
 800736c:	3301      	adds	r3, #1
 800736e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007372:	2900      	cmp	r1, #0
 8007374:	d0fa      	beq.n	800736c <__kernel_rem_pio2+0x374>
 8007376:	9a08      	ldr	r2, [sp, #32]
 8007378:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800737c:	446a      	add	r2, sp
 800737e:	3a98      	subs	r2, #152	; 0x98
 8007380:	9208      	str	r2, [sp, #32]
 8007382:	9a06      	ldr	r2, [sp, #24]
 8007384:	a920      	add	r1, sp, #128	; 0x80
 8007386:	18a2      	adds	r2, r4, r2
 8007388:	18e3      	adds	r3, r4, r3
 800738a:	f104 0801 	add.w	r8, r4, #1
 800738e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007392:	9302      	str	r3, [sp, #8]
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	4543      	cmp	r3, r8
 8007398:	da04      	bge.n	80073a4 <__kernel_rem_pio2+0x3ac>
 800739a:	461c      	mov	r4, r3
 800739c:	e6a2      	b.n	80070e4 <__kernel_rem_pio2+0xec>
 800739e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80073a0:	2301      	movs	r3, #1
 80073a2:	e7e4      	b.n	800736e <__kernel_rem_pio2+0x376>
 80073a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073a6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80073aa:	f7f9 f8c3 	bl	8000534 <__aeabi_i2d>
 80073ae:	e8e5 0102 	strd	r0, r1, [r5], #8
 80073b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b4:	46ab      	mov	fp, r5
 80073b6:	461c      	mov	r4, r3
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	2600      	movs	r6, #0
 80073be:	2700      	movs	r7, #0
 80073c0:	9b05      	ldr	r3, [sp, #20]
 80073c2:	4599      	cmp	r9, r3
 80073c4:	dd06      	ble.n	80073d4 <__kernel_rem_pio2+0x3dc>
 80073c6:	9b08      	ldr	r3, [sp, #32]
 80073c8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80073cc:	f108 0801 	add.w	r8, r8, #1
 80073d0:	9308      	str	r3, [sp, #32]
 80073d2:	e7df      	b.n	8007394 <__kernel_rem_pio2+0x39c>
 80073d4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80073d8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80073dc:	f7f9 f914 	bl	8000608 <__aeabi_dmul>
 80073e0:	4602      	mov	r2, r0
 80073e2:	460b      	mov	r3, r1
 80073e4:	4630      	mov	r0, r6
 80073e6:	4639      	mov	r1, r7
 80073e8:	f7f8 ff58 	bl	800029c <__adddf3>
 80073ec:	f109 0901 	add.w	r9, r9, #1
 80073f0:	4606      	mov	r6, r0
 80073f2:	460f      	mov	r7, r1
 80073f4:	e7e4      	b.n	80073c0 <__kernel_rem_pio2+0x3c8>
 80073f6:	3d01      	subs	r5, #1
 80073f8:	e747      	b.n	800728a <__kernel_rem_pio2+0x292>
 80073fa:	ec47 6b10 	vmov	d0, r6, r7
 80073fe:	f1ca 0000 	rsb	r0, sl, #0
 8007402:	f000 f949 	bl	8007698 <scalbn>
 8007406:	ec57 6b10 	vmov	r6, r7, d0
 800740a:	4ba0      	ldr	r3, [pc, #640]	; (800768c <__kernel_rem_pio2+0x694>)
 800740c:	ee10 0a10 	vmov	r0, s0
 8007410:	2200      	movs	r2, #0
 8007412:	4639      	mov	r1, r7
 8007414:	f7f9 fb7e 	bl	8000b14 <__aeabi_dcmpge>
 8007418:	b1f8      	cbz	r0, 800745a <__kernel_rem_pio2+0x462>
 800741a:	4b9d      	ldr	r3, [pc, #628]	; (8007690 <__kernel_rem_pio2+0x698>)
 800741c:	2200      	movs	r2, #0
 800741e:	4630      	mov	r0, r6
 8007420:	4639      	mov	r1, r7
 8007422:	f7f9 f8f1 	bl	8000608 <__aeabi_dmul>
 8007426:	f7f9 fb9f 	bl	8000b68 <__aeabi_d2iz>
 800742a:	4680      	mov	r8, r0
 800742c:	f7f9 f882 	bl	8000534 <__aeabi_i2d>
 8007430:	4b96      	ldr	r3, [pc, #600]	; (800768c <__kernel_rem_pio2+0x694>)
 8007432:	2200      	movs	r2, #0
 8007434:	f7f9 f8e8 	bl	8000608 <__aeabi_dmul>
 8007438:	460b      	mov	r3, r1
 800743a:	4602      	mov	r2, r0
 800743c:	4639      	mov	r1, r7
 800743e:	4630      	mov	r0, r6
 8007440:	f7f8 ff2a 	bl	8000298 <__aeabi_dsub>
 8007444:	f7f9 fb90 	bl	8000b68 <__aeabi_d2iz>
 8007448:	1c65      	adds	r5, r4, #1
 800744a:	ab0c      	add	r3, sp, #48	; 0x30
 800744c:	f10a 0a18 	add.w	sl, sl, #24
 8007450:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007454:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007458:	e71f      	b.n	800729a <__kernel_rem_pio2+0x2a2>
 800745a:	4630      	mov	r0, r6
 800745c:	4639      	mov	r1, r7
 800745e:	f7f9 fb83 	bl	8000b68 <__aeabi_d2iz>
 8007462:	ab0c      	add	r3, sp, #48	; 0x30
 8007464:	4625      	mov	r5, r4
 8007466:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800746a:	e716      	b.n	800729a <__kernel_rem_pio2+0x2a2>
 800746c:	ab0c      	add	r3, sp, #48	; 0x30
 800746e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007472:	f7f9 f85f 	bl	8000534 <__aeabi_i2d>
 8007476:	4632      	mov	r2, r6
 8007478:	463b      	mov	r3, r7
 800747a:	f7f9 f8c5 	bl	8000608 <__aeabi_dmul>
 800747e:	4642      	mov	r2, r8
 8007480:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007484:	464b      	mov	r3, r9
 8007486:	4630      	mov	r0, r6
 8007488:	4639      	mov	r1, r7
 800748a:	f7f9 f8bd 	bl	8000608 <__aeabi_dmul>
 800748e:	3c01      	subs	r4, #1
 8007490:	4606      	mov	r6, r0
 8007492:	460f      	mov	r7, r1
 8007494:	e713      	b.n	80072be <__kernel_rem_pio2+0x2c6>
 8007496:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800749a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800749e:	f7f9 f8b3 	bl	8000608 <__aeabi_dmul>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4648      	mov	r0, r9
 80074a8:	4651      	mov	r1, sl
 80074aa:	f7f8 fef7 	bl	800029c <__adddf3>
 80074ae:	3701      	adds	r7, #1
 80074b0:	4681      	mov	r9, r0
 80074b2:	468a      	mov	sl, r1
 80074b4:	9b00      	ldr	r3, [sp, #0]
 80074b6:	429f      	cmp	r7, r3
 80074b8:	dc02      	bgt.n	80074c0 <__kernel_rem_pio2+0x4c8>
 80074ba:	9b06      	ldr	r3, [sp, #24]
 80074bc:	429f      	cmp	r7, r3
 80074be:	ddea      	ble.n	8007496 <__kernel_rem_pio2+0x49e>
 80074c0:	9a06      	ldr	r2, [sp, #24]
 80074c2:	ab48      	add	r3, sp, #288	; 0x120
 80074c4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80074c8:	e9c6 9a00 	strd	r9, sl, [r6]
 80074cc:	3c01      	subs	r4, #1
 80074ce:	e6fa      	b.n	80072c6 <__kernel_rem_pio2+0x2ce>
 80074d0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	dc0b      	bgt.n	80074ee <__kernel_rem_pio2+0x4f6>
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	dc39      	bgt.n	800754e <__kernel_rem_pio2+0x556>
 80074da:	d05d      	beq.n	8007598 <__kernel_rem_pio2+0x5a0>
 80074dc:	9b02      	ldr	r3, [sp, #8]
 80074de:	f003 0007 	and.w	r0, r3, #7
 80074e2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80074e6:	ecbd 8b02 	vpop	{d8}
 80074ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ee:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d1f3      	bne.n	80074dc <__kernel_rem_pio2+0x4e4>
 80074f4:	9b05      	ldr	r3, [sp, #20]
 80074f6:	9500      	str	r5, [sp, #0]
 80074f8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80074fc:	eb0d 0403 	add.w	r4, sp, r3
 8007500:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007504:	46a2      	mov	sl, r4
 8007506:	9b00      	ldr	r3, [sp, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f1aa 0a08 	sub.w	sl, sl, #8
 800750e:	dc69      	bgt.n	80075e4 <__kernel_rem_pio2+0x5ec>
 8007510:	46aa      	mov	sl, r5
 8007512:	f1ba 0f01 	cmp.w	sl, #1
 8007516:	f1a4 0408 	sub.w	r4, r4, #8
 800751a:	f300 8083 	bgt.w	8007624 <__kernel_rem_pio2+0x62c>
 800751e:	9c05      	ldr	r4, [sp, #20]
 8007520:	ab48      	add	r3, sp, #288	; 0x120
 8007522:	441c      	add	r4, r3
 8007524:	2000      	movs	r0, #0
 8007526:	2100      	movs	r1, #0
 8007528:	2d01      	cmp	r5, #1
 800752a:	f300 809a 	bgt.w	8007662 <__kernel_rem_pio2+0x66a>
 800752e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007532:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007536:	f1bb 0f00 	cmp.w	fp, #0
 800753a:	f040 8098 	bne.w	800766e <__kernel_rem_pio2+0x676>
 800753e:	9b04      	ldr	r3, [sp, #16]
 8007540:	e9c3 7800 	strd	r7, r8, [r3]
 8007544:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007548:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800754c:	e7c6      	b.n	80074dc <__kernel_rem_pio2+0x4e4>
 800754e:	9e05      	ldr	r6, [sp, #20]
 8007550:	ab48      	add	r3, sp, #288	; 0x120
 8007552:	441e      	add	r6, r3
 8007554:	462c      	mov	r4, r5
 8007556:	2000      	movs	r0, #0
 8007558:	2100      	movs	r1, #0
 800755a:	2c00      	cmp	r4, #0
 800755c:	da33      	bge.n	80075c6 <__kernel_rem_pio2+0x5ce>
 800755e:	f1bb 0f00 	cmp.w	fp, #0
 8007562:	d036      	beq.n	80075d2 <__kernel_rem_pio2+0x5da>
 8007564:	4602      	mov	r2, r0
 8007566:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800756a:	9c04      	ldr	r4, [sp, #16]
 800756c:	e9c4 2300 	strd	r2, r3, [r4]
 8007570:	4602      	mov	r2, r0
 8007572:	460b      	mov	r3, r1
 8007574:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007578:	f7f8 fe8e 	bl	8000298 <__aeabi_dsub>
 800757c:	ae4a      	add	r6, sp, #296	; 0x128
 800757e:	2401      	movs	r4, #1
 8007580:	42a5      	cmp	r5, r4
 8007582:	da29      	bge.n	80075d8 <__kernel_rem_pio2+0x5e0>
 8007584:	f1bb 0f00 	cmp.w	fp, #0
 8007588:	d002      	beq.n	8007590 <__kernel_rem_pio2+0x598>
 800758a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800758e:	4619      	mov	r1, r3
 8007590:	9b04      	ldr	r3, [sp, #16]
 8007592:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007596:	e7a1      	b.n	80074dc <__kernel_rem_pio2+0x4e4>
 8007598:	9c05      	ldr	r4, [sp, #20]
 800759a:	ab48      	add	r3, sp, #288	; 0x120
 800759c:	441c      	add	r4, r3
 800759e:	2000      	movs	r0, #0
 80075a0:	2100      	movs	r1, #0
 80075a2:	2d00      	cmp	r5, #0
 80075a4:	da09      	bge.n	80075ba <__kernel_rem_pio2+0x5c2>
 80075a6:	f1bb 0f00 	cmp.w	fp, #0
 80075aa:	d002      	beq.n	80075b2 <__kernel_rem_pio2+0x5ba>
 80075ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80075b0:	4619      	mov	r1, r3
 80075b2:	9b04      	ldr	r3, [sp, #16]
 80075b4:	e9c3 0100 	strd	r0, r1, [r3]
 80075b8:	e790      	b.n	80074dc <__kernel_rem_pio2+0x4e4>
 80075ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80075be:	f7f8 fe6d 	bl	800029c <__adddf3>
 80075c2:	3d01      	subs	r5, #1
 80075c4:	e7ed      	b.n	80075a2 <__kernel_rem_pio2+0x5aa>
 80075c6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80075ca:	f7f8 fe67 	bl	800029c <__adddf3>
 80075ce:	3c01      	subs	r4, #1
 80075d0:	e7c3      	b.n	800755a <__kernel_rem_pio2+0x562>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	e7c8      	b.n	800756a <__kernel_rem_pio2+0x572>
 80075d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	3401      	adds	r4, #1
 80075e2:	e7cd      	b.n	8007580 <__kernel_rem_pio2+0x588>
 80075e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80075e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80075ec:	9b00      	ldr	r3, [sp, #0]
 80075ee:	3b01      	subs	r3, #1
 80075f0:	9300      	str	r3, [sp, #0]
 80075f2:	4632      	mov	r2, r6
 80075f4:	463b      	mov	r3, r7
 80075f6:	4640      	mov	r0, r8
 80075f8:	4649      	mov	r1, r9
 80075fa:	f7f8 fe4f 	bl	800029c <__adddf3>
 80075fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007602:	4602      	mov	r2, r0
 8007604:	460b      	mov	r3, r1
 8007606:	4640      	mov	r0, r8
 8007608:	4649      	mov	r1, r9
 800760a:	f7f8 fe45 	bl	8000298 <__aeabi_dsub>
 800760e:	4632      	mov	r2, r6
 8007610:	463b      	mov	r3, r7
 8007612:	f7f8 fe43 	bl	800029c <__adddf3>
 8007616:	ed9d 7b06 	vldr	d7, [sp, #24]
 800761a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800761e:	ed8a 7b00 	vstr	d7, [sl]
 8007622:	e770      	b.n	8007506 <__kernel_rem_pio2+0x50e>
 8007624:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007628:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800762c:	4640      	mov	r0, r8
 800762e:	4632      	mov	r2, r6
 8007630:	463b      	mov	r3, r7
 8007632:	4649      	mov	r1, r9
 8007634:	f7f8 fe32 	bl	800029c <__adddf3>
 8007638:	e9cd 0100 	strd	r0, r1, [sp]
 800763c:	4602      	mov	r2, r0
 800763e:	460b      	mov	r3, r1
 8007640:	4640      	mov	r0, r8
 8007642:	4649      	mov	r1, r9
 8007644:	f7f8 fe28 	bl	8000298 <__aeabi_dsub>
 8007648:	4632      	mov	r2, r6
 800764a:	463b      	mov	r3, r7
 800764c:	f7f8 fe26 	bl	800029c <__adddf3>
 8007650:	ed9d 7b00 	vldr	d7, [sp]
 8007654:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007658:	ed84 7b00 	vstr	d7, [r4]
 800765c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007660:	e757      	b.n	8007512 <__kernel_rem_pio2+0x51a>
 8007662:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007666:	f7f8 fe19 	bl	800029c <__adddf3>
 800766a:	3d01      	subs	r5, #1
 800766c:	e75c      	b.n	8007528 <__kernel_rem_pio2+0x530>
 800766e:	9b04      	ldr	r3, [sp, #16]
 8007670:	9a04      	ldr	r2, [sp, #16]
 8007672:	601f      	str	r7, [r3, #0]
 8007674:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007678:	605c      	str	r4, [r3, #4]
 800767a:	609d      	str	r5, [r3, #8]
 800767c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007680:	60d3      	str	r3, [r2, #12]
 8007682:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007686:	6110      	str	r0, [r2, #16]
 8007688:	6153      	str	r3, [r2, #20]
 800768a:	e727      	b.n	80074dc <__kernel_rem_pio2+0x4e4>
 800768c:	41700000 	.word	0x41700000
 8007690:	3e700000 	.word	0x3e700000
 8007694:	00000000 	.word	0x00000000

08007698 <scalbn>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	ec55 4b10 	vmov	r4, r5, d0
 800769e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80076a2:	4606      	mov	r6, r0
 80076a4:	462b      	mov	r3, r5
 80076a6:	b999      	cbnz	r1, 80076d0 <scalbn+0x38>
 80076a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80076ac:	4323      	orrs	r3, r4
 80076ae:	d03f      	beq.n	8007730 <scalbn+0x98>
 80076b0:	4b35      	ldr	r3, [pc, #212]	; (8007788 <scalbn+0xf0>)
 80076b2:	4629      	mov	r1, r5
 80076b4:	ee10 0a10 	vmov	r0, s0
 80076b8:	2200      	movs	r2, #0
 80076ba:	f7f8 ffa5 	bl	8000608 <__aeabi_dmul>
 80076be:	4b33      	ldr	r3, [pc, #204]	; (800778c <scalbn+0xf4>)
 80076c0:	429e      	cmp	r6, r3
 80076c2:	4604      	mov	r4, r0
 80076c4:	460d      	mov	r5, r1
 80076c6:	da10      	bge.n	80076ea <scalbn+0x52>
 80076c8:	a327      	add	r3, pc, #156	; (adr r3, 8007768 <scalbn+0xd0>)
 80076ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ce:	e01f      	b.n	8007710 <scalbn+0x78>
 80076d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80076d4:	4291      	cmp	r1, r2
 80076d6:	d10c      	bne.n	80076f2 <scalbn+0x5a>
 80076d8:	ee10 2a10 	vmov	r2, s0
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f7f8 fddc 	bl	800029c <__adddf3>
 80076e4:	4604      	mov	r4, r0
 80076e6:	460d      	mov	r5, r1
 80076e8:	e022      	b.n	8007730 <scalbn+0x98>
 80076ea:	460b      	mov	r3, r1
 80076ec:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80076f0:	3936      	subs	r1, #54	; 0x36
 80076f2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80076f6:	4296      	cmp	r6, r2
 80076f8:	dd0d      	ble.n	8007716 <scalbn+0x7e>
 80076fa:	2d00      	cmp	r5, #0
 80076fc:	a11c      	add	r1, pc, #112	; (adr r1, 8007770 <scalbn+0xd8>)
 80076fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007702:	da02      	bge.n	800770a <scalbn+0x72>
 8007704:	a11c      	add	r1, pc, #112	; (adr r1, 8007778 <scalbn+0xe0>)
 8007706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800770a:	a319      	add	r3, pc, #100	; (adr r3, 8007770 <scalbn+0xd8>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f8 ff7a 	bl	8000608 <__aeabi_dmul>
 8007714:	e7e6      	b.n	80076e4 <scalbn+0x4c>
 8007716:	1872      	adds	r2, r6, r1
 8007718:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800771c:	428a      	cmp	r2, r1
 800771e:	dcec      	bgt.n	80076fa <scalbn+0x62>
 8007720:	2a00      	cmp	r2, #0
 8007722:	dd08      	ble.n	8007736 <scalbn+0x9e>
 8007724:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007728:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800772c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007730:	ec45 4b10 	vmov	d0, r4, r5
 8007734:	bd70      	pop	{r4, r5, r6, pc}
 8007736:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800773a:	da08      	bge.n	800774e <scalbn+0xb6>
 800773c:	2d00      	cmp	r5, #0
 800773e:	a10a      	add	r1, pc, #40	; (adr r1, 8007768 <scalbn+0xd0>)
 8007740:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007744:	dac0      	bge.n	80076c8 <scalbn+0x30>
 8007746:	a10e      	add	r1, pc, #56	; (adr r1, 8007780 <scalbn+0xe8>)
 8007748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800774c:	e7bc      	b.n	80076c8 <scalbn+0x30>
 800774e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007752:	3236      	adds	r2, #54	; 0x36
 8007754:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007758:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800775c:	4620      	mov	r0, r4
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <scalbn+0xf8>)
 8007760:	2200      	movs	r2, #0
 8007762:	e7d5      	b.n	8007710 <scalbn+0x78>
 8007764:	f3af 8000 	nop.w
 8007768:	c2f8f359 	.word	0xc2f8f359
 800776c:	01a56e1f 	.word	0x01a56e1f
 8007770:	8800759c 	.word	0x8800759c
 8007774:	7e37e43c 	.word	0x7e37e43c
 8007778:	8800759c 	.word	0x8800759c
 800777c:	fe37e43c 	.word	0xfe37e43c
 8007780:	c2f8f359 	.word	0xc2f8f359
 8007784:	81a56e1f 	.word	0x81a56e1f
 8007788:	43500000 	.word	0x43500000
 800778c:	ffff3cb0 	.word	0xffff3cb0
 8007790:	3c900000 	.word	0x3c900000
 8007794:	00000000 	.word	0x00000000

08007798 <floor>:
 8007798:	ec51 0b10 	vmov	r0, r1, d0
 800779c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80077a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 80077a8:	2e13      	cmp	r6, #19
 80077aa:	ee10 5a10 	vmov	r5, s0
 80077ae:	ee10 8a10 	vmov	r8, s0
 80077b2:	460c      	mov	r4, r1
 80077b4:	dc31      	bgt.n	800781a <floor+0x82>
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	da14      	bge.n	80077e4 <floor+0x4c>
 80077ba:	a333      	add	r3, pc, #204	; (adr r3, 8007888 <floor+0xf0>)
 80077bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c0:	f7f8 fd6c 	bl	800029c <__adddf3>
 80077c4:	2200      	movs	r2, #0
 80077c6:	2300      	movs	r3, #0
 80077c8:	f7f9 f9ae 	bl	8000b28 <__aeabi_dcmpgt>
 80077cc:	b138      	cbz	r0, 80077de <floor+0x46>
 80077ce:	2c00      	cmp	r4, #0
 80077d0:	da53      	bge.n	800787a <floor+0xe2>
 80077d2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80077d6:	4325      	orrs	r5, r4
 80077d8:	d052      	beq.n	8007880 <floor+0xe8>
 80077da:	4c2d      	ldr	r4, [pc, #180]	; (8007890 <floor+0xf8>)
 80077dc:	2500      	movs	r5, #0
 80077de:	4621      	mov	r1, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	e024      	b.n	800782e <floor+0x96>
 80077e4:	4f2b      	ldr	r7, [pc, #172]	; (8007894 <floor+0xfc>)
 80077e6:	4137      	asrs	r7, r6
 80077e8:	ea01 0307 	and.w	r3, r1, r7
 80077ec:	4303      	orrs	r3, r0
 80077ee:	d01e      	beq.n	800782e <floor+0x96>
 80077f0:	a325      	add	r3, pc, #148	; (adr r3, 8007888 <floor+0xf0>)
 80077f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f6:	f7f8 fd51 	bl	800029c <__adddf3>
 80077fa:	2200      	movs	r2, #0
 80077fc:	2300      	movs	r3, #0
 80077fe:	f7f9 f993 	bl	8000b28 <__aeabi_dcmpgt>
 8007802:	2800      	cmp	r0, #0
 8007804:	d0eb      	beq.n	80077de <floor+0x46>
 8007806:	2c00      	cmp	r4, #0
 8007808:	bfbe      	ittt	lt
 800780a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800780e:	4133      	asrlt	r3, r6
 8007810:	18e4      	addlt	r4, r4, r3
 8007812:	ea24 0407 	bic.w	r4, r4, r7
 8007816:	2500      	movs	r5, #0
 8007818:	e7e1      	b.n	80077de <floor+0x46>
 800781a:	2e33      	cmp	r6, #51	; 0x33
 800781c:	dd0b      	ble.n	8007836 <floor+0x9e>
 800781e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007822:	d104      	bne.n	800782e <floor+0x96>
 8007824:	ee10 2a10 	vmov	r2, s0
 8007828:	460b      	mov	r3, r1
 800782a:	f7f8 fd37 	bl	800029c <__adddf3>
 800782e:	ec41 0b10 	vmov	d0, r0, r1
 8007832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007836:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800783a:	f04f 37ff 	mov.w	r7, #4294967295
 800783e:	40df      	lsrs	r7, r3
 8007840:	4238      	tst	r0, r7
 8007842:	d0f4      	beq.n	800782e <floor+0x96>
 8007844:	a310      	add	r3, pc, #64	; (adr r3, 8007888 <floor+0xf0>)
 8007846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784a:	f7f8 fd27 	bl	800029c <__adddf3>
 800784e:	2200      	movs	r2, #0
 8007850:	2300      	movs	r3, #0
 8007852:	f7f9 f969 	bl	8000b28 <__aeabi_dcmpgt>
 8007856:	2800      	cmp	r0, #0
 8007858:	d0c1      	beq.n	80077de <floor+0x46>
 800785a:	2c00      	cmp	r4, #0
 800785c:	da0a      	bge.n	8007874 <floor+0xdc>
 800785e:	2e14      	cmp	r6, #20
 8007860:	d101      	bne.n	8007866 <floor+0xce>
 8007862:	3401      	adds	r4, #1
 8007864:	e006      	b.n	8007874 <floor+0xdc>
 8007866:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800786a:	2301      	movs	r3, #1
 800786c:	40b3      	lsls	r3, r6
 800786e:	441d      	add	r5, r3
 8007870:	45a8      	cmp	r8, r5
 8007872:	d8f6      	bhi.n	8007862 <floor+0xca>
 8007874:	ea25 0507 	bic.w	r5, r5, r7
 8007878:	e7b1      	b.n	80077de <floor+0x46>
 800787a:	2500      	movs	r5, #0
 800787c:	462c      	mov	r4, r5
 800787e:	e7ae      	b.n	80077de <floor+0x46>
 8007880:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007884:	e7ab      	b.n	80077de <floor+0x46>
 8007886:	bf00      	nop
 8007888:	8800759c 	.word	0x8800759c
 800788c:	7e37e43c 	.word	0x7e37e43c
 8007890:	bff00000 	.word	0xbff00000
 8007894:	000fffff 	.word	0x000fffff

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
