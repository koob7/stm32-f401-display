
stm32f401cdu6 - first test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000442c  08006a88  08006a88  00016a88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aeb4  0800aeb4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800aeb4  0800aeb4  0001aeb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aebc  0800aebc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aebc  0800aebc  0001aebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aec0  0800aec0  0001aec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800aec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001d4  0800b098  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  0800b098  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   000063a1  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b9  00000000  00000000  000265e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000640  00000000  00000000  00027ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000492  00000000  00000000  000281e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a65  00000000  00000000  0002867a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007f0b  00000000  00000000  0003f0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086442  00000000  00000000  00046fea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027b8  00000000  00000000  000cd42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000cfbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006a6c 	.word	0x08006a6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08006a6c 	.word	0x08006a6c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <tft_write_bus>:
GPIO_TypeDef* PORT_NAME_ARR[]={D0_PORT,D1_PORT,D2_PORT,D3_PORT,D4_PORT,D5_PORT,D6_PORT,D7_PORT,D8_PORT,D9_PORT,D10_PORT,D11_PORT,D12_PORT,D13_PORT,D14_PORT,D15_PORT};
uint16_t      PIN_NAME_ARR[]={D0_PIN,D1_PIN,D2_PIN,D3_PIN,D4_PIN,D5_PIN,D6_PIN,D7_PIN,D8_PIN,D9_PIN,D10_PIN,D11_PIN,D12_PIN,D13_PIN,D14_PIN,D15_PIN};


void tft_write_bus(uint8_t high_byte,uint8_t low_byte)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	460a      	mov	r2, r1
 8000ebe:	71fb      	strb	r3, [r7, #7]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	71bb      	strb	r3, [r7, #6]
    else
    {
      pin_low(PORT_NAME_ARR[i],PIN_NAME_ARR[i]);
    }
  }*/
	PORTA->ODR = (PORTA->ODR & 0xffffff00) | low_byte;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <tft_write_bus+0x54>)
 8000ec6:	695b      	ldr	r3, [r3, #20]
 8000ec8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000ecc:	79bb      	ldrb	r3, [r7, #6]
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <tft_write_bus+0x54>)
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	614b      	str	r3, [r1, #20]
	PORTB->ODR = (PORTB->ODR & 0xffffff00) | high_byte;
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <tft_write_bus+0x58>)
 8000ed6:	695b      	ldr	r3, [r3, #20]
 8000ed8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	490b      	ldr	r1, [pc, #44]	; (8000f0c <tft_write_bus+0x58>)
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	614b      	str	r3, [r1, #20]
	asm("nop");
 8000ee4:	bf00      	nop
	pin_low(WR_PORT,WR_PIN);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eec:	4807      	ldr	r0, [pc, #28]	; (8000f0c <tft_write_bus+0x58>)
 8000eee:	f002 fcc3 	bl	8003878 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef8:	4804      	ldr	r0, [pc, #16]	; (8000f0c <tft_write_bus+0x58>)
 8000efa:	f002 fcbd 	bl	8003878 <HAL_GPIO_WritePin>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40020000 	.word	0x40020000
 8000f0c:	40020400 	.word	0x40020400

08000f10 <Lcd_Write_Data>:



void Lcd_Write_Data(uint16_t data)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	80fb      	strh	r3, [r7, #6]

  tft_write_bus(data>>8,data&0x00ff);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	0a1b      	lsrs	r3, r3, #8
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	88fa      	ldrh	r2, [r7, #6]
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ffc3 	bl	8000eb4 <tft_write_bus>
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t data)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 8000f42:	2200      	movs	r2, #0
 8000f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <Lcd_Write_Cmd+0x40>)
 8000f4a:	f002 fc95 	bl	8003878 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000f4e:	88fb      	ldrh	r3, [r7, #6]
 8000f50:	0a1b      	lsrs	r3, r3, #8
 8000f52:	b29b      	uxth	r3, r3
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	88fa      	ldrh	r2, [r7, #6]
 8000f58:	b2d2      	uxtb	r2, r2
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff ffa9 	bl	8000eb4 <tft_write_bus>
  pin_high(RS_PORT,RS_PIN);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <Lcd_Write_Cmd+0x40>)
 8000f6a:	f002 fc85 	bl	8003878 <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020000 	.word	0x40020000

08000f7c <Lcd_SetArea>:


void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4604      	mov	r4, r0
 8000f84:	4608      	mov	r0, r1
 8000f86:	4611      	mov	r1, r2
 8000f88:	461a      	mov	r2, r3
 8000f8a:	4623      	mov	r3, r4
 8000f8c:	80fb      	strh	r3, [r7, #6]
 8000f8e:	4603      	mov	r3, r0
 8000f90:	80bb      	strh	r3, [r7, #4]
 8000f92:	460b      	mov	r3, r1
 8000f94:	807b      	strh	r3, [r7, #2]
 8000f96:	4613      	mov	r3, r2
 8000f98:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 8000f9a:	202a      	movs	r0, #42	; 0x2a
 8000f9c:	f7ff ffcc 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8000fa0:	88fb      	ldrh	r3, [r7, #6]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffb2 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ffac 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 8000fb8:	88bb      	ldrh	r3, [r7, #4]
 8000fba:	0a1b      	lsrs	r3, r3, #8
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ffa6 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8000fc4:	88bb      	ldrh	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff ffa0 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 8000fd0:	202b      	movs	r0, #43	; 0x2b
 8000fd2:	f7ff ffb1 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 8000fd6:	887b      	ldrh	r3, [r7, #2]
 8000fd8:	0a1b      	lsrs	r3, r3, #8
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff97 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff91 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8000fee:	883b      	ldrh	r3, [r7, #0]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ff8b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 8000ffa:	883b      	ldrh	r3, [r7, #0]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff85 	bl	8000f10 <Lcd_Write_Data>
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bd90      	pop	{r4, r7, pc}

0800100e <Lcd_SetPixel>:
                }
	}
}

void Lcd_SetPixel(int16_t x, int16_t y, int16_t color)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	80fb      	strh	r3, [r7, #6]
 8001018:	460b      	mov	r3, r1
 800101a:	80bb      	strh	r3, [r7, #4]
 800101c:	4613      	mov	r3, r2
 800101e:	807b      	strh	r3, [r7, #2]
Lcd_SetArea(x, x, y, y);
 8001020:	88f8      	ldrh	r0, [r7, #6]
 8001022:	88f9      	ldrh	r1, [r7, #6]
 8001024:	88ba      	ldrh	r2, [r7, #4]
 8001026:	88bb      	ldrh	r3, [r7, #4]
 8001028:	f7ff ffa8 	bl	8000f7c <Lcd_SetArea>
Lcd_Write_Cmd(0x2c);
 800102c:	202c      	movs	r0, #44	; 0x2c
 800102e:	f7ff ff83 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(color);
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	4618      	mov	r0, r3
 8001036:	f7ff ff6b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Cmd(0x0);
 800103a:	2000      	movs	r0, #0
 800103c:	f7ff ff7c 	bl	8000f38 <Lcd_Write_Cmd>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <Init_SSD1963>:



void Init_SSD1963(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0

	pin_high(CS_PORT,CS_PIN);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001052:	4875      	ldr	r0, [pc, #468]	; (8001228 <Init_SSD1963+0x1e0>)
 8001054:	f002 fc10 	bl	8003878 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800105e:	4873      	ldr	r0, [pc, #460]	; (800122c <Init_SSD1963+0x1e4>)
 8001060:	f002 fc0a 	bl	8003878 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800106a:	4870      	ldr	r0, [pc, #448]	; (800122c <Init_SSD1963+0x1e4>)
 800106c:	f002 fc04 	bl	8003878 <HAL_GPIO_WritePin>
	pin_low(REST_PORT,REST_PIN);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	486c      	ldr	r0, [pc, #432]	; (8001228 <Init_SSD1963+0x1e0>)
 8001078:	f002 fbfe 	bl	8003878 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 800107c:	2014      	movs	r0, #20
 800107e:	f002 f96d 	bl	800335c <HAL_Delay>
	pin_high(REST_PORT,REST_PIN);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001088:	4867      	ldr	r0, [pc, #412]	; (8001228 <Init_SSD1963+0x1e0>)
 800108a:	f002 fbf5 	bl	8003878 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800108e:	2014      	movs	r0, #20
 8001090:	f002 f964 	bl	800335c <HAL_Delay>
	pin_low(CS_PORT,CS_PIN);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 7100 	mov.w	r1, #512	; 0x200
 800109a:	4863      	ldr	r0, [pc, #396]	; (8001228 <Init_SSD1963+0x1e0>)
 800109c:	f002 fbec 	bl	8003878 <HAL_GPIO_WritePin>


Lcd_Write_Cmd(0xE2);		//PLL multiplier, set PLL clock to 120M
 80010a0:	20e2      	movs	r0, #226	; 0xe2
 80010a2:	f7ff ff49 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 80010a6:	2023      	movs	r0, #35	; 0x23
 80010a8:	f7ff ff32 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x02);
 80010ac:	2002      	movs	r0, #2
 80010ae:	f7ff ff2f 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x04);
 80010b2:	2004      	movs	r0, #4
 80010b4:	f7ff ff2c 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Cmd(0xE0);		// PLL enable
 80010b8:	20e0      	movs	r0, #224	; 0xe0
 80010ba:	f7ff ff3d 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);
 80010be:	2001      	movs	r0, #1
 80010c0:	f7ff ff26 	bl	8000f10 <Lcd_Write_Data>
HAL_Delay(10);
 80010c4:	200a      	movs	r0, #10
 80010c6:	f002 f949 	bl	800335c <HAL_Delay>
Lcd_Write_Cmd(0xE0);
 80010ca:	20e0      	movs	r0, #224	; 0xe0
 80010cc:	f7ff ff34 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 80010d0:	2003      	movs	r0, #3
 80010d2:	f7ff ff1d 	bl	8000f10 <Lcd_Write_Data>
HAL_Delay(10);
 80010d6:	200a      	movs	r0, #10
 80010d8:	f002 f940 	bl	800335c <HAL_Delay>
Lcd_Write_Cmd(0x01);		// software reset
 80010dc:	2001      	movs	r0, #1
 80010de:	f7ff ff2b 	bl	8000f38 <Lcd_Write_Cmd>
HAL_Delay(100);
 80010e2:	2064      	movs	r0, #100	; 0x64
 80010e4:	f002 f93a 	bl	800335c <HAL_Delay>
Lcd_Write_Cmd(0xE6);		//PLL setting for PCLK, depends on resolution
 80010e8:	20e6      	movs	r0, #230	; 0xe6
 80010ea:	f7ff ff25 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x04);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f7ff ff0e 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x93);
 80010f4:	2093      	movs	r0, #147	; 0x93
 80010f6:	f7ff ff0b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xE0);
 80010fa:	20e0      	movs	r0, #224	; 0xe0
 80010fc:	f7ff ff08 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB0);		//LCD SPECIFICATION
 8001100:	20b0      	movs	r0, #176	; 0xb0
 8001102:	f7ff ff19 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x00);		// 0x24
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ff02 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 800110c:	2000      	movs	r0, #0
 800110e:	f7ff feff 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x03);		//Set HDP	799
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fefc 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x1F);
 8001118:	201f      	movs	r0, #31
 800111a:	f7ff fef9 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//Set VDP	479
 800111e:	2001      	movs	r0, #1
 8001120:	f7ff fef6 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xDF);
 8001124:	20df      	movs	r0, #223	; 0xdf
 8001126:	f7ff fef3 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fef0 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB4);		//HSYNC
 8001130:	20b4      	movs	r0, #180	; 0xb4
 8001132:	f7ff ff01 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);		//Set HT	928
 8001136:	2003      	movs	r0, #3
 8001138:	f7ff feea 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xA0);
 800113c:	20a0      	movs	r0, #160	; 0xa0
 800113e:	f7ff fee7 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set HPS	46
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fee4 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x2E);
 8001148:	202e      	movs	r0, #46	; 0x2e
 800114a:	f7ff fee1 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x30);		//Set HPW	48
 800114e:	2030      	movs	r0, #48	; 0x30
 8001150:	f7ff fede 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set LPS	15
 8001154:	2000      	movs	r0, #0
 8001156:	f7ff fedb 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x0F);
 800115a:	200f      	movs	r0, #15
 800115c:	f7ff fed8 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001160:	2000      	movs	r0, #0
 8001162:	f7ff fed5 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB6);		//VSYNC
 8001166:	20b6      	movs	r0, #182	; 0xb6
 8001168:	f7ff fee6 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x02);		//Set VT	525
 800116c:	2002      	movs	r0, #2
 800116e:	f7ff fecf 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x0D);
 8001172:	200d      	movs	r0, #13
 8001174:	f7ff fecc 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set VPS	16
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff fec9 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x10);
 800117e:	2010      	movs	r0, #16
 8001180:	f7ff fec6 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x10);		//Set VPW	16
 8001184:	2010      	movs	r0, #16
 8001186:	f7ff fec3 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set FPS	8
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fec0 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x08);
 8001190:	2008      	movs	r0, #8
 8001192:	f7ff febd 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xBA);
 8001196:	20ba      	movs	r0, #186	; 0xba
 8001198:	f7ff fece 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x05);		//GPIO[3:0] out 1
 800119c:	2005      	movs	r0, #5
 800119e:	f7ff feb7 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB8);
 80011a2:	20b8      	movs	r0, #184	; 0xb8
 80011a4:	f7ff fec8 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x07);	    //GPIO3=input, GPIO[2:0]=output
 80011a8:	2007      	movs	r0, #7
 80011aa:	f7ff feb1 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//GPIO0 normal
 80011ae:	2001      	movs	r0, #1
 80011b0:	f7ff feae 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xba);		//rotation
 80011b4:	20ba      	movs	r0, #186	; 0xba
 80011b6:	f7ff febf 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 80011ba:	2001      	movs	r0, #1
 80011bc:	f7ff fea8 	bl	8000f10 <Lcd_Write_Data>


Lcd_Write_Cmd(0xF0);		//pixel data interface
 80011c0:	20f0      	movs	r0, #240	; 0xf0
 80011c2:	f7ff feb9 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 80011c6:	2003      	movs	r0, #3
 80011c8:	f7ff fea2 	bl	8000f10 <Lcd_Write_Data>


HAL_Delay(10);
 80011cc:	200a      	movs	r0, #10
 80011ce:	f002 f8c5 	bl	800335c <HAL_Delay>

Lcd_SetArea(0, 0, 799, 479);
 80011d2:	f240 13df 	movw	r3, #479	; 0x1df
 80011d6:	f240 321f 	movw	r2, #799	; 0x31f
 80011da:	2100      	movs	r1, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fecd 	bl	8000f7c <Lcd_SetArea>
Lcd_Write_Cmd(0x29);		//display on
 80011e2:	2029      	movs	r0, #41	; 0x29
 80011e4:	f7ff fea8 	bl	8000f38 <Lcd_Write_Cmd>

Lcd_Write_Cmd(0xBE);		//set PWM for B/L
 80011e8:	20be      	movs	r0, #190	; 0xbe
 80011ea:	f7ff fea5 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x06);
 80011ee:	2006      	movs	r0, #6
 80011f0:	f7ff fe8e 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 80011f4:	20f0      	movs	r0, #240	; 0xf0
 80011f6:	f7ff fe8b 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x01);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff fe88 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 8001200:	20f0      	movs	r0, #240	; 0xf0
 8001202:	f7ff fe85 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff fe82 	bl	8000f10 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 800120c:	2000      	movs	r0, #0
 800120e:	f7ff fe7f 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0xD0);
 8001212:	20d0      	movs	r0, #208	; 0xd0
 8001214:	f7ff fe90 	bl	8000f38 <Lcd_Write_Cmd>
Lcd_Write_Data(0x0D);
 8001218:	200d      	movs	r0, #13
 800121a:	f7ff fe79 	bl	8000f10 <Lcd_Write_Data>

Lcd_Write_Cmd(0x2C);
 800121e:	202c      	movs	r0, #44	; 0x2c
 8001220:	f7ff fe8a 	bl	8000f38 <Lcd_Write_Cmd>

}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40020000 	.word	0x40020000
 800122c:	40020400 	.word	0x40020400

08001230 <TFT_Set_X>:



void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	460a      	mov	r2, r1
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	4613      	mov	r3, r2
 800123e:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002A);
 8001240:	202a      	movs	r0, #42	; 0x2a
 8001242:	f7ff fe79 	bl	8000f38 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_x>>8);
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	b29b      	uxth	r3, r3
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe5f 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(start_x&0x00ff);
 8001252:	88fb      	ldrh	r3, [r7, #6]
 8001254:	b2db      	uxtb	r3, r3
 8001256:	b29b      	uxth	r3, r3
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fe59 	bl	8000f10 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_x>>8);
 800125e:	88bb      	ldrh	r3, [r7, #4]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	b29b      	uxth	r3, r3
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe53 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(end_x&0x00ff);
 800126a:	88bb      	ldrh	r3, [r7, #4]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe4d 	bl	8000f10 <Lcd_Write_Data>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <TFT_Set_Y>:


void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	460a      	mov	r2, r1
 8001288:	80fb      	strh	r3, [r7, #6]
 800128a:	4613      	mov	r3, r2
 800128c:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002B);
 800128e:	202b      	movs	r0, #43	; 0x2b
 8001290:	f7ff fe52 	bl	8000f38 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_y>>8);
 8001294:	88fb      	ldrh	r3, [r7, #6]
 8001296:	0a1b      	lsrs	r3, r3, #8
 8001298:	b29b      	uxth	r3, r3
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe38 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(start_y&0x00ff);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fe32 	bl	8000f10 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_y>>8);
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	0a1b      	lsrs	r3, r3, #8
 80012b0:	b29b      	uxth	r3, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fe2c 	bl	8000f10 <Lcd_Write_Data>
	Lcd_Write_Data(end_y&0x00ff);
 80012b8:	88bb      	ldrh	r3, [r7, #4]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe26 	bl	8000f10 <Lcd_Write_Data>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <TFT_Set_Work_Area>:
}



void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4604      	mov	r4, r0
 80012d4:	4608      	mov	r0, r1
 80012d6:	4611      	mov	r1, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4623      	mov	r3, r4
 80012dc:	80fb      	strh	r3, [r7, #6]
 80012de:	4603      	mov	r3, r0
 80012e0:	80bb      	strh	r3, [r7, #4]
 80012e2:	460b      	mov	r3, r1
 80012e4:	807b      	strh	r3, [r7, #2]
 80012e6:	4613      	mov	r3, r2
 80012e8:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80012ea:	88fa      	ldrh	r2, [r7, #6]
 80012ec:	887b      	ldrh	r3, [r7, #2]
 80012ee:	4413      	add	r3, r2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	3b01      	subs	r3, #1
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	88fb      	ldrh	r3, [r7, #6]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff98 	bl	8001230 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	4413      	add	r3, r2
 8001306:	b29b      	uxth	r3, r3
 8001308:	3b01      	subs	r3, #1
 800130a:	b29a      	uxth	r2, r3
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ffb4 	bl	800127e <TFT_Set_Y>
	Lcd_Write_Cmd(0x2C);
 8001316:	202c      	movs	r0, #44	; 0x2c
 8001318:	f7ff fe0e 	bl	8000f38 <Lcd_Write_Cmd>
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}

08001324 <TFT_Clear_Screen>:




void TFT_Clear_Screen(uint16_t color)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 8001332:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001336:	f44f 7248 	mov.w	r2, #800	; 0x320
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff ffc5 	bl	80012cc <TFT_Set_Work_Area>

	for(i=0; i < 384000; i++)
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e00c      	b.n	8001362 <TFT_Clear_Screen+0x3e>
	{
		  tft_write_bus(color>>8,color&0x00ff);
 8001348:	88fb      	ldrh	r3, [r7, #6]
 800134a:	0a1b      	lsrs	r3, r3, #8
 800134c:	b29b      	uxth	r3, r3
 800134e:	b2db      	uxtb	r3, r3
 8001350:	88fa      	ldrh	r2, [r7, #6]
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	4611      	mov	r1, r2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fdac 	bl	8000eb4 <tft_write_bus>
	for(i=0; i < 384000; i++)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	3301      	adds	r3, #1
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4a03      	ldr	r2, [pc, #12]	; (8001374 <TFT_Clear_Screen+0x50>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d9ee      	bls.n	8001348 <TFT_Clear_Screen+0x24>
	}
}
 800136a:	bf00      	nop
 800136c:	bf00      	nop
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	0005dbff 	.word	0x0005dbff

08001378 <TFT_Draw_HLine>:
	}
}


void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	4611      	mov	r1, r2
 8001384:	461a      	mov	r2, r3
 8001386:	4623      	mov	r3, r4
 8001388:	80fb      	strh	r3, [r7, #6]
 800138a:	4603      	mov	r3, r0
 800138c:	80bb      	strh	r3, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]
 8001392:	4613      	mov	r3, r2
 8001394:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	887a      	ldrh	r2, [r7, #2]
 800139e:	88b9      	ldrh	r1, [r7, #4]
 80013a0:	88f8      	ldrh	r0, [r7, #6]
 80013a2:	f7ff ff93 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	81fb      	strh	r3, [r7, #14]
 80013aa:	e006      	b.n	80013ba <TFT_Draw_HLine+0x42>
	Lcd_Write_Data(color);
 80013ac:	8c3b      	ldrh	r3, [r7, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fdae 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 80013b4:	89fb      	ldrh	r3, [r7, #14]
 80013b6:	3301      	adds	r3, #1
 80013b8:	81fb      	strh	r3, [r7, #14]
 80013ba:	89fa      	ldrh	r2, [r7, #14]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	8839      	ldrh	r1, [r7, #0]
 80013c0:	fb01 f303 	mul.w	r3, r1, r3
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dbf1      	blt.n	80013ac <TFT_Draw_HLine+0x34>
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}

080013d2 <TFT_Set_Read_Area>:

void TFT_Set_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 80013d2:	b590      	push	{r4, r7, lr}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	4604      	mov	r4, r0
 80013da:	4608      	mov	r0, r1
 80013dc:	4611      	mov	r1, r2
 80013de:	461a      	mov	r2, r3
 80013e0:	4623      	mov	r3, r4
 80013e2:	80fb      	strh	r3, [r7, #6]
 80013e4:	4603      	mov	r3, r0
 80013e6:	80bb      	strh	r3, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	887b      	ldrh	r3, [r7, #2]
 80013f4:	4413      	add	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff15 	bl	8001230 <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 8001406:	88ba      	ldrh	r2, [r7, #4]
 8001408:	883b      	ldrh	r3, [r7, #0]
 800140a:	4413      	add	r3, r2
 800140c:	b29b      	uxth	r3, r3
 800140e:	3b01      	subs	r3, #1
 8001410:	b29a      	uxth	r2, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	4611      	mov	r1, r2
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff31 	bl	800127e <TFT_Set_Y>
	Lcd_Write_Cmd(0x2E);
 800141c:	202e      	movs	r0, #46	; 0x2e
 800141e:	f7ff fd8b 	bl	8000f38 <Lcd_Write_Cmd>
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	bd90      	pop	{r4, r7, pc}

0800142a <TFT_Draw_List>:

uint16_t TFT_Draw_List(uint16_t x, uint16_t y, uint16_t width, char *title, char * options,  uint16_t *save, const GFXfont *p_font)
{
 800142a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142e:	b093      	sub	sp, #76	; 0x4c
 8001430:	af04      	add	r7, sp, #16
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	4603      	mov	r3, r0
 8001436:	82fb      	strh	r3, [r7, #22]
 8001438:	460b      	mov	r3, r1
 800143a:	82bb      	strh	r3, [r7, #20]
 800143c:	4613      	mov	r3, r2
 800143e:	827b      	strh	r3, [r7, #18]
 8001440:	466b      	mov	r3, sp
 8001442:	60bb      	str	r3, [r7, #8]
	uint16_t height=47+1+34;
 8001444:	2352      	movs	r3, #82	; 0x52
 8001446:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t counter = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t start=0;
 800144c:	2300      	movs	r3, #0
 800144e:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t line_y_pos=y+48;
 8001450:	8abb      	ldrh	r3, [r7, #20]
 8001452:	3330      	adds	r3, #48	; 0x30
 8001454:	867b      	strh	r3, [r7, #50]	; 0x32

	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 8001456:	2300      	movs	r3, #0
 8001458:	863b      	strh	r3, [r7, #48]	; 0x30
 800145a:	e00b      	b.n	8001474 <TFT_Draw_List+0x4a>
	{
		if (options[text_pos ]== ' ')
 800145c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800145e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001460:	4413      	add	r3, r2
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b20      	cmp	r3, #32
 8001466:	d102      	bne.n	800146e <TFT_Draw_List+0x44>
			counter+=1;
 8001468:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800146a:	3301      	adds	r3, #1
 800146c:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 800146e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001470:	3301      	adds	r3, #1
 8001472:	863b      	strh	r3, [r7, #48]	; 0x30
 8001474:	8e3c      	ldrh	r4, [r7, #48]	; 0x30
 8001476:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001478:	f7fe ff02 	bl	8000280 <strlen>
 800147c:	4603      	mov	r3, r0
 800147e:	429c      	cmp	r4, r3
 8001480:	d3ec      	bcc.n	800145c <TFT_Draw_List+0x32>
	}

	height+=35*counter;
 8001482:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001484:	461a      	mov	r2, r3
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	4413      	add	r3, r2
 800148a:	461a      	mov	r2, r3
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b29a      	uxth	r2, r3
 8001492:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001494:	4413      	add	r3, r2
 8001496:	85bb      	strh	r3, [r7, #44]	; 0x2c
	lcd_Read_Area(x, y, width, height, save);
 8001498:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 800149a:	8a7a      	ldrh	r2, [r7, #18]
 800149c:	8ab9      	ldrh	r1, [r7, #20]
 800149e:	8af8      	ldrh	r0, [r7, #22]
 80014a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80014a2:	9300      	str	r3, [sp, #0]
 80014a4:	4623      	mov	r3, r4
 80014a6:	f000 f9af 	bl	8001808 <lcd_Read_Area>
	TFT_Draw_Fill_Round_Rect (x, y, width, height, 20,  0xDEDB);
 80014aa:	8dbc      	ldrh	r4, [r7, #44]	; 0x2c
 80014ac:	8a7a      	ldrh	r2, [r7, #18]
 80014ae:	8ab9      	ldrh	r1, [r7, #20]
 80014b0:	8af8      	ldrh	r0, [r7, #22]
 80014b2:	f64d 63db 	movw	r3, #57051	; 0xdedb
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	2314      	movs	r3, #20
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	4623      	mov	r3, r4
 80014be:	f000 fb7e 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	LCD_centered_Font (x, y+23,  width, title, p_font, 2,  BLACK);
 80014c2:	8abb      	ldrh	r3, [r7, #20]
 80014c4:	3317      	adds	r3, #23
 80014c6:	b299      	uxth	r1, r3
 80014c8:	8a7a      	ldrh	r2, [r7, #18]
 80014ca:	8af8      	ldrh	r0, [r7, #22]
 80014cc:	2300      	movs	r3, #0
 80014ce:	9302      	str	r3, [sp, #8]
 80014d0:	2302      	movs	r3, #2
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f000 fc8a 	bl	8001df2 <LCD_centered_Font>
	TFT_Draw_HLine(x, line_y_pos, width,  1, 	0xB5B6);
 80014de:	8a7a      	ldrh	r2, [r7, #18]
 80014e0:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80014e2:	8af8      	ldrh	r0, [r7, #22]
 80014e4:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2301      	movs	r3, #1
 80014ec:	f7ff ff44 	bl	8001378 <TFT_Draw_HLine>
	while(counter>0)
 80014f0:	e00e      	b.n	8001510 <TFT_Draw_List+0xe6>
	{
		line_y_pos+=35;
 80014f2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80014f4:	3323      	adds	r3, #35	; 0x23
 80014f6:	867b      	strh	r3, [r7, #50]	; 0x32
		TFT_Draw_HLine(x, line_y_pos, width,  1, 	0xB5B6);
 80014f8:	8a7a      	ldrh	r2, [r7, #18]
 80014fa:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80014fc:	8af8      	ldrh	r0, [r7, #22]
 80014fe:	f24b 53b6 	movw	r3, #46518	; 0xb5b6
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2301      	movs	r3, #1
 8001506:	f7ff ff37 	bl	8001378 <TFT_Draw_HLine>
		counter-=1;
 800150a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800150c:	3b01      	subs	r3, #1
 800150e:	86fb      	strh	r3, [r7, #54]	; 0x36
	while(counter>0)
 8001510:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001512:	2b00      	cmp	r3, #0
 8001514:	d1ed      	bne.n	80014f2 <TFT_Draw_List+0xc8>
	}
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 8001516:	2300      	movs	r3, #0
 8001518:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800151a:	e061      	b.n	80015e0 <TFT_Draw_List+0x1b6>
	{
		if (options[text_pos ]== ' ')
 800151c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800151e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001520:	4413      	add	r3, r2
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b20      	cmp	r3, #32
 8001526:	d158      	bne.n	80015da <TFT_Draw_List+0x1b0>
		{
 8001528:	466b      	mov	r3, sp
 800152a:	461c      	mov	r4, r3
/*			char temp[50];
			strncpy(temp, options + start, text_pos - start);
			temp[text_pos - start] = '\0'; // Dodanie zakończenia ciągu
			 LCD_centered_Font(x, y + 47 + 17 + counter * 35, width, temp, p_font, 1,  BLACK);*/
			char newString[text_pos-start];
 800152c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800152e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001530:	1ad1      	subs	r1, r2, r3
 8001532:	1e4b      	subs	r3, r1, #1
 8001534:	623b      	str	r3, [r7, #32]
 8001536:	460a      	mov	r2, r1
 8001538:	2300      	movs	r3, #0
 800153a:	4615      	mov	r5, r2
 800153c:	461e      	mov	r6, r3
 800153e:	f04f 0200 	mov.w	r2, #0
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	00f3      	lsls	r3, r6, #3
 8001548:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 800154c:	00ea      	lsls	r2, r5, #3
 800154e:	460a      	mov	r2, r1
 8001550:	2300      	movs	r3, #0
 8001552:	603a      	str	r2, [r7, #0]
 8001554:	607b      	str	r3, [r7, #4]
 8001556:	f04f 0200 	mov.w	r2, #0
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	00c3      	lsls	r3, r0, #3
 8001562:	6838      	ldr	r0, [r7, #0]
 8001564:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	00c2      	lsls	r2, r0, #3
 800156c:	460b      	mov	r3, r1
 800156e:	3307      	adds	r3, #7
 8001570:	08db      	lsrs	r3, r3, #3
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	ebad 0d03 	sub.w	sp, sp, r3
 8001578:	ab04      	add	r3, sp, #16
 800157a:	3300      	adds	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
			memcpy(newString, options+start*sizeof(char), text_pos-start);
 800157e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001582:	18d1      	adds	r1, r2, r3
 8001584:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001586:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	461a      	mov	r2, r3
 800158c:	69f8      	ldr	r0, [r7, #28]
 800158e:	f003 fc60 	bl	8004e52 <memcpy>
			newString[text_pos - start] = '\0';
 8001592:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001594:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	69fa      	ldr	r2, [r7, #28]
 800159a:	2100      	movs	r1, #0
 800159c:	54d1      	strb	r1, [r2, r3]
		    LCD_centered_Font (x, y+47+17+counter*35,  width, newString, p_font, 1,  BLACK);
 800159e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015a0:	461a      	mov	r2, r3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4413      	add	r3, r2
 80015a6:	461a      	mov	r2, r3
 80015a8:	00d2      	lsls	r2, r2, #3
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	8abb      	ldrh	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	3340      	adds	r3, #64	; 0x40
 80015b6:	b299      	uxth	r1, r3
 80015b8:	8a7a      	ldrh	r2, [r7, #18]
 80015ba:	8af8      	ldrh	r0, [r7, #22]
 80015bc:	2300      	movs	r3, #0
 80015be:	9302      	str	r3, [sp, #8]
 80015c0:	2301      	movs	r3, #1
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f000 fc12 	bl	8001df2 <LCD_centered_Font>
			start=text_pos;
 80015ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015d0:	86bb      	strh	r3, [r7, #52]	; 0x34
			counter+=1;
 80015d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80015d4:	3301      	adds	r3, #1
 80015d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80015d8:	46a5      	mov	sp, r4
	for(uint16_t text_pos = 0; text_pos < strlen(options); text_pos++)
 80015da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80015dc:	3301      	adds	r3, #1
 80015de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80015e0:	8dfc      	ldrh	r4, [r7, #46]	; 0x2e
 80015e2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015e4:	f7fe fe4c 	bl	8000280 <strlen>
 80015e8:	4603      	mov	r3, r0
 80015ea:	429c      	cmp	r4, r3
 80015ec:	d396      	bcc.n	800151c <TFT_Draw_List+0xf2>
		}
	}
	char newString[strlen(options)-start];
 80015ee:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80015f0:	f7fe fe46 	bl	8000280 <strlen>
 80015f4:	4602      	mov	r2, r0
 80015f6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80015f8:	1ad1      	subs	r1, r2, r3
 80015fa:	460b      	mov	r3, r1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001600:	2300      	movs	r3, #0
 8001602:	468a      	mov	sl, r1
 8001604:	469b      	mov	fp, r3
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001612:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001616:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800161a:	2300      	movs	r3, #0
 800161c:	4688      	mov	r8, r1
 800161e:	4699      	mov	r9, r3
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800162c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001630:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001634:	1dcb      	adds	r3, r1, #7
 8001636:	08db      	lsrs	r3, r3, #3
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	ebad 0d03 	sub.w	sp, sp, r3
 800163e:	ab04      	add	r3, sp, #16
 8001640:	3300      	adds	r3, #0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
	memcpy(newString, options+start*sizeof(char), strlen(options)-start);
 8001644:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001646:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001648:	18d4      	adds	r4, r2, r3
 800164a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800164c:	f7fe fe18 	bl	8000280 <strlen>
 8001650:	4602      	mov	r2, r0
 8001652:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	461a      	mov	r2, r3
 8001658:	4621      	mov	r1, r4
 800165a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800165c:	f003 fbf9 	bl	8004e52 <memcpy>
	newString[strlen(options) - start] = '\0';
 8001660:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8001662:	f7fe fe0d 	bl	8000280 <strlen>
 8001666:	4602      	mov	r2, r0
 8001668:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800166e:	2100      	movs	r1, #0
 8001670:	54d1      	strb	r1, [r2, r3]
    LCD_centered_Font (x, y+47+17+counter*35,  width, newString, p_font, 1,  BLACK);
 8001672:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001674:	461a      	mov	r2, r3
 8001676:	0092      	lsls	r2, r2, #2
 8001678:	4413      	add	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	00d2      	lsls	r2, r2, #3
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	b29a      	uxth	r2, r3
 8001682:	8abb      	ldrh	r3, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	3340      	adds	r3, #64	; 0x40
 800168a:	b299      	uxth	r1, r3
 800168c:	8a7a      	ldrh	r2, [r7, #18]
 800168e:	8af8      	ldrh	r0, [r7, #22]
 8001690:	2300      	movs	r3, #0
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2301      	movs	r3, #1
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	f000 fba8 	bl	8001df2 <LCD_centered_Font>
	//LCD_centered_Font (x, y+47+17+counter*35,  length, memcopy(options, start, strlen(options)), p_font, 1,  BLACK);

	return counter;
 80016a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80016a4:	f8d7 d008 	ldr.w	sp, [r7, #8]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	373c      	adds	r7, #60	; 0x3c
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080016b4 <TFT_Draw_Alert>:

void TFT_Draw_Alert (uint16_t length, uint16_t width, char *text,  uint16_t *save, const GFXfont *p_font)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b089      	sub	sp, #36	; 0x24
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	60ba      	str	r2, [r7, #8]
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4603      	mov	r3, r0
 80016c0:	81fb      	strh	r3, [r7, #14]
 80016c2:	460b      	mov	r3, r1
 80016c4:	81bb      	strh	r3, [r7, #12]


	lcd_Read_Area(TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, width, save);
 80016c6:	89fb      	ldrh	r3, [r7, #14]
 80016c8:	085b      	lsrs	r3, r3, #1
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80016d0:	b298      	uxth	r0, r3
 80016d2:	89bb      	ldrh	r3, [r7, #12]
 80016d4:	085b      	lsrs	r3, r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80016dc:	b299      	uxth	r1, r3
 80016de:	89bc      	ldrh	r4, [r7, #12]
 80016e0:	89fa      	ldrh	r2, [r7, #14]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	4623      	mov	r3, r4
 80016e8:	f000 f88e 	bl	8001808 <lcd_Read_Area>
    TFT_Draw_Fill_Round_Rect (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, width, 20,  0xd699);
 80016ec:	89fb      	ldrh	r3, [r7, #14]
 80016ee:	085b      	lsrs	r3, r3, #1
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80016f6:	b298      	uxth	r0, r3
 80016f8:	89bb      	ldrh	r3, [r7, #12]
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001702:	b299      	uxth	r1, r3
 8001704:	89bb      	ldrh	r3, [r7, #12]
 8001706:	89fa      	ldrh	r2, [r7, #14]
 8001708:	f24d 6499 	movw	r4, #54937	; 0xd699
 800170c:	9401      	str	r4, [sp, #4]
 800170e:	2414      	movs	r4, #20
 8001710:	9400      	str	r4, [sp, #0]
 8001712:	f000 fa54 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
    TFT_Draw_Fill_Round_Rect (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, 60, 20,  0xe266);
 8001716:	89fb      	ldrh	r3, [r7, #14]
 8001718:	085b      	lsrs	r3, r3, #1
 800171a:	b29b      	uxth	r3, r3
 800171c:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001720:	b298      	uxth	r0, r3
 8001722:	89bb      	ldrh	r3, [r7, #12]
 8001724:	085b      	lsrs	r3, r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800172c:	b299      	uxth	r1, r3
 800172e:	89fa      	ldrh	r2, [r7, #14]
 8001730:	f24e 2366 	movw	r3, #57958	; 0xe266
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	2314      	movs	r3, #20
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	233c      	movs	r3, #60	; 0x3c
 800173c:	f000 fa3f 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
    //LCD_Font(TFT_WIDTH/2-30, TFT_HEIGHT/2-(width/2)+40, "ALERT", p_font, 1, BLACK);
    LCD_centered_Font (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2)+30,  length, "ALERT", p_font, 2,  BLACK);
 8001740:	89fb      	ldrh	r3, [r7, #14]
 8001742:	085b      	lsrs	r3, r3, #1
 8001744:	b29b      	uxth	r3, r3
 8001746:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800174a:	b298      	uxth	r0, r3
 800174c:	89bb      	ldrh	r3, [r7, #12]
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	f5c3 7387 	rsb	r3, r3, #270	; 0x10e
 8001756:	b299      	uxth	r1, r3
 8001758:	89fa      	ldrh	r2, [r7, #14]
 800175a:	2300      	movs	r3, #0
 800175c:	9302      	str	r3, [sp, #8]
 800175e:	2302      	movs	r3, #2
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <TFT_Draw_Alert+0xec>)
 8001768:	f000 fb43 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2)+80,  length,  text, p_font, 1,  BLACK);
 800176c:	89fb      	ldrh	r3, [r7, #14]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8001776:	b298      	uxth	r0, r3
 8001778:	89bb      	ldrh	r3, [r7, #12]
 800177a:	085b      	lsrs	r3, r3, #1
 800177c:	b29b      	uxth	r3, r3
 800177e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8001782:	b299      	uxth	r1, r3
 8001784:	89fa      	ldrh	r2, [r7, #14]
 8001786:	2300      	movs	r3, #0
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2301      	movs	r3, #1
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	f000 fb2d 	bl	8001df2 <LCD_centered_Font>

}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	08006a88 	.word	0x08006a88

080017a4 <TFT_Restore_Area>:

void TFT_Restore_Area (uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 80017a4:	b590      	push	{r4, r7, lr}
 80017a6:	b085      	sub	sp, #20
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	4604      	mov	r4, r0
 80017ac:	4608      	mov	r0, r1
 80017ae:	4611      	mov	r1, r2
 80017b0:	461a      	mov	r2, r3
 80017b2:	4623      	mov	r3, r4
 80017b4:	80fb      	strh	r3, [r7, #6]
 80017b6:	4603      	mov	r3, r0
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	460b      	mov	r3, r1
 80017bc:	807b      	strh	r3, [r7, #2]
 80017be:	4613      	mov	r3, r2
 80017c0:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(x, y, length, width);
 80017c6:	883b      	ldrh	r3, [r7, #0]
 80017c8:	887a      	ldrh	r2, [r7, #2]
 80017ca:	88b9      	ldrh	r1, [r7, #4]
 80017cc:	88f8      	ldrh	r0, [r7, #6]
 80017ce:	f7ff fd7d 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	e00a      	b.n	80017ee <TFT_Restore_Area+0x4a>
	{
		Lcd_Write_Data(save[i]);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	4413      	add	r3, r2
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fb94 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	3301      	adds	r3, #1
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	883a      	ldrh	r2, [r7, #0]
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	461a      	mov	r2, r3
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d3ec      	bcc.n	80017d8 <TFT_Restore_Area+0x34>
	}
}
 80017fe:	bf00      	nop
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}

08001808 <lcd_Read_Area>:

void lcd_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	4604      	mov	r4, r0
 8001810:	4608      	mov	r0, r1
 8001812:	4611      	mov	r1, r2
 8001814:	461a      	mov	r2, r3
 8001816:	4623      	mov	r3, r4
 8001818:	80fb      	strh	r3, [r7, #6]
 800181a:	4603      	mov	r3, r0
 800181c:	80bb      	strh	r3, [r7, #4]
 800181e:	460b      	mov	r3, r1
 8001820:	807b      	strh	r3, [r7, #2]
 8001822:	4613      	mov	r3, r2
 8001824:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
	TFT_Set_Read_Area(x, y, length, width);
 800182a:	883b      	ldrh	r3, [r7, #0]
 800182c:	887a      	ldrh	r2, [r7, #2]
 800182e:	88b9      	ldrh	r1, [r7, #4]
 8001830:	88f8      	ldrh	r0, [r7, #6]
 8001832:	f7ff fdce 	bl	80013d2 <TFT_Set_Read_Area>
	PORTA->MODER = (PORTA->MODER & 0xffff0000);
 8001836:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <lcd_Read_Area+0x9c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1a      	ldr	r2, [pc, #104]	; (80018a4 <lcd_Read_Area+0x9c>)
 800183c:	0c1b      	lsrs	r3, r3, #16
 800183e:	041b      	lsls	r3, r3, #16
 8001840:	6013      	str	r3, [r2, #0]
	PORTB->MODER = (PORTB->MODER & 0xffff0000);
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <lcd_Read_Area+0xa0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <lcd_Read_Area+0xa0>)
 8001848:	0c1b      	lsrs	r3, r3, #16
 800184a:	041b      	lsls	r3, r3, #16
 800184c:	6013      	str	r3, [r2, #0]


	for(i=0; i < length*width; i++)
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	e00a      	b.n	800186a <lcd_Read_Area+0x62>
	{
		save[i] = lcd_Read_bus();
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	6a3a      	ldr	r2, [r7, #32]
 800185a:	18d4      	adds	r4, r2, r3
 800185c:	f000 f826 	bl	80018ac <lcd_Read_bus>
 8001860:	4603      	mov	r3, r0
 8001862:	8023      	strh	r3, [r4, #0]
	for(i=0; i < length*width; i++)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	3301      	adds	r3, #1
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	883a      	ldrh	r2, [r7, #0]
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4293      	cmp	r3, r2
 8001878:	d3ec      	bcc.n	8001854 <lcd_Read_Area+0x4c>
	}

	PORTA->MODER = (PORTA->MODER | 0x00005555);
 800187a:	4b0a      	ldr	r3, [pc, #40]	; (80018a4 <lcd_Read_Area+0x9c>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <lcd_Read_Area+0x9c>)
 8001880:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001884:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001888:	6013      	str	r3, [r2, #0]
	PORTB->MODER = (PORTB->MODER | 0x00005555);
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <lcd_Read_Area+0xa0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <lcd_Read_Area+0xa0>)
 8001890:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001894:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001898:	6013      	str	r3, [r2, #0]
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400

080018ac <lcd_Read_bus>:

uint16_t lcd_Read_bus()
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0

	pin_low(RD_PORT,RD_PIN);
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <lcd_Read_bus+0x44>)
 80018ba:	f001 ffdd 	bl	8003878 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 80018be:	2201      	movs	r2, #1
 80018c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018c4:	480a      	ldr	r0, [pc, #40]	; (80018f0 <lcd_Read_bus+0x44>)
 80018c6:	f001 ffd7 	bl	8003878 <HAL_GPIO_WritePin>
	uint8_t high_byte =PORTB->IDR ;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <lcd_Read_bus+0x44>)
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	71fb      	strb	r3, [r7, #7]
	uint8_t low_byte =PORTA->IDR ;
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <lcd_Read_bus+0x48>)
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	71bb      	strb	r3, [r7, #6]


/*	uint8_t low_byte =0 ;
	uint8_t high_byte =0 ;*/

	return ((high_byte<<8)|low_byte);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	b21a      	sxth	r2, r3
 80018dc:	79bb      	ldrb	r3, [r7, #6]
 80018de:	b21b      	sxth	r3, r3
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	b29b      	uxth	r3, r3
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40020400 	.word	0x40020400
 80018f4:	40020000 	.word	0x40020000

080018f8 <TFT_Draw_Bitmap_Without_Background>:

void TFT_Draw_Bitmap_Without_Background(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t *array)
{
 80018f8:	b590      	push	{r4, r7, lr}
 80018fa:	b087      	sub	sp, #28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4604      	mov	r4, r0
 8001900:	4608      	mov	r0, r1
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	4623      	mov	r3, r4
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4603      	mov	r3, r0
 800190c:	80bb      	strh	r3, [r7, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	807b      	strh	r3, [r7, #2]
 8001912:	4613      	mov	r3, r2
 8001914:	803b      	strh	r3, [r7, #0]
	uint16_t color, color_R, color_G, color_B;
	for(int i =0;i<height;i+=1)
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	e03e      	b.n	800199a <TFT_Draw_Bitmap_Without_Background+0xa2>
	{
		for(int b =0;b<width;b+=1)
 800191c:	2300      	movs	r3, #0
 800191e:	613b      	str	r3, [r7, #16]
 8001920:	e034      	b.n	800198c <TFT_Draw_Bitmap_Without_Background+0x94>
		{
			color=array[i*width+b];
 8001922:	887b      	ldrh	r3, [r7, #2]
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	fb03 f202 	mul.w	r2, r3, r2
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001932:	4413      	add	r3, r2
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	81fb      	strh	r3, [r7, #14]
			color_R=(0xF800&color)>>11;
 8001938:	89fb      	ldrh	r3, [r7, #14]
 800193a:	0adb      	lsrs	r3, r3, #11
 800193c:	81bb      	strh	r3, [r7, #12]
			color_G=(0x7E0&color)>>5;
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	095b      	lsrs	r3, r3, #5
 8001942:	b29b      	uxth	r3, r3
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	817b      	strh	r3, [r7, #10]
			color_B=0x1F&color;
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	813b      	strh	r3, [r7, #8]
			if (!(color_R>26&&color_G>53&&color_B>26))
 8001952:	89bb      	ldrh	r3, [r7, #12]
 8001954:	2b1a      	cmp	r3, #26
 8001956:	d905      	bls.n	8001964 <TFT_Draw_Bitmap_Without_Background+0x6c>
 8001958:	897b      	ldrh	r3, [r7, #10]
 800195a:	2b35      	cmp	r3, #53	; 0x35
 800195c:	d902      	bls.n	8001964 <TFT_Draw_Bitmap_Without_Background+0x6c>
 800195e:	893b      	ldrh	r3, [r7, #8]
 8001960:	2b1a      	cmp	r3, #26
 8001962:	d810      	bhi.n	8001986 <TFT_Draw_Bitmap_Without_Background+0x8e>
			{
				Lcd_SetPixel(x+b,y+i, color);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	b29a      	uxth	r2, r3
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	4413      	add	r3, r2
 800196c:	b29b      	uxth	r3, r3
 800196e:	b218      	sxth	r0, r3
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	b29a      	uxth	r2, r3
 8001974:	88bb      	ldrh	r3, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	b29b      	uxth	r3, r3
 800197a:	b21b      	sxth	r3, r3
 800197c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001980:	4619      	mov	r1, r3
 8001982:	f7ff fb44 	bl	800100e <Lcd_SetPixel>
		for(int b =0;b<width;b+=1)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	3301      	adds	r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	887b      	ldrh	r3, [r7, #2]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbc6      	blt.n	8001922 <TFT_Draw_Bitmap_Without_Background+0x2a>
	for(int i =0;i<height;i+=1)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	883b      	ldrh	r3, [r7, #0]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dbbc      	blt.n	800191c <TFT_Draw_Bitmap_Without_Background+0x24>
			}
		}
	}
}
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	371c      	adds	r7, #28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd90      	pop	{r4, r7, pc}

080019ac <TFT_Draw_VLine>:
		}
	}
}

void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 80019ce:	887b      	ldrh	r3, [r7, #2]
 80019d0:	883a      	ldrh	r2, [r7, #0]
 80019d2:	88b9      	ldrh	r1, [r7, #4]
 80019d4:	88f8      	ldrh	r0, [r7, #6]
 80019d6:	f7ff fc79 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	81fb      	strh	r3, [r7, #14]
 80019de:	e006      	b.n	80019ee <TFT_Draw_VLine+0x42>
	Lcd_Write_Data(color);
 80019e0:	8c3b      	ldrh	r3, [r7, #32]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa94 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 80019e8:	89fb      	ldrh	r3, [r7, #14]
 80019ea:	3301      	adds	r3, #1
 80019ec:	81fb      	strh	r3, [r7, #14]
 80019ee:	89fa      	ldrh	r2, [r7, #14]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	8839      	ldrh	r1, [r7, #0]
 80019f4:	fb01 f303 	mul.w	r3, r1, r3
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf1      	blt.n	80019e0 <TFT_Draw_VLine+0x34>
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd90      	pop	{r4, r7, pc}

08001a06 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}


void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	4608      	mov	r0, r1
 8001a10:	4611      	mov	r1, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4623      	mov	r3, r4
 8001a16:	80fb      	strh	r3, [r7, #6]
 8001a18:	4603      	mov	r3, r0
 8001a1a:	80bb      	strh	r3, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
 8001a20:	4613      	mov	r3, r2
 8001a22:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 8001a28:	883b      	ldrh	r3, [r7, #0]
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	88b9      	ldrh	r1, [r7, #4]
 8001a2e:	88f8      	ldrh	r0, [r7, #6]
 8001a30:	f7ff fc4c 	bl	80012cc <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e006      	b.n	8001a48 <TFT_Draw_Fill_Rectangle+0x42>
	{
		Lcd_Write_Data(color);
 8001a3a:	8c3b      	ldrh	r3, [r7, #32]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fa67 	bl	8000f10 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	887b      	ldrh	r3, [r7, #2]
 8001a4a:	883a      	ldrh	r2, [r7, #0]
 8001a4c:	fb02 f303 	mul.w	r3, r2, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d3f0      	bcc.n	8001a3a <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 8001a58:	bf00      	nop
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd90      	pop	{r4, r7, pc}

08001a62 <TFT_Draw_Fill_Circle_Helper>:
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
}


void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 8001a62:	b590      	push	{r4, r7, lr}
 8001a64:	b089      	sub	sp, #36	; 0x24
 8001a66:	af02      	add	r7, sp, #8
 8001a68:	4604      	mov	r4, r0
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4623      	mov	r3, r4
 8001a72:	80fb      	strh	r3, [r7, #6]
 8001a74:	4603      	mov	r3, r0
 8001a76:	80bb      	strh	r3, [r7, #4]
 8001a78:	460b      	mov	r3, r1
 8001a7a:	807b      	strh	r3, [r7, #2]
 8001a7c:	4613      	mov	r3, r2
 8001a7e:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	f1c3 0301 	rsb	r3, r3, #1
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001a8e:	887b      	ldrh	r3, [r7, #2]
 8001a90:	461a      	mov	r2, r3
 8001a92:	03d2      	lsls	r2, r2, #15
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001aa4:	e07f      	b.n	8001ba6 <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 8001aa6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db0e      	blt.n	8001acc <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 8001aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ab2:	b29b      	uxth	r3, r3
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001aba:	8a7b      	ldrh	r3, [r7, #18]
 8001abc:	3302      	adds	r3, #2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001ac2:	8afa      	ldrh	r2, [r7, #22]
 8001ac4:	8a7b      	ldrh	r3, [r7, #18]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001acc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001ad8:	8abb      	ldrh	r3, [r7, #20]
 8001ada:	3302      	adds	r3, #2
 8001adc:	b29b      	uxth	r3, r3
 8001ade:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001ae0:	8afa      	ldrh	r2, [r7, #22]
 8001ae2:	8abb      	ldrh	r3, [r7, #20]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001aea:	787b      	ldrb	r3, [r7, #1]
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d029      	beq.n	8001b48 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 8001af4:	88fa      	ldrh	r2, [r7, #6]
 8001af6:	8a3b      	ldrh	r3, [r7, #16]
 8001af8:	4413      	add	r3, r2
 8001afa:	b298      	uxth	r0, r3
 8001afc:	88ba      	ldrh	r2, [r7, #4]
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b299      	uxth	r1, r3
 8001b04:	89fb      	ldrh	r3, [r7, #14]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f7ff ff47 	bl	80019ac <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001b1e:	88fa      	ldrh	r2, [r7, #6]
 8001b20:	89fb      	ldrh	r3, [r7, #14]
 8001b22:	4413      	add	r3, r2
 8001b24:	b298      	uxth	r0, r3
 8001b26:	88ba      	ldrh	r2, [r7, #4]
 8001b28:	8a3b      	ldrh	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	b299      	uxth	r1, r3
 8001b2e:	8a3b      	ldrh	r3, [r7, #16]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b36:	4413      	add	r3, r2
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	2301      	movs	r3, #1
 8001b44:	f7ff ff32 	bl	80019ac <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8001b48:	787b      	ldrb	r3, [r7, #1]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d029      	beq.n	8001ba6 <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 8001b52:	88fa      	ldrh	r2, [r7, #6]
 8001b54:	8a3b      	ldrh	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	b298      	uxth	r0, r3
 8001b5a:	88ba      	ldrh	r2, [r7, #4]
 8001b5c:	89fb      	ldrh	r3, [r7, #14]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	b299      	uxth	r1, r3
 8001b62:	89fb      	ldrh	r3, [r7, #14]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b6a:	4413      	add	r3, r2
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2301      	movs	r3, #1
 8001b78:	f7ff ff18 	bl	80019ac <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	89fb      	ldrh	r3, [r7, #14]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	b298      	uxth	r0, r3
 8001b84:	88ba      	ldrh	r2, [r7, #4]
 8001b86:	8a3b      	ldrh	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	b299      	uxth	r1, r3
 8001b8c:	8a3b      	ldrh	r3, [r7, #16]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b94:	4413      	add	r3, r2
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f7ff ff03 	bl	80019ac <TFT_Draw_VLine>
  while (x<y) {
 8001ba6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001baa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	f6ff af79 	blt.w	8001aa6 <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd90      	pop	{r4, r7, pc}

08001bbe <TFT_Draw_Fill_Round_Rect>:


void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001bbe:	b590      	push	{r4, r7, lr}
 8001bc0:	b085      	sub	sp, #20
 8001bc2:	af02      	add	r7, sp, #8
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	4608      	mov	r0, r1
 8001bc8:	4611      	mov	r1, r2
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4623      	mov	r3, r4
 8001bce:	80fb      	strh	r3, [r7, #6]
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	80bb      	strh	r3, [r7, #4]
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	807b      	strh	r3, [r7, #2]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001bdc:	88fa      	ldrh	r2, [r7, #6]
 8001bde:	8b3b      	ldrh	r3, [r7, #24]
 8001be0:	4413      	add	r3, r2
 8001be2:	b298      	uxth	r0, r3
 8001be4:	8b3b      	ldrh	r3, [r7, #24]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	887a      	ldrh	r2, [r7, #2]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	883c      	ldrh	r4, [r7, #0]
 8001bf2:	88b9      	ldrh	r1, [r7, #4]
 8001bf4:	8bbb      	ldrh	r3, [r7, #28]
 8001bf6:	9300      	str	r3, [sp, #0]
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	f7ff ff04 	bl	8001a06 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001bfe:	88fa      	ldrh	r2, [r7, #6]
 8001c00:	887b      	ldrh	r3, [r7, #2]
 8001c02:	4413      	add	r3, r2
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	8b3b      	ldrh	r3, [r7, #24]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	b218      	sxth	r0, r3
 8001c12:	88ba      	ldrh	r2, [r7, #4]
 8001c14:	8b3b      	ldrh	r3, [r7, #24]
 8001c16:	4413      	add	r3, r2
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	b219      	sxth	r1, r3
 8001c1c:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001c20:	8b3b      	ldrh	r3, [r7, #24]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	883a      	ldrh	r2, [r7, #0]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	8bba      	ldrh	r2, [r7, #28]
 8001c34:	9201      	str	r2, [sp, #4]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	2301      	movs	r3, #1
 8001c3a:	4622      	mov	r2, r4
 8001c3c:	f7ff ff11 	bl	8001a62 <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001c40:	88fa      	ldrh	r2, [r7, #6]
 8001c42:	8b3b      	ldrh	r3, [r7, #24]
 8001c44:	4413      	add	r3, r2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	b218      	sxth	r0, r3
 8001c4a:	88ba      	ldrh	r2, [r7, #4]
 8001c4c:	8b3b      	ldrh	r3, [r7, #24]
 8001c4e:	4413      	add	r3, r2
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	b219      	sxth	r1, r3
 8001c54:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001c58:	8b3b      	ldrh	r3, [r7, #24]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	883a      	ldrh	r2, [r7, #0]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	8bba      	ldrh	r2, [r7, #28]
 8001c6c:	9201      	str	r2, [sp, #4]
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2302      	movs	r3, #2
 8001c72:	4622      	mov	r2, r4
 8001c74:	f7ff fef5 	bl	8001a62 <TFT_Draw_Fill_Circle_Helper>
}
 8001c78:	bf00      	nop
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <LCD_Char>:



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b08b      	sub	sp, #44	; 0x2c
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	81fb      	strh	r3, [r7, #14]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	881b      	ldrh	r3, [r3, #0]
 8001c9c:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	777b      	strb	r3, [r7, #29]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	763b      	strb	r3, [r7, #24]
 8001cae:	e095      	b.n	8001ddc <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	767b      	strb	r3, [r7, #25]
 8001cb4:	e053      	b.n	8001d5e <LCD_Char+0xde>
		{
			if(bit == 0)
 8001cb6:	7f3b      	ldrb	r3, [r7, #28]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001cbc:	8bfb      	ldrh	r3, [r7, #30]
 8001cbe:	1c5a      	adds	r2, r3, #1
 8001cc0:	83fa      	strh	r2, [r7, #30]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001ccc:	2380      	movs	r3, #128	; 0x80
 8001cce:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001cd0:	7f7a      	ldrb	r2, [r7, #29]
 8001cd2:	7f3b      	ldrb	r3, [r7, #28]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d003      	beq.n	8001ce4 <LCD_Char+0x64>
			{
				set_pixels++;
 8001cdc:	8b7b      	ldrh	r3, [r7, #26]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	837b      	strh	r3, [r7, #26]
 8001ce2:	e036      	b.n	8001d52 <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 8001ce4:	8b7b      	ldrh	r3, [r7, #26]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d033      	beq.n	8001d52 <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	7e7b      	ldrb	r3, [r7, #25]
 8001cf4:	441a      	add	r2, r3
 8001cf6:	8b7b      	ldrh	r3, [r7, #26]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	fb12 f303 	smulbb	r3, r2, r3
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	b298      	uxth	r0, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d14:	461a      	mov	r2, r3
 8001d16:	7e3b      	ldrb	r3, [r7, #24]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	fb12 f303 	smulbb	r3, r2, r3
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	89bb      	ldrh	r3, [r7, #12]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b299      	uxth	r1, r3
 8001d2e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	8b7a      	ldrh	r2, [r7, #26]
 8001d36:	fb12 f303 	smulbb	r3, r2, r3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d40:	b29c      	uxth	r4, r3
 8001d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	4623      	mov	r3, r4
 8001d4a:	f7ff fe5c 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001d52:	7f3b      	ldrb	r3, [r7, #28]
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001d58:	7e7b      	ldrb	r3, [r7, #25]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	767b      	strb	r3, [r7, #25]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	789b      	ldrb	r3, [r3, #2]
 8001d62:	7e7a      	ldrb	r2, [r7, #25]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3a6      	bcc.n	8001cb6 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001d68:	8b7b      	ldrh	r3, [r7, #26]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d033      	beq.n	8001dd6 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d74:	461a      	mov	r2, r3
 8001d76:	7e7b      	ldrb	r3, [r7, #25]
 8001d78:	441a      	add	r2, r3
 8001d7a:	8b7b      	ldrh	r3, [r7, #26]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	fb12 f303 	smulbb	r3, r2, r3
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	89fb      	ldrh	r3, [r7, #14]
 8001d8e:	4413      	add	r3, r2
 8001d90:	b298      	uxth	r0, r3
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	7e3b      	ldrb	r3, [r7, #24]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	fb12 f303 	smulbb	r3, r2, r3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	89bb      	ldrh	r3, [r7, #12]
 8001dae:	4413      	add	r3, r2
 8001db0:	b299      	uxth	r1, r3
 8001db2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	8b7a      	ldrh	r2, [r7, #26]
 8001dba:	fb12 f303 	smulbb	r3, r2, r3
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dc4:	b29c      	uxth	r4, r3
 8001dc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	4623      	mov	r3, r4
 8001dce:	f7ff fe1a 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001dd6:	7e3b      	ldrb	r3, [r7, #24]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	763b      	strb	r3, [r7, #24]
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	78db      	ldrb	r3, [r3, #3]
 8001de0:	7e3a      	ldrb	r2, [r7, #24]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	f4ff af64 	bcc.w	8001cb0 <LCD_Char+0x30>
		}
	}
}
 8001de8:	bf00      	nop
 8001dea:	bf00      	nop
 8001dec:	3724      	adds	r7, #36	; 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}

08001df2 <LCD_centered_Font>:

void LCD_centered_Font (uint16_t x, uint16_t y,  uint16_t length,  char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001df2:	b590      	push	{r4, r7, lr}
 8001df4:	b093      	sub	sp, #76	; 0x4c
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	81fb      	strh	r3, [r7, #14]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	81bb      	strh	r3, [r7, #12]
 8001e02:	4613      	mov	r3, r2
 8001e04:	817b      	strh	r3, [r7, #10]
	uint16_t row_counter =0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t row_width =0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	86bb      	strh	r3, [r7, #52]	; 0x34
	uint16_t end_text_in_row = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	867b      	strh	r3, [r7, #50]	; 0x32
	uint16_t start_text_in_row=0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	863b      	strh	r3, [r7, #48]	; 0x30

	GFXfont font;
	bool write_Text=FALSE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	bool long_string=FALSE;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001e22:	f107 0318 	add.w	r3, r7, #24
 8001e26:	220c      	movs	r2, #12
 8001e28:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 f811 	bl	8004e52 <memcpy>
	int16_t font_Y = font.yAdvance*size;
 8001e30:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	fb12 f303 	smulbb	r3, r2, r3
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_x;
	int16_t cursor_y = y;
 8001e44:	89bb      	ldrh	r3, [r7, #12]
 8001e46:	857b      	strh	r3, [r7, #42]	; 0x2a
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001e48:	2300      	movs	r3, #0
 8001e4a:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e4c:	e093      	b.n	8001f76 <LCD_centered_Font+0x184>
		{

			char c = text[text_pos];
 8001e4e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	4413      	add	r3, r2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25


			if(c >= font.first && c <= font.last && c != '\r' && c != '\n')
 8001e5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e5e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d326      	bcc.n	8001eb4 <LCD_centered_Font+0xc2>
 8001e66:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001e6a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d820      	bhi.n	8001eb4 <LCD_centered_Font+0xc2>
 8001e72:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e76:	2b0d      	cmp	r3, #13
 8001e78:	d01c      	beq.n	8001eb4 <LCD_centered_Font+0xc2>
 8001e7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e7e:	2b0a      	cmp	r3, #10
 8001e80:	d018      	beq.n	8001eb4 <LCD_centered_Font+0xc2>
			{
				GFXglyph glyph;
				memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e88:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001e8c:	1a5b      	subs	r3, r3, r1
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	18d1      	adds	r1, r2, r3
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	2208      	movs	r2, #8
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f002 ffda 	bl	8004e52 <memcpy>
				row_counter+=glyph.xAdvance*size;
 8001e9e:	7d3b      	ldrb	r3, [r7, #20]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	fb12 f303 	smulbb	r3, r2, r3
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001eb0:	4413      	add	r3, r2
 8001eb2:	86fb      	strh	r3, [r7, #54]	; 0x36
			}
			if (c == '\n')
 8001eb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001eb8:	2b0a      	cmp	r3, #10
 8001eba:	d106      	bne.n	8001eca <LCD_centered_Font+0xd8>
			{
				write_Text = TRUE;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				end_text_in_row=text_pos;
 8001ec2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ec4:	867b      	strh	r3, [r7, #50]	; 0x32
				row_width = row_counter;
 8001ec6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ec8:	86bb      	strh	r3, [r7, #52]	; 0x34
			}
			if(c==' ')
 8001eca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d106      	bne.n	8001ee0 <LCD_centered_Font+0xee>
			{
				end_text_in_row=text_pos;
 8001ed2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ed4:	867b      	strh	r3, [r7, #50]	; 0x32
				row_width = row_counter;
 8001ed6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed8:	86bb      	strh	r3, [r7, #52]	; 0x34
				long_string = TRUE;
 8001eda:	2301      	movs	r3, #1
 8001edc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			}
			if(row_counter>=length&&long_string)
 8001ee0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d306      	bcc.n	8001ef6 <LCD_centered_Font+0x104>
 8001ee8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d002      	beq.n	8001ef6 <LCD_centered_Font+0x104>
			{
				write_Text = TRUE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			}

			if(write_Text)
 8001ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d038      	beq.n	8001f70 <LCD_centered_Font+0x17e>
			{
				//write linie in the center

				if(x+ (length-row_width)/2>=0)
 8001efe:	89fa      	ldrh	r2, [r7, #14]
 8001f00:	8979      	ldrh	r1, [r7, #10]
 8001f02:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f04:	1acb      	subs	r3, r1, r3
 8001f06:	0fd9      	lsrs	r1, r3, #31
 8001f08:	440b      	add	r3, r1
 8001f0a:	105b      	asrs	r3, r3, #1
 8001f0c:	4413      	add	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <LCD_centered_Font+0x138>
				cursor_x =x+ (length-row_width)/2;
 8001f12:	897a      	ldrh	r2, [r7, #10]
 8001f14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	0fda      	lsrs	r2, r3, #31
 8001f1a:	4413      	add	r3, r2
 8001f1c:	105b      	asrs	r3, r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	4413      	add	r3, r2
 8001f24:	b29b      	uxth	r3, r3
 8001f26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001f28:	e001      	b.n	8001f2e <LCD_centered_Font+0x13c>
				else cursor_x=0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	85bb      	strh	r3, [r7, #44]	; 0x2c
				LCD_Row_Font (cursor_x, cursor_y, start_text_in_row, end_text_in_row, text, p_font, size, color24);
 8001f2e:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001f30:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001f32:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8001f34:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001f36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f38:	9303      	str	r3, [sp, #12]
 8001f3a:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001f3e:	9302      	str	r3, [sp, #8]
 8001f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4623      	mov	r3, r4
 8001f4a:	f000 f840 	bl	8001fce <LCD_Row_Font>
				start_text_in_row=end_text_in_row;
 8001f4e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f50:	863b      	strh	r3, [r7, #48]	; 0x30
				text_pos = end_text_in_row;
 8001f52:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001f54:	853b      	strh	r3, [r7, #40]	; 0x28
				row_counter=0;
 8001f56:	2300      	movs	r3, #0
 8001f58:	86fb      	strh	r3, [r7, #54]	; 0x36
				write_Text=FALSE;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				cursor_y+=font_Y;
 8001f60:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001f62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f64:	4413      	add	r3, r2
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	857b      	strh	r3, [r7, #42]	; 0x2a
				long_string = FALSE;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001f70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f72:	3301      	adds	r3, #1
 8001f74:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f76:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7fe f981 	bl	8000280 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	429c      	cmp	r4, r3
 8001f82:	f4ff af64 	bcc.w	8001e4e <LCD_centered_Font+0x5c>

			}
		}
	end_text_in_row=strlen(text);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7fe f97a 	bl	8000280 <strlen>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	867b      	strh	r3, [r7, #50]	; 0x32
	cursor_x =x+ (length-row_counter)/2;
 8001f90:	897a      	ldrh	r2, [r7, #10]
 8001f92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	0fda      	lsrs	r2, r3, #31
 8001f98:	4413      	add	r3, r2
 8001f9a:	105b      	asrs	r3, r3, #1
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	89fb      	ldrh	r3, [r7, #14]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	85bb      	strh	r3, [r7, #44]	; 0x2c
	LCD_Row_Font (cursor_x, cursor_y, start_text_in_row, end_text_in_row, text, p_font, size, color24);
 8001fa6:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8001fa8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8001faa:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8001fac:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001fae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb0:	9303      	str	r3, [sp, #12]
 8001fb2:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8001fb6:	9302      	str	r3, [sp, #8]
 8001fb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	f000 f804 	bl	8001fce <LCD_Row_Font>
}
 8001fc6:	bf00      	nop
 8001fc8:	373c      	adds	r7, #60	; 0x3c
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd90      	pop	{r4, r7, pc}

08001fce <LCD_Row_Font>:

void LCD_Row_Font(uint16_t x, uint16_t y, uint16_t start, uint16_t end, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001fce:	b590      	push	{r4, r7, lr}
 8001fd0:	b08d      	sub	sp, #52	; 0x34
 8001fd2:	af02      	add	r7, sp, #8
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	4611      	mov	r1, r2
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4623      	mov	r3, r4
 8001fde:	80fb      	strh	r3, [r7, #6]
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	80bb      	strh	r3, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	807b      	strh	r3, [r7, #2]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	803b      	strh	r3, [r7, #0]

	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 ff2c 	bl	8004e52 <memcpy>
	int16_t cursor_x = x;
 8001ffa:	88fb      	ldrh	r3, [r7, #6]
 8001ffc:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t cursor_y = y + (font.yAdvance*size)/4;
 8001ffe:	7fbb      	ldrb	r3, [r7, #30]
 8002000:	461a      	mov	r2, r3
 8002002:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002006:	fb02 f303 	mul.w	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	da00      	bge.n	8002010 <LCD_Row_Font+0x42>
 800200e:	3303      	adds	r3, #3
 8002010:	109b      	asrs	r3, r3, #2
 8002012:	b29a      	uxth	r2, r3
 8002014:	88bb      	ldrh	r3, [r7, #4]
 8002016:	4413      	add	r3, r2
 8002018:	b29b      	uxth	r3, r3
 800201a:	847b      	strh	r3, [r7, #34]	; 0x22
	//int16_t cursor_y = y;
	for(uint16_t text_pos = start; text_pos < end; text_pos++)
 800201c:	887b      	ldrh	r3, [r7, #2]
 800201e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002020:	e043      	b.n	80020aa <LCD_Row_Font+0xdc>
	{
		char c = text[text_pos];
 8002022:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002026:	4413      	add	r3, r2
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		if(c >= font.first && c <= font.last && c != '\r'&& c!='\n')
 800202e:	7f3b      	ldrb	r3, [r7, #28]
 8002030:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8002034:	429a      	cmp	r2, r3
 8002036:	d335      	bcc.n	80020a4 <LCD_Row_Font+0xd6>
 8002038:	7f7b      	ldrb	r3, [r7, #29]
 800203a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800203e:	429a      	cmp	r2, r3
 8002040:	d830      	bhi.n	80020a4 <LCD_Row_Font+0xd6>
 8002042:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002046:	2b0d      	cmp	r3, #13
 8002048:	d02c      	beq.n	80020a4 <LCD_Row_Font+0xd6>
 800204a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800204e:	2b0a      	cmp	r3, #10
 8002050:	d028      	beq.n	80020a4 <LCD_Row_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002058:	7f39      	ldrb	r1, [r7, #28]
 800205a:	1a5b      	subs	r3, r3, r1
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	18d1      	adds	r1, r2, r3
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	2208      	movs	r2, #8
 8002066:	4618      	mov	r0, r3
 8002068:	f002 fef3 	bl	8004e52 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 800206c:	f107 0414 	add.w	r4, r7, #20
 8002070:	f107 020c 	add.w	r2, r7, #12
 8002074:	f9b7 1022 	ldrsh.w	r1, [r7, #34]	; 0x22
 8002078:	f9b7 0026 	ldrsh.w	r0, [r7, #38]	; 0x26
 800207c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	4623      	mov	r3, r4
 8002088:	f7ff fdfa 	bl	8001c80 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 800208c:	7c3b      	ldrb	r3, [r7, #16]
 800208e:	b29a      	uxth	r2, r3
 8002090:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002094:	b29b      	uxth	r3, r3
 8002096:	fb12 f303 	smulbb	r3, r2, r3
 800209a:	b29a      	uxth	r2, r3
 800209c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800209e:	4413      	add	r3, r2
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	84fb      	strh	r3, [r7, #38]	; 0x26
	for(uint16_t text_pos = start; text_pos < end; text_pos++)
 80020a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020a6:	3301      	adds	r3, #1
 80020a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80020aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020ac:	883b      	ldrh	r3, [r7, #0]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d3b7      	bcc.n	8002022 <LCD_Row_Font+0x54>
		}
	}
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	372c      	adds	r7, #44	; 0x2c
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd90      	pop	{r4, r7, pc}

080020bc <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 80020bc:	b590      	push	{r4, r7, lr}
 80020be:	b08f      	sub	sp, #60	; 0x3c
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	4603      	mov	r3, r0
 80020c8:	81fb      	strh	r3, [r7, #14]
 80020ca:	460b      	mov	r3, r1
 80020cc:	81bb      	strh	r3, [r7, #12]

	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	220c      	movs	r2, #12
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f002 febb 	bl	8004e52 <memcpy>
	int16_t cursor_x = x;
 80020dc:	89fb      	ldrh	r3, [r7, #14]
 80020de:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y+ (font.yAdvance*size)/4;
 80020e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80020e4:	461a      	mov	r2, r3
 80020e6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80020ea:	fb02 f303 	mul.w	r3, r2, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	da00      	bge.n	80020f4 <LCD_Font+0x38>
 80020f2:	3303      	adds	r3, #3
 80020f4:	109b      	asrs	r3, r3, #2
 80020f6:	b29a      	uxth	r2, r3
 80020f8:	89bb      	ldrh	r3, [r7, #12]
 80020fa:	4413      	add	r3, r2
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002100:	2300      	movs	r3, #0
 8002102:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002104:	e056      	b.n	80021b4 <LCD_Font+0xf8>
	{
		char c = text[text_pos];
 8002106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4413      	add	r3, r2
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8002112:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002116:	2b0a      	cmp	r3, #10
 8002118:	d10f      	bne.n	800213a <LCD_Font+0x7e>
		{
			cursor_x = x;
 800211a:	89fb      	ldrh	r3, [r7, #14]
 800211c:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 800211e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002122:	b29a      	uxth	r2, r3
 8002124:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002128:	b29b      	uxth	r3, r3
 800212a:	fb12 f303 	smulbb	r3, r2, r3
 800212e:	b29a      	uxth	r2, r3
 8002130:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002132:	4413      	add	r3, r2
 8002134:	b29b      	uxth	r3, r3
 8002136:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002138:	e039      	b.n	80021ae <LCD_Font+0xf2>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 800213a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800213e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8002142:	429a      	cmp	r2, r3
 8002144:	d333      	bcc.n	80021ae <LCD_Font+0xf2>
 8002146:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800214a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800214e:	429a      	cmp	r2, r3
 8002150:	d82d      	bhi.n	80021ae <LCD_Font+0xf2>
 8002152:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002156:	2b0d      	cmp	r3, #13
 8002158:	d029      	beq.n	80021ae <LCD_Font+0xf2>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 800215a:	6a3a      	ldr	r2, [r7, #32]
 800215c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002160:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8002164:	1a5b      	subs	r3, r3, r1
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	18d1      	adds	r1, r2, r3
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2208      	movs	r2, #8
 8002170:	4618      	mov	r0, r3
 8002172:	f002 fe6e 	bl	8004e52 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8002176:	f107 041c 	add.w	r4, r7, #28
 800217a:	f107 0214 	add.w	r2, r7, #20
 800217e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8002182:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8002186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	4623      	mov	r3, r4
 8002192:	f7ff fd75 	bl	8001c80 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8002196:	7e3b      	ldrb	r3, [r7, #24]
 8002198:	b29a      	uxth	r2, r3
 800219a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800219e:	b29b      	uxth	r3, r3
 80021a0:	fb12 f303 	smulbb	r3, r2, r3
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80021a8:	4413      	add	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 80021ae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021b0:	3301      	adds	r3, #1
 80021b2:	857b      	strh	r3, [r7, #42]	; 0x2a
 80021b4:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 80021b6:	68b8      	ldr	r0, [r7, #8]
 80021b8:	f7fe f862 	bl	8000280 <strlen>
 80021bc:	4603      	mov	r3, r0
 80021be:	429c      	cmp	r4, r3
 80021c0:	d3a1      	bcc.n	8002106 <LCD_Font+0x4a>
		}
	}
}
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
 80021c6:	3734      	adds	r7, #52	; 0x34
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd90      	pop	{r4, r7, pc}

080021cc <LCD_FillTriangle>:

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 80021cc:	b590      	push	{r4, r7, lr}
 80021ce:	b091      	sub	sp, #68	; 0x44
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	4604      	mov	r4, r0
 80021d4:	4608      	mov	r0, r1
 80021d6:	4611      	mov	r1, r2
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	80fb      	strh	r3, [r7, #6]
 80021de:	4603      	mov	r3, r0
 80021e0:	80bb      	strh	r3, [r7, #4]
 80021e2:	460b      	mov	r3, r1
 80021e4:	807b      	strh	r3, [r7, #2]
 80021e6:	4613      	mov	r3, r2
 80021e8:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 80021ea:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80021ee:	f9b7 3000 	ldrsh.w	r3, [r7]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	dd0b      	ble.n	800220e <LCD_FillTriangle+0x42>
		swap(y0, y1);
 80021f6:	88bb      	ldrh	r3, [r7, #4]
 80021f8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021fa:	883b      	ldrh	r3, [r7, #0]
 80021fc:	80bb      	strh	r3, [r7, #4]
 80021fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002200:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002206:	887b      	ldrh	r3, [r7, #2]
 8002208:	80fb      	strh	r3, [r7, #6]
 800220a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800220c:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 800220e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002212:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002216:	429a      	cmp	r2, r3
 8002218:	dd0f      	ble.n	800223a <LCD_FillTriangle+0x6e>
		swap(y2, y1);
 800221a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800221e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002220:	883b      	ldrh	r3, [r7, #0]
 8002222:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002228:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 800222a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800222e:	843b      	strh	r3, [r7, #32]
 8002230:	887b      	ldrh	r3, [r7, #2]
 8002232:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002236:	8c3b      	ldrh	r3, [r7, #32]
 8002238:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800223a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800223e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002242:	429a      	cmp	r2, r3
 8002244:	dd0b      	ble.n	800225e <LCD_FillTriangle+0x92>
		swap(y0, y1);
 8002246:	88bb      	ldrh	r3, [r7, #4]
 8002248:	83fb      	strh	r3, [r7, #30]
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	80bb      	strh	r3, [r7, #4]
 800224e:	8bfb      	ldrh	r3, [r7, #30]
 8002250:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8002252:	88fb      	ldrh	r3, [r7, #6]
 8002254:	83bb      	strh	r3, [r7, #28]
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	80fb      	strh	r3, [r7, #6]
 800225a:	8bbb      	ldrh	r3, [r7, #28]
 800225c:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 800225e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002262:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002266:	429a      	cmp	r2, r3
 8002268:	d136      	bne.n	80022d8 <LCD_FillTriangle+0x10c>
		a = b = x0;
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	86bb      	strh	r3, [r7, #52]	; 0x34
 800226e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002270:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(x1 < a)      a = x1;
 8002272:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002276:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800227a:	429a      	cmp	r2, r3
 800227c:	da02      	bge.n	8002284 <LCD_FillTriangle+0xb8>
 800227e:	887b      	ldrh	r3, [r7, #2]
 8002280:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002282:	e007      	b.n	8002294 <LCD_FillTriangle+0xc8>
		else if(x1 > b) b = x1;
 8002284:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002288:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800228c:	429a      	cmp	r2, r3
 800228e:	dd01      	ble.n	8002294 <LCD_FillTriangle+0xc8>
 8002290:	887b      	ldrh	r3, [r7, #2]
 8002292:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(x2 < a)      a = x2;
 8002294:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002298:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800229c:	429a      	cmp	r2, r3
 800229e:	da03      	bge.n	80022a8 <LCD_FillTriangle+0xdc>
 80022a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022a4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80022a6:	e008      	b.n	80022ba <LCD_FillTriangle+0xee>
		else if(x2 > b) b = x2;
 80022a8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 80022ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80022b0:	429a      	cmp	r2, r3
 80022b2:	dd02      	ble.n	80022ba <LCD_FillTriangle+0xee>
 80022b4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80022b8:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y0, b - a + 1,1, color);
 80022ba:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80022bc:	88b9      	ldrh	r1, [r7, #4]
 80022be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	f7ff f851 	bl	8001378 <TFT_Draw_HLine>
		return;
 80022d6:	e0d2      	b.n	800247e <LCD_FillTriangle+0x2b2>
	}

	int16_t	dx01 = x1 - x0,
 80022d8:	887a      	ldrh	r2, [r7, #2]
 80022da:	88fb      	ldrh	r3, [r7, #6]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	b29b      	uxth	r3, r3
 80022e0:	837b      	strh	r3, [r7, #26]
			dy01 = y1 - y0,
 80022e2:	883a      	ldrh	r2, [r7, #0]
 80022e4:	88bb      	ldrh	r3, [r7, #4]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	833b      	strh	r3, [r7, #24]
			dx02 = x2 - x0,
 80022ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	82fb      	strh	r3, [r7, #22]
			dy02 = y2 - y0,
 80022f8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80022fc:	88bb      	ldrh	r3, [r7, #4]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	b29b      	uxth	r3, r3
 8002302:	82bb      	strh	r3, [r7, #20]
			dx12 = x2 - x1,
 8002304:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002308:	887b      	ldrh	r3, [r7, #2]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	b29b      	uxth	r3, r3
 800230e:	827b      	strh	r3, [r7, #18]
			dy12 = y2 - y1;
 8002310:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002314:	883b      	ldrh	r3, [r7, #0]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	b29b      	uxth	r3, r3
 800231a:	823b      	strh	r3, [r7, #16]
	int32_t	sa   = 0,
 800231c:	2300      	movs	r3, #0
 800231e:	62fb      	str	r3, [r7, #44]	; 0x2c
			sb   = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2) last = y1;   // Include y1 scanline
 8002324:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002328:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800232c:	429a      	cmp	r2, r3
 800232e:	d102      	bne.n	8002336 <LCD_FillTriangle+0x16a>
 8002330:	883b      	ldrh	r3, [r7, #0]
 8002332:	863b      	strh	r3, [r7, #48]	; 0x30
 8002334:	e003      	b.n	800233e <LCD_FillTriangle+0x172>
	else last = y1 - 1; // Skip it
 8002336:	883b      	ldrh	r3, [r7, #0]
 8002338:	3b01      	subs	r3, #1
 800233a:	b29b      	uxth	r3, r3
 800233c:	863b      	strh	r3, [r7, #48]	; 0x30

	for(y = y0; y <= last; y++) {
 800233e:	88bb      	ldrh	r3, [r7, #4]
 8002340:	867b      	strh	r3, [r7, #50]	; 0x32
 8002342:	e03d      	b.n	80023c0 <LCD_FillTriangle+0x1f4>
		a = x0 + sa / dy01;
 8002344:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800234a:	fb92 f3f3 	sdiv	r3, r2, r3
 800234e:	b29a      	uxth	r2, r3
 8002350:	88fb      	ldrh	r3, [r7, #6]
 8002352:	4413      	add	r3, r2
 8002354:	b29b      	uxth	r3, r3
 8002356:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8002358:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800235c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800235e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002362:	b29a      	uxth	r2, r3
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	4413      	add	r3, r2
 8002368:	b29b      	uxth	r3, r3
 800236a:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx01;
 800236c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002372:	4413      	add	r3, r2
 8002374:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8002376:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800237a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800237c:	4413      	add	r3, r2
 800237e:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8002380:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002384:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002388:	429a      	cmp	r2, r3
 800238a:	dd05      	ble.n	8002398 <LCD_FillTriangle+0x1cc>
 800238c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800238e:	81bb      	strh	r3, [r7, #12]
 8002390:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002392:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002394:	89bb      	ldrh	r3, [r7, #12]
 8002396:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b-a+1,1, color);
 8002398:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800239a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800239c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800239e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3301      	adds	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2301      	movs	r3, #1
 80023b0:	f7fe ffe2 	bl	8001378 <TFT_Draw_HLine>
	for(y = y0; y <= last; y++) {
 80023b4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	867b      	strh	r3, [r7, #50]	; 0x32
 80023c0:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80023c4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80023c8:	429a      	cmp	r2, r3
 80023ca:	ddbb      	ble.n	8002344 <LCD_FillTriangle+0x178>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 80023cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023d0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80023d4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80023d8:	1a8a      	subs	r2, r1, r2
 80023da:	fb02 f303 	mul.w	r3, r2, r3
 80023de:	62fb      	str	r3, [r7, #44]	; 0x2c
	sb = dx02 * (y - y0);
 80023e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80023e4:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 80023e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023ec:	1a8a      	subs	r2, r1, r2
 80023ee:	fb02 f303 	mul.w	r3, r2, r3
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
	for(; y <= y2; y++) {
 80023f4:	e03d      	b.n	8002472 <LCD_FillTriangle+0x2a6>
		a = x1 + sa / dy12;
 80023f6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8002400:	b29a      	uxth	r2, r3
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	4413      	add	r3, r2
 8002406:	b29b      	uxth	r3, r3
 8002408:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 800240a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800240e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002410:	fb92 f3f3 	sdiv	r3, r2, r3
 8002414:	b29a      	uxth	r2, r3
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	4413      	add	r3, r2
 800241a:	b29b      	uxth	r3, r3
 800241c:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx12;
 800241e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002422:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002424:	4413      	add	r3, r2
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8002428:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800242c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800242e:	4413      	add	r3, r2
 8002430:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8002432:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8002436:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800243a:	429a      	cmp	r2, r3
 800243c:	dd05      	ble.n	800244a <LCD_FillTriangle+0x27e>
 800243e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002440:	81fb      	strh	r3, [r7, #14]
 8002442:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002444:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002446:	89fb      	ldrh	r3, [r7, #14]
 8002448:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b - a + 1,1, color);
 800244a:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 800244c:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800244e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002450:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	b29b      	uxth	r3, r3
 8002456:	3301      	adds	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	2301      	movs	r3, #1
 8002462:	f7fe ff89 	bl	8001378 <TFT_Draw_HLine>
	for(; y <= y2; y++) {
 8002466:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800246a:	b29b      	uxth	r3, r3
 800246c:	3301      	adds	r3, #1
 800246e:	b29b      	uxth	r3, r3
 8002470:	867b      	strh	r3, [r7, #50]	; 0x32
 8002472:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002476:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800247a:	429a      	cmp	r2, r3
 800247c:	ddbb      	ble.n	80023f6 <LCD_FillTriangle+0x22a>
	}
}
 800247e:	373c      	adds	r7, #60	; 0x3c
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}

08002484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248a:	f107 030c 	add.w	r3, r7, #12
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <MX_GPIO_Init+0xc8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	4a2a      	ldr	r2, [pc, #168]	; (800254c <MX_GPIO_Init+0xc8>)
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	6313      	str	r3, [r2, #48]	; 0x30
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <MX_GPIO_Init+0xc8>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024b2:	60bb      	str	r3, [r7, #8]
 80024b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <MX_GPIO_Init+0xc8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a23      	ldr	r2, [pc, #140]	; (800254c <MX_GPIO_Init+0xc8>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b21      	ldr	r3, [pc, #132]	; (800254c <MX_GPIO_Init+0xc8>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	4b1d      	ldr	r3, [pc, #116]	; (800254c <MX_GPIO_Init+0xc8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a1c      	ldr	r2, [pc, #112]	; (800254c <MX_GPIO_Init+0xc8>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b1a      	ldr	r3, [pc, #104]	; (800254c <MX_GPIO_Init+0xc8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80024ee:	2200      	movs	r2, #0
 80024f0:	f248 31ff 	movw	r1, #33791	; 0x83ff
 80024f4:	4816      	ldr	r0, [pc, #88]	; (8002550 <MX_GPIO_Init+0xcc>)
 80024f6:	f001 f9bf 	bl	8003878 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D8_Pin|D9_Pin|D10_Pin|D11_Pin
 80024fa:	2200      	movs	r2, #0
 80024fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002500:	4814      	ldr	r0, [pc, #80]	; (8002554 <MX_GPIO_Init+0xd0>)
 8002502:	f001 f9b9 	bl	8003878 <HAL_GPIO_WritePin>
                          |WR_Pin|RD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002506:	f248 33ff 	movw	r3, #33791	; 0x83ff
 800250a:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800250c:	2301      	movs	r3, #1
 800250e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	4619      	mov	r1, r3
 800251e:	480c      	ldr	r0, [pc, #48]	; (8002550 <MX_GPIO_Init+0xcc>)
 8002520:	f001 f826 	bl	8003570 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002524:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002528:	60fb      	str	r3, [r7, #12]
                          |D12_Pin|D13_Pin|D14_Pin|D15_Pin
                          |WR_Pin|RD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252a:	2301      	movs	r3, #1
 800252c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002536:	f107 030c 	add.w	r3, r7, #12
 800253a:	4619      	mov	r1, r3
 800253c:	4805      	ldr	r0, [pc, #20]	; (8002554 <MX_GPIO_Init+0xd0>)
 800253e:	f001 f817 	bl	8003570 <HAL_GPIO_Init>

}
 8002542:	bf00      	nop
 8002544:	3720      	adds	r7, #32
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400

08002558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b08b      	sub	sp, #44	; 0x2c
 800255c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800255e:	f000 fe8b 	bl	8003278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002562:	f000 fcc5 	bl	8002ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002566:	f7ff ff8d 	bl	8002484 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 800256a:	f7fe fd6d 	bl	8001048 <Init_SSD1963>


  //  XPT2046_Init();
  uint16_t pos_y;
    TFT_Clear_Screen(0xCFFF);
 800256e:	f64c 70ff 	movw	r0, #53247	; 0xcfff
 8002572:	f7fe fed7 	bl	8001324 <TFT_Clear_Screen>
    TFT_Draw_Fill_Rectangle(100,0, 600, 144, 0xD61F);//niebieska ramka
 8002576:	f24d 631f 	movw	r3, #54815	; 0xd61f
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	2390      	movs	r3, #144	; 0x90
 800257e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8002582:	2100      	movs	r1, #0
 8002584:	2064      	movs	r0, #100	; 0x64
 8002586:	f7ff fa3e 	bl	8001a06 <TFT_Draw_Fill_Rectangle>




	TFT_Draw_Fill_Rectangle(780,0, 20, 20, 0x8C51);//szary prostokąt z prawej
 800258a:	f648 4351 	movw	r3, #35921	; 0x8c51
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2314      	movs	r3, #20
 8002592:	2214      	movs	r2, #20
 8002594:	2100      	movs	r1, #0
 8002596:	f44f 7043 	mov.w	r0, #780	; 0x30c
 800259a:	f7ff fa34 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Rectangle(780,460, 20, 20, 0x8C51);
 800259e:	f648 4351 	movw	r3, #35921	; 0x8c51
 80025a2:	9300      	str	r3, [sp, #0]
 80025a4:	2314      	movs	r3, #20
 80025a6:	2214      	movs	r2, #20
 80025a8:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80025ac:	f44f 7043 	mov.w	r0, #780	; 0x30c
 80025b0:	f7ff fa29 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
	TFT_Draw_Fill_Round_Rect (680, 0, 120, 480, 20, 0x8C51);
 80025b4:	f648 4351 	movw	r3, #35921	; 0x8c51
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	2314      	movs	r3, #20
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80025c2:	2278      	movs	r2, #120	; 0x78
 80025c4:	2100      	movs	r1, #0
 80025c6:	f44f 702a 	mov.w	r0, #680	; 0x2a8
 80025ca:	f7ff faf8 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	pos_y = 9;
 80025ce:	2309      	movs	r3, #9
 80025d0:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; i<7;i+=1)//przyciski po prawej
 80025d2:	2300      	movs	r3, #0
 80025d4:	757b      	strb	r3, [r7, #21]
 80025d6:	e02a      	b.n	800262e <main+0xd6>
	{
		TFT_Draw_Fill_Round_Rect (696, pos_y, 88, 47, 10,  0xD6BA);
 80025d8:	8af9      	ldrh	r1, [r7, #22]
 80025da:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80025de:	9301      	str	r3, [sp, #4]
 80025e0:	230a      	movs	r3, #10
 80025e2:	9300      	str	r3, [sp, #0]
 80025e4:	232f      	movs	r3, #47	; 0x2f
 80025e6:	2258      	movs	r2, #88	; 0x58
 80025e8:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80025ec:	f7ff fae7 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
		TFT_Draw_Fill_Rectangle(740,pos_y, 2, 47, 0x0000);
 80025f0:	8af9      	ldrh	r1, [r7, #22]
 80025f2:	2300      	movs	r3, #0
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	232f      	movs	r3, #47	; 0x2f
 80025f8:	2202      	movs	r2, #2
 80025fa:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 80025fe:	f7ff fa02 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
		LCD_centered_Font(696, pos_y+24, 88, "+   -", _Open_Sans_Bold_48, 1, 0x4A69);
 8002602:	8afb      	ldrh	r3, [r7, #22]
 8002604:	3318      	adds	r3, #24
 8002606:	b299      	uxth	r1, r3
 8002608:	f644 2369 	movw	r3, #19049	; 0x4a69
 800260c:	9302      	str	r3, [sp, #8]
 800260e:	2301      	movs	r3, #1
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	4b67      	ldr	r3, [pc, #412]	; (80027b0 <main+0x258>)
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	4b67      	ldr	r3, [pc, #412]	; (80027b4 <main+0x25c>)
 8002618:	2258      	movs	r2, #88	; 0x58
 800261a:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 800261e:	f7ff fbe8 	bl	8001df2 <LCD_centered_Font>
		pos_y+=56;
 8002622:	8afb      	ldrh	r3, [r7, #22]
 8002624:	3338      	adds	r3, #56	; 0x38
 8002626:	82fb      	strh	r3, [r7, #22]
	for(uint8_t i = 0; i<7;i+=1)//przyciski po prawej
 8002628:	7d7b      	ldrb	r3, [r7, #21]
 800262a:	3301      	adds	r3, #1
 800262c:	757b      	strb	r3, [r7, #21]
 800262e:	7d7b      	ldrb	r3, [r7, #21]
 8002630:	2b06      	cmp	r3, #6
 8002632:	d9d1      	bls.n	80025d8 <main+0x80>
	}
	TFT_Draw_Fill_Round_Rect (696, 413, 88, 47, 10,  0xD6BA);
 8002634:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	230a      	movs	r3, #10
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	232f      	movs	r3, #47	; 0x2f
 8002640:	2258      	movs	r2, #88	; 0x58
 8002642:	f240 119d 	movw	r1, #413	; 0x19d
 8002646:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 800264a:	f7ff fab8 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Rectangle(740, 413, 2, 47, 0x0000);
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	232f      	movs	r3, #47	; 0x2f
 8002654:	2202      	movs	r2, #2
 8002656:	f240 119d 	movw	r1, #413	; 0x19d
 800265a:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 800265e:	f7ff f9d2 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
	LCD_centered_Font(696, 413+24, 88, "+   -", _Open_Sans_Bold_48, 1, 0x4A69);
 8002662:	f644 2369 	movw	r3, #19049	; 0x4a69
 8002666:	9302      	str	r3, [sp, #8]
 8002668:	2301      	movs	r3, #1
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	4b50      	ldr	r3, [pc, #320]	; (80027b0 <main+0x258>)
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4b50      	ldr	r3, [pc, #320]	; (80027b4 <main+0x25c>)
 8002672:	2258      	movs	r2, #88	; 0x58
 8002674:	f240 11b5 	movw	r1, #437	; 0x1b5
 8002678:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 800267c:	f7ff fbb9 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(696, 9+25, 88, "X", _Open_Sans_Bold_48, 1, 0x7D3D);//literki po prawej
 8002680:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002684:	9302      	str	r3, [sp, #8]
 8002686:	2301      	movs	r3, #1
 8002688:	9301      	str	r3, [sp, #4]
 800268a:	4b49      	ldr	r3, [pc, #292]	; (80027b0 <main+0x258>)
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4b4a      	ldr	r3, [pc, #296]	; (80027b8 <main+0x260>)
 8002690:	2258      	movs	r2, #88	; 0x58
 8002692:	2122      	movs	r1, #34	; 0x22
 8002694:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002698:	f7ff fbab 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(696, 65+25, 88, "Y", _Open_Sans_Bold_48, 1, 0x7D3D);
 800269c:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	2301      	movs	r3, #1
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	4b42      	ldr	r3, [pc, #264]	; (80027b0 <main+0x258>)
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	4b44      	ldr	r3, [pc, #272]	; (80027bc <main+0x264>)
 80026ac:	2258      	movs	r2, #88	; 0x58
 80026ae:	215a      	movs	r1, #90	; 0x5a
 80026b0:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80026b4:	f7ff fb9d 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(696, 121+25, 88, "Z", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026b8:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026bc:	9302      	str	r3, [sp, #8]
 80026be:	2301      	movs	r3, #1
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <main+0x258>)
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	4b3e      	ldr	r3, [pc, #248]	; (80027c0 <main+0x268>)
 80026c8:	2258      	movs	r2, #88	; 0x58
 80026ca:	2192      	movs	r1, #146	; 0x92
 80026cc:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80026d0:	f7ff fb8f 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(696, 177+25, 88, "A", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026d4:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026d8:	9302      	str	r3, [sp, #8]
 80026da:	2301      	movs	r3, #1
 80026dc:	9301      	str	r3, [sp, #4]
 80026de:	4b34      	ldr	r3, [pc, #208]	; (80027b0 <main+0x258>)
 80026e0:	9300      	str	r3, [sp, #0]
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <main+0x26c>)
 80026e4:	2258      	movs	r2, #88	; 0x58
 80026e6:	21ca      	movs	r1, #202	; 0xca
 80026e8:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 80026ec:	f7ff fb81 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(696, 233+25, 88, "B", _Open_Sans_Bold_48, 1, 0x7D3D);
 80026f0:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80026f4:	9302      	str	r3, [sp, #8]
 80026f6:	2301      	movs	r3, #1
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <main+0x258>)
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4b32      	ldr	r3, [pc, #200]	; (80027c8 <main+0x270>)
 8002700:	2258      	movs	r2, #88	; 0x58
 8002702:	f44f 7181 	mov.w	r1, #258	; 0x102
 8002706:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 800270a:	f7ff fb72 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(696, 289+25, 88, "C", _Open_Sans_Bold_48, 1, 0x7D3D);
 800270e:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002712:	9302      	str	r3, [sp, #8]
 8002714:	2301      	movs	r3, #1
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <main+0x258>)
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <main+0x274>)
 800271e:	2258      	movs	r2, #88	; 0x58
 8002720:	f44f 719d 	mov.w	r1, #314	; 0x13a
 8002724:	f44f 702e 	mov.w	r0, #696	; 0x2b8
 8002728:	f7ff fb63 	bl	8001df2 <LCD_centered_Font>
	LCD_FillTriangle(732, 417,732, 417+38, 732+24, 417+19, 0x7D3D);
 800272c:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002730:	9302      	str	r3, [sp, #8]
 8002732:	f44f 73da 	mov.w	r3, #436	; 0x1b4
 8002736:	9301      	str	r3, [sp, #4]
 8002738:	f44f 733d 	mov.w	r3, #756	; 0x2f4
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	f240 13c7 	movw	r3, #455	; 0x1c7
 8002742:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8002746:	f240 11a1 	movw	r1, #417	; 0x1a1
 800274a:	f44f 7037 	mov.w	r0, #732	; 0x2dc
 800274e:	f7ff fd3d 	bl	80021cc <LCD_FillTriangle>
	TFT_Draw_Bitmap_Without_Background(721, 353, hand_icon_x, hand_icon_y, hand_icon);
 8002752:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <main+0x278>)
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	231f      	movs	r3, #31
 8002758:	2229      	movs	r2, #41	; 0x29
 800275a:	f240 1161 	movw	r1, #353	; 0x161
 800275e:	f240 20d1 	movw	r0, #721	; 0x2d1
 8002762:	f7ff f8c9 	bl	80018f8 <TFT_Draw_Bitmap_Without_Background>




    TFT_Draw_Fill_Rectangle(0,0, 20, 20, 0x8C51);//szary prostokąt z lewej
 8002766:	f648 4351 	movw	r3, #35921	; 0x8c51
 800276a:	9300      	str	r3, [sp, #0]
 800276c:	2314      	movs	r3, #20
 800276e:	2214      	movs	r2, #20
 8002770:	2100      	movs	r1, #0
 8002772:	2000      	movs	r0, #0
 8002774:	f7ff f947 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Rectangle(0,460, 20, 20, 0x8C51);
 8002778:	f648 4351 	movw	r3, #35921	; 0x8c51
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	2314      	movs	r3, #20
 8002780:	2214      	movs	r2, #20
 8002782:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8002786:	2000      	movs	r0, #0
 8002788:	f7ff f93d 	bl	8001a06 <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Round_Rect (0, 0, 120, 480, 20, 0x8C51);
 800278c:	f648 4351 	movw	r3, #35921	; 0x8c51
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	2314      	movs	r3, #20
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800279a:	2278      	movs	r2, #120	; 0x78
 800279c:	2100      	movs	r1, #0
 800279e:	2000      	movs	r0, #0
 80027a0:	f7ff fa0d 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
    pos_y = 33;
 80027a4:	2321      	movs	r3, #33	; 0x21
 80027a6:	82fb      	strh	r3, [r7, #22]
    for(uint8_t i = 0; i<8;i+=1)//przyciski po lewej
 80027a8:	2300      	movs	r3, #0
 80027aa:	753b      	strb	r3, [r7, #20]
 80027ac:	e023      	b.n	80027f6 <main+0x29e>
 80027ae:	bf00      	nop
 80027b0:	0800a138 	.word	0x0800a138
 80027b4:	08006a90 	.word	0x08006a90
 80027b8:	08006a98 	.word	0x08006a98
 80027bc:	08006a9c 	.word	0x08006a9c
 80027c0:	08006aa0 	.word	0x08006aa0
 80027c4:	08006aa4 	.word	0x08006aa4
 80027c8:	08006aa8 	.word	0x08006aa8
 80027cc:	08006aac 	.word	0x08006aac
 80027d0:	0800a144 	.word	0x0800a144
    {
        TFT_Draw_Fill_Round_Rect (16, pos_y, 88, 47, 10,  0xD6BA);
 80027d4:	8af9      	ldrh	r1, [r7, #22]
 80027d6:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	230a      	movs	r3, #10
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	232f      	movs	r3, #47	; 0x2f
 80027e2:	2258      	movs	r2, #88	; 0x58
 80027e4:	2010      	movs	r0, #16
 80027e6:	f7ff f9ea 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
        pos_y+=56;
 80027ea:	8afb      	ldrh	r3, [r7, #22]
 80027ec:	3338      	adds	r3, #56	; 0x38
 80027ee:	82fb      	strh	r3, [r7, #22]
    for(uint8_t i = 0; i<8;i+=1)//przyciski po lewej
 80027f0:	7d3b      	ldrb	r3, [r7, #20]
 80027f2:	3301      	adds	r3, #1
 80027f4:	753b      	strb	r3, [r7, #20]
 80027f6:	7d3b      	ldrb	r3, [r7, #20]
 80027f8:	2b07      	cmp	r3, #7
 80027fa:	d9eb      	bls.n	80027d4 <main+0x27c>
    }
    LCD_centered_Font(0, 0+16, 120, "JOB NAME", _Open_Sans_Bold_14, 1, BLACK);
 80027fc:	2300      	movs	r3, #0
 80027fe:	9302      	str	r3, [sp, #8]
 8002800:	2301      	movs	r3, #1
 8002802:	9301      	str	r3, [sp, #4]
 8002804:	4bc3      	ldr	r3, [pc, #780]	; (8002b14 <main+0x5bc>)
 8002806:	9300      	str	r3, [sp, #0]
 8002808:	4bc3      	ldr	r3, [pc, #780]	; (8002b18 <main+0x5c0>)
 800280a:	2278      	movs	r2, #120	; 0x78
 800280c:	2110      	movs	r1, #16
 800280e:	2000      	movs	r0, #0
 8002810:	f7ff faef 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 33+24, 88, "OPEN", _Open_Sans_Bold_14, 1, 0x7D3D);//literki po lewej
 8002814:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002818:	9302      	str	r3, [sp, #8]
 800281a:	2301      	movs	r3, #1
 800281c:	9301      	str	r3, [sp, #4]
 800281e:	4bbd      	ldr	r3, [pc, #756]	; (8002b14 <main+0x5bc>)
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	4bbe      	ldr	r3, [pc, #760]	; (8002b1c <main+0x5c4>)
 8002824:	2258      	movs	r2, #88	; 0x58
 8002826:	2139      	movs	r1, #57	; 0x39
 8002828:	2010      	movs	r0, #16
 800282a:	f7ff fae2 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 89+24, 88, "CONT. JOB", _Open_Sans_Bold_14, 1, 0x7D3D);
 800282e:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002832:	9302      	str	r3, [sp, #8]
 8002834:	2301      	movs	r3, #1
 8002836:	9301      	str	r3, [sp, #4]
 8002838:	4bb6      	ldr	r3, [pc, #728]	; (8002b14 <main+0x5bc>)
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	4bb8      	ldr	r3, [pc, #736]	; (8002b20 <main+0x5c8>)
 800283e:	2258      	movs	r2, #88	; 0x58
 8002840:	2171      	movs	r1, #113	; 0x71
 8002842:	2010      	movs	r0, #16
 8002844:	f7ff fad5 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 145+24, 88, "MANUAL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002848:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2301      	movs	r3, #1
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	4bb0      	ldr	r3, [pc, #704]	; (8002b14 <main+0x5bc>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4bb3      	ldr	r3, [pc, #716]	; (8002b24 <main+0x5cc>)
 8002858:	2258      	movs	r2, #88	; 0x58
 800285a:	21a9      	movs	r1, #169	; 0xa9
 800285c:	2010      	movs	r0, #16
 800285e:	f7ff fac8 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 201+14, 88, "ENABLE\nTOOL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002862:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002866:	9302      	str	r3, [sp, #8]
 8002868:	2301      	movs	r3, #1
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	4ba9      	ldr	r3, [pc, #676]	; (8002b14 <main+0x5bc>)
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4bad      	ldr	r3, [pc, #692]	; (8002b28 <main+0x5d0>)
 8002872:	2258      	movs	r2, #88	; 0x58
 8002874:	21d7      	movs	r1, #215	; 0xd7
 8002876:	2010      	movs	r0, #16
 8002878:	f7ff fabb 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 257+24, 88, "RUN JOB", _Open_Sans_Bold_14, 1, 0x7D3D);
 800287c:	f647 533d 	movw	r3, #32061	; 0x7d3d
 8002880:	9302      	str	r3, [sp, #8]
 8002882:	2301      	movs	r3, #1
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	4ba3      	ldr	r3, [pc, #652]	; (8002b14 <main+0x5bc>)
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	4ba8      	ldr	r3, [pc, #672]	; (8002b2c <main+0x5d4>)
 800288c:	2258      	movs	r2, #88	; 0x58
 800288e:	f240 1119 	movw	r1, #281	; 0x119
 8002892:	2010      	movs	r0, #16
 8002894:	f7ff faad 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 313+14, 88, "AXIS\nCONTROL", _Open_Sans_Bold_14, 1, 0x7D3D);
 8002898:	f647 533d 	movw	r3, #32061	; 0x7d3d
 800289c:	9302      	str	r3, [sp, #8]
 800289e:	2301      	movs	r3, #1
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	4b9c      	ldr	r3, [pc, #624]	; (8002b14 <main+0x5bc>)
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	4ba2      	ldr	r3, [pc, #648]	; (8002b30 <main+0x5d8>)
 80028a8:	2258      	movs	r2, #88	; 0x58
 80028aa:	f240 1147 	movw	r1, #327	; 0x147
 80028ae:	2010      	movs	r0, #16
 80028b0:	f7ff fa9f 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 369+14, 88, "CONT.\nMOVEMENT", _Open_Sans_Bold_14, 1, 0x7D3D);
 80028b4:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80028b8:	9302      	str	r3, [sp, #8]
 80028ba:	2301      	movs	r3, #1
 80028bc:	9301      	str	r3, [sp, #4]
 80028be:	4b95      	ldr	r3, [pc, #596]	; (8002b14 <main+0x5bc>)
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	4b9c      	ldr	r3, [pc, #624]	; (8002b34 <main+0x5dc>)
 80028c4:	2258      	movs	r2, #88	; 0x58
 80028c6:	f240 117f 	movw	r1, #383	; 0x17f
 80028ca:	2010      	movs	r0, #16
 80028cc:	f7ff fa91 	bl	8001df2 <LCD_centered_Font>
	LCD_centered_Font(16, 425+24, 88, "SETTINGS", _Open_Sans_Bold_14, 1, 0x7D3D);
 80028d0:	f647 533d 	movw	r3, #32061	; 0x7d3d
 80028d4:	9302      	str	r3, [sp, #8]
 80028d6:	2301      	movs	r3, #1
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <main+0x5bc>)
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4b96      	ldr	r3, [pc, #600]	; (8002b38 <main+0x5e0>)
 80028e0:	2258      	movs	r2, #88	; 0x58
 80028e2:	f240 11c1 	movw	r1, #449	; 0x1c1
 80028e6:	2010      	movs	r0, #16
 80028e8:	f7ff fa83 	bl	8001df2 <LCD_centered_Font>




	TFT_Draw_Fill_Round_Rect (132, 9, 70, 41, 20,  0xD6BA);//przyciski na gorze
 80028ec:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2314      	movs	r3, #20
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2329      	movs	r3, #41	; 0x29
 80028f8:	2246      	movs	r2, #70	; 0x46
 80028fa:	2109      	movs	r1, #9
 80028fc:	2084      	movs	r0, #132	; 0x84
 80028fe:	f7ff f95e 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (212, 9, 70, 41, 20,  0xD6BA);
 8002902:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002906:	9301      	str	r3, [sp, #4]
 8002908:	2314      	movs	r3, #20
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	2329      	movs	r3, #41	; 0x29
 800290e:	2246      	movs	r2, #70	; 0x46
 8002910:	2109      	movs	r1, #9
 8002912:	20d4      	movs	r0, #212	; 0xd4
 8002914:	f7ff f953 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (291, 9, 70, 41, 20,  0xD6BA);
 8002918:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2314      	movs	r3, #20
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	2329      	movs	r3, #41	; 0x29
 8002924:	2246      	movs	r2, #70	; 0x46
 8002926:	2109      	movs	r1, #9
 8002928:	f240 1023 	movw	r0, #291	; 0x123
 800292c:	f7ff f947 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (371, 9, 81, 41, 20,  0xD6BA);
 8002930:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	2314      	movs	r3, #20
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	2329      	movs	r3, #41	; 0x29
 800293c:	2251      	movs	r2, #81	; 0x51
 800293e:	2109      	movs	r1, #9
 8002940:	f240 1073 	movw	r0, #371	; 0x173
 8002944:	f7ff f93b 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (462, 9, 72, 41, 20,  0xD6BA);
 8002948:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800294c:	9301      	str	r3, [sp, #4]
 800294e:	2314      	movs	r3, #20
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	2329      	movs	r3, #41	; 0x29
 8002954:	2248      	movs	r2, #72	; 0x48
 8002956:	2109      	movs	r1, #9
 8002958:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 800295c:	f7ff f92f 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (544, 9, 72, 41, 20,  0xD6BA);
 8002960:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002964:	9301      	str	r3, [sp, #4]
 8002966:	2314      	movs	r3, #20
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	2329      	movs	r3, #41	; 0x29
 800296c:	2248      	movs	r2, #72	; 0x48
 800296e:	2109      	movs	r1, #9
 8002970:	f44f 7008 	mov.w	r0, #544	; 0x220
 8002974:	f7ff f923 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (628, 15, 40, 40, 20,  0xD6BA);
 8002978:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2314      	movs	r3, #20
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	2328      	movs	r3, #40	; 0x28
 8002984:	2228      	movs	r2, #40	; 0x28
 8002986:	210f      	movs	r1, #15
 8002988:	f44f 701d 	mov.w	r0, #628	; 0x274
 800298c:	f7ff f917 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (628, 88, 40, 40, 20,  0xD6BA);
 8002990:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002994:	9301      	str	r3, [sp, #4]
 8002996:	2314      	movs	r3, #20
 8002998:	9300      	str	r3, [sp, #0]
 800299a:	2328      	movs	r3, #40	; 0x28
 800299c:	2228      	movs	r2, #40	; 0x28
 800299e:	2158      	movs	r1, #88	; 0x58
 80029a0:	f44f 701d 	mov.w	r0, #628	; 0x274
 80029a4:	f7ff f90b 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (211, 68, 61, 21, 10,  0xD6BA);
 80029a8:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	230a      	movs	r3, #10
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2315      	movs	r3, #21
 80029b4:	223d      	movs	r2, #61	; 0x3d
 80029b6:	2144      	movs	r1, #68	; 0x44
 80029b8:	20d3      	movs	r0, #211	; 0xd3
 80029ba:	f7ff f900 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (211, 109, 61, 21, 10,  0xD6BA);
 80029be:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	230a      	movs	r3, #10
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2315      	movs	r3, #21
 80029ca:	223d      	movs	r2, #61	; 0x3d
 80029cc:	216d      	movs	r1, #109	; 0x6d
 80029ce:	20d3      	movs	r0, #211	; 0xd3
 80029d0:	f7ff f8f5 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (362, 68, 61, 21, 10,  0xD6BA);
 80029d4:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	230a      	movs	r3, #10
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	2315      	movs	r3, #21
 80029e0:	223d      	movs	r2, #61	; 0x3d
 80029e2:	2144      	movs	r1, #68	; 0x44
 80029e4:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 80029e8:	f7ff f8e9 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (362, 109, 61, 21, 10,  0xD6BA);
 80029ec:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	230a      	movs	r3, #10
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2315      	movs	r3, #21
 80029f8:	223d      	movs	r2, #61	; 0x3d
 80029fa:	216d      	movs	r1, #109	; 0x6d
 80029fc:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002a00:	f7ff f8dd 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (532, 68, 61, 21, 10,  0xD6BA);
 8002a04:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	230a      	movs	r3, #10
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	2315      	movs	r3, #21
 8002a10:	223d      	movs	r2, #61	; 0x3d
 8002a12:	2144      	movs	r1, #68	; 0x44
 8002a14:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002a18:	f7ff f8d1 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
	TFT_Draw_Fill_Round_Rect (532, 109, 61, 21, 10,  0xD6BA);
 8002a1c:	f24d 63ba 	movw	r3, #54970	; 0xd6ba
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	230a      	movs	r3, #10
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2315      	movs	r3, #21
 8002a28:	223d      	movs	r2, #61	; 0x3d
 8002a2a:	216d      	movs	r1, #109	; 0x6d
 8002a2c:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002a30:	f7ff f8c5 	bl	8001bbe <TFT_Draw_Fill_Round_Rect>
    LCD_centered_Font(132, 9+22, 70, "SELECT", _Open_Sans_Bold_14, 1, BLACK);//opisy przyciskow
 8002a34:	2300      	movs	r3, #0
 8002a36:	9302      	str	r3, [sp, #8]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	4b35      	ldr	r3, [pc, #212]	; (8002b14 <main+0x5bc>)
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	4b3e      	ldr	r3, [pc, #248]	; (8002b3c <main+0x5e4>)
 8002a42:	2246      	movs	r2, #70	; 0x46
 8002a44:	211f      	movs	r1, #31
 8002a46:	2084      	movs	r0, #132	; 0x84
 8002a48:	f7ff f9d3 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(212, 9+22, 70, "NEW P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9302      	str	r3, [sp, #8]
 8002a50:	2301      	movs	r3, #1
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	4b2f      	ldr	r3, [pc, #188]	; (8002b14 <main+0x5bc>)
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <main+0x5e8>)
 8002a5a:	2246      	movs	r2, #70	; 0x46
 8002a5c:	211f      	movs	r1, #31
 8002a5e:	20d4      	movs	r0, #212	; 0xd4
 8002a60:	f7ff f9c7 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(291, 9+22, 70, "EDIT P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a64:	2300      	movs	r3, #0
 8002a66:	9302      	str	r3, [sp, #8]
 8002a68:	2301      	movs	r3, #1
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	4b29      	ldr	r3, [pc, #164]	; (8002b14 <main+0x5bc>)
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	4b34      	ldr	r3, [pc, #208]	; (8002b44 <main+0x5ec>)
 8002a72:	2246      	movs	r2, #70	; 0x46
 8002a74:	211f      	movs	r1, #31
 8002a76:	f240 1023 	movw	r0, #291	; 0x123
 8002a7a:	f7ff f9ba 	bl	8001df2 <LCD_centered_Font>
    LCD_Font(371, 9+22,  "DELETE P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2301      	movs	r3, #1
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <main+0x5bc>)
 8002a88:	4a2f      	ldr	r2, [pc, #188]	; (8002b48 <main+0x5f0>)
 8002a8a:	211f      	movs	r1, #31
 8002a8c:	f240 1073 	movw	r0, #371	; 0x173
 8002a90:	f7ff fb14 	bl	80020bc <LCD_Font>
    LCD_centered_Font(462, 9+22, 70, "SET T.P.", _Open_Sans_Bold_14, 1, BLACK);
 8002a94:	2300      	movs	r3, #0
 8002a96:	9302      	str	r3, [sp, #8]
 8002a98:	2301      	movs	r3, #1
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <main+0x5bc>)
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <main+0x5f4>)
 8002aa2:	2246      	movs	r2, #70	; 0x46
 8002aa4:	211f      	movs	r1, #31
 8002aa6:	f44f 70e7 	mov.w	r0, #462	; 0x1ce
 8002aaa:	f7ff f9a2 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(544, 9+22, 70, "SET H.P", _Open_Sans_Bold_14, 1, BLACK);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9302      	str	r3, [sp, #8]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	9301      	str	r3, [sp, #4]
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <main+0x5bc>)
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <main+0x5f8>)
 8002abc:	2246      	movs	r2, #70	; 0x46
 8002abe:	211f      	movs	r1, #31
 8002ac0:	f44f 7008 	mov.w	r0, #544	; 0x220
 8002ac4:	f7ff f995 	bl	8001df2 <LCD_centered_Font>
    LCD_Font(155, 67+11, "Name:", _Open_Sans_Bold_14, 1, BLACK);
 8002ac8:	2300      	movs	r3, #0
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2301      	movs	r3, #1
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <main+0x5bc>)
 8002ad2:	4a20      	ldr	r2, [pc, #128]	; (8002b54 <main+0x5fc>)
 8002ad4:	214e      	movs	r1, #78	; 0x4e
 8002ad6:	209b      	movs	r0, #155	; 0x9b
 8002ad8:	f7ff faf0 	bl	80020bc <LCD_Font>
    LCD_Font(155, 109+11, "Tool:", _Open_Sans_Bold_14, 1, BLACK);
 8002adc:	2300      	movs	r3, #0
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <main+0x5bc>)
 8002ae6:	4a1c      	ldr	r2, [pc, #112]	; (8002b58 <main+0x600>)
 8002ae8:	2178      	movs	r1, #120	; 0x78
 8002aea:	209b      	movs	r0, #155	; 0x9b
 8002aec:	f7ff fae6 	bl	80020bc <LCD_Font>
    LCD_Font(295, 67+11, "Move:", _Open_Sans_Bold_14, 1, BLACK);
 8002af0:	2300      	movs	r3, #0
 8002af2:	9301      	str	r3, [sp, #4]
 8002af4:	2301      	movs	r3, #1
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <main+0x5bc>)
 8002afa:	4a18      	ldr	r2, [pc, #96]	; (8002b5c <main+0x604>)
 8002afc:	214e      	movs	r1, #78	; 0x4e
 8002afe:	f240 1027 	movw	r0, #295	; 0x127
 8002b02:	f7ff fadb 	bl	80020bc <LCD_Font>
    LCD_Font(295, 109+11, "Speed:", _Open_Sans_Bold_14, 1, BLACK);
 8002b06:	2300      	movs	r3, #0
 8002b08:	9301      	str	r3, [sp, #4]
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <main+0x5bc>)
 8002b10:	e026      	b.n	8002b60 <main+0x608>
 8002b12:	bf00      	nop
 8002b14:	08007288 	.word	0x08007288
 8002b18:	08006ab0 	.word	0x08006ab0
 8002b1c:	08006abc 	.word	0x08006abc
 8002b20:	08006ac4 	.word	0x08006ac4
 8002b24:	08006ad0 	.word	0x08006ad0
 8002b28:	08006ad8 	.word	0x08006ad8
 8002b2c:	08006ae4 	.word	0x08006ae4
 8002b30:	08006aec 	.word	0x08006aec
 8002b34:	08006afc 	.word	0x08006afc
 8002b38:	08006b0c 	.word	0x08006b0c
 8002b3c:	08006b18 	.word	0x08006b18
 8002b40:	08006b20 	.word	0x08006b20
 8002b44:	08006b28 	.word	0x08006b28
 8002b48:	08006b30 	.word	0x08006b30
 8002b4c:	08006b3c 	.word	0x08006b3c
 8002b50:	08006b48 	.word	0x08006b48
 8002b54:	08006b50 	.word	0x08006b50
 8002b58:	08006b58 	.word	0x08006b58
 8002b5c:	08006b60 	.word	0x08006b60
 8002b60:	4ac1      	ldr	r2, [pc, #772]	; (8002e68 <main+0x910>)
 8002b62:	2178      	movs	r1, #120	; 0x78
 8002b64:	f240 1027 	movw	r0, #295	; 0x127
 8002b68:	f7ff faa8 	bl	80020bc <LCD_Font>
    LCD_Font(446, 67+11, "Type:", _Open_Sans_Bold_14, 1, BLACK);
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	2301      	movs	r3, #1
 8002b72:	9300      	str	r3, [sp, #0]
 8002b74:	4bbd      	ldr	r3, [pc, #756]	; (8002e6c <main+0x914>)
 8002b76:	4abe      	ldr	r2, [pc, #760]	; (8002e70 <main+0x918>)
 8002b78:	214e      	movs	r1, #78	; 0x4e
 8002b7a:	f44f 70df 	mov.w	r0, #446	; 0x1be
 8002b7e:	f7ff fa9d 	bl	80020bc <LCD_Font>
    LCD_Font(446, 109+11, "at Target:", _Open_Sans_Bold_14, 1, BLACK);
 8002b82:	2300      	movs	r3, #0
 8002b84:	9301      	str	r3, [sp, #4]
 8002b86:	2301      	movs	r3, #1
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4bb8      	ldr	r3, [pc, #736]	; (8002e6c <main+0x914>)
 8002b8c:	4ab9      	ldr	r2, [pc, #740]	; (8002e74 <main+0x91c>)
 8002b8e:	2178      	movs	r1, #120	; 0x78
 8002b90:	f44f 70df 	mov.w	r0, #446	; 0x1be
 8002b94:	f7ff fa92 	bl	80020bc <LCD_Font>
    LCD_centered_Font(211, 68+11, 61, "P11", _Open_Sans_Bold_14, 1, BLACK);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9302      	str	r3, [sp, #8]
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	9301      	str	r3, [sp, #4]
 8002ba0:	4bb2      	ldr	r3, [pc, #712]	; (8002e6c <main+0x914>)
 8002ba2:	9300      	str	r3, [sp, #0]
 8002ba4:	4bb4      	ldr	r3, [pc, #720]	; (8002e78 <main+0x920>)
 8002ba6:	223d      	movs	r2, #61	; 0x3d
 8002ba8:	214f      	movs	r1, #79	; 0x4f
 8002baa:	20d3      	movs	r0, #211	; 0xd3
 8002bac:	f7ff f921 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(211, 109+11, 41, "OFF", _Open_Sans_Bold_14, 1, BLACK);
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	9302      	str	r3, [sp, #8]
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	4bac      	ldr	r3, [pc, #688]	; (8002e6c <main+0x914>)
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	4baf      	ldr	r3, [pc, #700]	; (8002e7c <main+0x924>)
 8002bbe:	2229      	movs	r2, #41	; 0x29
 8002bc0:	2178      	movs	r1, #120	; 0x78
 8002bc2:	20d3      	movs	r0, #211	; 0xd3
 8002bc4:	f7ff f915 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(362, 68+11, 41, "Circ", _Open_Sans_Bold_14, 1, BLACK);
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9302      	str	r3, [sp, #8]
 8002bcc:	2301      	movs	r3, #1
 8002bce:	9301      	str	r3, [sp, #4]
 8002bd0:	4ba6      	ldr	r3, [pc, #664]	; (8002e6c <main+0x914>)
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	4baa      	ldr	r3, [pc, #680]	; (8002e80 <main+0x928>)
 8002bd6:	2229      	movs	r2, #41	; 0x29
 8002bd8:	214f      	movs	r1, #79	; 0x4f
 8002bda:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002bde:	f7ff f908 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(362, 109+11, 41, "100%", _Open_Sans_Bold_14, 1, BLACK);
 8002be2:	2300      	movs	r3, #0
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	2301      	movs	r3, #1
 8002be8:	9301      	str	r3, [sp, #4]
 8002bea:	4ba0      	ldr	r3, [pc, #640]	; (8002e6c <main+0x914>)
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	4ba5      	ldr	r3, [pc, #660]	; (8002e84 <main+0x92c>)
 8002bf0:	2229      	movs	r2, #41	; 0x29
 8002bf2:	2178      	movs	r1, #120	; 0x78
 8002bf4:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8002bf8:	f7ff f8fb 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(532, 68+11, 41, "Cont", _Open_Sans_Bold_14, 1, BLACK);
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	9302      	str	r3, [sp, #8]
 8002c00:	2301      	movs	r3, #1
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	4b99      	ldr	r3, [pc, #612]	; (8002e6c <main+0x914>)
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	4b9f      	ldr	r3, [pc, #636]	; (8002e88 <main+0x930>)
 8002c0a:	2229      	movs	r2, #41	; 0x29
 8002c0c:	214f      	movs	r1, #79	; 0x4f
 8002c0e:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002c12:	f7ff f8ee 	bl	8001df2 <LCD_centered_Font>
    LCD_centered_Font(532, 109+11, 61, "YES", _Open_Sans_Bold_14, 1, BLACK);
 8002c16:	2300      	movs	r3, #0
 8002c18:	9302      	str	r3, [sp, #8]
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	9301      	str	r3, [sp, #4]
 8002c1e:	4b93      	ldr	r3, [pc, #588]	; (8002e6c <main+0x914>)
 8002c20:	9300      	str	r3, [sp, #0]
 8002c22:	4b9a      	ldr	r3, [pc, #616]	; (8002e8c <main+0x934>)
 8002c24:	223d      	movs	r2, #61	; 0x3d
 8002c26:	2178      	movs	r1, #120	; 0x78
 8002c28:	f44f 7005 	mov.w	r0, #532	; 0x214
 8002c2c:	f7ff f8e1 	bl	8001df2 <LCD_centered_Font>
	LCD_FillTriangle(636, 42,636+23, 42, 647, 22, 0x00FD);
 8002c30:	23fd      	movs	r3, #253	; 0xfd
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	2316      	movs	r3, #22
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	f240 2387 	movw	r3, #647	; 0x287
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	232a      	movs	r3, #42	; 0x2a
 8002c40:	f240 2293 	movw	r2, #659	; 0x293
 8002c44:	212a      	movs	r1, #42	; 0x2a
 8002c46:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8002c4a:	f7ff fabf 	bl	80021cc <LCD_FillTriangle>
	LCD_FillTriangle(636, 42+59,636+23, 42+59, 647, 22+40+59, 0x00FD);
 8002c4e:	23fd      	movs	r3, #253	; 0xfd
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2379      	movs	r3, #121	; 0x79
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	f240 2387 	movw	r3, #647	; 0x287
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2365      	movs	r3, #101	; 0x65
 8002c5e:	f240 2293 	movw	r2, #659	; 0x293
 8002c62:	2165      	movs	r1, #101	; 0x65
 8002c64:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8002c68:	f7ff fab0 	bl	80021cc <LCD_FillTriangle>
	LCD_FillTriangle(574, 74,573+13, 74, 580, 74+11, 0x00FD);
 8002c6c:	23fd      	movs	r3, #253	; 0xfd
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	2355      	movs	r3, #85	; 0x55
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	f44f 7311 	mov.w	r3, #580	; 0x244
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	234a      	movs	r3, #74	; 0x4a
 8002c7c:	f240 224a 	movw	r2, #586	; 0x24a
 8002c80:	214a      	movs	r1, #74	; 0x4a
 8002c82:	f240 203e 	movw	r0, #574	; 0x23e
 8002c86:	f7ff faa1 	bl	80021cc <LCD_FillTriangle>
	//LCD_FillTriangle(574, 74+41,573+13, 74+41, 580, 74+11+41, 0x00FD);
	LCD_FillTriangle(574-170, 74,573+13-170, 74, 580-170, 74+11, 0x00FD);
 8002c8a:	23fd      	movs	r3, #253	; 0xfd
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	2355      	movs	r3, #85	; 0x55
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	234a      	movs	r3, #74	; 0x4a
 8002c9a:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002c9e:	214a      	movs	r1, #74	; 0x4a
 8002ca0:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8002ca4:	f7ff fa92 	bl	80021cc <LCD_FillTriangle>
	LCD_FillTriangle(574-170, 74+41,573+13-170, 74+41, 580-170, 74+11+41, 0x00FD);
 8002ca8:	23fd      	movs	r3, #253	; 0xfd
 8002caa:	9302      	str	r3, [sp, #8]
 8002cac:	237e      	movs	r3, #126	; 0x7e
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2373      	movs	r3, #115	; 0x73
 8002cb8:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8002cbc:	2173      	movs	r1, #115	; 0x73
 8002cbe:	f44f 70ca 	mov.w	r0, #404	; 0x194
 8002cc2:	f7ff fa83 	bl	80021cc <LCD_FillTriangle>
	LCD_FillTriangle(574-322, 74+41,573+13-322, 74+41, 580-322, 74+11+41, 0x00FD);
 8002cc6:	23fd      	movs	r3, #253	; 0xfd
 8002cc8:	9302      	str	r3, [sp, #8]
 8002cca:	237e      	movs	r3, #126	; 0x7e
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	f44f 7381 	mov.w	r3, #258	; 0x102
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2373      	movs	r3, #115	; 0x73
 8002cd6:	f44f 7284 	mov.w	r2, #264	; 0x108
 8002cda:	2173      	movs	r1, #115	; 0x73
 8002cdc:	20fc      	movs	r0, #252	; 0xfc
 8002cde:	f7ff fa75 	bl	80021cc <LCD_FillTriangle>
    TFT_Draw_Fill_Round_Rect (700, 300, 80, 80, 10,  BLUE);
    LCD_Font(700, 350, "nArA", _Open_Sans_Bold_10, 2, WHITE);
    TFT_Draw_Circle(300, 340, 40, 1, 10, WHITE);*/
	//TFT_Draw_Bitmap(421, 353, hand_icon_x, hand_icon_y, hand_icon);

    int allertX = 220;	//MAX size is 220x200 - with bigger tabs malloc has problem
 8002ce2:	23dc      	movs	r3, #220	; 0xdc
 8002ce4:	613b      	str	r3, [r7, #16]
    int allertY = 200;
 8002ce6:	23c8      	movs	r3, #200	; 0xc8
 8002ce8:	60fb      	str	r3, [r7, #12]
    uint16_t *save = (uint16_t *)malloc(allertX* allertY * sizeof(uint16_t));
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	005b      	lsls	r3, r3, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f9fd 	bl	80040f4 <malloc>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	60bb      	str	r3, [r7, #8]

  while (1)
  {

	  	  	  	  	  	  	HAL_Delay(1000);
 8002cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d02:	f000 fb2b 	bl	800335c <HAL_Delay>
	  	  	  	  	  	  	uint16_t counter = TFT_Draw_List(400, 200, 100, "TYPE:", "powitanie",  save, _Open_Sans_Bold_14);
 8002d06:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <main+0x914>)
 8002d08:	9302      	str	r3, [sp, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	9301      	str	r3, [sp, #4]
 8002d0e:	4b60      	ldr	r3, [pc, #384]	; (8002e90 <main+0x938>)
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	4b60      	ldr	r3, [pc, #384]	; (8002e94 <main+0x93c>)
 8002d14:	2264      	movs	r2, #100	; 0x64
 8002d16:	21c8      	movs	r1, #200	; 0xc8
 8002d18:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d1c:	f7fe fb85 	bl	800142a <TFT_Draw_List>
 8002d20:	4603      	mov	r3, r0
 8002d22:	80fb      	strh	r3, [r7, #6]
	  	  	  	  	  	  	HAL_Delay(1000);
 8002d24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d28:	f000 fb18 	bl	800335c <HAL_Delay>
	  	  	  	  	  	  	TFT_Restore_Area(400, 200, 100, 47+1+34+35*counter, save);
 8002d2c:	88fb      	ldrh	r3, [r7, #6]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	461a      	mov	r2, r3
 8002d36:	00d2      	lsls	r2, r2, #3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	3352      	adds	r3, #82	; 0x52
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	4613      	mov	r3, r2
 8002d46:	2264      	movs	r2, #100	; 0x64
 8002d48:	21c8      	movs	r1, #200	; 0xc8
 8002d4a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d4e:	f7fe fd29 	bl	80017a4 <TFT_Restore_Area>

							HAL_Delay(1000);
 8002d52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d56:	f000 fb01 	bl	800335c <HAL_Delay>
							uint16_t counter2 = TFT_Draw_List(400, 200, 100, "TYPE:", "hejka bajo narka",  save, _Open_Sans_Bold_14);
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <main+0x914>)
 8002d5c:	9302      	str	r3, [sp, #8]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	9301      	str	r3, [sp, #4]
 8002d62:	4b4d      	ldr	r3, [pc, #308]	; (8002e98 <main+0x940>)
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4b4b      	ldr	r3, [pc, #300]	; (8002e94 <main+0x93c>)
 8002d68:	2264      	movs	r2, #100	; 0x64
 8002d6a:	21c8      	movs	r1, #200	; 0xc8
 8002d6c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002d70:	f7fe fb5b 	bl	800142a <TFT_Draw_List>
 8002d74:	4603      	mov	r3, r0
 8002d76:	80bb      	strh	r3, [r7, #4]
							HAL_Delay(1000);
 8002d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d7c:	f000 faee 	bl	800335c <HAL_Delay>
							TFT_Restore_Area(400, 200, 100, 47+1+34+35*counter2, save);
 8002d80:	88bb      	ldrh	r3, [r7, #4]
 8002d82:	461a      	mov	r2, r3
 8002d84:	0092      	lsls	r2, r2, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	00d2      	lsls	r2, r2, #3
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3352      	adds	r3, #82	; 0x52
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	2264      	movs	r2, #100	; 0x64
 8002d9c:	21c8      	movs	r1, #200	; 0xc8
 8002d9e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002da2:	f7fe fcff 	bl	80017a4 <TFT_Restore_Area>

							HAL_Delay(1000);
 8002da6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002daa:	f000 fad7 	bl	800335c <HAL_Delay>
							uint16_t counter3 = TFT_Draw_List(400, 200, 100, "TYPE:", "placek ciastko lody lizak",  save, _Open_Sans_Bold_14);
 8002dae:	4b2f      	ldr	r3, [pc, #188]	; (8002e6c <main+0x914>)
 8002db0:	9302      	str	r3, [sp, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <main+0x944>)
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <main+0x93c>)
 8002dbc:	2264      	movs	r2, #100	; 0x64
 8002dbe:	21c8      	movs	r1, #200	; 0xc8
 8002dc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002dc4:	f7fe fb31 	bl	800142a <TFT_Draw_List>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	807b      	strh	r3, [r7, #2]
							HAL_Delay(1000);
 8002dcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dd0:	f000 fac4 	bl	800335c <HAL_Delay>
							TFT_Restore_Area(400, 200, 100, 47+1+34+35*counter3, save);
 8002dd4:	887b      	ldrh	r3, [r7, #2]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	0092      	lsls	r2, r2, #2
 8002dda:	4413      	add	r3, r2
 8002ddc:	461a      	mov	r2, r3
 8002dde:	00d2      	lsls	r2, r2, #3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3352      	adds	r3, #82	; 0x52
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	2264      	movs	r2, #100	; 0x64
 8002df0:	21c8      	movs	r1, #200	; 0xc8
 8002df2:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002df6:	f7fe fcd5 	bl	80017a4 <TFT_Restore_Area>
							HAL_Delay(1000);
 8002dfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dfe:	f000 faad 	bl	800335c <HAL_Delay>
							uint16_t counter4 = TFT_Draw_List(400, 200, 100, "TYPE:", "",  save, _Open_Sans_Bold_14);
 8002e02:	4b1a      	ldr	r3, [pc, #104]	; (8002e6c <main+0x914>)
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	4b25      	ldr	r3, [pc, #148]	; (8002ea0 <main+0x948>)
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4b21      	ldr	r3, [pc, #132]	; (8002e94 <main+0x93c>)
 8002e10:	2264      	movs	r2, #100	; 0x64
 8002e12:	21c8      	movs	r1, #200	; 0xc8
 8002e14:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e18:	f7fe fb07 	bl	800142a <TFT_Draw_List>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	803b      	strh	r3, [r7, #0]
							HAL_Delay(1000);
 8002e20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e24:	f000 fa9a 	bl	800335c <HAL_Delay>
							TFT_Restore_Area(400, 200, 100, 47+1+34+35*counter4, save);
 8002e28:	883b      	ldrh	r3, [r7, #0]
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	0092      	lsls	r2, r2, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	00d2      	lsls	r2, r2, #3
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3352      	adds	r3, #82	; 0x52
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	2264      	movs	r2, #100	; 0x64
 8002e44:	21c8      	movs	r1, #200	; 0xc8
 8002e46:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002e4a:	f7fe fcab 	bl	80017a4 <TFT_Restore_Area>

	  	  	  	  	  	  	HAL_Delay(3000);
 8002e4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002e52:	f000 fa83 	bl	800335c <HAL_Delay>
	  	  					TFT_Draw_Alert (allertX, allertY, "to jest przykladowy alert do celow demonstracyjnych i testowych",  save, _Open_Sans_Bold_20);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	b298      	uxth	r0, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	b299      	uxth	r1, r3
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <main+0x94c>)
 8002e60:	9300      	str	r3, [sp, #0]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	e020      	b.n	8002ea8 <main+0x950>
 8002e66:	bf00      	nop
 8002e68:	08006b68 	.word	0x08006b68
 8002e6c:	08007288 	.word	0x08007288
 8002e70:	08006b70 	.word	0x08006b70
 8002e74:	08006b78 	.word	0x08006b78
 8002e78:	08006b84 	.word	0x08006b84
 8002e7c:	08006b88 	.word	0x08006b88
 8002e80:	08006b8c 	.word	0x08006b8c
 8002e84:	08006b94 	.word	0x08006b94
 8002e88:	08006b9c 	.word	0x08006b9c
 8002e8c:	08006ba4 	.word	0x08006ba4
 8002e90:	08006bb0 	.word	0x08006bb0
 8002e94:	08006ba8 	.word	0x08006ba8
 8002e98:	08006bbc 	.word	0x08006bbc
 8002e9c:	08006bd0 	.word	0x08006bd0
 8002ea0:	08006bec 	.word	0x08006bec
 8002ea4:	08007bcc 	.word	0x08007bcc
 8002ea8:	4a10      	ldr	r2, [pc, #64]	; (8002eec <main+0x994>)
 8002eaa:	f7fe fc03 	bl	80016b4 <TFT_Draw_Alert>
	  	  					HAL_Delay(3000);
 8002eae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002eb2:	f000 fa53 	bl	800335c <HAL_Delay>
	  	  					TFT_Restore_Area(TFT_WIDTH/2-(allertX/2), TFT_HEIGHT/2-(allertY/2), allertX, allertY, save);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	0fda      	lsrs	r2, r3, #31
 8002eba:	4413      	add	r3, r2
 8002ebc:	105b      	asrs	r3, r3, #1
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8002ec4:	b298      	uxth	r0, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	0fda      	lsrs	r2, r3, #31
 8002eca:	4413      	add	r3, r2
 8002ecc:	105b      	asrs	r3, r3, #1
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002ed4:	b299      	uxth	r1, r3
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	b29c      	uxth	r4, r3
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	4623      	mov	r3, r4
 8002ee4:	f7fe fc5e 	bl	80017a4 <TFT_Restore_Area>
  {
 8002ee8:	e709      	b.n	8002cfe <main+0x7a6>
 8002eea:	bf00      	nop
 8002eec:	08006bf0 	.word	0x08006bf0

08002ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b094      	sub	sp, #80	; 0x50
 8002ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ef6:	f107 0320 	add.w	r3, r7, #32
 8002efa:	2230      	movs	r2, #48	; 0x30
 8002efc:	2100      	movs	r1, #0
 8002efe:	4618      	mov	r0, r3
 8002f00:	f001 ff17 	bl	8004d32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f04:	f107 030c 	add.w	r3, r7, #12
 8002f08:	2200      	movs	r2, #0
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	605a      	str	r2, [r3, #4]
 8002f0e:	609a      	str	r2, [r3, #8]
 8002f10:	60da      	str	r2, [r3, #12]
 8002f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f14:	2300      	movs	r3, #0
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	4b28      	ldr	r3, [pc, #160]	; (8002fbc <SystemClock_Config+0xcc>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4a27      	ldr	r2, [pc, #156]	; (8002fbc <SystemClock_Config+0xcc>)
 8002f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6413      	str	r3, [r2, #64]	; 0x40
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <SystemClock_Config+0xcc>)
 8002f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2c:	60bb      	str	r3, [r7, #8]
 8002f2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	4b22      	ldr	r3, [pc, #136]	; (8002fc0 <SystemClock_Config+0xd0>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f3c:	4a20      	ldr	r2, [pc, #128]	; (8002fc0 <SystemClock_Config+0xd0>)
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <SystemClock_Config+0xd0>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f4c:	607b      	str	r3, [r7, #4]
 8002f4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f50:	2302      	movs	r3, #2
 8002f52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f54:	2301      	movs	r3, #1
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f58:	2310      	movs	r3, #16
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f60:	2300      	movs	r3, #0
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f64:	2308      	movs	r3, #8
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002f68:	2354      	movs	r3, #84	; 0x54
 8002f6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f70:	2304      	movs	r3, #4
 8002f72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f74:	f107 0320 	add.w	r3, r7, #32
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f000 fc97 	bl	80038ac <HAL_RCC_OscConfig>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002f84:	f000 f81e 	bl	8002fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f88:	230f      	movs	r3, #15
 8002f8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f000 fef9 	bl	8003d9c <HAL_RCC_ClockConfig>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002fb0:	f000 f808 	bl	8002fc4 <Error_Handler>
  }
}
 8002fb4:	bf00      	nop
 8002fb6:	3750      	adds	r7, #80	; 0x50
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000

08002fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fc8:	b672      	cpsid	i
}
 8002fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <Error_Handler+0x8>
	...

08002fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	4b10      	ldr	r3, [pc, #64]	; (800301c <HAL_MspInit+0x4c>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	4a0f      	ldr	r2, [pc, #60]	; (800301c <HAL_MspInit+0x4c>)
 8002fe0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	; (800301c <HAL_MspInit+0x4c>)
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fee:	607b      	str	r3, [r7, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4b09      	ldr	r3, [pc, #36]	; (800301c <HAL_MspInit+0x4c>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a08      	ldr	r2, [pc, #32]	; (800301c <HAL_MspInit+0x4c>)
 8002ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_MspInit+0x4c>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800300e:	bf00      	nop
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003024:	e7fe      	b.n	8003024 <NMI_Handler+0x4>

08003026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302a:	e7fe      	b.n	800302a <HardFault_Handler+0x4>

0800302c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003030:	e7fe      	b.n	8003030 <MemManage_Handler+0x4>

08003032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003032:	b480      	push	{r7}
 8003034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003036:	e7fe      	b.n	8003036 <BusFault_Handler+0x4>

08003038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800303c:	e7fe      	b.n	800303c <UsageFault_Handler+0x4>

0800303e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303e:	b480      	push	{r7}
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003042:	bf00      	nop
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr

0800305a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305a:	b480      	push	{r7}
 800305c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800306c:	f000 f956 	bl	800331c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003070:	bf00      	nop
 8003072:	bd80      	pop	{r7, pc}

08003074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return 1;
 8003078:	2301      	movs	r3, #1
}
 800307a:	4618      	mov	r0, r3
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <_kill>:

int _kill(int pid, int sig)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800308e:	f001 feb3 	bl	8004df8 <__errno>
 8003092:	4603      	mov	r3, r0
 8003094:	2216      	movs	r2, #22
 8003096:	601a      	str	r2, [r3, #0]
  return -1;
 8003098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <_exit>:

void _exit (int status)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff ffe7 	bl	8003084 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030b6:	e7fe      	b.n	80030b6 <_exit+0x12>

080030b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b086      	sub	sp, #24
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c4:	2300      	movs	r3, #0
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	e00a      	b.n	80030e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030ca:	f3af 8000 	nop.w
 80030ce:	4601      	mov	r1, r0
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	60ba      	str	r2, [r7, #8]
 80030d6:	b2ca      	uxtb	r2, r1
 80030d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	3301      	adds	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	dbf0      	blt.n	80030ca <_read+0x12>
  }

  return len;
 80030e8:	687b      	ldr	r3, [r7, #4]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
 8003102:	e009      	b.n	8003118 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	60ba      	str	r2, [r7, #8]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3301      	adds	r3, #1
 8003116:	617b      	str	r3, [r7, #20]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	429a      	cmp	r2, r3
 800311e:	dbf1      	blt.n	8003104 <_write+0x12>
  }
  return len;
 8003120:	687b      	ldr	r3, [r7, #4]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <_close>:

int _close(int file)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003136:	4618      	mov	r0, r3
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003142:	b480      	push	{r7}
 8003144:	b083      	sub	sp, #12
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003152:	605a      	str	r2, [r3, #4]
  return 0;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr

08003162 <_isatty>:

int _isatty(int file)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800316a:	2301      	movs	r3, #1
}
 800316c:	4618      	mov	r0, r3
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <_sbrk+0x5c>)
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <_sbrk+0x60>)
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <_sbrk+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d102      	bne.n	80031b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b0:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_sbrk+0x64>)
 80031b2:	4a12      	ldr	r2, [pc, #72]	; (80031fc <_sbrk+0x68>)
 80031b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031b6:	4b10      	ldr	r3, [pc, #64]	; (80031f8 <_sbrk+0x64>)
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c4:	f001 fe18 	bl	8004df8 <__errno>
 80031c8:	4603      	mov	r3, r0
 80031ca:	220c      	movs	r2, #12
 80031cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031ce:	f04f 33ff 	mov.w	r3, #4294967295
 80031d2:	e009      	b.n	80031e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <_sbrk+0x64>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <_sbrk+0x64>)
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4413      	add	r3, r2
 80031e2:	4a05      	ldr	r2, [pc, #20]	; (80031f8 <_sbrk+0x64>)
 80031e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031e6:	68fb      	ldr	r3, [r7, #12]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	20018000 	.word	0x20018000
 80031f4:	00000400 	.word	0x00000400
 80031f8:	200001f0 	.word	0x200001f0
 80031fc:	20000348 	.word	0x20000348

08003200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003204:	4b06      	ldr	r3, [pc, #24]	; (8003220 <SystemInit+0x20>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	4a05      	ldr	r2, [pc, #20]	; (8003220 <SystemInit+0x20>)
 800320c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800325c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003228:	480d      	ldr	r0, [pc, #52]	; (8003260 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800322a:	490e      	ldr	r1, [pc, #56]	; (8003264 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800322c:	4a0e      	ldr	r2, [pc, #56]	; (8003268 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800322e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003230:	e002      	b.n	8003238 <LoopCopyDataInit>

08003232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003236:	3304      	adds	r3, #4

08003238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800323a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800323c:	d3f9      	bcc.n	8003232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800323e:	4a0b      	ldr	r2, [pc, #44]	; (800326c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003240:	4c0b      	ldr	r4, [pc, #44]	; (8003270 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003244:	e001      	b.n	800324a <LoopFillZerobss>

08003246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003248:	3204      	adds	r2, #4

0800324a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800324a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800324c:	d3fb      	bcc.n	8003246 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800324e:	f7ff ffd7 	bl	8003200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003252:	f001 fdd7 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003256:	f7ff f97f 	bl	8002558 <main>
  bx  lr    
 800325a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800325c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003264:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8003268:	0800aec4 	.word	0x0800aec4
  ldr r2, =_sbss
 800326c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8003270:	20000344 	.word	0x20000344

08003274 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003274:	e7fe      	b.n	8003274 <ADC_IRQHandler>
	...

08003278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800327c:	4b0e      	ldr	r3, [pc, #56]	; (80032b8 <HAL_Init+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0d      	ldr	r2, [pc, #52]	; (80032b8 <HAL_Init+0x40>)
 8003282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003286:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_Init+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a0a      	ldr	r2, [pc, #40]	; (80032b8 <HAL_Init+0x40>)
 800328e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003292:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003294:	4b08      	ldr	r3, [pc, #32]	; (80032b8 <HAL_Init+0x40>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a07      	ldr	r2, [pc, #28]	; (80032b8 <HAL_Init+0x40>)
 800329a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800329e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a0:	2003      	movs	r0, #3
 80032a2:	f000 f931 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a6:	200f      	movs	r0, #15
 80032a8:	f000 f808 	bl	80032bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ac:	f7ff fe90 	bl	8002fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	40023c00 	.word	0x40023c00

080032bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c4:	4b12      	ldr	r3, [pc, #72]	; (8003310 <HAL_InitTick+0x54>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	4b12      	ldr	r3, [pc, #72]	; (8003314 <HAL_InitTick+0x58>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	4619      	mov	r1, r3
 80032ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 f93b 	bl	8003556 <HAL_SYSTICK_Config>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e00e      	b.n	8003308 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b0f      	cmp	r3, #15
 80032ee:	d80a      	bhi.n	8003306 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f0:	2200      	movs	r2, #0
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f000 f911 	bl	800351e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032fc:	4a06      	ldr	r2, [pc, #24]	; (8003318 <HAL_InitTick+0x5c>)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	e000      	b.n	8003308 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	20000000 	.word	0x20000000
 8003314:	20000008 	.word	0x20000008
 8003318:	20000004 	.word	0x20000004

0800331c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_IncTick+0x20>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	461a      	mov	r2, r3
 8003326:	4b06      	ldr	r3, [pc, #24]	; (8003340 <HAL_IncTick+0x24>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4413      	add	r3, r2
 800332c:	4a04      	ldr	r2, [pc, #16]	; (8003340 <HAL_IncTick+0x24>)
 800332e:	6013      	str	r3, [r2, #0]
}
 8003330:	bf00      	nop
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	20000008 	.word	0x20000008
 8003340:	200001f4 	.word	0x200001f4

08003344 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return uwTick;
 8003348:	4b03      	ldr	r3, [pc, #12]	; (8003358 <HAL_GetTick+0x14>)
 800334a:	681b      	ldr	r3, [r3, #0]
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	200001f4 	.word	0x200001f4

0800335c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003364:	f7ff ffee 	bl	8003344 <HAL_GetTick>
 8003368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003374:	d005      	beq.n	8003382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003376:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_Delay+0x44>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4413      	add	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003382:	bf00      	nop
 8003384:	f7ff ffde 	bl	8003344 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	429a      	cmp	r2, r3
 8003392:	d8f7      	bhi.n	8003384 <HAL_Delay+0x28>
  {
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000008 	.word	0x20000008

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	; (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	; (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
         );
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d4:	d301      	bcc.n	80034da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00f      	b.n	80034fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <SysTick_Config+0x40>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e2:	210f      	movs	r1, #15
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f7ff ff8e 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SysTick_Config+0x40>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <SysTick_Config+0x40>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010

08003508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff47 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003530:	f7ff ff5c 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003534:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff8e 	bl	800345c <NVIC_EncodePriority>
 8003540:	4602      	mov	r2, r0
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff5d 	bl	8003408 <__NVIC_SetPriority>
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7ff ffb0 	bl	80034c4 <SysTick_Config>
 8003564:	4603      	mov	r3, r0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003570:	b480      	push	{r7}
 8003572:	b089      	sub	sp, #36	; 0x24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800357a:	2300      	movs	r3, #0
 800357c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800357e:	2300      	movs	r3, #0
 8003580:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003582:	2300      	movs	r3, #0
 8003584:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	e159      	b.n	8003840 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800358c:	2201      	movs	r2, #1
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4013      	ands	r3, r2
 800359e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	f040 8148 	bne.w	800383a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d005      	beq.n	80035c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d130      	bne.n	8003624 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	2203      	movs	r2, #3
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43db      	mvns	r3, r3
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	4013      	ands	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035f8:	2201      	movs	r2, #1
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	43db      	mvns	r3, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4013      	ands	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 0201 	and.w	r2, r3, #1
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	4313      	orrs	r3, r2
 800361c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69ba      	ldr	r2, [r7, #24]
 8003622:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b03      	cmp	r3, #3
 800362e:	d017      	beq.n	8003660 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d123      	bne.n	80036b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	08da      	lsrs	r2, r3, #3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3208      	adds	r2, #8
 8003674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003678:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	220f      	movs	r2, #15
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	4013      	ands	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	fa02 f303 	lsl.w	r3, r2, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	08da      	lsrs	r2, r3, #3
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3208      	adds	r2, #8
 80036ae:	69b9      	ldr	r1, [r7, #24]
 80036b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	005b      	lsls	r3, r3, #1
 80036be:	2203      	movs	r2, #3
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	f000 80a2 	beq.w	800383a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	4b57      	ldr	r3, [pc, #348]	; (8003858 <HAL_GPIO_Init+0x2e8>)
 80036fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fe:	4a56      	ldr	r2, [pc, #344]	; (8003858 <HAL_GPIO_Init+0x2e8>)
 8003700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	4b54      	ldr	r3, [pc, #336]	; (8003858 <HAL_GPIO_Init+0x2e8>)
 8003708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003712:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_GPIO_Init+0x2ec>)
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	089b      	lsrs	r3, r3, #2
 8003718:	3302      	adds	r3, #2
 800371a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800371e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	220f      	movs	r2, #15
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	43db      	mvns	r3, r3
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4013      	ands	r3, r2
 8003734:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a49      	ldr	r2, [pc, #292]	; (8003860 <HAL_GPIO_Init+0x2f0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d019      	beq.n	8003772 <HAL_GPIO_Init+0x202>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a48      	ldr	r2, [pc, #288]	; (8003864 <HAL_GPIO_Init+0x2f4>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d013      	beq.n	800376e <HAL_GPIO_Init+0x1fe>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a47      	ldr	r2, [pc, #284]	; (8003868 <HAL_GPIO_Init+0x2f8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d00d      	beq.n	800376a <HAL_GPIO_Init+0x1fa>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4a46      	ldr	r2, [pc, #280]	; (800386c <HAL_GPIO_Init+0x2fc>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d007      	beq.n	8003766 <HAL_GPIO_Init+0x1f6>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a45      	ldr	r2, [pc, #276]	; (8003870 <HAL_GPIO_Init+0x300>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d101      	bne.n	8003762 <HAL_GPIO_Init+0x1f2>
 800375e:	2304      	movs	r3, #4
 8003760:	e008      	b.n	8003774 <HAL_GPIO_Init+0x204>
 8003762:	2307      	movs	r3, #7
 8003764:	e006      	b.n	8003774 <HAL_GPIO_Init+0x204>
 8003766:	2303      	movs	r3, #3
 8003768:	e004      	b.n	8003774 <HAL_GPIO_Init+0x204>
 800376a:	2302      	movs	r3, #2
 800376c:	e002      	b.n	8003774 <HAL_GPIO_Init+0x204>
 800376e:	2301      	movs	r3, #1
 8003770:	e000      	b.n	8003774 <HAL_GPIO_Init+0x204>
 8003772:	2300      	movs	r3, #0
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	f002 0203 	and.w	r2, r2, #3
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	4093      	lsls	r3, r2
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4313      	orrs	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003784:	4935      	ldr	r1, [pc, #212]	; (800385c <HAL_GPIO_Init+0x2ec>)
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	089b      	lsrs	r3, r3, #2
 800378a:	3302      	adds	r3, #2
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003792:	4b38      	ldr	r3, [pc, #224]	; (8003874 <HAL_GPIO_Init+0x304>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	43db      	mvns	r3, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4013      	ands	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037b6:	4a2f      	ldr	r2, [pc, #188]	; (8003874 <HAL_GPIO_Init+0x304>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037bc:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_GPIO_Init+0x304>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	43db      	mvns	r3, r3
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	4013      	ands	r3, r2
 80037ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037e0:	4a24      	ldr	r2, [pc, #144]	; (8003874 <HAL_GPIO_Init+0x304>)
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037e6:	4b23      	ldr	r3, [pc, #140]	; (8003874 <HAL_GPIO_Init+0x304>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4013      	ands	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800380a:	4a1a      	ldr	r2, [pc, #104]	; (8003874 <HAL_GPIO_Init+0x304>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <HAL_GPIO_Init+0x304>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003834:	4a0f      	ldr	r2, [pc, #60]	; (8003874 <HAL_GPIO_Init+0x304>)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	3301      	adds	r3, #1
 800383e:	61fb      	str	r3, [r7, #28]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	f67f aea2 	bls.w	800358c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003848:	bf00      	nop
 800384a:	bf00      	nop
 800384c:	3724      	adds	r7, #36	; 0x24
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800
 800385c:	40013800 	.word	0x40013800
 8003860:	40020000 	.word	0x40020000
 8003864:	40020400 	.word	0x40020400
 8003868:	40020800 	.word	0x40020800
 800386c:	40020c00 	.word	0x40020c00
 8003870:	40021000 	.word	0x40021000
 8003874:	40013c00 	.word	0x40013c00

08003878 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	807b      	strh	r3, [r7, #2]
 8003884:	4613      	mov	r3, r2
 8003886:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003888:	787b      	ldrb	r3, [r7, #1]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800388e:	887a      	ldrh	r2, [r7, #2]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003894:	e003      	b.n	800389e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003896:	887b      	ldrh	r3, [r7, #2]
 8003898:	041a      	lsls	r2, r3, #16
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	619a      	str	r2, [r3, #24]
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e267      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d075      	beq.n	80039b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038ca:	4b88      	ldr	r3, [pc, #544]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b04      	cmp	r3, #4
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038d6:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d112      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038e2:	4b82      	ldr	r3, [pc, #520]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d10b      	bne.n	8003908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038f0:	4b7e      	ldr	r3, [pc, #504]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d05b      	beq.n	80039b4 <HAL_RCC_OscConfig+0x108>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d157      	bne.n	80039b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e242      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003910:	d106      	bne.n	8003920 <HAL_RCC_OscConfig+0x74>
 8003912:	4b76      	ldr	r3, [pc, #472]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a75      	ldr	r2, [pc, #468]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800391c:	6013      	str	r3, [r2, #0]
 800391e:	e01d      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003928:	d10c      	bne.n	8003944 <HAL_RCC_OscConfig+0x98>
 800392a:	4b70      	ldr	r3, [pc, #448]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6f      	ldr	r2, [pc, #444]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	4b6d      	ldr	r3, [pc, #436]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a6c      	ldr	r2, [pc, #432]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 800393c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003940:	6013      	str	r3, [r2, #0]
 8003942:	e00b      	b.n	800395c <HAL_RCC_OscConfig+0xb0>
 8003944:	4b69      	ldr	r3, [pc, #420]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a68      	ldr	r2, [pc, #416]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	4b66      	ldr	r3, [pc, #408]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a65      	ldr	r2, [pc, #404]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800395a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d013      	beq.n	800398c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7ff fcee 	bl	8003344 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800396c:	f7ff fcea 	bl	8003344 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b64      	cmp	r3, #100	; 0x64
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e207      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0xc0>
 800398a:	e014      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7ff fcda 	bl	8003344 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003994:	f7ff fcd6 	bl	8003344 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b64      	cmp	r3, #100	; 0x64
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e1f3      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039a6:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0xe8>
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d063      	beq.n	8003a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039c2:	4b4a      	ldr	r3, [pc, #296]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 030c 	and.w	r3, r3, #12
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00b      	beq.n	80039e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	d11c      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039da:	4b44      	ldr	r3, [pc, #272]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d001      	beq.n	80039fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e1c7      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	4b3b      	ldr	r3, [pc, #236]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	4937      	ldr	r1, [pc, #220]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a12:	e03a      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a1c:	4b34      	ldr	r3, [pc, #208]	; (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7ff fc8f 	bl	8003344 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a2a:	f7ff fc8b 	bl	8003344 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e1a8      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a3c:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d0f0      	beq.n	8003a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a48:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4925      	ldr	r1, [pc, #148]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]
 8003a5c:	e015      	b.n	8003a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <HAL_RCC_OscConfig+0x244>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a64:	f7ff fc6e 	bl	8003344 <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6c:	f7ff fc6a 	bl	8003344 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e187      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f0      	bne.n	8003a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d036      	beq.n	8003b04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d016      	beq.n	8003acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a9e:	4b15      	ldr	r3, [pc, #84]	; (8003af4 <HAL_RCC_OscConfig+0x248>)
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa4:	f7ff fc4e 	bl	8003344 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aac:	f7ff fc4a 	bl	8003344 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e167      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003abe:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_OscConfig+0x240>)
 8003ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d0f0      	beq.n	8003aac <HAL_RCC_OscConfig+0x200>
 8003aca:	e01b      	b.n	8003b04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003acc:	4b09      	ldr	r3, [pc, #36]	; (8003af4 <HAL_RCC_OscConfig+0x248>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ad2:	f7ff fc37 	bl	8003344 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad8:	e00e      	b.n	8003af8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ada:	f7ff fc33 	bl	8003344 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d907      	bls.n	8003af8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e150      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	42470000 	.word	0x42470000
 8003af4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af8:	4b88      	ldr	r3, [pc, #544]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003afa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1ea      	bne.n	8003ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8097 	beq.w	8003c40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b16:	4b81      	ldr	r3, [pc, #516]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10f      	bne.n	8003b42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b22:	2300      	movs	r3, #0
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	4b7d      	ldr	r3, [pc, #500]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a7c      	ldr	r2, [pc, #496]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
 8003b32:	4b7a      	ldr	r3, [pc, #488]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	60bb      	str	r3, [r7, #8]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b42:	4b77      	ldr	r3, [pc, #476]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d118      	bne.n	8003b80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b4e:	4b74      	ldr	r3, [pc, #464]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a73      	ldr	r2, [pc, #460]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b5a:	f7ff fbf3 	bl	8003344 <HAL_GetTick>
 8003b5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b60:	e008      	b.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b62:	f7ff fbef 	bl	8003344 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	2b02      	cmp	r3, #2
 8003b6e:	d901      	bls.n	8003b74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	e10c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b74:	4b6a      	ldr	r3, [pc, #424]	; (8003d20 <HAL_RCC_OscConfig+0x474>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d0f0      	beq.n	8003b62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x2ea>
 8003b88:	4b64      	ldr	r3, [pc, #400]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b8c:	4a63      	ldr	r2, [pc, #396]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	6713      	str	r3, [r2, #112]	; 0x70
 8003b94:	e01c      	b.n	8003bd0 <HAL_RCC_OscConfig+0x324>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	2b05      	cmp	r3, #5
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x30c>
 8003b9e:	4b5f      	ldr	r3, [pc, #380]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	4a5e      	ldr	r2, [pc, #376]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003ba4:	f043 0304 	orr.w	r3, r3, #4
 8003ba8:	6713      	str	r3, [r2, #112]	; 0x70
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bae:	4a5b      	ldr	r2, [pc, #364]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x324>
 8003bb8:	4b58      	ldr	r3, [pc, #352]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bbc:	4a57      	ldr	r2, [pc, #348]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 0301 	bic.w	r3, r3, #1
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bc4:	4b55      	ldr	r3, [pc, #340]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc8:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bca:	f023 0304 	bic.w	r3, r3, #4
 8003bce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d015      	beq.n	8003c04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7ff fbb4 	bl	8003344 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7ff fbb0 	bl	8003344 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e0cb      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	4b49      	ldr	r3, [pc, #292]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0ee      	beq.n	8003be0 <HAL_RCC_OscConfig+0x334>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c04:	f7ff fb9e 	bl	8003344 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0c:	f7ff fb9a 	bl	8003344 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0b5      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d1ee      	bne.n	8003c0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d105      	bne.n	8003c40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c34:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c38:	4a38      	ldr	r2, [pc, #224]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a1 	beq.w	8003d8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c4a:	4b34      	ldr	r3, [pc, #208]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f003 030c 	and.w	r3, r3, #12
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d05c      	beq.n	8003d10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d141      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c5e:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c64:	f7ff fb6e 	bl	8003344 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7ff fb6a 	bl	8003344 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e087      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c7e:	4b27      	ldr	r3, [pc, #156]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1f0      	bne.n	8003c6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69da      	ldr	r2, [r3, #28]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c98:	019b      	lsls	r3, r3, #6
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	041b      	lsls	r3, r3, #16
 8003ca6:	431a      	orrs	r2, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cac:	061b      	lsls	r3, r3, #24
 8003cae:	491b      	ldr	r1, [pc, #108]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b1b      	ldr	r3, [pc, #108]	; (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cba:	f7ff fb43 	bl	8003344 <HAL_GetTick>
 8003cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cc0:	e008      	b.n	8003cd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cc2:	f7ff fb3f 	bl	8003344 <HAL_GetTick>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e05c      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd4:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0f0      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x416>
 8003ce0:	e054      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_OscConfig+0x478>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7ff fb2c 	bl	8003344 <HAL_GetTick>
 8003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cee:	e008      	b.n	8003d02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf0:	f7ff fb28 	bl	8003344 <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e045      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <HAL_RCC_OscConfig+0x470>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1f0      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x444>
 8003d0e:	e03d      	b.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d107      	bne.n	8003d28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e038      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40007000 	.word	0x40007000
 8003d24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d28:	4b1b      	ldr	r3, [pc, #108]	; (8003d98 <HAL_RCC_OscConfig+0x4ec>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d028      	beq.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d121      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d11a      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d58:	4013      	ands	r3, r2
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d111      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6e:	085b      	lsrs	r3, r3, #1
 8003d70:	3b01      	subs	r3, #1
 8003d72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d001      	beq.n	8003d8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3718      	adds	r7, #24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	40023800 	.word	0x40023800

08003d9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0cc      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d90c      	bls.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dbe:	4b65      	ldr	r3, [pc, #404]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	b2d2      	uxtb	r2, r2
 8003dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	4b63      	ldr	r3, [pc, #396]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e0b8      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d020      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003df0:	4b59      	ldr	r3, [pc, #356]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	4a58      	ldr	r2, [pc, #352]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003dfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0308 	and.w	r3, r3, #8
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a52      	ldr	r2, [pc, #328]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e14:	4b50      	ldr	r3, [pc, #320]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	494d      	ldr	r1, [pc, #308]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d044      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d107      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e3a:	4b47      	ldr	r3, [pc, #284]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d119      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e07f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d003      	beq.n	8003e5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d107      	bne.n	8003e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e5a:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d109      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e06f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e067      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e7a:	4b37      	ldr	r3, [pc, #220]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	f023 0203 	bic.w	r2, r3, #3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	4934      	ldr	r1, [pc, #208]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e8c:	f7ff fa5a 	bl	8003344 <HAL_GetTick>
 8003e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e92:	e00a      	b.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e94:	f7ff fa56 	bl	8003344 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d901      	bls.n	8003eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e04f      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 020c 	and.w	r2, r3, #12
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1eb      	bne.n	8003e94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ebc:	4b25      	ldr	r3, [pc, #148]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d20c      	bcs.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eca:	4b22      	ldr	r3, [pc, #136]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 0307 	and.w	r3, r3, #7
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d001      	beq.n	8003ee4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e032      	b.n	8003f4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d008      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef0:	4b19      	ldr	r3, [pc, #100]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	4916      	ldr	r1, [pc, #88]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d009      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f0e:	4b12      	ldr	r3, [pc, #72]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	490e      	ldr	r1, [pc, #56]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f22:	f000 f821 	bl	8003f68 <HAL_RCC_GetSysClockFreq>
 8003f26:	4602      	mov	r2, r0
 8003f28:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f003 030f 	and.w	r3, r3, #15
 8003f32:	490a      	ldr	r1, [pc, #40]	; (8003f5c <HAL_RCC_ClockConfig+0x1c0>)
 8003f34:	5ccb      	ldrb	r3, [r1, r3]
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	4a09      	ldr	r2, [pc, #36]	; (8003f60 <HAL_RCC_ClockConfig+0x1c4>)
 8003f3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_ClockConfig+0x1c8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff f9ba 	bl	80032bc <HAL_InitTick>

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40023c00 	.word	0x40023c00
 8003f58:	40023800 	.word	0x40023800
 8003f5c:	0800ab34 	.word	0x0800ab34
 8003f60:	20000000 	.word	0x20000000
 8003f64:	20000004 	.word	0x20000004

08003f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b090      	sub	sp, #64	; 0x40
 8003f6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003f70:	2300      	movs	r3, #0
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
 8003f74:	2300      	movs	r3, #0
 8003f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f78:	2300      	movs	r3, #0
 8003f7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f80:	4b59      	ldr	r3, [pc, #356]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f003 030c 	and.w	r3, r3, #12
 8003f88:	2b08      	cmp	r3, #8
 8003f8a:	d00d      	beq.n	8003fa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	f200 80a1 	bhi.w	80040d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_RCC_GetSysClockFreq+0x34>
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d003      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f9a:	e09b      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f9c:	4b53      	ldr	r3, [pc, #332]	; (80040ec <HAL_RCC_GetSysClockFreq+0x184>)
 8003f9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fa0:	e09b      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fa2:	4b53      	ldr	r3, [pc, #332]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fa6:	e098      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa8:	4b4f      	ldr	r3, [pc, #316]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003fb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fb2:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d028      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fbe:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	099b      	lsrs	r3, r3, #6
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	623b      	str	r3, [r7, #32]
 8003fc8:	627a      	str	r2, [r7, #36]	; 0x24
 8003fca:	6a3b      	ldr	r3, [r7, #32]
 8003fcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4b47      	ldr	r3, [pc, #284]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fd4:	fb03 f201 	mul.w	r2, r3, r1
 8003fd8:	2300      	movs	r3, #0
 8003fda:	fb00 f303 	mul.w	r3, r0, r3
 8003fde:	4413      	add	r3, r2
 8003fe0:	4a43      	ldr	r2, [pc, #268]	; (80040f0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe2:	fba0 1202 	umull	r1, r2, r0, r2
 8003fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe8:	460a      	mov	r2, r1
 8003fea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fee:	4413      	add	r3, r2
 8003ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	61bb      	str	r3, [r7, #24]
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ffe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004002:	f7fc fdd9 	bl	8000bb8 <__aeabi_uldivmod>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4613      	mov	r3, r2
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800400e:	e053      	b.n	80040b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004010:	4b35      	ldr	r3, [pc, #212]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	2200      	movs	r2, #0
 8004018:	613b      	str	r3, [r7, #16]
 800401a:	617a      	str	r2, [r7, #20]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004022:	f04f 0b00 	mov.w	fp, #0
 8004026:	4652      	mov	r2, sl
 8004028:	465b      	mov	r3, fp
 800402a:	f04f 0000 	mov.w	r0, #0
 800402e:	f04f 0100 	mov.w	r1, #0
 8004032:	0159      	lsls	r1, r3, #5
 8004034:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004038:	0150      	lsls	r0, r2, #5
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	ebb2 080a 	subs.w	r8, r2, sl
 8004042:	eb63 090b 	sbc.w	r9, r3, fp
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	f04f 0300 	mov.w	r3, #0
 800404e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004052:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004056:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800405a:	ebb2 0408 	subs.w	r4, r2, r8
 800405e:	eb63 0509 	sbc.w	r5, r3, r9
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	00eb      	lsls	r3, r5, #3
 800406c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004070:	00e2      	lsls	r2, r4, #3
 8004072:	4614      	mov	r4, r2
 8004074:	461d      	mov	r5, r3
 8004076:	eb14 030a 	adds.w	r3, r4, sl
 800407a:	603b      	str	r3, [r7, #0]
 800407c:	eb45 030b 	adc.w	r3, r5, fp
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800408e:	4629      	mov	r1, r5
 8004090:	028b      	lsls	r3, r1, #10
 8004092:	4621      	mov	r1, r4
 8004094:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004098:	4621      	mov	r1, r4
 800409a:	028a      	lsls	r2, r1, #10
 800409c:	4610      	mov	r0, r2
 800409e:	4619      	mov	r1, r3
 80040a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a2:	2200      	movs	r2, #0
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ac:	f7fc fd84 	bl	8000bb8 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4613      	mov	r3, r2
 80040b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040b8:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	0c1b      	lsrs	r3, r3, #16
 80040be:	f003 0303 	and.w	r3, r3, #3
 80040c2:	3301      	adds	r3, #1
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80040c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040d2:	e002      	b.n	80040da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040d4:	4b05      	ldr	r3, [pc, #20]	; (80040ec <HAL_RCC_GetSysClockFreq+0x184>)
 80040d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3740      	adds	r7, #64	; 0x40
 80040e0:	46bd      	mov	sp, r7
 80040e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800
 80040ec:	00f42400 	.word	0x00f42400
 80040f0:	017d7840 	.word	0x017d7840

080040f4 <malloc>:
 80040f4:	4b02      	ldr	r3, [pc, #8]	; (8004100 <malloc+0xc>)
 80040f6:	4601      	mov	r1, r0
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f000 b823 	b.w	8004144 <_malloc_r>
 80040fe:	bf00      	nop
 8004100:	20000064 	.word	0x20000064

08004104 <sbrk_aligned>:
 8004104:	b570      	push	{r4, r5, r6, lr}
 8004106:	4e0e      	ldr	r6, [pc, #56]	; (8004140 <sbrk_aligned+0x3c>)
 8004108:	460c      	mov	r4, r1
 800410a:	6831      	ldr	r1, [r6, #0]
 800410c:	4605      	mov	r5, r0
 800410e:	b911      	cbnz	r1, 8004116 <sbrk_aligned+0x12>
 8004110:	f000 fe50 	bl	8004db4 <_sbrk_r>
 8004114:	6030      	str	r0, [r6, #0]
 8004116:	4621      	mov	r1, r4
 8004118:	4628      	mov	r0, r5
 800411a:	f000 fe4b 	bl	8004db4 <_sbrk_r>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	d00a      	beq.n	8004138 <sbrk_aligned+0x34>
 8004122:	1cc4      	adds	r4, r0, #3
 8004124:	f024 0403 	bic.w	r4, r4, #3
 8004128:	42a0      	cmp	r0, r4
 800412a:	d007      	beq.n	800413c <sbrk_aligned+0x38>
 800412c:	1a21      	subs	r1, r4, r0
 800412e:	4628      	mov	r0, r5
 8004130:	f000 fe40 	bl	8004db4 <_sbrk_r>
 8004134:	3001      	adds	r0, #1
 8004136:	d101      	bne.n	800413c <sbrk_aligned+0x38>
 8004138:	f04f 34ff 	mov.w	r4, #4294967295
 800413c:	4620      	mov	r0, r4
 800413e:	bd70      	pop	{r4, r5, r6, pc}
 8004140:	200001fc 	.word	0x200001fc

08004144 <_malloc_r>:
 8004144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004148:	1ccd      	adds	r5, r1, #3
 800414a:	f025 0503 	bic.w	r5, r5, #3
 800414e:	3508      	adds	r5, #8
 8004150:	2d0c      	cmp	r5, #12
 8004152:	bf38      	it	cc
 8004154:	250c      	movcc	r5, #12
 8004156:	2d00      	cmp	r5, #0
 8004158:	4607      	mov	r7, r0
 800415a:	db01      	blt.n	8004160 <_malloc_r+0x1c>
 800415c:	42a9      	cmp	r1, r5
 800415e:	d905      	bls.n	800416c <_malloc_r+0x28>
 8004160:	230c      	movs	r3, #12
 8004162:	603b      	str	r3, [r7, #0]
 8004164:	2600      	movs	r6, #0
 8004166:	4630      	mov	r0, r6
 8004168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800416c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004240 <_malloc_r+0xfc>
 8004170:	f000 f868 	bl	8004244 <__malloc_lock>
 8004174:	f8d8 3000 	ldr.w	r3, [r8]
 8004178:	461c      	mov	r4, r3
 800417a:	bb5c      	cbnz	r4, 80041d4 <_malloc_r+0x90>
 800417c:	4629      	mov	r1, r5
 800417e:	4638      	mov	r0, r7
 8004180:	f7ff ffc0 	bl	8004104 <sbrk_aligned>
 8004184:	1c43      	adds	r3, r0, #1
 8004186:	4604      	mov	r4, r0
 8004188:	d155      	bne.n	8004236 <_malloc_r+0xf2>
 800418a:	f8d8 4000 	ldr.w	r4, [r8]
 800418e:	4626      	mov	r6, r4
 8004190:	2e00      	cmp	r6, #0
 8004192:	d145      	bne.n	8004220 <_malloc_r+0xdc>
 8004194:	2c00      	cmp	r4, #0
 8004196:	d048      	beq.n	800422a <_malloc_r+0xe6>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	4631      	mov	r1, r6
 800419c:	4638      	mov	r0, r7
 800419e:	eb04 0903 	add.w	r9, r4, r3
 80041a2:	f000 fe07 	bl	8004db4 <_sbrk_r>
 80041a6:	4581      	cmp	r9, r0
 80041a8:	d13f      	bne.n	800422a <_malloc_r+0xe6>
 80041aa:	6821      	ldr	r1, [r4, #0]
 80041ac:	1a6d      	subs	r5, r5, r1
 80041ae:	4629      	mov	r1, r5
 80041b0:	4638      	mov	r0, r7
 80041b2:	f7ff ffa7 	bl	8004104 <sbrk_aligned>
 80041b6:	3001      	adds	r0, #1
 80041b8:	d037      	beq.n	800422a <_malloc_r+0xe6>
 80041ba:	6823      	ldr	r3, [r4, #0]
 80041bc:	442b      	add	r3, r5
 80041be:	6023      	str	r3, [r4, #0]
 80041c0:	f8d8 3000 	ldr.w	r3, [r8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d038      	beq.n	800423a <_malloc_r+0xf6>
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	42a2      	cmp	r2, r4
 80041cc:	d12b      	bne.n	8004226 <_malloc_r+0xe2>
 80041ce:	2200      	movs	r2, #0
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	e00f      	b.n	80041f4 <_malloc_r+0xb0>
 80041d4:	6822      	ldr	r2, [r4, #0]
 80041d6:	1b52      	subs	r2, r2, r5
 80041d8:	d41f      	bmi.n	800421a <_malloc_r+0xd6>
 80041da:	2a0b      	cmp	r2, #11
 80041dc:	d917      	bls.n	800420e <_malloc_r+0xca>
 80041de:	1961      	adds	r1, r4, r5
 80041e0:	42a3      	cmp	r3, r4
 80041e2:	6025      	str	r5, [r4, #0]
 80041e4:	bf18      	it	ne
 80041e6:	6059      	strne	r1, [r3, #4]
 80041e8:	6863      	ldr	r3, [r4, #4]
 80041ea:	bf08      	it	eq
 80041ec:	f8c8 1000 	streq.w	r1, [r8]
 80041f0:	5162      	str	r2, [r4, r5]
 80041f2:	604b      	str	r3, [r1, #4]
 80041f4:	4638      	mov	r0, r7
 80041f6:	f104 060b 	add.w	r6, r4, #11
 80041fa:	f000 f829 	bl	8004250 <__malloc_unlock>
 80041fe:	f026 0607 	bic.w	r6, r6, #7
 8004202:	1d23      	adds	r3, r4, #4
 8004204:	1af2      	subs	r2, r6, r3
 8004206:	d0ae      	beq.n	8004166 <_malloc_r+0x22>
 8004208:	1b9b      	subs	r3, r3, r6
 800420a:	50a3      	str	r3, [r4, r2]
 800420c:	e7ab      	b.n	8004166 <_malloc_r+0x22>
 800420e:	42a3      	cmp	r3, r4
 8004210:	6862      	ldr	r2, [r4, #4]
 8004212:	d1dd      	bne.n	80041d0 <_malloc_r+0x8c>
 8004214:	f8c8 2000 	str.w	r2, [r8]
 8004218:	e7ec      	b.n	80041f4 <_malloc_r+0xb0>
 800421a:	4623      	mov	r3, r4
 800421c:	6864      	ldr	r4, [r4, #4]
 800421e:	e7ac      	b.n	800417a <_malloc_r+0x36>
 8004220:	4634      	mov	r4, r6
 8004222:	6876      	ldr	r6, [r6, #4]
 8004224:	e7b4      	b.n	8004190 <_malloc_r+0x4c>
 8004226:	4613      	mov	r3, r2
 8004228:	e7cc      	b.n	80041c4 <_malloc_r+0x80>
 800422a:	230c      	movs	r3, #12
 800422c:	603b      	str	r3, [r7, #0]
 800422e:	4638      	mov	r0, r7
 8004230:	f000 f80e 	bl	8004250 <__malloc_unlock>
 8004234:	e797      	b.n	8004166 <_malloc_r+0x22>
 8004236:	6025      	str	r5, [r4, #0]
 8004238:	e7dc      	b.n	80041f4 <_malloc_r+0xb0>
 800423a:	605b      	str	r3, [r3, #4]
 800423c:	deff      	udf	#255	; 0xff
 800423e:	bf00      	nop
 8004240:	200001f8 	.word	0x200001f8

08004244 <__malloc_lock>:
 8004244:	4801      	ldr	r0, [pc, #4]	; (800424c <__malloc_lock+0x8>)
 8004246:	f000 be02 	b.w	8004e4e <__retarget_lock_acquire_recursive>
 800424a:	bf00      	nop
 800424c:	20000340 	.word	0x20000340

08004250 <__malloc_unlock>:
 8004250:	4801      	ldr	r0, [pc, #4]	; (8004258 <__malloc_unlock+0x8>)
 8004252:	f000 bdfd 	b.w	8004e50 <__retarget_lock_release_recursive>
 8004256:	bf00      	nop
 8004258:	20000340 	.word	0x20000340

0800425c <__cvt>:
 800425c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	ec55 4b10 	vmov	r4, r5, d0
 8004264:	2d00      	cmp	r5, #0
 8004266:	460e      	mov	r6, r1
 8004268:	4619      	mov	r1, r3
 800426a:	462b      	mov	r3, r5
 800426c:	bfbb      	ittet	lt
 800426e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004272:	461d      	movlt	r5, r3
 8004274:	2300      	movge	r3, #0
 8004276:	232d      	movlt	r3, #45	; 0x2d
 8004278:	700b      	strb	r3, [r1, #0]
 800427a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800427c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004280:	4691      	mov	r9, r2
 8004282:	f023 0820 	bic.w	r8, r3, #32
 8004286:	bfbc      	itt	lt
 8004288:	4622      	movlt	r2, r4
 800428a:	4614      	movlt	r4, r2
 800428c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004290:	d005      	beq.n	800429e <__cvt+0x42>
 8004292:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004296:	d100      	bne.n	800429a <__cvt+0x3e>
 8004298:	3601      	adds	r6, #1
 800429a:	2102      	movs	r1, #2
 800429c:	e000      	b.n	80042a0 <__cvt+0x44>
 800429e:	2103      	movs	r1, #3
 80042a0:	ab03      	add	r3, sp, #12
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	ab02      	add	r3, sp, #8
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	ec45 4b10 	vmov	d0, r4, r5
 80042ac:	4653      	mov	r3, sl
 80042ae:	4632      	mov	r2, r6
 80042b0:	f000 fe66 	bl	8004f80 <_dtoa_r>
 80042b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042b8:	4607      	mov	r7, r0
 80042ba:	d102      	bne.n	80042c2 <__cvt+0x66>
 80042bc:	f019 0f01 	tst.w	r9, #1
 80042c0:	d022      	beq.n	8004308 <__cvt+0xac>
 80042c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042c6:	eb07 0906 	add.w	r9, r7, r6
 80042ca:	d110      	bne.n	80042ee <__cvt+0x92>
 80042cc:	783b      	ldrb	r3, [r7, #0]
 80042ce:	2b30      	cmp	r3, #48	; 0x30
 80042d0:	d10a      	bne.n	80042e8 <__cvt+0x8c>
 80042d2:	2200      	movs	r2, #0
 80042d4:	2300      	movs	r3, #0
 80042d6:	4620      	mov	r0, r4
 80042d8:	4629      	mov	r1, r5
 80042da:	f7fc fbfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80042de:	b918      	cbnz	r0, 80042e8 <__cvt+0x8c>
 80042e0:	f1c6 0601 	rsb	r6, r6, #1
 80042e4:	f8ca 6000 	str.w	r6, [sl]
 80042e8:	f8da 3000 	ldr.w	r3, [sl]
 80042ec:	4499      	add	r9, r3
 80042ee:	2200      	movs	r2, #0
 80042f0:	2300      	movs	r3, #0
 80042f2:	4620      	mov	r0, r4
 80042f4:	4629      	mov	r1, r5
 80042f6:	f7fc fbef 	bl	8000ad8 <__aeabi_dcmpeq>
 80042fa:	b108      	cbz	r0, 8004300 <__cvt+0xa4>
 80042fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004300:	2230      	movs	r2, #48	; 0x30
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	454b      	cmp	r3, r9
 8004306:	d307      	bcc.n	8004318 <__cvt+0xbc>
 8004308:	9b03      	ldr	r3, [sp, #12]
 800430a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800430c:	1bdb      	subs	r3, r3, r7
 800430e:	4638      	mov	r0, r7
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	b004      	add	sp, #16
 8004314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004318:	1c59      	adds	r1, r3, #1
 800431a:	9103      	str	r1, [sp, #12]
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e7f0      	b.n	8004302 <__cvt+0xa6>

08004320 <__exponent>:
 8004320:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004322:	4603      	mov	r3, r0
 8004324:	2900      	cmp	r1, #0
 8004326:	bfb8      	it	lt
 8004328:	4249      	neglt	r1, r1
 800432a:	f803 2b02 	strb.w	r2, [r3], #2
 800432e:	bfb4      	ite	lt
 8004330:	222d      	movlt	r2, #45	; 0x2d
 8004332:	222b      	movge	r2, #43	; 0x2b
 8004334:	2909      	cmp	r1, #9
 8004336:	7042      	strb	r2, [r0, #1]
 8004338:	dd2a      	ble.n	8004390 <__exponent+0x70>
 800433a:	f10d 0207 	add.w	r2, sp, #7
 800433e:	4617      	mov	r7, r2
 8004340:	260a      	movs	r6, #10
 8004342:	4694      	mov	ip, r2
 8004344:	fb91 f5f6 	sdiv	r5, r1, r6
 8004348:	fb06 1415 	mls	r4, r6, r5, r1
 800434c:	3430      	adds	r4, #48	; 0x30
 800434e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004352:	460c      	mov	r4, r1
 8004354:	2c63      	cmp	r4, #99	; 0x63
 8004356:	f102 32ff 	add.w	r2, r2, #4294967295
 800435a:	4629      	mov	r1, r5
 800435c:	dcf1      	bgt.n	8004342 <__exponent+0x22>
 800435e:	3130      	adds	r1, #48	; 0x30
 8004360:	f1ac 0402 	sub.w	r4, ip, #2
 8004364:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004368:	1c41      	adds	r1, r0, #1
 800436a:	4622      	mov	r2, r4
 800436c:	42ba      	cmp	r2, r7
 800436e:	d30a      	bcc.n	8004386 <__exponent+0x66>
 8004370:	f10d 0209 	add.w	r2, sp, #9
 8004374:	eba2 020c 	sub.w	r2, r2, ip
 8004378:	42bc      	cmp	r4, r7
 800437a:	bf88      	it	hi
 800437c:	2200      	movhi	r2, #0
 800437e:	4413      	add	r3, r2
 8004380:	1a18      	subs	r0, r3, r0
 8004382:	b003      	add	sp, #12
 8004384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004386:	f812 5b01 	ldrb.w	r5, [r2], #1
 800438a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800438e:	e7ed      	b.n	800436c <__exponent+0x4c>
 8004390:	2330      	movs	r3, #48	; 0x30
 8004392:	3130      	adds	r1, #48	; 0x30
 8004394:	7083      	strb	r3, [r0, #2]
 8004396:	70c1      	strb	r1, [r0, #3]
 8004398:	1d03      	adds	r3, r0, #4
 800439a:	e7f1      	b.n	8004380 <__exponent+0x60>

0800439c <_printf_float>:
 800439c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a0:	ed2d 8b02 	vpush	{d8}
 80043a4:	b08d      	sub	sp, #52	; 0x34
 80043a6:	460c      	mov	r4, r1
 80043a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043ac:	4616      	mov	r6, r2
 80043ae:	461f      	mov	r7, r3
 80043b0:	4605      	mov	r5, r0
 80043b2:	f000 fcc7 	bl	8004d44 <_localeconv_r>
 80043b6:	f8d0 a000 	ldr.w	sl, [r0]
 80043ba:	4650      	mov	r0, sl
 80043bc:	f7fb ff60 	bl	8000280 <strlen>
 80043c0:	2300      	movs	r3, #0
 80043c2:	930a      	str	r3, [sp, #40]	; 0x28
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	9305      	str	r3, [sp, #20]
 80043c8:	f8d8 3000 	ldr.w	r3, [r8]
 80043cc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80043d0:	3307      	adds	r3, #7
 80043d2:	f023 0307 	bic.w	r3, r3, #7
 80043d6:	f103 0208 	add.w	r2, r3, #8
 80043da:	f8c8 2000 	str.w	r2, [r8]
 80043de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80043e6:	9307      	str	r3, [sp, #28]
 80043e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80043ec:	ee08 0a10 	vmov	s16, r0
 80043f0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80043f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f8:	4b9e      	ldr	r3, [pc, #632]	; (8004674 <_printf_float+0x2d8>)
 80043fa:	f04f 32ff 	mov.w	r2, #4294967295
 80043fe:	f7fc fb9d 	bl	8000b3c <__aeabi_dcmpun>
 8004402:	bb88      	cbnz	r0, 8004468 <_printf_float+0xcc>
 8004404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004408:	4b9a      	ldr	r3, [pc, #616]	; (8004674 <_printf_float+0x2d8>)
 800440a:	f04f 32ff 	mov.w	r2, #4294967295
 800440e:	f7fc fb77 	bl	8000b00 <__aeabi_dcmple>
 8004412:	bb48      	cbnz	r0, 8004468 <_printf_float+0xcc>
 8004414:	2200      	movs	r2, #0
 8004416:	2300      	movs	r3, #0
 8004418:	4640      	mov	r0, r8
 800441a:	4649      	mov	r1, r9
 800441c:	f7fc fb66 	bl	8000aec <__aeabi_dcmplt>
 8004420:	b110      	cbz	r0, 8004428 <_printf_float+0x8c>
 8004422:	232d      	movs	r3, #45	; 0x2d
 8004424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004428:	4a93      	ldr	r2, [pc, #588]	; (8004678 <_printf_float+0x2dc>)
 800442a:	4b94      	ldr	r3, [pc, #592]	; (800467c <_printf_float+0x2e0>)
 800442c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004430:	bf94      	ite	ls
 8004432:	4690      	movls	r8, r2
 8004434:	4698      	movhi	r8, r3
 8004436:	2303      	movs	r3, #3
 8004438:	6123      	str	r3, [r4, #16]
 800443a:	9b05      	ldr	r3, [sp, #20]
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	f04f 0900 	mov.w	r9, #0
 8004446:	9700      	str	r7, [sp, #0]
 8004448:	4633      	mov	r3, r6
 800444a:	aa0b      	add	r2, sp, #44	; 0x2c
 800444c:	4621      	mov	r1, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f9da 	bl	8004808 <_printf_common>
 8004454:	3001      	adds	r0, #1
 8004456:	f040 8090 	bne.w	800457a <_printf_float+0x1de>
 800445a:	f04f 30ff 	mov.w	r0, #4294967295
 800445e:	b00d      	add	sp, #52	; 0x34
 8004460:	ecbd 8b02 	vpop	{d8}
 8004464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004468:	4642      	mov	r2, r8
 800446a:	464b      	mov	r3, r9
 800446c:	4640      	mov	r0, r8
 800446e:	4649      	mov	r1, r9
 8004470:	f7fc fb64 	bl	8000b3c <__aeabi_dcmpun>
 8004474:	b140      	cbz	r0, 8004488 <_printf_float+0xec>
 8004476:	464b      	mov	r3, r9
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfbc      	itt	lt
 800447c:	232d      	movlt	r3, #45	; 0x2d
 800447e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004482:	4a7f      	ldr	r2, [pc, #508]	; (8004680 <_printf_float+0x2e4>)
 8004484:	4b7f      	ldr	r3, [pc, #508]	; (8004684 <_printf_float+0x2e8>)
 8004486:	e7d1      	b.n	800442c <_printf_float+0x90>
 8004488:	6863      	ldr	r3, [r4, #4]
 800448a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800448e:	9206      	str	r2, [sp, #24]
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	d13f      	bne.n	8004514 <_printf_float+0x178>
 8004494:	2306      	movs	r3, #6
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	9b05      	ldr	r3, [sp, #20]
 800449a:	6861      	ldr	r1, [r4, #4]
 800449c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044a0:	2300      	movs	r3, #0
 80044a2:	9303      	str	r3, [sp, #12]
 80044a4:	ab0a      	add	r3, sp, #40	; 0x28
 80044a6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044aa:	ab09      	add	r3, sp, #36	; 0x24
 80044ac:	ec49 8b10 	vmov	d0, r8, r9
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	6022      	str	r2, [r4, #0]
 80044b4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044b8:	4628      	mov	r0, r5
 80044ba:	f7ff fecf 	bl	800425c <__cvt>
 80044be:	9b06      	ldr	r3, [sp, #24]
 80044c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80044c2:	2b47      	cmp	r3, #71	; 0x47
 80044c4:	4680      	mov	r8, r0
 80044c6:	d108      	bne.n	80044da <_printf_float+0x13e>
 80044c8:	1cc8      	adds	r0, r1, #3
 80044ca:	db02      	blt.n	80044d2 <_printf_float+0x136>
 80044cc:	6863      	ldr	r3, [r4, #4]
 80044ce:	4299      	cmp	r1, r3
 80044d0:	dd41      	ble.n	8004556 <_printf_float+0x1ba>
 80044d2:	f1ab 0302 	sub.w	r3, fp, #2
 80044d6:	fa5f fb83 	uxtb.w	fp, r3
 80044da:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80044de:	d820      	bhi.n	8004522 <_printf_float+0x186>
 80044e0:	3901      	subs	r1, #1
 80044e2:	465a      	mov	r2, fp
 80044e4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044e8:	9109      	str	r1, [sp, #36]	; 0x24
 80044ea:	f7ff ff19 	bl	8004320 <__exponent>
 80044ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044f0:	1813      	adds	r3, r2, r0
 80044f2:	2a01      	cmp	r2, #1
 80044f4:	4681      	mov	r9, r0
 80044f6:	6123      	str	r3, [r4, #16]
 80044f8:	dc02      	bgt.n	8004500 <_printf_float+0x164>
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	07d2      	lsls	r2, r2, #31
 80044fe:	d501      	bpl.n	8004504 <_printf_float+0x168>
 8004500:	3301      	adds	r3, #1
 8004502:	6123      	str	r3, [r4, #16]
 8004504:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004508:	2b00      	cmp	r3, #0
 800450a:	d09c      	beq.n	8004446 <_printf_float+0xaa>
 800450c:	232d      	movs	r3, #45	; 0x2d
 800450e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004512:	e798      	b.n	8004446 <_printf_float+0xaa>
 8004514:	9a06      	ldr	r2, [sp, #24]
 8004516:	2a47      	cmp	r2, #71	; 0x47
 8004518:	d1be      	bne.n	8004498 <_printf_float+0xfc>
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1bc      	bne.n	8004498 <_printf_float+0xfc>
 800451e:	2301      	movs	r3, #1
 8004520:	e7b9      	b.n	8004496 <_printf_float+0xfa>
 8004522:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004526:	d118      	bne.n	800455a <_printf_float+0x1be>
 8004528:	2900      	cmp	r1, #0
 800452a:	6863      	ldr	r3, [r4, #4]
 800452c:	dd0b      	ble.n	8004546 <_printf_float+0x1aa>
 800452e:	6121      	str	r1, [r4, #16]
 8004530:	b913      	cbnz	r3, 8004538 <_printf_float+0x19c>
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	07d0      	lsls	r0, r2, #31
 8004536:	d502      	bpl.n	800453e <_printf_float+0x1a2>
 8004538:	3301      	adds	r3, #1
 800453a:	440b      	add	r3, r1
 800453c:	6123      	str	r3, [r4, #16]
 800453e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004540:	f04f 0900 	mov.w	r9, #0
 8004544:	e7de      	b.n	8004504 <_printf_float+0x168>
 8004546:	b913      	cbnz	r3, 800454e <_printf_float+0x1b2>
 8004548:	6822      	ldr	r2, [r4, #0]
 800454a:	07d2      	lsls	r2, r2, #31
 800454c:	d501      	bpl.n	8004552 <_printf_float+0x1b6>
 800454e:	3302      	adds	r3, #2
 8004550:	e7f4      	b.n	800453c <_printf_float+0x1a0>
 8004552:	2301      	movs	r3, #1
 8004554:	e7f2      	b.n	800453c <_printf_float+0x1a0>
 8004556:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800455a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800455c:	4299      	cmp	r1, r3
 800455e:	db05      	blt.n	800456c <_printf_float+0x1d0>
 8004560:	6823      	ldr	r3, [r4, #0]
 8004562:	6121      	str	r1, [r4, #16]
 8004564:	07d8      	lsls	r0, r3, #31
 8004566:	d5ea      	bpl.n	800453e <_printf_float+0x1a2>
 8004568:	1c4b      	adds	r3, r1, #1
 800456a:	e7e7      	b.n	800453c <_printf_float+0x1a0>
 800456c:	2900      	cmp	r1, #0
 800456e:	bfd4      	ite	le
 8004570:	f1c1 0202 	rsble	r2, r1, #2
 8004574:	2201      	movgt	r2, #1
 8004576:	4413      	add	r3, r2
 8004578:	e7e0      	b.n	800453c <_printf_float+0x1a0>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	055a      	lsls	r2, r3, #21
 800457e:	d407      	bmi.n	8004590 <_printf_float+0x1f4>
 8004580:	6923      	ldr	r3, [r4, #16]
 8004582:	4642      	mov	r2, r8
 8004584:	4631      	mov	r1, r6
 8004586:	4628      	mov	r0, r5
 8004588:	47b8      	blx	r7
 800458a:	3001      	adds	r0, #1
 800458c:	d12c      	bne.n	80045e8 <_printf_float+0x24c>
 800458e:	e764      	b.n	800445a <_printf_float+0xbe>
 8004590:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004594:	f240 80e0 	bls.w	8004758 <_printf_float+0x3bc>
 8004598:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800459c:	2200      	movs	r2, #0
 800459e:	2300      	movs	r3, #0
 80045a0:	f7fc fa9a 	bl	8000ad8 <__aeabi_dcmpeq>
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d034      	beq.n	8004612 <_printf_float+0x276>
 80045a8:	4a37      	ldr	r2, [pc, #220]	; (8004688 <_printf_float+0x2ec>)
 80045aa:	2301      	movs	r3, #1
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	f43f af51 	beq.w	800445a <_printf_float+0xbe>
 80045b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045bc:	429a      	cmp	r2, r3
 80045be:	db02      	blt.n	80045c6 <_printf_float+0x22a>
 80045c0:	6823      	ldr	r3, [r4, #0]
 80045c2:	07d8      	lsls	r0, r3, #31
 80045c4:	d510      	bpl.n	80045e8 <_printf_float+0x24c>
 80045c6:	ee18 3a10 	vmov	r3, s16
 80045ca:	4652      	mov	r2, sl
 80045cc:	4631      	mov	r1, r6
 80045ce:	4628      	mov	r0, r5
 80045d0:	47b8      	blx	r7
 80045d2:	3001      	adds	r0, #1
 80045d4:	f43f af41 	beq.w	800445a <_printf_float+0xbe>
 80045d8:	f04f 0800 	mov.w	r8, #0
 80045dc:	f104 091a 	add.w	r9, r4, #26
 80045e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4543      	cmp	r3, r8
 80045e6:	dc09      	bgt.n	80045fc <_printf_float+0x260>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	079b      	lsls	r3, r3, #30
 80045ec:	f100 8107 	bmi.w	80047fe <_printf_float+0x462>
 80045f0:	68e0      	ldr	r0, [r4, #12]
 80045f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045f4:	4298      	cmp	r0, r3
 80045f6:	bfb8      	it	lt
 80045f8:	4618      	movlt	r0, r3
 80045fa:	e730      	b.n	800445e <_printf_float+0xc2>
 80045fc:	2301      	movs	r3, #1
 80045fe:	464a      	mov	r2, r9
 8004600:	4631      	mov	r1, r6
 8004602:	4628      	mov	r0, r5
 8004604:	47b8      	blx	r7
 8004606:	3001      	adds	r0, #1
 8004608:	f43f af27 	beq.w	800445a <_printf_float+0xbe>
 800460c:	f108 0801 	add.w	r8, r8, #1
 8004610:	e7e6      	b.n	80045e0 <_printf_float+0x244>
 8004612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004614:	2b00      	cmp	r3, #0
 8004616:	dc39      	bgt.n	800468c <_printf_float+0x2f0>
 8004618:	4a1b      	ldr	r2, [pc, #108]	; (8004688 <_printf_float+0x2ec>)
 800461a:	2301      	movs	r3, #1
 800461c:	4631      	mov	r1, r6
 800461e:	4628      	mov	r0, r5
 8004620:	47b8      	blx	r7
 8004622:	3001      	adds	r0, #1
 8004624:	f43f af19 	beq.w	800445a <_printf_float+0xbe>
 8004628:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800462c:	4313      	orrs	r3, r2
 800462e:	d102      	bne.n	8004636 <_printf_float+0x29a>
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	07d9      	lsls	r1, r3, #31
 8004634:	d5d8      	bpl.n	80045e8 <_printf_float+0x24c>
 8004636:	ee18 3a10 	vmov	r3, s16
 800463a:	4652      	mov	r2, sl
 800463c:	4631      	mov	r1, r6
 800463e:	4628      	mov	r0, r5
 8004640:	47b8      	blx	r7
 8004642:	3001      	adds	r0, #1
 8004644:	f43f af09 	beq.w	800445a <_printf_float+0xbe>
 8004648:	f04f 0900 	mov.w	r9, #0
 800464c:	f104 0a1a 	add.w	sl, r4, #26
 8004650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004652:	425b      	negs	r3, r3
 8004654:	454b      	cmp	r3, r9
 8004656:	dc01      	bgt.n	800465c <_printf_float+0x2c0>
 8004658:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800465a:	e792      	b.n	8004582 <_printf_float+0x1e6>
 800465c:	2301      	movs	r3, #1
 800465e:	4652      	mov	r2, sl
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	47b8      	blx	r7
 8004666:	3001      	adds	r0, #1
 8004668:	f43f aef7 	beq.w	800445a <_printf_float+0xbe>
 800466c:	f109 0901 	add.w	r9, r9, #1
 8004670:	e7ee      	b.n	8004650 <_printf_float+0x2b4>
 8004672:	bf00      	nop
 8004674:	7fefffff 	.word	0x7fefffff
 8004678:	0800ab44 	.word	0x0800ab44
 800467c:	0800ab48 	.word	0x0800ab48
 8004680:	0800ab4c 	.word	0x0800ab4c
 8004684:	0800ab50 	.word	0x0800ab50
 8004688:	0800ab54 	.word	0x0800ab54
 800468c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800468e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004690:	429a      	cmp	r2, r3
 8004692:	bfa8      	it	ge
 8004694:	461a      	movge	r2, r3
 8004696:	2a00      	cmp	r2, #0
 8004698:	4691      	mov	r9, r2
 800469a:	dc37      	bgt.n	800470c <_printf_float+0x370>
 800469c:	f04f 0b00 	mov.w	fp, #0
 80046a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046a4:	f104 021a 	add.w	r2, r4, #26
 80046a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	eba3 0309 	sub.w	r3, r3, r9
 80046b0:	455b      	cmp	r3, fp
 80046b2:	dc33      	bgt.n	800471c <_printf_float+0x380>
 80046b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046b8:	429a      	cmp	r2, r3
 80046ba:	db3b      	blt.n	8004734 <_printf_float+0x398>
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	07da      	lsls	r2, r3, #31
 80046c0:	d438      	bmi.n	8004734 <_printf_float+0x398>
 80046c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80046c6:	eba2 0903 	sub.w	r9, r2, r3
 80046ca:	9b05      	ldr	r3, [sp, #20]
 80046cc:	1ad2      	subs	r2, r2, r3
 80046ce:	4591      	cmp	r9, r2
 80046d0:	bfa8      	it	ge
 80046d2:	4691      	movge	r9, r2
 80046d4:	f1b9 0f00 	cmp.w	r9, #0
 80046d8:	dc35      	bgt.n	8004746 <_printf_float+0x3aa>
 80046da:	f04f 0800 	mov.w	r8, #0
 80046de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e2:	f104 0a1a 	add.w	sl, r4, #26
 80046e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046ea:	1a9b      	subs	r3, r3, r2
 80046ec:	eba3 0309 	sub.w	r3, r3, r9
 80046f0:	4543      	cmp	r3, r8
 80046f2:	f77f af79 	ble.w	80045e8 <_printf_float+0x24c>
 80046f6:	2301      	movs	r3, #1
 80046f8:	4652      	mov	r2, sl
 80046fa:	4631      	mov	r1, r6
 80046fc:	4628      	mov	r0, r5
 80046fe:	47b8      	blx	r7
 8004700:	3001      	adds	r0, #1
 8004702:	f43f aeaa 	beq.w	800445a <_printf_float+0xbe>
 8004706:	f108 0801 	add.w	r8, r8, #1
 800470a:	e7ec      	b.n	80046e6 <_printf_float+0x34a>
 800470c:	4613      	mov	r3, r2
 800470e:	4631      	mov	r1, r6
 8004710:	4642      	mov	r2, r8
 8004712:	4628      	mov	r0, r5
 8004714:	47b8      	blx	r7
 8004716:	3001      	adds	r0, #1
 8004718:	d1c0      	bne.n	800469c <_printf_float+0x300>
 800471a:	e69e      	b.n	800445a <_printf_float+0xbe>
 800471c:	2301      	movs	r3, #1
 800471e:	4631      	mov	r1, r6
 8004720:	4628      	mov	r0, r5
 8004722:	9205      	str	r2, [sp, #20]
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	f43f ae97 	beq.w	800445a <_printf_float+0xbe>
 800472c:	9a05      	ldr	r2, [sp, #20]
 800472e:	f10b 0b01 	add.w	fp, fp, #1
 8004732:	e7b9      	b.n	80046a8 <_printf_float+0x30c>
 8004734:	ee18 3a10 	vmov	r3, s16
 8004738:	4652      	mov	r2, sl
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	d1be      	bne.n	80046c2 <_printf_float+0x326>
 8004744:	e689      	b.n	800445a <_printf_float+0xbe>
 8004746:	9a05      	ldr	r2, [sp, #20]
 8004748:	464b      	mov	r3, r9
 800474a:	4442      	add	r2, r8
 800474c:	4631      	mov	r1, r6
 800474e:	4628      	mov	r0, r5
 8004750:	47b8      	blx	r7
 8004752:	3001      	adds	r0, #1
 8004754:	d1c1      	bne.n	80046da <_printf_float+0x33e>
 8004756:	e680      	b.n	800445a <_printf_float+0xbe>
 8004758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800475a:	2a01      	cmp	r2, #1
 800475c:	dc01      	bgt.n	8004762 <_printf_float+0x3c6>
 800475e:	07db      	lsls	r3, r3, #31
 8004760:	d53a      	bpl.n	80047d8 <_printf_float+0x43c>
 8004762:	2301      	movs	r3, #1
 8004764:	4642      	mov	r2, r8
 8004766:	4631      	mov	r1, r6
 8004768:	4628      	mov	r0, r5
 800476a:	47b8      	blx	r7
 800476c:	3001      	adds	r0, #1
 800476e:	f43f ae74 	beq.w	800445a <_printf_float+0xbe>
 8004772:	ee18 3a10 	vmov	r3, s16
 8004776:	4652      	mov	r2, sl
 8004778:	4631      	mov	r1, r6
 800477a:	4628      	mov	r0, r5
 800477c:	47b8      	blx	r7
 800477e:	3001      	adds	r0, #1
 8004780:	f43f ae6b 	beq.w	800445a <_printf_float+0xbe>
 8004784:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004788:	2200      	movs	r2, #0
 800478a:	2300      	movs	r3, #0
 800478c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004790:	f7fc f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004794:	b9d8      	cbnz	r0, 80047ce <_printf_float+0x432>
 8004796:	f10a 33ff 	add.w	r3, sl, #4294967295
 800479a:	f108 0201 	add.w	r2, r8, #1
 800479e:	4631      	mov	r1, r6
 80047a0:	4628      	mov	r0, r5
 80047a2:	47b8      	blx	r7
 80047a4:	3001      	adds	r0, #1
 80047a6:	d10e      	bne.n	80047c6 <_printf_float+0x42a>
 80047a8:	e657      	b.n	800445a <_printf_float+0xbe>
 80047aa:	2301      	movs	r3, #1
 80047ac:	4652      	mov	r2, sl
 80047ae:	4631      	mov	r1, r6
 80047b0:	4628      	mov	r0, r5
 80047b2:	47b8      	blx	r7
 80047b4:	3001      	adds	r0, #1
 80047b6:	f43f ae50 	beq.w	800445a <_printf_float+0xbe>
 80047ba:	f108 0801 	add.w	r8, r8, #1
 80047be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047c0:	3b01      	subs	r3, #1
 80047c2:	4543      	cmp	r3, r8
 80047c4:	dcf1      	bgt.n	80047aa <_printf_float+0x40e>
 80047c6:	464b      	mov	r3, r9
 80047c8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047cc:	e6da      	b.n	8004584 <_printf_float+0x1e8>
 80047ce:	f04f 0800 	mov.w	r8, #0
 80047d2:	f104 0a1a 	add.w	sl, r4, #26
 80047d6:	e7f2      	b.n	80047be <_printf_float+0x422>
 80047d8:	2301      	movs	r3, #1
 80047da:	4642      	mov	r2, r8
 80047dc:	e7df      	b.n	800479e <_printf_float+0x402>
 80047de:	2301      	movs	r3, #1
 80047e0:	464a      	mov	r2, r9
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	47b8      	blx	r7
 80047e8:	3001      	adds	r0, #1
 80047ea:	f43f ae36 	beq.w	800445a <_printf_float+0xbe>
 80047ee:	f108 0801 	add.w	r8, r8, #1
 80047f2:	68e3      	ldr	r3, [r4, #12]
 80047f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047f6:	1a5b      	subs	r3, r3, r1
 80047f8:	4543      	cmp	r3, r8
 80047fa:	dcf0      	bgt.n	80047de <_printf_float+0x442>
 80047fc:	e6f8      	b.n	80045f0 <_printf_float+0x254>
 80047fe:	f04f 0800 	mov.w	r8, #0
 8004802:	f104 0919 	add.w	r9, r4, #25
 8004806:	e7f4      	b.n	80047f2 <_printf_float+0x456>

08004808 <_printf_common>:
 8004808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800480c:	4616      	mov	r6, r2
 800480e:	4699      	mov	r9, r3
 8004810:	688a      	ldr	r2, [r1, #8]
 8004812:	690b      	ldr	r3, [r1, #16]
 8004814:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004818:	4293      	cmp	r3, r2
 800481a:	bfb8      	it	lt
 800481c:	4613      	movlt	r3, r2
 800481e:	6033      	str	r3, [r6, #0]
 8004820:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004824:	4607      	mov	r7, r0
 8004826:	460c      	mov	r4, r1
 8004828:	b10a      	cbz	r2, 800482e <_printf_common+0x26>
 800482a:	3301      	adds	r3, #1
 800482c:	6033      	str	r3, [r6, #0]
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	0699      	lsls	r1, r3, #26
 8004832:	bf42      	ittt	mi
 8004834:	6833      	ldrmi	r3, [r6, #0]
 8004836:	3302      	addmi	r3, #2
 8004838:	6033      	strmi	r3, [r6, #0]
 800483a:	6825      	ldr	r5, [r4, #0]
 800483c:	f015 0506 	ands.w	r5, r5, #6
 8004840:	d106      	bne.n	8004850 <_printf_common+0x48>
 8004842:	f104 0a19 	add.w	sl, r4, #25
 8004846:	68e3      	ldr	r3, [r4, #12]
 8004848:	6832      	ldr	r2, [r6, #0]
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	42ab      	cmp	r3, r5
 800484e:	dc26      	bgt.n	800489e <_printf_common+0x96>
 8004850:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004854:	1e13      	subs	r3, r2, #0
 8004856:	6822      	ldr	r2, [r4, #0]
 8004858:	bf18      	it	ne
 800485a:	2301      	movne	r3, #1
 800485c:	0692      	lsls	r2, r2, #26
 800485e:	d42b      	bmi.n	80048b8 <_printf_common+0xb0>
 8004860:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004864:	4649      	mov	r1, r9
 8004866:	4638      	mov	r0, r7
 8004868:	47c0      	blx	r8
 800486a:	3001      	adds	r0, #1
 800486c:	d01e      	beq.n	80048ac <_printf_common+0xa4>
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	6922      	ldr	r2, [r4, #16]
 8004872:	f003 0306 	and.w	r3, r3, #6
 8004876:	2b04      	cmp	r3, #4
 8004878:	bf02      	ittt	eq
 800487a:	68e5      	ldreq	r5, [r4, #12]
 800487c:	6833      	ldreq	r3, [r6, #0]
 800487e:	1aed      	subeq	r5, r5, r3
 8004880:	68a3      	ldr	r3, [r4, #8]
 8004882:	bf0c      	ite	eq
 8004884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004888:	2500      	movne	r5, #0
 800488a:	4293      	cmp	r3, r2
 800488c:	bfc4      	itt	gt
 800488e:	1a9b      	subgt	r3, r3, r2
 8004890:	18ed      	addgt	r5, r5, r3
 8004892:	2600      	movs	r6, #0
 8004894:	341a      	adds	r4, #26
 8004896:	42b5      	cmp	r5, r6
 8004898:	d11a      	bne.n	80048d0 <_printf_common+0xc8>
 800489a:	2000      	movs	r0, #0
 800489c:	e008      	b.n	80048b0 <_printf_common+0xa8>
 800489e:	2301      	movs	r3, #1
 80048a0:	4652      	mov	r2, sl
 80048a2:	4649      	mov	r1, r9
 80048a4:	4638      	mov	r0, r7
 80048a6:	47c0      	blx	r8
 80048a8:	3001      	adds	r0, #1
 80048aa:	d103      	bne.n	80048b4 <_printf_common+0xac>
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b4:	3501      	adds	r5, #1
 80048b6:	e7c6      	b.n	8004846 <_printf_common+0x3e>
 80048b8:	18e1      	adds	r1, r4, r3
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	2030      	movs	r0, #48	; 0x30
 80048be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048c2:	4422      	add	r2, r4
 80048c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048cc:	3302      	adds	r3, #2
 80048ce:	e7c7      	b.n	8004860 <_printf_common+0x58>
 80048d0:	2301      	movs	r3, #1
 80048d2:	4622      	mov	r2, r4
 80048d4:	4649      	mov	r1, r9
 80048d6:	4638      	mov	r0, r7
 80048d8:	47c0      	blx	r8
 80048da:	3001      	adds	r0, #1
 80048dc:	d0e6      	beq.n	80048ac <_printf_common+0xa4>
 80048de:	3601      	adds	r6, #1
 80048e0:	e7d9      	b.n	8004896 <_printf_common+0x8e>
	...

080048e4 <_printf_i>:
 80048e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048e8:	7e0f      	ldrb	r7, [r1, #24]
 80048ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80048ec:	2f78      	cmp	r7, #120	; 0x78
 80048ee:	4691      	mov	r9, r2
 80048f0:	4680      	mov	r8, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	469a      	mov	sl, r3
 80048f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80048fa:	d807      	bhi.n	800490c <_printf_i+0x28>
 80048fc:	2f62      	cmp	r7, #98	; 0x62
 80048fe:	d80a      	bhi.n	8004916 <_printf_i+0x32>
 8004900:	2f00      	cmp	r7, #0
 8004902:	f000 80d4 	beq.w	8004aae <_printf_i+0x1ca>
 8004906:	2f58      	cmp	r7, #88	; 0x58
 8004908:	f000 80c0 	beq.w	8004a8c <_printf_i+0x1a8>
 800490c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004910:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004914:	e03a      	b.n	800498c <_printf_i+0xa8>
 8004916:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800491a:	2b15      	cmp	r3, #21
 800491c:	d8f6      	bhi.n	800490c <_printf_i+0x28>
 800491e:	a101      	add	r1, pc, #4	; (adr r1, 8004924 <_printf_i+0x40>)
 8004920:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004924:	0800497d 	.word	0x0800497d
 8004928:	08004991 	.word	0x08004991
 800492c:	0800490d 	.word	0x0800490d
 8004930:	0800490d 	.word	0x0800490d
 8004934:	0800490d 	.word	0x0800490d
 8004938:	0800490d 	.word	0x0800490d
 800493c:	08004991 	.word	0x08004991
 8004940:	0800490d 	.word	0x0800490d
 8004944:	0800490d 	.word	0x0800490d
 8004948:	0800490d 	.word	0x0800490d
 800494c:	0800490d 	.word	0x0800490d
 8004950:	08004a95 	.word	0x08004a95
 8004954:	080049bd 	.word	0x080049bd
 8004958:	08004a4f 	.word	0x08004a4f
 800495c:	0800490d 	.word	0x0800490d
 8004960:	0800490d 	.word	0x0800490d
 8004964:	08004ab7 	.word	0x08004ab7
 8004968:	0800490d 	.word	0x0800490d
 800496c:	080049bd 	.word	0x080049bd
 8004970:	0800490d 	.word	0x0800490d
 8004974:	0800490d 	.word	0x0800490d
 8004978:	08004a57 	.word	0x08004a57
 800497c:	682b      	ldr	r3, [r5, #0]
 800497e:	1d1a      	adds	r2, r3, #4
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	602a      	str	r2, [r5, #0]
 8004984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800498c:	2301      	movs	r3, #1
 800498e:	e09f      	b.n	8004ad0 <_printf_i+0x1ec>
 8004990:	6820      	ldr	r0, [r4, #0]
 8004992:	682b      	ldr	r3, [r5, #0]
 8004994:	0607      	lsls	r7, r0, #24
 8004996:	f103 0104 	add.w	r1, r3, #4
 800499a:	6029      	str	r1, [r5, #0]
 800499c:	d501      	bpl.n	80049a2 <_printf_i+0xbe>
 800499e:	681e      	ldr	r6, [r3, #0]
 80049a0:	e003      	b.n	80049aa <_printf_i+0xc6>
 80049a2:	0646      	lsls	r6, r0, #25
 80049a4:	d5fb      	bpl.n	800499e <_printf_i+0xba>
 80049a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049aa:	2e00      	cmp	r6, #0
 80049ac:	da03      	bge.n	80049b6 <_printf_i+0xd2>
 80049ae:	232d      	movs	r3, #45	; 0x2d
 80049b0:	4276      	negs	r6, r6
 80049b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b6:	485a      	ldr	r0, [pc, #360]	; (8004b20 <_printf_i+0x23c>)
 80049b8:	230a      	movs	r3, #10
 80049ba:	e012      	b.n	80049e2 <_printf_i+0xfe>
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	1d19      	adds	r1, r3, #4
 80049c2:	6029      	str	r1, [r5, #0]
 80049c4:	0605      	lsls	r5, r0, #24
 80049c6:	d501      	bpl.n	80049cc <_printf_i+0xe8>
 80049c8:	681e      	ldr	r6, [r3, #0]
 80049ca:	e002      	b.n	80049d2 <_printf_i+0xee>
 80049cc:	0641      	lsls	r1, r0, #25
 80049ce:	d5fb      	bpl.n	80049c8 <_printf_i+0xe4>
 80049d0:	881e      	ldrh	r6, [r3, #0]
 80049d2:	4853      	ldr	r0, [pc, #332]	; (8004b20 <_printf_i+0x23c>)
 80049d4:	2f6f      	cmp	r7, #111	; 0x6f
 80049d6:	bf0c      	ite	eq
 80049d8:	2308      	moveq	r3, #8
 80049da:	230a      	movne	r3, #10
 80049dc:	2100      	movs	r1, #0
 80049de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049e2:	6865      	ldr	r5, [r4, #4]
 80049e4:	60a5      	str	r5, [r4, #8]
 80049e6:	2d00      	cmp	r5, #0
 80049e8:	bfa2      	ittt	ge
 80049ea:	6821      	ldrge	r1, [r4, #0]
 80049ec:	f021 0104 	bicge.w	r1, r1, #4
 80049f0:	6021      	strge	r1, [r4, #0]
 80049f2:	b90e      	cbnz	r6, 80049f8 <_printf_i+0x114>
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	d04b      	beq.n	8004a90 <_printf_i+0x1ac>
 80049f8:	4615      	mov	r5, r2
 80049fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80049fe:	fb03 6711 	mls	r7, r3, r1, r6
 8004a02:	5dc7      	ldrb	r7, [r0, r7]
 8004a04:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a08:	4637      	mov	r7, r6
 8004a0a:	42bb      	cmp	r3, r7
 8004a0c:	460e      	mov	r6, r1
 8004a0e:	d9f4      	bls.n	80049fa <_printf_i+0x116>
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d10b      	bne.n	8004a2c <_printf_i+0x148>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	07de      	lsls	r6, r3, #31
 8004a18:	d508      	bpl.n	8004a2c <_printf_i+0x148>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	6861      	ldr	r1, [r4, #4]
 8004a1e:	4299      	cmp	r1, r3
 8004a20:	bfde      	ittt	le
 8004a22:	2330      	movle	r3, #48	; 0x30
 8004a24:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a28:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a2c:	1b52      	subs	r2, r2, r5
 8004a2e:	6122      	str	r2, [r4, #16]
 8004a30:	f8cd a000 	str.w	sl, [sp]
 8004a34:	464b      	mov	r3, r9
 8004a36:	aa03      	add	r2, sp, #12
 8004a38:	4621      	mov	r1, r4
 8004a3a:	4640      	mov	r0, r8
 8004a3c:	f7ff fee4 	bl	8004808 <_printf_common>
 8004a40:	3001      	adds	r0, #1
 8004a42:	d14a      	bne.n	8004ada <_printf_i+0x1f6>
 8004a44:	f04f 30ff 	mov.w	r0, #4294967295
 8004a48:	b004      	add	sp, #16
 8004a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a4e:	6823      	ldr	r3, [r4, #0]
 8004a50:	f043 0320 	orr.w	r3, r3, #32
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	4833      	ldr	r0, [pc, #204]	; (8004b24 <_printf_i+0x240>)
 8004a58:	2778      	movs	r7, #120	; 0x78
 8004a5a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	6829      	ldr	r1, [r5, #0]
 8004a62:	061f      	lsls	r7, r3, #24
 8004a64:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a68:	d402      	bmi.n	8004a70 <_printf_i+0x18c>
 8004a6a:	065f      	lsls	r7, r3, #25
 8004a6c:	bf48      	it	mi
 8004a6e:	b2b6      	uxthmi	r6, r6
 8004a70:	07df      	lsls	r7, r3, #31
 8004a72:	bf48      	it	mi
 8004a74:	f043 0320 	orrmi.w	r3, r3, #32
 8004a78:	6029      	str	r1, [r5, #0]
 8004a7a:	bf48      	it	mi
 8004a7c:	6023      	strmi	r3, [r4, #0]
 8004a7e:	b91e      	cbnz	r6, 8004a88 <_printf_i+0x1a4>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	f023 0320 	bic.w	r3, r3, #32
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	2310      	movs	r3, #16
 8004a8a:	e7a7      	b.n	80049dc <_printf_i+0xf8>
 8004a8c:	4824      	ldr	r0, [pc, #144]	; (8004b20 <_printf_i+0x23c>)
 8004a8e:	e7e4      	b.n	8004a5a <_printf_i+0x176>
 8004a90:	4615      	mov	r5, r2
 8004a92:	e7bd      	b.n	8004a10 <_printf_i+0x12c>
 8004a94:	682b      	ldr	r3, [r5, #0]
 8004a96:	6826      	ldr	r6, [r4, #0]
 8004a98:	6961      	ldr	r1, [r4, #20]
 8004a9a:	1d18      	adds	r0, r3, #4
 8004a9c:	6028      	str	r0, [r5, #0]
 8004a9e:	0635      	lsls	r5, r6, #24
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	d501      	bpl.n	8004aa8 <_printf_i+0x1c4>
 8004aa4:	6019      	str	r1, [r3, #0]
 8004aa6:	e002      	b.n	8004aae <_printf_i+0x1ca>
 8004aa8:	0670      	lsls	r0, r6, #25
 8004aaa:	d5fb      	bpl.n	8004aa4 <_printf_i+0x1c0>
 8004aac:	8019      	strh	r1, [r3, #0]
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6123      	str	r3, [r4, #16]
 8004ab2:	4615      	mov	r5, r2
 8004ab4:	e7bc      	b.n	8004a30 <_printf_i+0x14c>
 8004ab6:	682b      	ldr	r3, [r5, #0]
 8004ab8:	1d1a      	adds	r2, r3, #4
 8004aba:	602a      	str	r2, [r5, #0]
 8004abc:	681d      	ldr	r5, [r3, #0]
 8004abe:	6862      	ldr	r2, [r4, #4]
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f7fb fb8c 	bl	80001e0 <memchr>
 8004ac8:	b108      	cbz	r0, 8004ace <_printf_i+0x1ea>
 8004aca:	1b40      	subs	r0, r0, r5
 8004acc:	6060      	str	r0, [r4, #4]
 8004ace:	6863      	ldr	r3, [r4, #4]
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ad8:	e7aa      	b.n	8004a30 <_printf_i+0x14c>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	462a      	mov	r2, r5
 8004ade:	4649      	mov	r1, r9
 8004ae0:	4640      	mov	r0, r8
 8004ae2:	47d0      	blx	sl
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d0ad      	beq.n	8004a44 <_printf_i+0x160>
 8004ae8:	6823      	ldr	r3, [r4, #0]
 8004aea:	079b      	lsls	r3, r3, #30
 8004aec:	d413      	bmi.n	8004b16 <_printf_i+0x232>
 8004aee:	68e0      	ldr	r0, [r4, #12]
 8004af0:	9b03      	ldr	r3, [sp, #12]
 8004af2:	4298      	cmp	r0, r3
 8004af4:	bfb8      	it	lt
 8004af6:	4618      	movlt	r0, r3
 8004af8:	e7a6      	b.n	8004a48 <_printf_i+0x164>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4632      	mov	r2, r6
 8004afe:	4649      	mov	r1, r9
 8004b00:	4640      	mov	r0, r8
 8004b02:	47d0      	blx	sl
 8004b04:	3001      	adds	r0, #1
 8004b06:	d09d      	beq.n	8004a44 <_printf_i+0x160>
 8004b08:	3501      	adds	r5, #1
 8004b0a:	68e3      	ldr	r3, [r4, #12]
 8004b0c:	9903      	ldr	r1, [sp, #12]
 8004b0e:	1a5b      	subs	r3, r3, r1
 8004b10:	42ab      	cmp	r3, r5
 8004b12:	dcf2      	bgt.n	8004afa <_printf_i+0x216>
 8004b14:	e7eb      	b.n	8004aee <_printf_i+0x20a>
 8004b16:	2500      	movs	r5, #0
 8004b18:	f104 0619 	add.w	r6, r4, #25
 8004b1c:	e7f5      	b.n	8004b0a <_printf_i+0x226>
 8004b1e:	bf00      	nop
 8004b20:	0800ab56 	.word	0x0800ab56
 8004b24:	0800ab67 	.word	0x0800ab67

08004b28 <std>:
 8004b28:	2300      	movs	r3, #0
 8004b2a:	b510      	push	{r4, lr}
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b36:	6083      	str	r3, [r0, #8]
 8004b38:	8181      	strh	r1, [r0, #12]
 8004b3a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b3c:	81c2      	strh	r2, [r0, #14]
 8004b3e:	6183      	str	r3, [r0, #24]
 8004b40:	4619      	mov	r1, r3
 8004b42:	2208      	movs	r2, #8
 8004b44:	305c      	adds	r0, #92	; 0x5c
 8004b46:	f000 f8f4 	bl	8004d32 <memset>
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	; (8004b80 <std+0x58>)
 8004b4c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <std+0x5c>)
 8004b50:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b52:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <std+0x60>)
 8004b54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <std+0x64>)
 8004b58:	6323      	str	r3, [r4, #48]	; 0x30
 8004b5a:	4b0d      	ldr	r3, [pc, #52]	; (8004b90 <std+0x68>)
 8004b5c:	6224      	str	r4, [r4, #32]
 8004b5e:	429c      	cmp	r4, r3
 8004b60:	d006      	beq.n	8004b70 <std+0x48>
 8004b62:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004b66:	4294      	cmp	r4, r2
 8004b68:	d002      	beq.n	8004b70 <std+0x48>
 8004b6a:	33d0      	adds	r3, #208	; 0xd0
 8004b6c:	429c      	cmp	r4, r3
 8004b6e:	d105      	bne.n	8004b7c <std+0x54>
 8004b70:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b78:	f000 b968 	b.w	8004e4c <__retarget_lock_init_recursive>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	bf00      	nop
 8004b80:	08004cad 	.word	0x08004cad
 8004b84:	08004ccf 	.word	0x08004ccf
 8004b88:	08004d07 	.word	0x08004d07
 8004b8c:	08004d2b 	.word	0x08004d2b
 8004b90:	20000200 	.word	0x20000200

08004b94 <stdio_exit_handler>:
 8004b94:	4a02      	ldr	r2, [pc, #8]	; (8004ba0 <stdio_exit_handler+0xc>)
 8004b96:	4903      	ldr	r1, [pc, #12]	; (8004ba4 <stdio_exit_handler+0x10>)
 8004b98:	4803      	ldr	r0, [pc, #12]	; (8004ba8 <stdio_exit_handler+0x14>)
 8004b9a:	f000 b869 	b.w	8004c70 <_fwalk_sglue>
 8004b9e:	bf00      	nop
 8004ba0:	2000000c 	.word	0x2000000c
 8004ba4:	08006401 	.word	0x08006401
 8004ba8:	20000018 	.word	0x20000018

08004bac <cleanup_stdio>:
 8004bac:	6841      	ldr	r1, [r0, #4]
 8004bae:	4b0c      	ldr	r3, [pc, #48]	; (8004be0 <cleanup_stdio+0x34>)
 8004bb0:	4299      	cmp	r1, r3
 8004bb2:	b510      	push	{r4, lr}
 8004bb4:	4604      	mov	r4, r0
 8004bb6:	d001      	beq.n	8004bbc <cleanup_stdio+0x10>
 8004bb8:	f001 fc22 	bl	8006400 <_fflush_r>
 8004bbc:	68a1      	ldr	r1, [r4, #8]
 8004bbe:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <cleanup_stdio+0x38>)
 8004bc0:	4299      	cmp	r1, r3
 8004bc2:	d002      	beq.n	8004bca <cleanup_stdio+0x1e>
 8004bc4:	4620      	mov	r0, r4
 8004bc6:	f001 fc1b 	bl	8006400 <_fflush_r>
 8004bca:	68e1      	ldr	r1, [r4, #12]
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <cleanup_stdio+0x3c>)
 8004bce:	4299      	cmp	r1, r3
 8004bd0:	d004      	beq.n	8004bdc <cleanup_stdio+0x30>
 8004bd2:	4620      	mov	r0, r4
 8004bd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd8:	f001 bc12 	b.w	8006400 <_fflush_r>
 8004bdc:	bd10      	pop	{r4, pc}
 8004bde:	bf00      	nop
 8004be0:	20000200 	.word	0x20000200
 8004be4:	20000268 	.word	0x20000268
 8004be8:	200002d0 	.word	0x200002d0

08004bec <global_stdio_init.part.0>:
 8004bec:	b510      	push	{r4, lr}
 8004bee:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <global_stdio_init.part.0+0x30>)
 8004bf0:	4c0b      	ldr	r4, [pc, #44]	; (8004c20 <global_stdio_init.part.0+0x34>)
 8004bf2:	4a0c      	ldr	r2, [pc, #48]	; (8004c24 <global_stdio_init.part.0+0x38>)
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	2104      	movs	r1, #4
 8004bfc:	f7ff ff94 	bl	8004b28 <std>
 8004c00:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c04:	2201      	movs	r2, #1
 8004c06:	2109      	movs	r1, #9
 8004c08:	f7ff ff8e 	bl	8004b28 <std>
 8004c0c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c10:	2202      	movs	r2, #2
 8004c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c16:	2112      	movs	r1, #18
 8004c18:	f7ff bf86 	b.w	8004b28 <std>
 8004c1c:	20000338 	.word	0x20000338
 8004c20:	20000200 	.word	0x20000200
 8004c24:	08004b95 	.word	0x08004b95

08004c28 <__sfp_lock_acquire>:
 8004c28:	4801      	ldr	r0, [pc, #4]	; (8004c30 <__sfp_lock_acquire+0x8>)
 8004c2a:	f000 b910 	b.w	8004e4e <__retarget_lock_acquire_recursive>
 8004c2e:	bf00      	nop
 8004c30:	20000341 	.word	0x20000341

08004c34 <__sfp_lock_release>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__sfp_lock_release+0x8>)
 8004c36:	f000 b90b 	b.w	8004e50 <__retarget_lock_release_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	20000341 	.word	0x20000341

08004c40 <__sinit>:
 8004c40:	b510      	push	{r4, lr}
 8004c42:	4604      	mov	r4, r0
 8004c44:	f7ff fff0 	bl	8004c28 <__sfp_lock_acquire>
 8004c48:	6a23      	ldr	r3, [r4, #32]
 8004c4a:	b11b      	cbz	r3, 8004c54 <__sinit+0x14>
 8004c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c50:	f7ff bff0 	b.w	8004c34 <__sfp_lock_release>
 8004c54:	4b04      	ldr	r3, [pc, #16]	; (8004c68 <__sinit+0x28>)
 8004c56:	6223      	str	r3, [r4, #32]
 8004c58:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <__sinit+0x2c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1f5      	bne.n	8004c4c <__sinit+0xc>
 8004c60:	f7ff ffc4 	bl	8004bec <global_stdio_init.part.0>
 8004c64:	e7f2      	b.n	8004c4c <__sinit+0xc>
 8004c66:	bf00      	nop
 8004c68:	08004bad 	.word	0x08004bad
 8004c6c:	20000338 	.word	0x20000338

08004c70 <_fwalk_sglue>:
 8004c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c74:	4607      	mov	r7, r0
 8004c76:	4688      	mov	r8, r1
 8004c78:	4614      	mov	r4, r2
 8004c7a:	2600      	movs	r6, #0
 8004c7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c80:	f1b9 0901 	subs.w	r9, r9, #1
 8004c84:	d505      	bpl.n	8004c92 <_fwalk_sglue+0x22>
 8004c86:	6824      	ldr	r4, [r4, #0]
 8004c88:	2c00      	cmp	r4, #0
 8004c8a:	d1f7      	bne.n	8004c7c <_fwalk_sglue+0xc>
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c92:	89ab      	ldrh	r3, [r5, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d907      	bls.n	8004ca8 <_fwalk_sglue+0x38>
 8004c98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <_fwalk_sglue+0x38>
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4638      	mov	r0, r7
 8004ca4:	47c0      	blx	r8
 8004ca6:	4306      	orrs	r6, r0
 8004ca8:	3568      	adds	r5, #104	; 0x68
 8004caa:	e7e9      	b.n	8004c80 <_fwalk_sglue+0x10>

08004cac <__sread>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	460c      	mov	r4, r1
 8004cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb4:	f000 f86c 	bl	8004d90 <_read_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	bfab      	itete	ge
 8004cbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004cbe:	89a3      	ldrhlt	r3, [r4, #12]
 8004cc0:	181b      	addge	r3, r3, r0
 8004cc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004cc6:	bfac      	ite	ge
 8004cc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004cca:	81a3      	strhlt	r3, [r4, #12]
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <__swrite>:
 8004cce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cd2:	461f      	mov	r7, r3
 8004cd4:	898b      	ldrh	r3, [r1, #12]
 8004cd6:	05db      	lsls	r3, r3, #23
 8004cd8:	4605      	mov	r5, r0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	4616      	mov	r6, r2
 8004cde:	d505      	bpl.n	8004cec <__swrite+0x1e>
 8004ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f000 f840 	bl	8004d6c <_lseek_r>
 8004cec:	89a3      	ldrh	r3, [r4, #12]
 8004cee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cf6:	81a3      	strh	r3, [r4, #12]
 8004cf8:	4632      	mov	r2, r6
 8004cfa:	463b      	mov	r3, r7
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	f000 b867 	b.w	8004dd4 <_write_r>

08004d06 <__sseek>:
 8004d06:	b510      	push	{r4, lr}
 8004d08:	460c      	mov	r4, r1
 8004d0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0e:	f000 f82d 	bl	8004d6c <_lseek_r>
 8004d12:	1c43      	adds	r3, r0, #1
 8004d14:	89a3      	ldrh	r3, [r4, #12]
 8004d16:	bf15      	itete	ne
 8004d18:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d22:	81a3      	strheq	r3, [r4, #12]
 8004d24:	bf18      	it	ne
 8004d26:	81a3      	strhne	r3, [r4, #12]
 8004d28:	bd10      	pop	{r4, pc}

08004d2a <__sclose>:
 8004d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d2e:	f000 b80d 	b.w	8004d4c <_close_r>

08004d32 <memset>:
 8004d32:	4402      	add	r2, r0
 8004d34:	4603      	mov	r3, r0
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d100      	bne.n	8004d3c <memset+0xa>
 8004d3a:	4770      	bx	lr
 8004d3c:	f803 1b01 	strb.w	r1, [r3], #1
 8004d40:	e7f9      	b.n	8004d36 <memset+0x4>
	...

08004d44 <_localeconv_r>:
 8004d44:	4800      	ldr	r0, [pc, #0]	; (8004d48 <_localeconv_r+0x4>)
 8004d46:	4770      	bx	lr
 8004d48:	20000158 	.word	0x20000158

08004d4c <_close_r>:
 8004d4c:	b538      	push	{r3, r4, r5, lr}
 8004d4e:	4d06      	ldr	r5, [pc, #24]	; (8004d68 <_close_r+0x1c>)
 8004d50:	2300      	movs	r3, #0
 8004d52:	4604      	mov	r4, r0
 8004d54:	4608      	mov	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fe f9e7 	bl	800312a <_close>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d102      	bne.n	8004d66 <_close_r+0x1a>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	b103      	cbz	r3, 8004d66 <_close_r+0x1a>
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	bd38      	pop	{r3, r4, r5, pc}
 8004d68:	2000033c 	.word	0x2000033c

08004d6c <_lseek_r>:
 8004d6c:	b538      	push	{r3, r4, r5, lr}
 8004d6e:	4d07      	ldr	r5, [pc, #28]	; (8004d8c <_lseek_r+0x20>)
 8004d70:	4604      	mov	r4, r0
 8004d72:	4608      	mov	r0, r1
 8004d74:	4611      	mov	r1, r2
 8004d76:	2200      	movs	r2, #0
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f7fe f9fc 	bl	8003178 <_lseek>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_lseek_r+0x1e>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_lseek_r+0x1e>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	2000033c 	.word	0x2000033c

08004d90 <_read_r>:
 8004d90:	b538      	push	{r3, r4, r5, lr}
 8004d92:	4d07      	ldr	r5, [pc, #28]	; (8004db0 <_read_r+0x20>)
 8004d94:	4604      	mov	r4, r0
 8004d96:	4608      	mov	r0, r1
 8004d98:	4611      	mov	r1, r2
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	602a      	str	r2, [r5, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	f7fe f98a 	bl	80030b8 <_read>
 8004da4:	1c43      	adds	r3, r0, #1
 8004da6:	d102      	bne.n	8004dae <_read_r+0x1e>
 8004da8:	682b      	ldr	r3, [r5, #0]
 8004daa:	b103      	cbz	r3, 8004dae <_read_r+0x1e>
 8004dac:	6023      	str	r3, [r4, #0]
 8004dae:	bd38      	pop	{r3, r4, r5, pc}
 8004db0:	2000033c 	.word	0x2000033c

08004db4 <_sbrk_r>:
 8004db4:	b538      	push	{r3, r4, r5, lr}
 8004db6:	4d06      	ldr	r5, [pc, #24]	; (8004dd0 <_sbrk_r+0x1c>)
 8004db8:	2300      	movs	r3, #0
 8004dba:	4604      	mov	r4, r0
 8004dbc:	4608      	mov	r0, r1
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	f7fe f9e8 	bl	8003194 <_sbrk>
 8004dc4:	1c43      	adds	r3, r0, #1
 8004dc6:	d102      	bne.n	8004dce <_sbrk_r+0x1a>
 8004dc8:	682b      	ldr	r3, [r5, #0]
 8004dca:	b103      	cbz	r3, 8004dce <_sbrk_r+0x1a>
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	bd38      	pop	{r3, r4, r5, pc}
 8004dd0:	2000033c 	.word	0x2000033c

08004dd4 <_write_r>:
 8004dd4:	b538      	push	{r3, r4, r5, lr}
 8004dd6:	4d07      	ldr	r5, [pc, #28]	; (8004df4 <_write_r+0x20>)
 8004dd8:	4604      	mov	r4, r0
 8004dda:	4608      	mov	r0, r1
 8004ddc:	4611      	mov	r1, r2
 8004dde:	2200      	movs	r2, #0
 8004de0:	602a      	str	r2, [r5, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	f7fe f985 	bl	80030f2 <_write>
 8004de8:	1c43      	adds	r3, r0, #1
 8004dea:	d102      	bne.n	8004df2 <_write_r+0x1e>
 8004dec:	682b      	ldr	r3, [r5, #0]
 8004dee:	b103      	cbz	r3, 8004df2 <_write_r+0x1e>
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	bd38      	pop	{r3, r4, r5, pc}
 8004df4:	2000033c 	.word	0x2000033c

08004df8 <__errno>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <__errno+0x8>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000064 	.word	0x20000064

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	; (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	; (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	; (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	; (8004e48 <__libc_init_array+0x44>)
 8004e18:	f001 fe28 	bl	8006a6c <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	0800aebc 	.word	0x0800aebc
 8004e40:	0800aebc 	.word	0x0800aebc
 8004e44:	0800aebc 	.word	0x0800aebc
 8004e48:	0800aec0 	.word	0x0800aec0

08004e4c <__retarget_lock_init_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_acquire_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <__retarget_lock_release_recursive>:
 8004e50:	4770      	bx	lr

08004e52 <memcpy>:
 8004e52:	440a      	add	r2, r1
 8004e54:	4291      	cmp	r1, r2
 8004e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e5a:	d100      	bne.n	8004e5e <memcpy+0xc>
 8004e5c:	4770      	bx	lr
 8004e5e:	b510      	push	{r4, lr}
 8004e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e68:	4291      	cmp	r1, r2
 8004e6a:	d1f9      	bne.n	8004e60 <memcpy+0xe>
 8004e6c:	bd10      	pop	{r4, pc}

08004e6e <quorem>:
 8004e6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e72:	6903      	ldr	r3, [r0, #16]
 8004e74:	690c      	ldr	r4, [r1, #16]
 8004e76:	42a3      	cmp	r3, r4
 8004e78:	4607      	mov	r7, r0
 8004e7a:	db7e      	blt.n	8004f7a <quorem+0x10c>
 8004e7c:	3c01      	subs	r4, #1
 8004e7e:	f101 0814 	add.w	r8, r1, #20
 8004e82:	f100 0514 	add.w	r5, r0, #20
 8004e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e94:	3301      	adds	r3, #1
 8004e96:	429a      	cmp	r2, r3
 8004e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ea4:	d331      	bcc.n	8004f0a <quorem+0x9c>
 8004ea6:	f04f 0e00 	mov.w	lr, #0
 8004eaa:	4640      	mov	r0, r8
 8004eac:	46ac      	mov	ip, r5
 8004eae:	46f2      	mov	sl, lr
 8004eb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004eb4:	b293      	uxth	r3, r2
 8004eb6:	fb06 e303 	mla	r3, r6, r3, lr
 8004eba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004ebe:	0c1a      	lsrs	r2, r3, #16
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ec6:	f8dc a000 	ldr.w	sl, [ip]
 8004eca:	fa13 f38a 	uxtah	r3, r3, sl
 8004ece:	fb06 220e 	mla	r2, r6, lr, r2
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	9b00      	ldr	r3, [sp, #0]
 8004ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eda:	b292      	uxth	r2, r2
 8004edc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004ee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ee4:	f8bd 3000 	ldrh.w	r3, [sp]
 8004ee8:	4581      	cmp	r9, r0
 8004eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004eee:	f84c 3b04 	str.w	r3, [ip], #4
 8004ef2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004ef6:	d2db      	bcs.n	8004eb0 <quorem+0x42>
 8004ef8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004efc:	b92b      	cbnz	r3, 8004f0a <quorem+0x9c>
 8004efe:	9b01      	ldr	r3, [sp, #4]
 8004f00:	3b04      	subs	r3, #4
 8004f02:	429d      	cmp	r5, r3
 8004f04:	461a      	mov	r2, r3
 8004f06:	d32c      	bcc.n	8004f62 <quorem+0xf4>
 8004f08:	613c      	str	r4, [r7, #16]
 8004f0a:	4638      	mov	r0, r7
 8004f0c:	f001 f8f2 	bl	80060f4 <__mcmp>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	db22      	blt.n	8004f5a <quorem+0xec>
 8004f14:	3601      	adds	r6, #1
 8004f16:	4629      	mov	r1, r5
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f1e:	f8d1 c000 	ldr.w	ip, [r1]
 8004f22:	b293      	uxth	r3, r2
 8004f24:	1ac3      	subs	r3, r0, r3
 8004f26:	0c12      	lsrs	r2, r2, #16
 8004f28:	fa13 f38c 	uxtah	r3, r3, ip
 8004f2c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004f30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f3a:	45c1      	cmp	r9, r8
 8004f3c:	f841 3b04 	str.w	r3, [r1], #4
 8004f40:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f44:	d2e9      	bcs.n	8004f1a <quorem+0xac>
 8004f46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f4e:	b922      	cbnz	r2, 8004f5a <quorem+0xec>
 8004f50:	3b04      	subs	r3, #4
 8004f52:	429d      	cmp	r5, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	d30a      	bcc.n	8004f6e <quorem+0x100>
 8004f58:	613c      	str	r4, [r7, #16]
 8004f5a:	4630      	mov	r0, r6
 8004f5c:	b003      	add	sp, #12
 8004f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f62:	6812      	ldr	r2, [r2, #0]
 8004f64:	3b04      	subs	r3, #4
 8004f66:	2a00      	cmp	r2, #0
 8004f68:	d1ce      	bne.n	8004f08 <quorem+0x9a>
 8004f6a:	3c01      	subs	r4, #1
 8004f6c:	e7c9      	b.n	8004f02 <quorem+0x94>
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	3b04      	subs	r3, #4
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	d1f0      	bne.n	8004f58 <quorem+0xea>
 8004f76:	3c01      	subs	r4, #1
 8004f78:	e7eb      	b.n	8004f52 <quorem+0xe4>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e7ee      	b.n	8004f5c <quorem+0xee>
	...

08004f80 <_dtoa_r>:
 8004f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f84:	ed2d 8b04 	vpush	{d8-d9}
 8004f88:	69c5      	ldr	r5, [r0, #28]
 8004f8a:	b093      	sub	sp, #76	; 0x4c
 8004f8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004f90:	ec57 6b10 	vmov	r6, r7, d0
 8004f94:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004f98:	9107      	str	r1, [sp, #28]
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	920a      	str	r2, [sp, #40]	; 0x28
 8004f9e:	930d      	str	r3, [sp, #52]	; 0x34
 8004fa0:	b975      	cbnz	r5, 8004fc0 <_dtoa_r+0x40>
 8004fa2:	2010      	movs	r0, #16
 8004fa4:	f7ff f8a6 	bl	80040f4 <malloc>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	61e0      	str	r0, [r4, #28]
 8004fac:	b920      	cbnz	r0, 8004fb8 <_dtoa_r+0x38>
 8004fae:	4bae      	ldr	r3, [pc, #696]	; (8005268 <_dtoa_r+0x2e8>)
 8004fb0:	21ef      	movs	r1, #239	; 0xef
 8004fb2:	48ae      	ldr	r0, [pc, #696]	; (800526c <_dtoa_r+0x2ec>)
 8004fb4:	f001 fa4c 	bl	8006450 <__assert_func>
 8004fb8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004fbc:	6005      	str	r5, [r0, #0]
 8004fbe:	60c5      	str	r5, [r0, #12]
 8004fc0:	69e3      	ldr	r3, [r4, #28]
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	b151      	cbz	r1, 8004fdc <_dtoa_r+0x5c>
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	604a      	str	r2, [r1, #4]
 8004fca:	2301      	movs	r3, #1
 8004fcc:	4093      	lsls	r3, r2
 8004fce:	608b      	str	r3, [r1, #8]
 8004fd0:	4620      	mov	r0, r4
 8004fd2:	f000 fe53 	bl	8005c7c <_Bfree>
 8004fd6:	69e3      	ldr	r3, [r4, #28]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	1e3b      	subs	r3, r7, #0
 8004fde:	bfbb      	ittet	lt
 8004fe0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004fe4:	9303      	strlt	r3, [sp, #12]
 8004fe6:	2300      	movge	r3, #0
 8004fe8:	2201      	movlt	r2, #1
 8004fea:	bfac      	ite	ge
 8004fec:	f8c8 3000 	strge.w	r3, [r8]
 8004ff0:	f8c8 2000 	strlt.w	r2, [r8]
 8004ff4:	4b9e      	ldr	r3, [pc, #632]	; (8005270 <_dtoa_r+0x2f0>)
 8004ff6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004ffa:	ea33 0308 	bics.w	r3, r3, r8
 8004ffe:	d11b      	bne.n	8005038 <_dtoa_r+0xb8>
 8005000:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005002:	f242 730f 	movw	r3, #9999	; 0x270f
 8005006:	6013      	str	r3, [r2, #0]
 8005008:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800500c:	4333      	orrs	r3, r6
 800500e:	f000 8593 	beq.w	8005b38 <_dtoa_r+0xbb8>
 8005012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005014:	b963      	cbnz	r3, 8005030 <_dtoa_r+0xb0>
 8005016:	4b97      	ldr	r3, [pc, #604]	; (8005274 <_dtoa_r+0x2f4>)
 8005018:	e027      	b.n	800506a <_dtoa_r+0xea>
 800501a:	4b97      	ldr	r3, [pc, #604]	; (8005278 <_dtoa_r+0x2f8>)
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	3308      	adds	r3, #8
 8005020:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005022:	6013      	str	r3, [r2, #0]
 8005024:	9800      	ldr	r0, [sp, #0]
 8005026:	b013      	add	sp, #76	; 0x4c
 8005028:	ecbd 8b04 	vpop	{d8-d9}
 800502c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005030:	4b90      	ldr	r3, [pc, #576]	; (8005274 <_dtoa_r+0x2f4>)
 8005032:	9300      	str	r3, [sp, #0]
 8005034:	3303      	adds	r3, #3
 8005036:	e7f3      	b.n	8005020 <_dtoa_r+0xa0>
 8005038:	ed9d 7b02 	vldr	d7, [sp, #8]
 800503c:	2200      	movs	r2, #0
 800503e:	ec51 0b17 	vmov	r0, r1, d7
 8005042:	eeb0 8a47 	vmov.f32	s16, s14
 8005046:	eef0 8a67 	vmov.f32	s17, s15
 800504a:	2300      	movs	r3, #0
 800504c:	f7fb fd44 	bl	8000ad8 <__aeabi_dcmpeq>
 8005050:	4681      	mov	r9, r0
 8005052:	b160      	cbz	r0, 800506e <_dtoa_r+0xee>
 8005054:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005056:	2301      	movs	r3, #1
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800505c:	2b00      	cmp	r3, #0
 800505e:	f000 8568 	beq.w	8005b32 <_dtoa_r+0xbb2>
 8005062:	4b86      	ldr	r3, [pc, #536]	; (800527c <_dtoa_r+0x2fc>)
 8005064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	9300      	str	r3, [sp, #0]
 800506c:	e7da      	b.n	8005024 <_dtoa_r+0xa4>
 800506e:	aa10      	add	r2, sp, #64	; 0x40
 8005070:	a911      	add	r1, sp, #68	; 0x44
 8005072:	4620      	mov	r0, r4
 8005074:	eeb0 0a48 	vmov.f32	s0, s16
 8005078:	eef0 0a68 	vmov.f32	s1, s17
 800507c:	f001 f8e0 	bl	8006240 <__d2b>
 8005080:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005084:	4682      	mov	sl, r0
 8005086:	2d00      	cmp	r5, #0
 8005088:	d07f      	beq.n	800518a <_dtoa_r+0x20a>
 800508a:	ee18 3a90 	vmov	r3, s17
 800508e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005092:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005096:	ec51 0b18 	vmov	r0, r1, d8
 800509a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800509e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80050a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80050a6:	4619      	mov	r1, r3
 80050a8:	2200      	movs	r2, #0
 80050aa:	4b75      	ldr	r3, [pc, #468]	; (8005280 <_dtoa_r+0x300>)
 80050ac:	f7fb f8f4 	bl	8000298 <__aeabi_dsub>
 80050b0:	a367      	add	r3, pc, #412	; (adr r3, 8005250 <_dtoa_r+0x2d0>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	f7fb faa7 	bl	8000608 <__aeabi_dmul>
 80050ba:	a367      	add	r3, pc, #412	; (adr r3, 8005258 <_dtoa_r+0x2d8>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb f8ec 	bl	800029c <__adddf3>
 80050c4:	4606      	mov	r6, r0
 80050c6:	4628      	mov	r0, r5
 80050c8:	460f      	mov	r7, r1
 80050ca:	f7fb fa33 	bl	8000534 <__aeabi_i2d>
 80050ce:	a364      	add	r3, pc, #400	; (adr r3, 8005260 <_dtoa_r+0x2e0>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb fa98 	bl	8000608 <__aeabi_dmul>
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f7fb f8dc 	bl	800029c <__adddf3>
 80050e4:	4606      	mov	r6, r0
 80050e6:	460f      	mov	r7, r1
 80050e8:	f7fb fd3e 	bl	8000b68 <__aeabi_d2iz>
 80050ec:	2200      	movs	r2, #0
 80050ee:	4683      	mov	fp, r0
 80050f0:	2300      	movs	r3, #0
 80050f2:	4630      	mov	r0, r6
 80050f4:	4639      	mov	r1, r7
 80050f6:	f7fb fcf9 	bl	8000aec <__aeabi_dcmplt>
 80050fa:	b148      	cbz	r0, 8005110 <_dtoa_r+0x190>
 80050fc:	4658      	mov	r0, fp
 80050fe:	f7fb fa19 	bl	8000534 <__aeabi_i2d>
 8005102:	4632      	mov	r2, r6
 8005104:	463b      	mov	r3, r7
 8005106:	f7fb fce7 	bl	8000ad8 <__aeabi_dcmpeq>
 800510a:	b908      	cbnz	r0, 8005110 <_dtoa_r+0x190>
 800510c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005110:	f1bb 0f16 	cmp.w	fp, #22
 8005114:	d857      	bhi.n	80051c6 <_dtoa_r+0x246>
 8005116:	4b5b      	ldr	r3, [pc, #364]	; (8005284 <_dtoa_r+0x304>)
 8005118:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800511c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005120:	ec51 0b18 	vmov	r0, r1, d8
 8005124:	f7fb fce2 	bl	8000aec <__aeabi_dcmplt>
 8005128:	2800      	cmp	r0, #0
 800512a:	d04e      	beq.n	80051ca <_dtoa_r+0x24a>
 800512c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005130:	2300      	movs	r3, #0
 8005132:	930c      	str	r3, [sp, #48]	; 0x30
 8005134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005136:	1b5b      	subs	r3, r3, r5
 8005138:	1e5a      	subs	r2, r3, #1
 800513a:	bf45      	ittet	mi
 800513c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005140:	9305      	strmi	r3, [sp, #20]
 8005142:	2300      	movpl	r3, #0
 8005144:	2300      	movmi	r3, #0
 8005146:	9206      	str	r2, [sp, #24]
 8005148:	bf54      	ite	pl
 800514a:	9305      	strpl	r3, [sp, #20]
 800514c:	9306      	strmi	r3, [sp, #24]
 800514e:	f1bb 0f00 	cmp.w	fp, #0
 8005152:	db3c      	blt.n	80051ce <_dtoa_r+0x24e>
 8005154:	9b06      	ldr	r3, [sp, #24]
 8005156:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800515a:	445b      	add	r3, fp
 800515c:	9306      	str	r3, [sp, #24]
 800515e:	2300      	movs	r3, #0
 8005160:	9308      	str	r3, [sp, #32]
 8005162:	9b07      	ldr	r3, [sp, #28]
 8005164:	2b09      	cmp	r3, #9
 8005166:	d868      	bhi.n	800523a <_dtoa_r+0x2ba>
 8005168:	2b05      	cmp	r3, #5
 800516a:	bfc4      	itt	gt
 800516c:	3b04      	subgt	r3, #4
 800516e:	9307      	strgt	r3, [sp, #28]
 8005170:	9b07      	ldr	r3, [sp, #28]
 8005172:	f1a3 0302 	sub.w	r3, r3, #2
 8005176:	bfcc      	ite	gt
 8005178:	2500      	movgt	r5, #0
 800517a:	2501      	movle	r5, #1
 800517c:	2b03      	cmp	r3, #3
 800517e:	f200 8085 	bhi.w	800528c <_dtoa_r+0x30c>
 8005182:	e8df f003 	tbb	[pc, r3]
 8005186:	3b2e      	.short	0x3b2e
 8005188:	5839      	.short	0x5839
 800518a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800518e:	441d      	add	r5, r3
 8005190:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005194:	2b20      	cmp	r3, #32
 8005196:	bfc1      	itttt	gt
 8005198:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800519c:	fa08 f803 	lslgt.w	r8, r8, r3
 80051a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80051a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80051a8:	bfd6      	itet	le
 80051aa:	f1c3 0320 	rsble	r3, r3, #32
 80051ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80051b2:	fa06 f003 	lslle.w	r0, r6, r3
 80051b6:	f7fb f9ad 	bl	8000514 <__aeabi_ui2d>
 80051ba:	2201      	movs	r2, #1
 80051bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80051c0:	3d01      	subs	r5, #1
 80051c2:	920e      	str	r2, [sp, #56]	; 0x38
 80051c4:	e76f      	b.n	80050a6 <_dtoa_r+0x126>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e7b3      	b.n	8005132 <_dtoa_r+0x1b2>
 80051ca:	900c      	str	r0, [sp, #48]	; 0x30
 80051cc:	e7b2      	b.n	8005134 <_dtoa_r+0x1b4>
 80051ce:	9b05      	ldr	r3, [sp, #20]
 80051d0:	eba3 030b 	sub.w	r3, r3, fp
 80051d4:	9305      	str	r3, [sp, #20]
 80051d6:	f1cb 0300 	rsb	r3, fp, #0
 80051da:	9308      	str	r3, [sp, #32]
 80051dc:	2300      	movs	r3, #0
 80051de:	930b      	str	r3, [sp, #44]	; 0x2c
 80051e0:	e7bf      	b.n	8005162 <_dtoa_r+0x1e2>
 80051e2:	2300      	movs	r3, #0
 80051e4:	9309      	str	r3, [sp, #36]	; 0x24
 80051e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	dc52      	bgt.n	8005292 <_dtoa_r+0x312>
 80051ec:	2301      	movs	r3, #1
 80051ee:	9301      	str	r3, [sp, #4]
 80051f0:	9304      	str	r3, [sp, #16]
 80051f2:	461a      	mov	r2, r3
 80051f4:	920a      	str	r2, [sp, #40]	; 0x28
 80051f6:	e00b      	b.n	8005210 <_dtoa_r+0x290>
 80051f8:	2301      	movs	r3, #1
 80051fa:	e7f3      	b.n	80051e4 <_dtoa_r+0x264>
 80051fc:	2300      	movs	r3, #0
 80051fe:	9309      	str	r3, [sp, #36]	; 0x24
 8005200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005202:	445b      	add	r3, fp
 8005204:	9301      	str	r3, [sp, #4]
 8005206:	3301      	adds	r3, #1
 8005208:	2b01      	cmp	r3, #1
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	bfb8      	it	lt
 800520e:	2301      	movlt	r3, #1
 8005210:	69e0      	ldr	r0, [r4, #28]
 8005212:	2100      	movs	r1, #0
 8005214:	2204      	movs	r2, #4
 8005216:	f102 0614 	add.w	r6, r2, #20
 800521a:	429e      	cmp	r6, r3
 800521c:	d93d      	bls.n	800529a <_dtoa_r+0x31a>
 800521e:	6041      	str	r1, [r0, #4]
 8005220:	4620      	mov	r0, r4
 8005222:	f000 fceb 	bl	8005bfc <_Balloc>
 8005226:	9000      	str	r0, [sp, #0]
 8005228:	2800      	cmp	r0, #0
 800522a:	d139      	bne.n	80052a0 <_dtoa_r+0x320>
 800522c:	4b16      	ldr	r3, [pc, #88]	; (8005288 <_dtoa_r+0x308>)
 800522e:	4602      	mov	r2, r0
 8005230:	f240 11af 	movw	r1, #431	; 0x1af
 8005234:	e6bd      	b.n	8004fb2 <_dtoa_r+0x32>
 8005236:	2301      	movs	r3, #1
 8005238:	e7e1      	b.n	80051fe <_dtoa_r+0x27e>
 800523a:	2501      	movs	r5, #1
 800523c:	2300      	movs	r3, #0
 800523e:	9307      	str	r3, [sp, #28]
 8005240:	9509      	str	r5, [sp, #36]	; 0x24
 8005242:	f04f 33ff 	mov.w	r3, #4294967295
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	2200      	movs	r2, #0
 800524c:	2312      	movs	r3, #18
 800524e:	e7d1      	b.n	80051f4 <_dtoa_r+0x274>
 8005250:	636f4361 	.word	0x636f4361
 8005254:	3fd287a7 	.word	0x3fd287a7
 8005258:	8b60c8b3 	.word	0x8b60c8b3
 800525c:	3fc68a28 	.word	0x3fc68a28
 8005260:	509f79fb 	.word	0x509f79fb
 8005264:	3fd34413 	.word	0x3fd34413
 8005268:	0800ab85 	.word	0x0800ab85
 800526c:	0800ab9c 	.word	0x0800ab9c
 8005270:	7ff00000 	.word	0x7ff00000
 8005274:	0800ab81 	.word	0x0800ab81
 8005278:	0800ab78 	.word	0x0800ab78
 800527c:	0800ab55 	.word	0x0800ab55
 8005280:	3ff80000 	.word	0x3ff80000
 8005284:	0800ac88 	.word	0x0800ac88
 8005288:	0800abf4 	.word	0x0800abf4
 800528c:	2301      	movs	r3, #1
 800528e:	9309      	str	r3, [sp, #36]	; 0x24
 8005290:	e7d7      	b.n	8005242 <_dtoa_r+0x2c2>
 8005292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005294:	9301      	str	r3, [sp, #4]
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	e7ba      	b.n	8005210 <_dtoa_r+0x290>
 800529a:	3101      	adds	r1, #1
 800529c:	0052      	lsls	r2, r2, #1
 800529e:	e7ba      	b.n	8005216 <_dtoa_r+0x296>
 80052a0:	69e3      	ldr	r3, [r4, #28]
 80052a2:	9a00      	ldr	r2, [sp, #0]
 80052a4:	601a      	str	r2, [r3, #0]
 80052a6:	9b04      	ldr	r3, [sp, #16]
 80052a8:	2b0e      	cmp	r3, #14
 80052aa:	f200 80a8 	bhi.w	80053fe <_dtoa_r+0x47e>
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f000 80a5 	beq.w	80053fe <_dtoa_r+0x47e>
 80052b4:	f1bb 0f00 	cmp.w	fp, #0
 80052b8:	dd38      	ble.n	800532c <_dtoa_r+0x3ac>
 80052ba:	4bc0      	ldr	r3, [pc, #768]	; (80055bc <_dtoa_r+0x63c>)
 80052bc:	f00b 020f 	and.w	r2, fp, #15
 80052c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80052c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80052cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80052d0:	d019      	beq.n	8005306 <_dtoa_r+0x386>
 80052d2:	4bbb      	ldr	r3, [pc, #748]	; (80055c0 <_dtoa_r+0x640>)
 80052d4:	ec51 0b18 	vmov	r0, r1, d8
 80052d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052dc:	f7fb fabe 	bl	800085c <__aeabi_ddiv>
 80052e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052e4:	f008 080f 	and.w	r8, r8, #15
 80052e8:	2503      	movs	r5, #3
 80052ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80055c0 <_dtoa_r+0x640>
 80052ee:	f1b8 0f00 	cmp.w	r8, #0
 80052f2:	d10a      	bne.n	800530a <_dtoa_r+0x38a>
 80052f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052f8:	4632      	mov	r2, r6
 80052fa:	463b      	mov	r3, r7
 80052fc:	f7fb faae 	bl	800085c <__aeabi_ddiv>
 8005300:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005304:	e02b      	b.n	800535e <_dtoa_r+0x3de>
 8005306:	2502      	movs	r5, #2
 8005308:	e7ef      	b.n	80052ea <_dtoa_r+0x36a>
 800530a:	f018 0f01 	tst.w	r8, #1
 800530e:	d008      	beq.n	8005322 <_dtoa_r+0x3a2>
 8005310:	4630      	mov	r0, r6
 8005312:	4639      	mov	r1, r7
 8005314:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005318:	f7fb f976 	bl	8000608 <__aeabi_dmul>
 800531c:	3501      	adds	r5, #1
 800531e:	4606      	mov	r6, r0
 8005320:	460f      	mov	r7, r1
 8005322:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005326:	f109 0908 	add.w	r9, r9, #8
 800532a:	e7e0      	b.n	80052ee <_dtoa_r+0x36e>
 800532c:	f000 809f 	beq.w	800546e <_dtoa_r+0x4ee>
 8005330:	f1cb 0600 	rsb	r6, fp, #0
 8005334:	4ba1      	ldr	r3, [pc, #644]	; (80055bc <_dtoa_r+0x63c>)
 8005336:	4fa2      	ldr	r7, [pc, #648]	; (80055c0 <_dtoa_r+0x640>)
 8005338:	f006 020f 	and.w	r2, r6, #15
 800533c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005344:	ec51 0b18 	vmov	r0, r1, d8
 8005348:	f7fb f95e 	bl	8000608 <__aeabi_dmul>
 800534c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005350:	1136      	asrs	r6, r6, #4
 8005352:	2300      	movs	r3, #0
 8005354:	2502      	movs	r5, #2
 8005356:	2e00      	cmp	r6, #0
 8005358:	d17e      	bne.n	8005458 <_dtoa_r+0x4d8>
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1d0      	bne.n	8005300 <_dtoa_r+0x380>
 800535e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005360:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 8084 	beq.w	8005472 <_dtoa_r+0x4f2>
 800536a:	4b96      	ldr	r3, [pc, #600]	; (80055c4 <_dtoa_r+0x644>)
 800536c:	2200      	movs	r2, #0
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fb fbbb 	bl	8000aec <__aeabi_dcmplt>
 8005376:	2800      	cmp	r0, #0
 8005378:	d07b      	beq.n	8005472 <_dtoa_r+0x4f2>
 800537a:	9b04      	ldr	r3, [sp, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d078      	beq.n	8005472 <_dtoa_r+0x4f2>
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	dd39      	ble.n	80053fa <_dtoa_r+0x47a>
 8005386:	4b90      	ldr	r3, [pc, #576]	; (80055c8 <_dtoa_r+0x648>)
 8005388:	2200      	movs	r2, #0
 800538a:	4640      	mov	r0, r8
 800538c:	4649      	mov	r1, r9
 800538e:	f7fb f93b 	bl	8000608 <__aeabi_dmul>
 8005392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005396:	9e01      	ldr	r6, [sp, #4]
 8005398:	f10b 37ff 	add.w	r7, fp, #4294967295
 800539c:	3501      	adds	r5, #1
 800539e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80053a2:	4628      	mov	r0, r5
 80053a4:	f7fb f8c6 	bl	8000534 <__aeabi_i2d>
 80053a8:	4642      	mov	r2, r8
 80053aa:	464b      	mov	r3, r9
 80053ac:	f7fb f92c 	bl	8000608 <__aeabi_dmul>
 80053b0:	4b86      	ldr	r3, [pc, #536]	; (80055cc <_dtoa_r+0x64c>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	f7fa ff72 	bl	800029c <__adddf3>
 80053b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80053bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053c0:	9303      	str	r3, [sp, #12]
 80053c2:	2e00      	cmp	r6, #0
 80053c4:	d158      	bne.n	8005478 <_dtoa_r+0x4f8>
 80053c6:	4b82      	ldr	r3, [pc, #520]	; (80055d0 <_dtoa_r+0x650>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	4640      	mov	r0, r8
 80053cc:	4649      	mov	r1, r9
 80053ce:	f7fa ff63 	bl	8000298 <__aeabi_dsub>
 80053d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80053d6:	4680      	mov	r8, r0
 80053d8:	4689      	mov	r9, r1
 80053da:	f7fb fba5 	bl	8000b28 <__aeabi_dcmpgt>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f040 8296 	bne.w	8005910 <_dtoa_r+0x990>
 80053e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80053e8:	4640      	mov	r0, r8
 80053ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053ee:	4649      	mov	r1, r9
 80053f0:	f7fb fb7c 	bl	8000aec <__aeabi_dcmplt>
 80053f4:	2800      	cmp	r0, #0
 80053f6:	f040 8289 	bne.w	800590c <_dtoa_r+0x98c>
 80053fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80053fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005400:	2b00      	cmp	r3, #0
 8005402:	f2c0 814e 	blt.w	80056a2 <_dtoa_r+0x722>
 8005406:	f1bb 0f0e 	cmp.w	fp, #14
 800540a:	f300 814a 	bgt.w	80056a2 <_dtoa_r+0x722>
 800540e:	4b6b      	ldr	r3, [pc, #428]	; (80055bc <_dtoa_r+0x63c>)
 8005410:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005414:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541a:	2b00      	cmp	r3, #0
 800541c:	f280 80dc 	bge.w	80055d8 <_dtoa_r+0x658>
 8005420:	9b04      	ldr	r3, [sp, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f300 80d8 	bgt.w	80055d8 <_dtoa_r+0x658>
 8005428:	f040 826f 	bne.w	800590a <_dtoa_r+0x98a>
 800542c:	4b68      	ldr	r3, [pc, #416]	; (80055d0 <_dtoa_r+0x650>)
 800542e:	2200      	movs	r2, #0
 8005430:	4640      	mov	r0, r8
 8005432:	4649      	mov	r1, r9
 8005434:	f7fb f8e8 	bl	8000608 <__aeabi_dmul>
 8005438:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800543c:	f7fb fb6a 	bl	8000b14 <__aeabi_dcmpge>
 8005440:	9e04      	ldr	r6, [sp, #16]
 8005442:	4637      	mov	r7, r6
 8005444:	2800      	cmp	r0, #0
 8005446:	f040 8245 	bne.w	80058d4 <_dtoa_r+0x954>
 800544a:	9d00      	ldr	r5, [sp, #0]
 800544c:	2331      	movs	r3, #49	; 0x31
 800544e:	f805 3b01 	strb.w	r3, [r5], #1
 8005452:	f10b 0b01 	add.w	fp, fp, #1
 8005456:	e241      	b.n	80058dc <_dtoa_r+0x95c>
 8005458:	07f2      	lsls	r2, r6, #31
 800545a:	d505      	bpl.n	8005468 <_dtoa_r+0x4e8>
 800545c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005460:	f7fb f8d2 	bl	8000608 <__aeabi_dmul>
 8005464:	3501      	adds	r5, #1
 8005466:	2301      	movs	r3, #1
 8005468:	1076      	asrs	r6, r6, #1
 800546a:	3708      	adds	r7, #8
 800546c:	e773      	b.n	8005356 <_dtoa_r+0x3d6>
 800546e:	2502      	movs	r5, #2
 8005470:	e775      	b.n	800535e <_dtoa_r+0x3de>
 8005472:	9e04      	ldr	r6, [sp, #16]
 8005474:	465f      	mov	r7, fp
 8005476:	e792      	b.n	800539e <_dtoa_r+0x41e>
 8005478:	9900      	ldr	r1, [sp, #0]
 800547a:	4b50      	ldr	r3, [pc, #320]	; (80055bc <_dtoa_r+0x63c>)
 800547c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005480:	4431      	add	r1, r6
 8005482:	9102      	str	r1, [sp, #8]
 8005484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005486:	eeb0 9a47 	vmov.f32	s18, s14
 800548a:	eef0 9a67 	vmov.f32	s19, s15
 800548e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005492:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005496:	2900      	cmp	r1, #0
 8005498:	d044      	beq.n	8005524 <_dtoa_r+0x5a4>
 800549a:	494e      	ldr	r1, [pc, #312]	; (80055d4 <_dtoa_r+0x654>)
 800549c:	2000      	movs	r0, #0
 800549e:	f7fb f9dd 	bl	800085c <__aeabi_ddiv>
 80054a2:	ec53 2b19 	vmov	r2, r3, d9
 80054a6:	f7fa fef7 	bl	8000298 <__aeabi_dsub>
 80054aa:	9d00      	ldr	r5, [sp, #0]
 80054ac:	ec41 0b19 	vmov	d9, r0, r1
 80054b0:	4649      	mov	r1, r9
 80054b2:	4640      	mov	r0, r8
 80054b4:	f7fb fb58 	bl	8000b68 <__aeabi_d2iz>
 80054b8:	4606      	mov	r6, r0
 80054ba:	f7fb f83b 	bl	8000534 <__aeabi_i2d>
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4640      	mov	r0, r8
 80054c4:	4649      	mov	r1, r9
 80054c6:	f7fa fee7 	bl	8000298 <__aeabi_dsub>
 80054ca:	3630      	adds	r6, #48	; 0x30
 80054cc:	f805 6b01 	strb.w	r6, [r5], #1
 80054d0:	ec53 2b19 	vmov	r2, r3, d9
 80054d4:	4680      	mov	r8, r0
 80054d6:	4689      	mov	r9, r1
 80054d8:	f7fb fb08 	bl	8000aec <__aeabi_dcmplt>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d164      	bne.n	80055aa <_dtoa_r+0x62a>
 80054e0:	4642      	mov	r2, r8
 80054e2:	464b      	mov	r3, r9
 80054e4:	4937      	ldr	r1, [pc, #220]	; (80055c4 <_dtoa_r+0x644>)
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7fa fed6 	bl	8000298 <__aeabi_dsub>
 80054ec:	ec53 2b19 	vmov	r2, r3, d9
 80054f0:	f7fb fafc 	bl	8000aec <__aeabi_dcmplt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	f040 80b6 	bne.w	8005666 <_dtoa_r+0x6e6>
 80054fa:	9b02      	ldr	r3, [sp, #8]
 80054fc:	429d      	cmp	r5, r3
 80054fe:	f43f af7c 	beq.w	80053fa <_dtoa_r+0x47a>
 8005502:	4b31      	ldr	r3, [pc, #196]	; (80055c8 <_dtoa_r+0x648>)
 8005504:	ec51 0b19 	vmov	r0, r1, d9
 8005508:	2200      	movs	r2, #0
 800550a:	f7fb f87d 	bl	8000608 <__aeabi_dmul>
 800550e:	4b2e      	ldr	r3, [pc, #184]	; (80055c8 <_dtoa_r+0x648>)
 8005510:	ec41 0b19 	vmov	d9, r0, r1
 8005514:	2200      	movs	r2, #0
 8005516:	4640      	mov	r0, r8
 8005518:	4649      	mov	r1, r9
 800551a:	f7fb f875 	bl	8000608 <__aeabi_dmul>
 800551e:	4680      	mov	r8, r0
 8005520:	4689      	mov	r9, r1
 8005522:	e7c5      	b.n	80054b0 <_dtoa_r+0x530>
 8005524:	ec51 0b17 	vmov	r0, r1, d7
 8005528:	f7fb f86e 	bl	8000608 <__aeabi_dmul>
 800552c:	9b02      	ldr	r3, [sp, #8]
 800552e:	9d00      	ldr	r5, [sp, #0]
 8005530:	930f      	str	r3, [sp, #60]	; 0x3c
 8005532:	ec41 0b19 	vmov	d9, r0, r1
 8005536:	4649      	mov	r1, r9
 8005538:	4640      	mov	r0, r8
 800553a:	f7fb fb15 	bl	8000b68 <__aeabi_d2iz>
 800553e:	4606      	mov	r6, r0
 8005540:	f7fa fff8 	bl	8000534 <__aeabi_i2d>
 8005544:	3630      	adds	r6, #48	; 0x30
 8005546:	4602      	mov	r2, r0
 8005548:	460b      	mov	r3, r1
 800554a:	4640      	mov	r0, r8
 800554c:	4649      	mov	r1, r9
 800554e:	f7fa fea3 	bl	8000298 <__aeabi_dsub>
 8005552:	f805 6b01 	strb.w	r6, [r5], #1
 8005556:	9b02      	ldr	r3, [sp, #8]
 8005558:	429d      	cmp	r5, r3
 800555a:	4680      	mov	r8, r0
 800555c:	4689      	mov	r9, r1
 800555e:	f04f 0200 	mov.w	r2, #0
 8005562:	d124      	bne.n	80055ae <_dtoa_r+0x62e>
 8005564:	4b1b      	ldr	r3, [pc, #108]	; (80055d4 <_dtoa_r+0x654>)
 8005566:	ec51 0b19 	vmov	r0, r1, d9
 800556a:	f7fa fe97 	bl	800029c <__adddf3>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4640      	mov	r0, r8
 8005574:	4649      	mov	r1, r9
 8005576:	f7fb fad7 	bl	8000b28 <__aeabi_dcmpgt>
 800557a:	2800      	cmp	r0, #0
 800557c:	d173      	bne.n	8005666 <_dtoa_r+0x6e6>
 800557e:	ec53 2b19 	vmov	r2, r3, d9
 8005582:	4914      	ldr	r1, [pc, #80]	; (80055d4 <_dtoa_r+0x654>)
 8005584:	2000      	movs	r0, #0
 8005586:	f7fa fe87 	bl	8000298 <__aeabi_dsub>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4640      	mov	r0, r8
 8005590:	4649      	mov	r1, r9
 8005592:	f7fb faab 	bl	8000aec <__aeabi_dcmplt>
 8005596:	2800      	cmp	r0, #0
 8005598:	f43f af2f 	beq.w	80053fa <_dtoa_r+0x47a>
 800559c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800559e:	1e6b      	subs	r3, r5, #1
 80055a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80055a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80055a6:	2b30      	cmp	r3, #48	; 0x30
 80055a8:	d0f8      	beq.n	800559c <_dtoa_r+0x61c>
 80055aa:	46bb      	mov	fp, r7
 80055ac:	e04a      	b.n	8005644 <_dtoa_r+0x6c4>
 80055ae:	4b06      	ldr	r3, [pc, #24]	; (80055c8 <_dtoa_r+0x648>)
 80055b0:	f7fb f82a 	bl	8000608 <__aeabi_dmul>
 80055b4:	4680      	mov	r8, r0
 80055b6:	4689      	mov	r9, r1
 80055b8:	e7bd      	b.n	8005536 <_dtoa_r+0x5b6>
 80055ba:	bf00      	nop
 80055bc:	0800ac88 	.word	0x0800ac88
 80055c0:	0800ac60 	.word	0x0800ac60
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	40240000 	.word	0x40240000
 80055cc:	401c0000 	.word	0x401c0000
 80055d0:	40140000 	.word	0x40140000
 80055d4:	3fe00000 	.word	0x3fe00000
 80055d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80055dc:	9d00      	ldr	r5, [sp, #0]
 80055de:	4642      	mov	r2, r8
 80055e0:	464b      	mov	r3, r9
 80055e2:	4630      	mov	r0, r6
 80055e4:	4639      	mov	r1, r7
 80055e6:	f7fb f939 	bl	800085c <__aeabi_ddiv>
 80055ea:	f7fb fabd 	bl	8000b68 <__aeabi_d2iz>
 80055ee:	9001      	str	r0, [sp, #4]
 80055f0:	f7fa ffa0 	bl	8000534 <__aeabi_i2d>
 80055f4:	4642      	mov	r2, r8
 80055f6:	464b      	mov	r3, r9
 80055f8:	f7fb f806 	bl	8000608 <__aeabi_dmul>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4630      	mov	r0, r6
 8005602:	4639      	mov	r1, r7
 8005604:	f7fa fe48 	bl	8000298 <__aeabi_dsub>
 8005608:	9e01      	ldr	r6, [sp, #4]
 800560a:	9f04      	ldr	r7, [sp, #16]
 800560c:	3630      	adds	r6, #48	; 0x30
 800560e:	f805 6b01 	strb.w	r6, [r5], #1
 8005612:	9e00      	ldr	r6, [sp, #0]
 8005614:	1bae      	subs	r6, r5, r6
 8005616:	42b7      	cmp	r7, r6
 8005618:	4602      	mov	r2, r0
 800561a:	460b      	mov	r3, r1
 800561c:	d134      	bne.n	8005688 <_dtoa_r+0x708>
 800561e:	f7fa fe3d 	bl	800029c <__adddf3>
 8005622:	4642      	mov	r2, r8
 8005624:	464b      	mov	r3, r9
 8005626:	4606      	mov	r6, r0
 8005628:	460f      	mov	r7, r1
 800562a:	f7fb fa7d 	bl	8000b28 <__aeabi_dcmpgt>
 800562e:	b9c8      	cbnz	r0, 8005664 <_dtoa_r+0x6e4>
 8005630:	4642      	mov	r2, r8
 8005632:	464b      	mov	r3, r9
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fb fa4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800563c:	b110      	cbz	r0, 8005644 <_dtoa_r+0x6c4>
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	07db      	lsls	r3, r3, #31
 8005642:	d40f      	bmi.n	8005664 <_dtoa_r+0x6e4>
 8005644:	4651      	mov	r1, sl
 8005646:	4620      	mov	r0, r4
 8005648:	f000 fb18 	bl	8005c7c <_Bfree>
 800564c:	2300      	movs	r3, #0
 800564e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005650:	702b      	strb	r3, [r5, #0]
 8005652:	f10b 0301 	add.w	r3, fp, #1
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800565a:	2b00      	cmp	r3, #0
 800565c:	f43f ace2 	beq.w	8005024 <_dtoa_r+0xa4>
 8005660:	601d      	str	r5, [r3, #0]
 8005662:	e4df      	b.n	8005024 <_dtoa_r+0xa4>
 8005664:	465f      	mov	r7, fp
 8005666:	462b      	mov	r3, r5
 8005668:	461d      	mov	r5, r3
 800566a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800566e:	2a39      	cmp	r2, #57	; 0x39
 8005670:	d106      	bne.n	8005680 <_dtoa_r+0x700>
 8005672:	9a00      	ldr	r2, [sp, #0]
 8005674:	429a      	cmp	r2, r3
 8005676:	d1f7      	bne.n	8005668 <_dtoa_r+0x6e8>
 8005678:	9900      	ldr	r1, [sp, #0]
 800567a:	2230      	movs	r2, #48	; 0x30
 800567c:	3701      	adds	r7, #1
 800567e:	700a      	strb	r2, [r1, #0]
 8005680:	781a      	ldrb	r2, [r3, #0]
 8005682:	3201      	adds	r2, #1
 8005684:	701a      	strb	r2, [r3, #0]
 8005686:	e790      	b.n	80055aa <_dtoa_r+0x62a>
 8005688:	4ba3      	ldr	r3, [pc, #652]	; (8005918 <_dtoa_r+0x998>)
 800568a:	2200      	movs	r2, #0
 800568c:	f7fa ffbc 	bl	8000608 <__aeabi_dmul>
 8005690:	2200      	movs	r2, #0
 8005692:	2300      	movs	r3, #0
 8005694:	4606      	mov	r6, r0
 8005696:	460f      	mov	r7, r1
 8005698:	f7fb fa1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800569c:	2800      	cmp	r0, #0
 800569e:	d09e      	beq.n	80055de <_dtoa_r+0x65e>
 80056a0:	e7d0      	b.n	8005644 <_dtoa_r+0x6c4>
 80056a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a4:	2a00      	cmp	r2, #0
 80056a6:	f000 80ca 	beq.w	800583e <_dtoa_r+0x8be>
 80056aa:	9a07      	ldr	r2, [sp, #28]
 80056ac:	2a01      	cmp	r2, #1
 80056ae:	f300 80ad 	bgt.w	800580c <_dtoa_r+0x88c>
 80056b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	f000 80a5 	beq.w	8005804 <_dtoa_r+0x884>
 80056ba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056be:	9e08      	ldr	r6, [sp, #32]
 80056c0:	9d05      	ldr	r5, [sp, #20]
 80056c2:	9a05      	ldr	r2, [sp, #20]
 80056c4:	441a      	add	r2, r3
 80056c6:	9205      	str	r2, [sp, #20]
 80056c8:	9a06      	ldr	r2, [sp, #24]
 80056ca:	2101      	movs	r1, #1
 80056cc:	441a      	add	r2, r3
 80056ce:	4620      	mov	r0, r4
 80056d0:	9206      	str	r2, [sp, #24]
 80056d2:	f000 fb89 	bl	8005de8 <__i2b>
 80056d6:	4607      	mov	r7, r0
 80056d8:	b165      	cbz	r5, 80056f4 <_dtoa_r+0x774>
 80056da:	9b06      	ldr	r3, [sp, #24]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	dd09      	ble.n	80056f4 <_dtoa_r+0x774>
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	9a05      	ldr	r2, [sp, #20]
 80056e4:	bfa8      	it	ge
 80056e6:	462b      	movge	r3, r5
 80056e8:	1ad2      	subs	r2, r2, r3
 80056ea:	9205      	str	r2, [sp, #20]
 80056ec:	9a06      	ldr	r2, [sp, #24]
 80056ee:	1aed      	subs	r5, r5, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	9306      	str	r3, [sp, #24]
 80056f4:	9b08      	ldr	r3, [sp, #32]
 80056f6:	b1f3      	cbz	r3, 8005736 <_dtoa_r+0x7b6>
 80056f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80a3 	beq.w	8005846 <_dtoa_r+0x8c6>
 8005700:	2e00      	cmp	r6, #0
 8005702:	dd10      	ble.n	8005726 <_dtoa_r+0x7a6>
 8005704:	4639      	mov	r1, r7
 8005706:	4632      	mov	r2, r6
 8005708:	4620      	mov	r0, r4
 800570a:	f000 fc2d 	bl	8005f68 <__pow5mult>
 800570e:	4652      	mov	r2, sl
 8005710:	4601      	mov	r1, r0
 8005712:	4607      	mov	r7, r0
 8005714:	4620      	mov	r0, r4
 8005716:	f000 fb7d 	bl	8005e14 <__multiply>
 800571a:	4651      	mov	r1, sl
 800571c:	4680      	mov	r8, r0
 800571e:	4620      	mov	r0, r4
 8005720:	f000 faac 	bl	8005c7c <_Bfree>
 8005724:	46c2      	mov	sl, r8
 8005726:	9b08      	ldr	r3, [sp, #32]
 8005728:	1b9a      	subs	r2, r3, r6
 800572a:	d004      	beq.n	8005736 <_dtoa_r+0x7b6>
 800572c:	4651      	mov	r1, sl
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fc1a 	bl	8005f68 <__pow5mult>
 8005734:	4682      	mov	sl, r0
 8005736:	2101      	movs	r1, #1
 8005738:	4620      	mov	r0, r4
 800573a:	f000 fb55 	bl	8005de8 <__i2b>
 800573e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005740:	2b00      	cmp	r3, #0
 8005742:	4606      	mov	r6, r0
 8005744:	f340 8081 	ble.w	800584a <_dtoa_r+0x8ca>
 8005748:	461a      	mov	r2, r3
 800574a:	4601      	mov	r1, r0
 800574c:	4620      	mov	r0, r4
 800574e:	f000 fc0b 	bl	8005f68 <__pow5mult>
 8005752:	9b07      	ldr	r3, [sp, #28]
 8005754:	2b01      	cmp	r3, #1
 8005756:	4606      	mov	r6, r0
 8005758:	dd7a      	ble.n	8005850 <_dtoa_r+0x8d0>
 800575a:	f04f 0800 	mov.w	r8, #0
 800575e:	6933      	ldr	r3, [r6, #16]
 8005760:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005764:	6918      	ldr	r0, [r3, #16]
 8005766:	f000 faf1 	bl	8005d4c <__hi0bits>
 800576a:	f1c0 0020 	rsb	r0, r0, #32
 800576e:	9b06      	ldr	r3, [sp, #24]
 8005770:	4418      	add	r0, r3
 8005772:	f010 001f 	ands.w	r0, r0, #31
 8005776:	f000 8094 	beq.w	80058a2 <_dtoa_r+0x922>
 800577a:	f1c0 0320 	rsb	r3, r0, #32
 800577e:	2b04      	cmp	r3, #4
 8005780:	f340 8085 	ble.w	800588e <_dtoa_r+0x90e>
 8005784:	9b05      	ldr	r3, [sp, #20]
 8005786:	f1c0 001c 	rsb	r0, r0, #28
 800578a:	4403      	add	r3, r0
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	9b06      	ldr	r3, [sp, #24]
 8005790:	4403      	add	r3, r0
 8005792:	4405      	add	r5, r0
 8005794:	9306      	str	r3, [sp, #24]
 8005796:	9b05      	ldr	r3, [sp, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	dd05      	ble.n	80057a8 <_dtoa_r+0x828>
 800579c:	4651      	mov	r1, sl
 800579e:	461a      	mov	r2, r3
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fc3b 	bl	800601c <__lshift>
 80057a6:	4682      	mov	sl, r0
 80057a8:	9b06      	ldr	r3, [sp, #24]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dd05      	ble.n	80057ba <_dtoa_r+0x83a>
 80057ae:	4631      	mov	r1, r6
 80057b0:	461a      	mov	r2, r3
 80057b2:	4620      	mov	r0, r4
 80057b4:	f000 fc32 	bl	800601c <__lshift>
 80057b8:	4606      	mov	r6, r0
 80057ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d072      	beq.n	80058a6 <_dtoa_r+0x926>
 80057c0:	4631      	mov	r1, r6
 80057c2:	4650      	mov	r0, sl
 80057c4:	f000 fc96 	bl	80060f4 <__mcmp>
 80057c8:	2800      	cmp	r0, #0
 80057ca:	da6c      	bge.n	80058a6 <_dtoa_r+0x926>
 80057cc:	2300      	movs	r3, #0
 80057ce:	4651      	mov	r1, sl
 80057d0:	220a      	movs	r2, #10
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fa74 	bl	8005cc0 <__multadd>
 80057d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80057de:	4682      	mov	sl, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 81b0 	beq.w	8005b46 <_dtoa_r+0xbc6>
 80057e6:	2300      	movs	r3, #0
 80057e8:	4639      	mov	r1, r7
 80057ea:	220a      	movs	r2, #10
 80057ec:	4620      	mov	r0, r4
 80057ee:	f000 fa67 	bl	8005cc0 <__multadd>
 80057f2:	9b01      	ldr	r3, [sp, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	4607      	mov	r7, r0
 80057f8:	f300 8096 	bgt.w	8005928 <_dtoa_r+0x9a8>
 80057fc:	9b07      	ldr	r3, [sp, #28]
 80057fe:	2b02      	cmp	r3, #2
 8005800:	dc59      	bgt.n	80058b6 <_dtoa_r+0x936>
 8005802:	e091      	b.n	8005928 <_dtoa_r+0x9a8>
 8005804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800580a:	e758      	b.n	80056be <_dtoa_r+0x73e>
 800580c:	9b04      	ldr	r3, [sp, #16]
 800580e:	1e5e      	subs	r6, r3, #1
 8005810:	9b08      	ldr	r3, [sp, #32]
 8005812:	42b3      	cmp	r3, r6
 8005814:	bfbf      	itttt	lt
 8005816:	9b08      	ldrlt	r3, [sp, #32]
 8005818:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800581a:	9608      	strlt	r6, [sp, #32]
 800581c:	1af3      	sublt	r3, r6, r3
 800581e:	bfb4      	ite	lt
 8005820:	18d2      	addlt	r2, r2, r3
 8005822:	1b9e      	subge	r6, r3, r6
 8005824:	9b04      	ldr	r3, [sp, #16]
 8005826:	bfbc      	itt	lt
 8005828:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800582a:	2600      	movlt	r6, #0
 800582c:	2b00      	cmp	r3, #0
 800582e:	bfb7      	itett	lt
 8005830:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005834:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005838:	1a9d      	sublt	r5, r3, r2
 800583a:	2300      	movlt	r3, #0
 800583c:	e741      	b.n	80056c2 <_dtoa_r+0x742>
 800583e:	9e08      	ldr	r6, [sp, #32]
 8005840:	9d05      	ldr	r5, [sp, #20]
 8005842:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005844:	e748      	b.n	80056d8 <_dtoa_r+0x758>
 8005846:	9a08      	ldr	r2, [sp, #32]
 8005848:	e770      	b.n	800572c <_dtoa_r+0x7ac>
 800584a:	9b07      	ldr	r3, [sp, #28]
 800584c:	2b01      	cmp	r3, #1
 800584e:	dc19      	bgt.n	8005884 <_dtoa_r+0x904>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	b9bb      	cbnz	r3, 8005884 <_dtoa_r+0x904>
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800585a:	b99b      	cbnz	r3, 8005884 <_dtoa_r+0x904>
 800585c:	9b03      	ldr	r3, [sp, #12]
 800585e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005862:	0d1b      	lsrs	r3, r3, #20
 8005864:	051b      	lsls	r3, r3, #20
 8005866:	b183      	cbz	r3, 800588a <_dtoa_r+0x90a>
 8005868:	9b05      	ldr	r3, [sp, #20]
 800586a:	3301      	adds	r3, #1
 800586c:	9305      	str	r3, [sp, #20]
 800586e:	9b06      	ldr	r3, [sp, #24]
 8005870:	3301      	adds	r3, #1
 8005872:	9306      	str	r3, [sp, #24]
 8005874:	f04f 0801 	mov.w	r8, #1
 8005878:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800587a:	2b00      	cmp	r3, #0
 800587c:	f47f af6f 	bne.w	800575e <_dtoa_r+0x7de>
 8005880:	2001      	movs	r0, #1
 8005882:	e774      	b.n	800576e <_dtoa_r+0x7ee>
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	e7f6      	b.n	8005878 <_dtoa_r+0x8f8>
 800588a:	4698      	mov	r8, r3
 800588c:	e7f4      	b.n	8005878 <_dtoa_r+0x8f8>
 800588e:	d082      	beq.n	8005796 <_dtoa_r+0x816>
 8005890:	9a05      	ldr	r2, [sp, #20]
 8005892:	331c      	adds	r3, #28
 8005894:	441a      	add	r2, r3
 8005896:	9205      	str	r2, [sp, #20]
 8005898:	9a06      	ldr	r2, [sp, #24]
 800589a:	441a      	add	r2, r3
 800589c:	441d      	add	r5, r3
 800589e:	9206      	str	r2, [sp, #24]
 80058a0:	e779      	b.n	8005796 <_dtoa_r+0x816>
 80058a2:	4603      	mov	r3, r0
 80058a4:	e7f4      	b.n	8005890 <_dtoa_r+0x910>
 80058a6:	9b04      	ldr	r3, [sp, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	dc37      	bgt.n	800591c <_dtoa_r+0x99c>
 80058ac:	9b07      	ldr	r3, [sp, #28]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	dd34      	ble.n	800591c <_dtoa_r+0x99c>
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	9301      	str	r3, [sp, #4]
 80058b6:	9b01      	ldr	r3, [sp, #4]
 80058b8:	b963      	cbnz	r3, 80058d4 <_dtoa_r+0x954>
 80058ba:	4631      	mov	r1, r6
 80058bc:	2205      	movs	r2, #5
 80058be:	4620      	mov	r0, r4
 80058c0:	f000 f9fe 	bl	8005cc0 <__multadd>
 80058c4:	4601      	mov	r1, r0
 80058c6:	4606      	mov	r6, r0
 80058c8:	4650      	mov	r0, sl
 80058ca:	f000 fc13 	bl	80060f4 <__mcmp>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f73f adbb 	bgt.w	800544a <_dtoa_r+0x4ca>
 80058d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d6:	9d00      	ldr	r5, [sp, #0]
 80058d8:	ea6f 0b03 	mvn.w	fp, r3
 80058dc:	f04f 0800 	mov.w	r8, #0
 80058e0:	4631      	mov	r1, r6
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f9ca 	bl	8005c7c <_Bfree>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f43f aeab 	beq.w	8005644 <_dtoa_r+0x6c4>
 80058ee:	f1b8 0f00 	cmp.w	r8, #0
 80058f2:	d005      	beq.n	8005900 <_dtoa_r+0x980>
 80058f4:	45b8      	cmp	r8, r7
 80058f6:	d003      	beq.n	8005900 <_dtoa_r+0x980>
 80058f8:	4641      	mov	r1, r8
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 f9be 	bl	8005c7c <_Bfree>
 8005900:	4639      	mov	r1, r7
 8005902:	4620      	mov	r0, r4
 8005904:	f000 f9ba 	bl	8005c7c <_Bfree>
 8005908:	e69c      	b.n	8005644 <_dtoa_r+0x6c4>
 800590a:	2600      	movs	r6, #0
 800590c:	4637      	mov	r7, r6
 800590e:	e7e1      	b.n	80058d4 <_dtoa_r+0x954>
 8005910:	46bb      	mov	fp, r7
 8005912:	4637      	mov	r7, r6
 8005914:	e599      	b.n	800544a <_dtoa_r+0x4ca>
 8005916:	bf00      	nop
 8005918:	40240000 	.word	0x40240000
 800591c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	f000 80c8 	beq.w	8005ab4 <_dtoa_r+0xb34>
 8005924:	9b04      	ldr	r3, [sp, #16]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	2d00      	cmp	r5, #0
 800592a:	dd05      	ble.n	8005938 <_dtoa_r+0x9b8>
 800592c:	4639      	mov	r1, r7
 800592e:	462a      	mov	r2, r5
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fb73 	bl	800601c <__lshift>
 8005936:	4607      	mov	r7, r0
 8005938:	f1b8 0f00 	cmp.w	r8, #0
 800593c:	d05b      	beq.n	80059f6 <_dtoa_r+0xa76>
 800593e:	6879      	ldr	r1, [r7, #4]
 8005940:	4620      	mov	r0, r4
 8005942:	f000 f95b 	bl	8005bfc <_Balloc>
 8005946:	4605      	mov	r5, r0
 8005948:	b928      	cbnz	r0, 8005956 <_dtoa_r+0x9d6>
 800594a:	4b83      	ldr	r3, [pc, #524]	; (8005b58 <_dtoa_r+0xbd8>)
 800594c:	4602      	mov	r2, r0
 800594e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005952:	f7ff bb2e 	b.w	8004fb2 <_dtoa_r+0x32>
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	3202      	adds	r2, #2
 800595a:	0092      	lsls	r2, r2, #2
 800595c:	f107 010c 	add.w	r1, r7, #12
 8005960:	300c      	adds	r0, #12
 8005962:	f7ff fa76 	bl	8004e52 <memcpy>
 8005966:	2201      	movs	r2, #1
 8005968:	4629      	mov	r1, r5
 800596a:	4620      	mov	r0, r4
 800596c:	f000 fb56 	bl	800601c <__lshift>
 8005970:	9b00      	ldr	r3, [sp, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	9304      	str	r3, [sp, #16]
 8005976:	e9dd 2300 	ldrd	r2, r3, [sp]
 800597a:	4413      	add	r3, r2
 800597c:	9308      	str	r3, [sp, #32]
 800597e:	9b02      	ldr	r3, [sp, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	46b8      	mov	r8, r7
 8005986:	9306      	str	r3, [sp, #24]
 8005988:	4607      	mov	r7, r0
 800598a:	9b04      	ldr	r3, [sp, #16]
 800598c:	4631      	mov	r1, r6
 800598e:	3b01      	subs	r3, #1
 8005990:	4650      	mov	r0, sl
 8005992:	9301      	str	r3, [sp, #4]
 8005994:	f7ff fa6b 	bl	8004e6e <quorem>
 8005998:	4641      	mov	r1, r8
 800599a:	9002      	str	r0, [sp, #8]
 800599c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059a0:	4650      	mov	r0, sl
 80059a2:	f000 fba7 	bl	80060f4 <__mcmp>
 80059a6:	463a      	mov	r2, r7
 80059a8:	9005      	str	r0, [sp, #20]
 80059aa:	4631      	mov	r1, r6
 80059ac:	4620      	mov	r0, r4
 80059ae:	f000 fbbd 	bl	800612c <__mdiff>
 80059b2:	68c2      	ldr	r2, [r0, #12]
 80059b4:	4605      	mov	r5, r0
 80059b6:	bb02      	cbnz	r2, 80059fa <_dtoa_r+0xa7a>
 80059b8:	4601      	mov	r1, r0
 80059ba:	4650      	mov	r0, sl
 80059bc:	f000 fb9a 	bl	80060f4 <__mcmp>
 80059c0:	4602      	mov	r2, r0
 80059c2:	4629      	mov	r1, r5
 80059c4:	4620      	mov	r0, r4
 80059c6:	9209      	str	r2, [sp, #36]	; 0x24
 80059c8:	f000 f958 	bl	8005c7c <_Bfree>
 80059cc:	9b07      	ldr	r3, [sp, #28]
 80059ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059d0:	9d04      	ldr	r5, [sp, #16]
 80059d2:	ea43 0102 	orr.w	r1, r3, r2
 80059d6:	9b06      	ldr	r3, [sp, #24]
 80059d8:	4319      	orrs	r1, r3
 80059da:	d110      	bne.n	80059fe <_dtoa_r+0xa7e>
 80059dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80059e0:	d029      	beq.n	8005a36 <_dtoa_r+0xab6>
 80059e2:	9b05      	ldr	r3, [sp, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dd02      	ble.n	80059ee <_dtoa_r+0xa6e>
 80059e8:	9b02      	ldr	r3, [sp, #8]
 80059ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80059ee:	9b01      	ldr	r3, [sp, #4]
 80059f0:	f883 9000 	strb.w	r9, [r3]
 80059f4:	e774      	b.n	80058e0 <_dtoa_r+0x960>
 80059f6:	4638      	mov	r0, r7
 80059f8:	e7ba      	b.n	8005970 <_dtoa_r+0x9f0>
 80059fa:	2201      	movs	r2, #1
 80059fc:	e7e1      	b.n	80059c2 <_dtoa_r+0xa42>
 80059fe:	9b05      	ldr	r3, [sp, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	db04      	blt.n	8005a0e <_dtoa_r+0xa8e>
 8005a04:	9907      	ldr	r1, [sp, #28]
 8005a06:	430b      	orrs	r3, r1
 8005a08:	9906      	ldr	r1, [sp, #24]
 8005a0a:	430b      	orrs	r3, r1
 8005a0c:	d120      	bne.n	8005a50 <_dtoa_r+0xad0>
 8005a0e:	2a00      	cmp	r2, #0
 8005a10:	dded      	ble.n	80059ee <_dtoa_r+0xa6e>
 8005a12:	4651      	mov	r1, sl
 8005a14:	2201      	movs	r2, #1
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 fb00 	bl	800601c <__lshift>
 8005a1c:	4631      	mov	r1, r6
 8005a1e:	4682      	mov	sl, r0
 8005a20:	f000 fb68 	bl	80060f4 <__mcmp>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	dc03      	bgt.n	8005a30 <_dtoa_r+0xab0>
 8005a28:	d1e1      	bne.n	80059ee <_dtoa_r+0xa6e>
 8005a2a:	f019 0f01 	tst.w	r9, #1
 8005a2e:	d0de      	beq.n	80059ee <_dtoa_r+0xa6e>
 8005a30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a34:	d1d8      	bne.n	80059e8 <_dtoa_r+0xa68>
 8005a36:	9a01      	ldr	r2, [sp, #4]
 8005a38:	2339      	movs	r3, #57	; 0x39
 8005a3a:	7013      	strb	r3, [r2, #0]
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	461d      	mov	r5, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a46:	2a39      	cmp	r2, #57	; 0x39
 8005a48:	d06c      	beq.n	8005b24 <_dtoa_r+0xba4>
 8005a4a:	3201      	adds	r2, #1
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	e747      	b.n	80058e0 <_dtoa_r+0x960>
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	dd07      	ble.n	8005a64 <_dtoa_r+0xae4>
 8005a54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a58:	d0ed      	beq.n	8005a36 <_dtoa_r+0xab6>
 8005a5a:	9a01      	ldr	r2, [sp, #4]
 8005a5c:	f109 0301 	add.w	r3, r9, #1
 8005a60:	7013      	strb	r3, [r2, #0]
 8005a62:	e73d      	b.n	80058e0 <_dtoa_r+0x960>
 8005a64:	9b04      	ldr	r3, [sp, #16]
 8005a66:	9a08      	ldr	r2, [sp, #32]
 8005a68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d043      	beq.n	8005af8 <_dtoa_r+0xb78>
 8005a70:	4651      	mov	r1, sl
 8005a72:	2300      	movs	r3, #0
 8005a74:	220a      	movs	r2, #10
 8005a76:	4620      	mov	r0, r4
 8005a78:	f000 f922 	bl	8005cc0 <__multadd>
 8005a7c:	45b8      	cmp	r8, r7
 8005a7e:	4682      	mov	sl, r0
 8005a80:	f04f 0300 	mov.w	r3, #0
 8005a84:	f04f 020a 	mov.w	r2, #10
 8005a88:	4641      	mov	r1, r8
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	d107      	bne.n	8005a9e <_dtoa_r+0xb1e>
 8005a8e:	f000 f917 	bl	8005cc0 <__multadd>
 8005a92:	4680      	mov	r8, r0
 8005a94:	4607      	mov	r7, r0
 8005a96:	9b04      	ldr	r3, [sp, #16]
 8005a98:	3301      	adds	r3, #1
 8005a9a:	9304      	str	r3, [sp, #16]
 8005a9c:	e775      	b.n	800598a <_dtoa_r+0xa0a>
 8005a9e:	f000 f90f 	bl	8005cc0 <__multadd>
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	4680      	mov	r8, r0
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	220a      	movs	r2, #10
 8005aaa:	4620      	mov	r0, r4
 8005aac:	f000 f908 	bl	8005cc0 <__multadd>
 8005ab0:	4607      	mov	r7, r0
 8005ab2:	e7f0      	b.n	8005a96 <_dtoa_r+0xb16>
 8005ab4:	9b04      	ldr	r3, [sp, #16]
 8005ab6:	9301      	str	r3, [sp, #4]
 8005ab8:	9d00      	ldr	r5, [sp, #0]
 8005aba:	4631      	mov	r1, r6
 8005abc:	4650      	mov	r0, sl
 8005abe:	f7ff f9d6 	bl	8004e6e <quorem>
 8005ac2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005ac6:	9b00      	ldr	r3, [sp, #0]
 8005ac8:	f805 9b01 	strb.w	r9, [r5], #1
 8005acc:	1aea      	subs	r2, r5, r3
 8005ace:	9b01      	ldr	r3, [sp, #4]
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	dd07      	ble.n	8005ae4 <_dtoa_r+0xb64>
 8005ad4:	4651      	mov	r1, sl
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	220a      	movs	r2, #10
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 f8f0 	bl	8005cc0 <__multadd>
 8005ae0:	4682      	mov	sl, r0
 8005ae2:	e7ea      	b.n	8005aba <_dtoa_r+0xb3a>
 8005ae4:	9b01      	ldr	r3, [sp, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bfc8      	it	gt
 8005aea:	461d      	movgt	r5, r3
 8005aec:	9b00      	ldr	r3, [sp, #0]
 8005aee:	bfd8      	it	le
 8005af0:	2501      	movle	r5, #1
 8005af2:	441d      	add	r5, r3
 8005af4:	f04f 0800 	mov.w	r8, #0
 8005af8:	4651      	mov	r1, sl
 8005afa:	2201      	movs	r2, #1
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fa8d 	bl	800601c <__lshift>
 8005b02:	4631      	mov	r1, r6
 8005b04:	4682      	mov	sl, r0
 8005b06:	f000 faf5 	bl	80060f4 <__mcmp>
 8005b0a:	2800      	cmp	r0, #0
 8005b0c:	dc96      	bgt.n	8005a3c <_dtoa_r+0xabc>
 8005b0e:	d102      	bne.n	8005b16 <_dtoa_r+0xb96>
 8005b10:	f019 0f01 	tst.w	r9, #1
 8005b14:	d192      	bne.n	8005a3c <_dtoa_r+0xabc>
 8005b16:	462b      	mov	r3, r5
 8005b18:	461d      	mov	r5, r3
 8005b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b1e:	2a30      	cmp	r2, #48	; 0x30
 8005b20:	d0fa      	beq.n	8005b18 <_dtoa_r+0xb98>
 8005b22:	e6dd      	b.n	80058e0 <_dtoa_r+0x960>
 8005b24:	9a00      	ldr	r2, [sp, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d189      	bne.n	8005a3e <_dtoa_r+0xabe>
 8005b2a:	f10b 0b01 	add.w	fp, fp, #1
 8005b2e:	2331      	movs	r3, #49	; 0x31
 8005b30:	e796      	b.n	8005a60 <_dtoa_r+0xae0>
 8005b32:	4b0a      	ldr	r3, [pc, #40]	; (8005b5c <_dtoa_r+0xbdc>)
 8005b34:	f7ff ba99 	b.w	800506a <_dtoa_r+0xea>
 8005b38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f47f aa6d 	bne.w	800501a <_dtoa_r+0x9a>
 8005b40:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <_dtoa_r+0xbe0>)
 8005b42:	f7ff ba92 	b.w	800506a <_dtoa_r+0xea>
 8005b46:	9b01      	ldr	r3, [sp, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	dcb5      	bgt.n	8005ab8 <_dtoa_r+0xb38>
 8005b4c:	9b07      	ldr	r3, [sp, #28]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	f73f aeb1 	bgt.w	80058b6 <_dtoa_r+0x936>
 8005b54:	e7b0      	b.n	8005ab8 <_dtoa_r+0xb38>
 8005b56:	bf00      	nop
 8005b58:	0800abf4 	.word	0x0800abf4
 8005b5c:	0800ab54 	.word	0x0800ab54
 8005b60:	0800ab78 	.word	0x0800ab78

08005b64 <_free_r>:
 8005b64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b66:	2900      	cmp	r1, #0
 8005b68:	d044      	beq.n	8005bf4 <_free_r+0x90>
 8005b6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b6e:	9001      	str	r0, [sp, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f1a1 0404 	sub.w	r4, r1, #4
 8005b76:	bfb8      	it	lt
 8005b78:	18e4      	addlt	r4, r4, r3
 8005b7a:	f7fe fb63 	bl	8004244 <__malloc_lock>
 8005b7e:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <_free_r+0x94>)
 8005b80:	9801      	ldr	r0, [sp, #4]
 8005b82:	6813      	ldr	r3, [r2, #0]
 8005b84:	b933      	cbnz	r3, 8005b94 <_free_r+0x30>
 8005b86:	6063      	str	r3, [r4, #4]
 8005b88:	6014      	str	r4, [r2, #0]
 8005b8a:	b003      	add	sp, #12
 8005b8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b90:	f7fe bb5e 	b.w	8004250 <__malloc_unlock>
 8005b94:	42a3      	cmp	r3, r4
 8005b96:	d908      	bls.n	8005baa <_free_r+0x46>
 8005b98:	6825      	ldr	r5, [r4, #0]
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	428b      	cmp	r3, r1
 8005b9e:	bf01      	itttt	eq
 8005ba0:	6819      	ldreq	r1, [r3, #0]
 8005ba2:	685b      	ldreq	r3, [r3, #4]
 8005ba4:	1949      	addeq	r1, r1, r5
 8005ba6:	6021      	streq	r1, [r4, #0]
 8005ba8:	e7ed      	b.n	8005b86 <_free_r+0x22>
 8005baa:	461a      	mov	r2, r3
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	b10b      	cbz	r3, 8005bb4 <_free_r+0x50>
 8005bb0:	42a3      	cmp	r3, r4
 8005bb2:	d9fa      	bls.n	8005baa <_free_r+0x46>
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	1855      	adds	r5, r2, r1
 8005bb8:	42a5      	cmp	r5, r4
 8005bba:	d10b      	bne.n	8005bd4 <_free_r+0x70>
 8005bbc:	6824      	ldr	r4, [r4, #0]
 8005bbe:	4421      	add	r1, r4
 8005bc0:	1854      	adds	r4, r2, r1
 8005bc2:	42a3      	cmp	r3, r4
 8005bc4:	6011      	str	r1, [r2, #0]
 8005bc6:	d1e0      	bne.n	8005b8a <_free_r+0x26>
 8005bc8:	681c      	ldr	r4, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	6053      	str	r3, [r2, #4]
 8005bce:	440c      	add	r4, r1
 8005bd0:	6014      	str	r4, [r2, #0]
 8005bd2:	e7da      	b.n	8005b8a <_free_r+0x26>
 8005bd4:	d902      	bls.n	8005bdc <_free_r+0x78>
 8005bd6:	230c      	movs	r3, #12
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	e7d6      	b.n	8005b8a <_free_r+0x26>
 8005bdc:	6825      	ldr	r5, [r4, #0]
 8005bde:	1961      	adds	r1, r4, r5
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf04      	itt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	6063      	str	r3, [r4, #4]
 8005bea:	bf04      	itt	eq
 8005bec:	1949      	addeq	r1, r1, r5
 8005bee:	6021      	streq	r1, [r4, #0]
 8005bf0:	6054      	str	r4, [r2, #4]
 8005bf2:	e7ca      	b.n	8005b8a <_free_r+0x26>
 8005bf4:	b003      	add	sp, #12
 8005bf6:	bd30      	pop	{r4, r5, pc}
 8005bf8:	200001f8 	.word	0x200001f8

08005bfc <_Balloc>:
 8005bfc:	b570      	push	{r4, r5, r6, lr}
 8005bfe:	69c6      	ldr	r6, [r0, #28]
 8005c00:	4604      	mov	r4, r0
 8005c02:	460d      	mov	r5, r1
 8005c04:	b976      	cbnz	r6, 8005c24 <_Balloc+0x28>
 8005c06:	2010      	movs	r0, #16
 8005c08:	f7fe fa74 	bl	80040f4 <malloc>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	61e0      	str	r0, [r4, #28]
 8005c10:	b920      	cbnz	r0, 8005c1c <_Balloc+0x20>
 8005c12:	4b18      	ldr	r3, [pc, #96]	; (8005c74 <_Balloc+0x78>)
 8005c14:	4818      	ldr	r0, [pc, #96]	; (8005c78 <_Balloc+0x7c>)
 8005c16:	216b      	movs	r1, #107	; 0x6b
 8005c18:	f000 fc1a 	bl	8006450 <__assert_func>
 8005c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c20:	6006      	str	r6, [r0, #0]
 8005c22:	60c6      	str	r6, [r0, #12]
 8005c24:	69e6      	ldr	r6, [r4, #28]
 8005c26:	68f3      	ldr	r3, [r6, #12]
 8005c28:	b183      	cbz	r3, 8005c4c <_Balloc+0x50>
 8005c2a:	69e3      	ldr	r3, [r4, #28]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c32:	b9b8      	cbnz	r0, 8005c64 <_Balloc+0x68>
 8005c34:	2101      	movs	r1, #1
 8005c36:	fa01 f605 	lsl.w	r6, r1, r5
 8005c3a:	1d72      	adds	r2, r6, #5
 8005c3c:	0092      	lsls	r2, r2, #2
 8005c3e:	4620      	mov	r0, r4
 8005c40:	f000 fc24 	bl	800648c <_calloc_r>
 8005c44:	b160      	cbz	r0, 8005c60 <_Balloc+0x64>
 8005c46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005c4a:	e00e      	b.n	8005c6a <_Balloc+0x6e>
 8005c4c:	2221      	movs	r2, #33	; 0x21
 8005c4e:	2104      	movs	r1, #4
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 fc1b 	bl	800648c <_calloc_r>
 8005c56:	69e3      	ldr	r3, [r4, #28]
 8005c58:	60f0      	str	r0, [r6, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e4      	bne.n	8005c2a <_Balloc+0x2e>
 8005c60:	2000      	movs	r0, #0
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	6802      	ldr	r2, [r0, #0]
 8005c66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c70:	e7f7      	b.n	8005c62 <_Balloc+0x66>
 8005c72:	bf00      	nop
 8005c74:	0800ab85 	.word	0x0800ab85
 8005c78:	0800ac05 	.word	0x0800ac05

08005c7c <_Bfree>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	69c6      	ldr	r6, [r0, #28]
 8005c80:	4605      	mov	r5, r0
 8005c82:	460c      	mov	r4, r1
 8005c84:	b976      	cbnz	r6, 8005ca4 <_Bfree+0x28>
 8005c86:	2010      	movs	r0, #16
 8005c88:	f7fe fa34 	bl	80040f4 <malloc>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	61e8      	str	r0, [r5, #28]
 8005c90:	b920      	cbnz	r0, 8005c9c <_Bfree+0x20>
 8005c92:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <_Bfree+0x3c>)
 8005c94:	4809      	ldr	r0, [pc, #36]	; (8005cbc <_Bfree+0x40>)
 8005c96:	218f      	movs	r1, #143	; 0x8f
 8005c98:	f000 fbda 	bl	8006450 <__assert_func>
 8005c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ca0:	6006      	str	r6, [r0, #0]
 8005ca2:	60c6      	str	r6, [r0, #12]
 8005ca4:	b13c      	cbz	r4, 8005cb6 <_Bfree+0x3a>
 8005ca6:	69eb      	ldr	r3, [r5, #28]
 8005ca8:	6862      	ldr	r2, [r4, #4]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005cb0:	6021      	str	r1, [r4, #0]
 8005cb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	0800ab85 	.word	0x0800ab85
 8005cbc:	0800ac05 	.word	0x0800ac05

08005cc0 <__multadd>:
 8005cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc4:	690d      	ldr	r5, [r1, #16]
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	461e      	mov	r6, r3
 8005ccc:	f101 0c14 	add.w	ip, r1, #20
 8005cd0:	2000      	movs	r0, #0
 8005cd2:	f8dc 3000 	ldr.w	r3, [ip]
 8005cd6:	b299      	uxth	r1, r3
 8005cd8:	fb02 6101 	mla	r1, r2, r1, r6
 8005cdc:	0c1e      	lsrs	r6, r3, #16
 8005cde:	0c0b      	lsrs	r3, r1, #16
 8005ce0:	fb02 3306 	mla	r3, r2, r6, r3
 8005ce4:	b289      	uxth	r1, r1
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005cec:	4285      	cmp	r5, r0
 8005cee:	f84c 1b04 	str.w	r1, [ip], #4
 8005cf2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005cf6:	dcec      	bgt.n	8005cd2 <__multadd+0x12>
 8005cf8:	b30e      	cbz	r6, 8005d3e <__multadd+0x7e>
 8005cfa:	68a3      	ldr	r3, [r4, #8]
 8005cfc:	42ab      	cmp	r3, r5
 8005cfe:	dc19      	bgt.n	8005d34 <__multadd+0x74>
 8005d00:	6861      	ldr	r1, [r4, #4]
 8005d02:	4638      	mov	r0, r7
 8005d04:	3101      	adds	r1, #1
 8005d06:	f7ff ff79 	bl	8005bfc <_Balloc>
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	b928      	cbnz	r0, 8005d1a <__multadd+0x5a>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	4b0c      	ldr	r3, [pc, #48]	; (8005d44 <__multadd+0x84>)
 8005d12:	480d      	ldr	r0, [pc, #52]	; (8005d48 <__multadd+0x88>)
 8005d14:	21ba      	movs	r1, #186	; 0xba
 8005d16:	f000 fb9b 	bl	8006450 <__assert_func>
 8005d1a:	6922      	ldr	r2, [r4, #16]
 8005d1c:	3202      	adds	r2, #2
 8005d1e:	f104 010c 	add.w	r1, r4, #12
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	300c      	adds	r0, #12
 8005d26:	f7ff f894 	bl	8004e52 <memcpy>
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f7ff ffa5 	bl	8005c7c <_Bfree>
 8005d32:	4644      	mov	r4, r8
 8005d34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005d38:	3501      	adds	r5, #1
 8005d3a:	615e      	str	r6, [r3, #20]
 8005d3c:	6125      	str	r5, [r4, #16]
 8005d3e:	4620      	mov	r0, r4
 8005d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d44:	0800abf4 	.word	0x0800abf4
 8005d48:	0800ac05 	.word	0x0800ac05

08005d4c <__hi0bits>:
 8005d4c:	0c03      	lsrs	r3, r0, #16
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	b9d3      	cbnz	r3, 8005d88 <__hi0bits+0x3c>
 8005d52:	0400      	lsls	r0, r0, #16
 8005d54:	2310      	movs	r3, #16
 8005d56:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005d5a:	bf04      	itt	eq
 8005d5c:	0200      	lsleq	r0, r0, #8
 8005d5e:	3308      	addeq	r3, #8
 8005d60:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005d64:	bf04      	itt	eq
 8005d66:	0100      	lsleq	r0, r0, #4
 8005d68:	3304      	addeq	r3, #4
 8005d6a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005d6e:	bf04      	itt	eq
 8005d70:	0080      	lsleq	r0, r0, #2
 8005d72:	3302      	addeq	r3, #2
 8005d74:	2800      	cmp	r0, #0
 8005d76:	db05      	blt.n	8005d84 <__hi0bits+0x38>
 8005d78:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005d7c:	f103 0301 	add.w	r3, r3, #1
 8005d80:	bf08      	it	eq
 8005d82:	2320      	moveq	r3, #32
 8005d84:	4618      	mov	r0, r3
 8005d86:	4770      	bx	lr
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e7e4      	b.n	8005d56 <__hi0bits+0xa>

08005d8c <__lo0bits>:
 8005d8c:	6803      	ldr	r3, [r0, #0]
 8005d8e:	f013 0207 	ands.w	r2, r3, #7
 8005d92:	d00c      	beq.n	8005dae <__lo0bits+0x22>
 8005d94:	07d9      	lsls	r1, r3, #31
 8005d96:	d422      	bmi.n	8005dde <__lo0bits+0x52>
 8005d98:	079a      	lsls	r2, r3, #30
 8005d9a:	bf49      	itett	mi
 8005d9c:	085b      	lsrmi	r3, r3, #1
 8005d9e:	089b      	lsrpl	r3, r3, #2
 8005da0:	6003      	strmi	r3, [r0, #0]
 8005da2:	2201      	movmi	r2, #1
 8005da4:	bf5c      	itt	pl
 8005da6:	6003      	strpl	r3, [r0, #0]
 8005da8:	2202      	movpl	r2, #2
 8005daa:	4610      	mov	r0, r2
 8005dac:	4770      	bx	lr
 8005dae:	b299      	uxth	r1, r3
 8005db0:	b909      	cbnz	r1, 8005db6 <__lo0bits+0x2a>
 8005db2:	0c1b      	lsrs	r3, r3, #16
 8005db4:	2210      	movs	r2, #16
 8005db6:	b2d9      	uxtb	r1, r3
 8005db8:	b909      	cbnz	r1, 8005dbe <__lo0bits+0x32>
 8005dba:	3208      	adds	r2, #8
 8005dbc:	0a1b      	lsrs	r3, r3, #8
 8005dbe:	0719      	lsls	r1, r3, #28
 8005dc0:	bf04      	itt	eq
 8005dc2:	091b      	lsreq	r3, r3, #4
 8005dc4:	3204      	addeq	r2, #4
 8005dc6:	0799      	lsls	r1, r3, #30
 8005dc8:	bf04      	itt	eq
 8005dca:	089b      	lsreq	r3, r3, #2
 8005dcc:	3202      	addeq	r2, #2
 8005dce:	07d9      	lsls	r1, r3, #31
 8005dd0:	d403      	bmi.n	8005dda <__lo0bits+0x4e>
 8005dd2:	085b      	lsrs	r3, r3, #1
 8005dd4:	f102 0201 	add.w	r2, r2, #1
 8005dd8:	d003      	beq.n	8005de2 <__lo0bits+0x56>
 8005dda:	6003      	str	r3, [r0, #0]
 8005ddc:	e7e5      	b.n	8005daa <__lo0bits+0x1e>
 8005dde:	2200      	movs	r2, #0
 8005de0:	e7e3      	b.n	8005daa <__lo0bits+0x1e>
 8005de2:	2220      	movs	r2, #32
 8005de4:	e7e1      	b.n	8005daa <__lo0bits+0x1e>
	...

08005de8 <__i2b>:
 8005de8:	b510      	push	{r4, lr}
 8005dea:	460c      	mov	r4, r1
 8005dec:	2101      	movs	r1, #1
 8005dee:	f7ff ff05 	bl	8005bfc <_Balloc>
 8005df2:	4602      	mov	r2, r0
 8005df4:	b928      	cbnz	r0, 8005e02 <__i2b+0x1a>
 8005df6:	4b05      	ldr	r3, [pc, #20]	; (8005e0c <__i2b+0x24>)
 8005df8:	4805      	ldr	r0, [pc, #20]	; (8005e10 <__i2b+0x28>)
 8005dfa:	f240 1145 	movw	r1, #325	; 0x145
 8005dfe:	f000 fb27 	bl	8006450 <__assert_func>
 8005e02:	2301      	movs	r3, #1
 8005e04:	6144      	str	r4, [r0, #20]
 8005e06:	6103      	str	r3, [r0, #16]
 8005e08:	bd10      	pop	{r4, pc}
 8005e0a:	bf00      	nop
 8005e0c:	0800abf4 	.word	0x0800abf4
 8005e10:	0800ac05 	.word	0x0800ac05

08005e14 <__multiply>:
 8005e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e18:	4691      	mov	r9, r2
 8005e1a:	690a      	ldr	r2, [r1, #16]
 8005e1c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	bfb8      	it	lt
 8005e24:	460b      	movlt	r3, r1
 8005e26:	460c      	mov	r4, r1
 8005e28:	bfbc      	itt	lt
 8005e2a:	464c      	movlt	r4, r9
 8005e2c:	4699      	movlt	r9, r3
 8005e2e:	6927      	ldr	r7, [r4, #16]
 8005e30:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e34:	68a3      	ldr	r3, [r4, #8]
 8005e36:	6861      	ldr	r1, [r4, #4]
 8005e38:	eb07 060a 	add.w	r6, r7, sl
 8005e3c:	42b3      	cmp	r3, r6
 8005e3e:	b085      	sub	sp, #20
 8005e40:	bfb8      	it	lt
 8005e42:	3101      	addlt	r1, #1
 8005e44:	f7ff feda 	bl	8005bfc <_Balloc>
 8005e48:	b930      	cbnz	r0, 8005e58 <__multiply+0x44>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4b44      	ldr	r3, [pc, #272]	; (8005f60 <__multiply+0x14c>)
 8005e4e:	4845      	ldr	r0, [pc, #276]	; (8005f64 <__multiply+0x150>)
 8005e50:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005e54:	f000 fafc 	bl	8006450 <__assert_func>
 8005e58:	f100 0514 	add.w	r5, r0, #20
 8005e5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005e60:	462b      	mov	r3, r5
 8005e62:	2200      	movs	r2, #0
 8005e64:	4543      	cmp	r3, r8
 8005e66:	d321      	bcc.n	8005eac <__multiply+0x98>
 8005e68:	f104 0314 	add.w	r3, r4, #20
 8005e6c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005e70:	f109 0314 	add.w	r3, r9, #20
 8005e74:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005e78:	9202      	str	r2, [sp, #8]
 8005e7a:	1b3a      	subs	r2, r7, r4
 8005e7c:	3a15      	subs	r2, #21
 8005e7e:	f022 0203 	bic.w	r2, r2, #3
 8005e82:	3204      	adds	r2, #4
 8005e84:	f104 0115 	add.w	r1, r4, #21
 8005e88:	428f      	cmp	r7, r1
 8005e8a:	bf38      	it	cc
 8005e8c:	2204      	movcc	r2, #4
 8005e8e:	9201      	str	r2, [sp, #4]
 8005e90:	9a02      	ldr	r2, [sp, #8]
 8005e92:	9303      	str	r3, [sp, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d80c      	bhi.n	8005eb2 <__multiply+0x9e>
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	dd03      	ble.n	8005ea4 <__multiply+0x90>
 8005e9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d05b      	beq.n	8005f5c <__multiply+0x148>
 8005ea4:	6106      	str	r6, [r0, #16]
 8005ea6:	b005      	add	sp, #20
 8005ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eac:	f843 2b04 	str.w	r2, [r3], #4
 8005eb0:	e7d8      	b.n	8005e64 <__multiply+0x50>
 8005eb2:	f8b3 a000 	ldrh.w	sl, [r3]
 8005eb6:	f1ba 0f00 	cmp.w	sl, #0
 8005eba:	d024      	beq.n	8005f06 <__multiply+0xf2>
 8005ebc:	f104 0e14 	add.w	lr, r4, #20
 8005ec0:	46a9      	mov	r9, r5
 8005ec2:	f04f 0c00 	mov.w	ip, #0
 8005ec6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005eca:	f8d9 1000 	ldr.w	r1, [r9]
 8005ece:	fa1f fb82 	uxth.w	fp, r2
 8005ed2:	b289      	uxth	r1, r1
 8005ed4:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ed8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005edc:	f8d9 2000 	ldr.w	r2, [r9]
 8005ee0:	4461      	add	r1, ip
 8005ee2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005ee6:	fb0a c20b 	mla	r2, sl, fp, ip
 8005eea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005eee:	b289      	uxth	r1, r1
 8005ef0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ef4:	4577      	cmp	r7, lr
 8005ef6:	f849 1b04 	str.w	r1, [r9], #4
 8005efa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005efe:	d8e2      	bhi.n	8005ec6 <__multiply+0xb2>
 8005f00:	9a01      	ldr	r2, [sp, #4]
 8005f02:	f845 c002 	str.w	ip, [r5, r2]
 8005f06:	9a03      	ldr	r2, [sp, #12]
 8005f08:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	f1b9 0f00 	cmp.w	r9, #0
 8005f12:	d021      	beq.n	8005f58 <__multiply+0x144>
 8005f14:	6829      	ldr	r1, [r5, #0]
 8005f16:	f104 0c14 	add.w	ip, r4, #20
 8005f1a:	46ae      	mov	lr, r5
 8005f1c:	f04f 0a00 	mov.w	sl, #0
 8005f20:	f8bc b000 	ldrh.w	fp, [ip]
 8005f24:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005f28:	fb09 220b 	mla	r2, r9, fp, r2
 8005f2c:	4452      	add	r2, sl
 8005f2e:	b289      	uxth	r1, r1
 8005f30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f34:	f84e 1b04 	str.w	r1, [lr], #4
 8005f38:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005f3c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f40:	f8be 1000 	ldrh.w	r1, [lr]
 8005f44:	fb09 110a 	mla	r1, r9, sl, r1
 8005f48:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005f4c:	4567      	cmp	r7, ip
 8005f4e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005f52:	d8e5      	bhi.n	8005f20 <__multiply+0x10c>
 8005f54:	9a01      	ldr	r2, [sp, #4]
 8005f56:	50a9      	str	r1, [r5, r2]
 8005f58:	3504      	adds	r5, #4
 8005f5a:	e799      	b.n	8005e90 <__multiply+0x7c>
 8005f5c:	3e01      	subs	r6, #1
 8005f5e:	e79b      	b.n	8005e98 <__multiply+0x84>
 8005f60:	0800abf4 	.word	0x0800abf4
 8005f64:	0800ac05 	.word	0x0800ac05

08005f68 <__pow5mult>:
 8005f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f6c:	4615      	mov	r5, r2
 8005f6e:	f012 0203 	ands.w	r2, r2, #3
 8005f72:	4606      	mov	r6, r0
 8005f74:	460f      	mov	r7, r1
 8005f76:	d007      	beq.n	8005f88 <__pow5mult+0x20>
 8005f78:	4c25      	ldr	r4, [pc, #148]	; (8006010 <__pow5mult+0xa8>)
 8005f7a:	3a01      	subs	r2, #1
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005f82:	f7ff fe9d 	bl	8005cc0 <__multadd>
 8005f86:	4607      	mov	r7, r0
 8005f88:	10ad      	asrs	r5, r5, #2
 8005f8a:	d03d      	beq.n	8006008 <__pow5mult+0xa0>
 8005f8c:	69f4      	ldr	r4, [r6, #28]
 8005f8e:	b97c      	cbnz	r4, 8005fb0 <__pow5mult+0x48>
 8005f90:	2010      	movs	r0, #16
 8005f92:	f7fe f8af 	bl	80040f4 <malloc>
 8005f96:	4602      	mov	r2, r0
 8005f98:	61f0      	str	r0, [r6, #28]
 8005f9a:	b928      	cbnz	r0, 8005fa8 <__pow5mult+0x40>
 8005f9c:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <__pow5mult+0xac>)
 8005f9e:	481e      	ldr	r0, [pc, #120]	; (8006018 <__pow5mult+0xb0>)
 8005fa0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005fa4:	f000 fa54 	bl	8006450 <__assert_func>
 8005fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fac:	6004      	str	r4, [r0, #0]
 8005fae:	60c4      	str	r4, [r0, #12]
 8005fb0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fb8:	b94c      	cbnz	r4, 8005fce <__pow5mult+0x66>
 8005fba:	f240 2171 	movw	r1, #625	; 0x271
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	f7ff ff12 	bl	8005de8 <__i2b>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8005fca:	4604      	mov	r4, r0
 8005fcc:	6003      	str	r3, [r0, #0]
 8005fce:	f04f 0900 	mov.w	r9, #0
 8005fd2:	07eb      	lsls	r3, r5, #31
 8005fd4:	d50a      	bpl.n	8005fec <__pow5mult+0x84>
 8005fd6:	4639      	mov	r1, r7
 8005fd8:	4622      	mov	r2, r4
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff ff1a 	bl	8005e14 <__multiply>
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	4680      	mov	r8, r0
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f7ff fe49 	bl	8005c7c <_Bfree>
 8005fea:	4647      	mov	r7, r8
 8005fec:	106d      	asrs	r5, r5, #1
 8005fee:	d00b      	beq.n	8006008 <__pow5mult+0xa0>
 8005ff0:	6820      	ldr	r0, [r4, #0]
 8005ff2:	b938      	cbnz	r0, 8006004 <__pow5mult+0x9c>
 8005ff4:	4622      	mov	r2, r4
 8005ff6:	4621      	mov	r1, r4
 8005ff8:	4630      	mov	r0, r6
 8005ffa:	f7ff ff0b 	bl	8005e14 <__multiply>
 8005ffe:	6020      	str	r0, [r4, #0]
 8006000:	f8c0 9000 	str.w	r9, [r0]
 8006004:	4604      	mov	r4, r0
 8006006:	e7e4      	b.n	8005fd2 <__pow5mult+0x6a>
 8006008:	4638      	mov	r0, r7
 800600a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800600e:	bf00      	nop
 8006010:	0800ad50 	.word	0x0800ad50
 8006014:	0800ab85 	.word	0x0800ab85
 8006018:	0800ac05 	.word	0x0800ac05

0800601c <__lshift>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	460c      	mov	r4, r1
 8006022:	6849      	ldr	r1, [r1, #4]
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800602a:	68a3      	ldr	r3, [r4, #8]
 800602c:	4607      	mov	r7, r0
 800602e:	4691      	mov	r9, r2
 8006030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006034:	f108 0601 	add.w	r6, r8, #1
 8006038:	42b3      	cmp	r3, r6
 800603a:	db0b      	blt.n	8006054 <__lshift+0x38>
 800603c:	4638      	mov	r0, r7
 800603e:	f7ff fddd 	bl	8005bfc <_Balloc>
 8006042:	4605      	mov	r5, r0
 8006044:	b948      	cbnz	r0, 800605a <__lshift+0x3e>
 8006046:	4602      	mov	r2, r0
 8006048:	4b28      	ldr	r3, [pc, #160]	; (80060ec <__lshift+0xd0>)
 800604a:	4829      	ldr	r0, [pc, #164]	; (80060f0 <__lshift+0xd4>)
 800604c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006050:	f000 f9fe 	bl	8006450 <__assert_func>
 8006054:	3101      	adds	r1, #1
 8006056:	005b      	lsls	r3, r3, #1
 8006058:	e7ee      	b.n	8006038 <__lshift+0x1c>
 800605a:	2300      	movs	r3, #0
 800605c:	f100 0114 	add.w	r1, r0, #20
 8006060:	f100 0210 	add.w	r2, r0, #16
 8006064:	4618      	mov	r0, r3
 8006066:	4553      	cmp	r3, sl
 8006068:	db33      	blt.n	80060d2 <__lshift+0xb6>
 800606a:	6920      	ldr	r0, [r4, #16]
 800606c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006070:	f104 0314 	add.w	r3, r4, #20
 8006074:	f019 091f 	ands.w	r9, r9, #31
 8006078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800607c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006080:	d02b      	beq.n	80060da <__lshift+0xbe>
 8006082:	f1c9 0e20 	rsb	lr, r9, #32
 8006086:	468a      	mov	sl, r1
 8006088:	2200      	movs	r2, #0
 800608a:	6818      	ldr	r0, [r3, #0]
 800608c:	fa00 f009 	lsl.w	r0, r0, r9
 8006090:	4310      	orrs	r0, r2
 8006092:	f84a 0b04 	str.w	r0, [sl], #4
 8006096:	f853 2b04 	ldr.w	r2, [r3], #4
 800609a:	459c      	cmp	ip, r3
 800609c:	fa22 f20e 	lsr.w	r2, r2, lr
 80060a0:	d8f3      	bhi.n	800608a <__lshift+0x6e>
 80060a2:	ebac 0304 	sub.w	r3, ip, r4
 80060a6:	3b15      	subs	r3, #21
 80060a8:	f023 0303 	bic.w	r3, r3, #3
 80060ac:	3304      	adds	r3, #4
 80060ae:	f104 0015 	add.w	r0, r4, #21
 80060b2:	4584      	cmp	ip, r0
 80060b4:	bf38      	it	cc
 80060b6:	2304      	movcc	r3, #4
 80060b8:	50ca      	str	r2, [r1, r3]
 80060ba:	b10a      	cbz	r2, 80060c0 <__lshift+0xa4>
 80060bc:	f108 0602 	add.w	r6, r8, #2
 80060c0:	3e01      	subs	r6, #1
 80060c2:	4638      	mov	r0, r7
 80060c4:	612e      	str	r6, [r5, #16]
 80060c6:	4621      	mov	r1, r4
 80060c8:	f7ff fdd8 	bl	8005c7c <_Bfree>
 80060cc:	4628      	mov	r0, r5
 80060ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80060d6:	3301      	adds	r3, #1
 80060d8:	e7c5      	b.n	8006066 <__lshift+0x4a>
 80060da:	3904      	subs	r1, #4
 80060dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80060e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80060e4:	459c      	cmp	ip, r3
 80060e6:	d8f9      	bhi.n	80060dc <__lshift+0xc0>
 80060e8:	e7ea      	b.n	80060c0 <__lshift+0xa4>
 80060ea:	bf00      	nop
 80060ec:	0800abf4 	.word	0x0800abf4
 80060f0:	0800ac05 	.word	0x0800ac05

080060f4 <__mcmp>:
 80060f4:	b530      	push	{r4, r5, lr}
 80060f6:	6902      	ldr	r2, [r0, #16]
 80060f8:	690c      	ldr	r4, [r1, #16]
 80060fa:	1b12      	subs	r2, r2, r4
 80060fc:	d10e      	bne.n	800611c <__mcmp+0x28>
 80060fe:	f100 0314 	add.w	r3, r0, #20
 8006102:	3114      	adds	r1, #20
 8006104:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006108:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800610c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006110:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006114:	42a5      	cmp	r5, r4
 8006116:	d003      	beq.n	8006120 <__mcmp+0x2c>
 8006118:	d305      	bcc.n	8006126 <__mcmp+0x32>
 800611a:	2201      	movs	r2, #1
 800611c:	4610      	mov	r0, r2
 800611e:	bd30      	pop	{r4, r5, pc}
 8006120:	4283      	cmp	r3, r0
 8006122:	d3f3      	bcc.n	800610c <__mcmp+0x18>
 8006124:	e7fa      	b.n	800611c <__mcmp+0x28>
 8006126:	f04f 32ff 	mov.w	r2, #4294967295
 800612a:	e7f7      	b.n	800611c <__mcmp+0x28>

0800612c <__mdiff>:
 800612c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006130:	460c      	mov	r4, r1
 8006132:	4606      	mov	r6, r0
 8006134:	4611      	mov	r1, r2
 8006136:	4620      	mov	r0, r4
 8006138:	4690      	mov	r8, r2
 800613a:	f7ff ffdb 	bl	80060f4 <__mcmp>
 800613e:	1e05      	subs	r5, r0, #0
 8006140:	d110      	bne.n	8006164 <__mdiff+0x38>
 8006142:	4629      	mov	r1, r5
 8006144:	4630      	mov	r0, r6
 8006146:	f7ff fd59 	bl	8005bfc <_Balloc>
 800614a:	b930      	cbnz	r0, 800615a <__mdiff+0x2e>
 800614c:	4b3a      	ldr	r3, [pc, #232]	; (8006238 <__mdiff+0x10c>)
 800614e:	4602      	mov	r2, r0
 8006150:	f240 2137 	movw	r1, #567	; 0x237
 8006154:	4839      	ldr	r0, [pc, #228]	; (800623c <__mdiff+0x110>)
 8006156:	f000 f97b 	bl	8006450 <__assert_func>
 800615a:	2301      	movs	r3, #1
 800615c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006164:	bfa4      	itt	ge
 8006166:	4643      	movge	r3, r8
 8006168:	46a0      	movge	r8, r4
 800616a:	4630      	mov	r0, r6
 800616c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006170:	bfa6      	itte	ge
 8006172:	461c      	movge	r4, r3
 8006174:	2500      	movge	r5, #0
 8006176:	2501      	movlt	r5, #1
 8006178:	f7ff fd40 	bl	8005bfc <_Balloc>
 800617c:	b920      	cbnz	r0, 8006188 <__mdiff+0x5c>
 800617e:	4b2e      	ldr	r3, [pc, #184]	; (8006238 <__mdiff+0x10c>)
 8006180:	4602      	mov	r2, r0
 8006182:	f240 2145 	movw	r1, #581	; 0x245
 8006186:	e7e5      	b.n	8006154 <__mdiff+0x28>
 8006188:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800618c:	6926      	ldr	r6, [r4, #16]
 800618e:	60c5      	str	r5, [r0, #12]
 8006190:	f104 0914 	add.w	r9, r4, #20
 8006194:	f108 0514 	add.w	r5, r8, #20
 8006198:	f100 0e14 	add.w	lr, r0, #20
 800619c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80061a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80061a4:	f108 0210 	add.w	r2, r8, #16
 80061a8:	46f2      	mov	sl, lr
 80061aa:	2100      	movs	r1, #0
 80061ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80061b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80061b4:	fa11 f88b 	uxtah	r8, r1, fp
 80061b8:	b299      	uxth	r1, r3
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	eba8 0801 	sub.w	r8, r8, r1
 80061c0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80061c4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80061c8:	fa1f f888 	uxth.w	r8, r8
 80061cc:	1419      	asrs	r1, r3, #16
 80061ce:	454e      	cmp	r6, r9
 80061d0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80061d4:	f84a 3b04 	str.w	r3, [sl], #4
 80061d8:	d8e8      	bhi.n	80061ac <__mdiff+0x80>
 80061da:	1b33      	subs	r3, r6, r4
 80061dc:	3b15      	subs	r3, #21
 80061de:	f023 0303 	bic.w	r3, r3, #3
 80061e2:	3304      	adds	r3, #4
 80061e4:	3415      	adds	r4, #21
 80061e6:	42a6      	cmp	r6, r4
 80061e8:	bf38      	it	cc
 80061ea:	2304      	movcc	r3, #4
 80061ec:	441d      	add	r5, r3
 80061ee:	4473      	add	r3, lr
 80061f0:	469e      	mov	lr, r3
 80061f2:	462e      	mov	r6, r5
 80061f4:	4566      	cmp	r6, ip
 80061f6:	d30e      	bcc.n	8006216 <__mdiff+0xea>
 80061f8:	f10c 0203 	add.w	r2, ip, #3
 80061fc:	1b52      	subs	r2, r2, r5
 80061fe:	f022 0203 	bic.w	r2, r2, #3
 8006202:	3d03      	subs	r5, #3
 8006204:	45ac      	cmp	ip, r5
 8006206:	bf38      	it	cc
 8006208:	2200      	movcc	r2, #0
 800620a:	4413      	add	r3, r2
 800620c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006210:	b17a      	cbz	r2, 8006232 <__mdiff+0x106>
 8006212:	6107      	str	r7, [r0, #16]
 8006214:	e7a4      	b.n	8006160 <__mdiff+0x34>
 8006216:	f856 8b04 	ldr.w	r8, [r6], #4
 800621a:	fa11 f288 	uxtah	r2, r1, r8
 800621e:	1414      	asrs	r4, r2, #16
 8006220:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006224:	b292      	uxth	r2, r2
 8006226:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800622a:	f84e 2b04 	str.w	r2, [lr], #4
 800622e:	1421      	asrs	r1, r4, #16
 8006230:	e7e0      	b.n	80061f4 <__mdiff+0xc8>
 8006232:	3f01      	subs	r7, #1
 8006234:	e7ea      	b.n	800620c <__mdiff+0xe0>
 8006236:	bf00      	nop
 8006238:	0800abf4 	.word	0x0800abf4
 800623c:	0800ac05 	.word	0x0800ac05

08006240 <__d2b>:
 8006240:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006244:	460f      	mov	r7, r1
 8006246:	2101      	movs	r1, #1
 8006248:	ec59 8b10 	vmov	r8, r9, d0
 800624c:	4616      	mov	r6, r2
 800624e:	f7ff fcd5 	bl	8005bfc <_Balloc>
 8006252:	4604      	mov	r4, r0
 8006254:	b930      	cbnz	r0, 8006264 <__d2b+0x24>
 8006256:	4602      	mov	r2, r0
 8006258:	4b24      	ldr	r3, [pc, #144]	; (80062ec <__d2b+0xac>)
 800625a:	4825      	ldr	r0, [pc, #148]	; (80062f0 <__d2b+0xb0>)
 800625c:	f240 310f 	movw	r1, #783	; 0x30f
 8006260:	f000 f8f6 	bl	8006450 <__assert_func>
 8006264:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006268:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800626c:	bb2d      	cbnz	r5, 80062ba <__d2b+0x7a>
 800626e:	9301      	str	r3, [sp, #4]
 8006270:	f1b8 0300 	subs.w	r3, r8, #0
 8006274:	d026      	beq.n	80062c4 <__d2b+0x84>
 8006276:	4668      	mov	r0, sp
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	f7ff fd87 	bl	8005d8c <__lo0bits>
 800627e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006282:	b1e8      	cbz	r0, 80062c0 <__d2b+0x80>
 8006284:	f1c0 0320 	rsb	r3, r0, #32
 8006288:	fa02 f303 	lsl.w	r3, r2, r3
 800628c:	430b      	orrs	r3, r1
 800628e:	40c2      	lsrs	r2, r0
 8006290:	6163      	str	r3, [r4, #20]
 8006292:	9201      	str	r2, [sp, #4]
 8006294:	9b01      	ldr	r3, [sp, #4]
 8006296:	61a3      	str	r3, [r4, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	bf14      	ite	ne
 800629c:	2202      	movne	r2, #2
 800629e:	2201      	moveq	r2, #1
 80062a0:	6122      	str	r2, [r4, #16]
 80062a2:	b1bd      	cbz	r5, 80062d4 <__d2b+0x94>
 80062a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80062a8:	4405      	add	r5, r0
 80062aa:	603d      	str	r5, [r7, #0]
 80062ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80062b0:	6030      	str	r0, [r6, #0]
 80062b2:	4620      	mov	r0, r4
 80062b4:	b003      	add	sp, #12
 80062b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062be:	e7d6      	b.n	800626e <__d2b+0x2e>
 80062c0:	6161      	str	r1, [r4, #20]
 80062c2:	e7e7      	b.n	8006294 <__d2b+0x54>
 80062c4:	a801      	add	r0, sp, #4
 80062c6:	f7ff fd61 	bl	8005d8c <__lo0bits>
 80062ca:	9b01      	ldr	r3, [sp, #4]
 80062cc:	6163      	str	r3, [r4, #20]
 80062ce:	3020      	adds	r0, #32
 80062d0:	2201      	movs	r2, #1
 80062d2:	e7e5      	b.n	80062a0 <__d2b+0x60>
 80062d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80062d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80062dc:	6038      	str	r0, [r7, #0]
 80062de:	6918      	ldr	r0, [r3, #16]
 80062e0:	f7ff fd34 	bl	8005d4c <__hi0bits>
 80062e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80062e8:	e7e2      	b.n	80062b0 <__d2b+0x70>
 80062ea:	bf00      	nop
 80062ec:	0800abf4 	.word	0x0800abf4
 80062f0:	0800ac05 	.word	0x0800ac05

080062f4 <__sflush_r>:
 80062f4:	898a      	ldrh	r2, [r1, #12]
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4605      	mov	r5, r0
 80062fc:	0710      	lsls	r0, r2, #28
 80062fe:	460c      	mov	r4, r1
 8006300:	d458      	bmi.n	80063b4 <__sflush_r+0xc0>
 8006302:	684b      	ldr	r3, [r1, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	dc05      	bgt.n	8006314 <__sflush_r+0x20>
 8006308:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800630a:	2b00      	cmp	r3, #0
 800630c:	dc02      	bgt.n	8006314 <__sflush_r+0x20>
 800630e:	2000      	movs	r0, #0
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006316:	2e00      	cmp	r6, #0
 8006318:	d0f9      	beq.n	800630e <__sflush_r+0x1a>
 800631a:	2300      	movs	r3, #0
 800631c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006320:	682f      	ldr	r7, [r5, #0]
 8006322:	6a21      	ldr	r1, [r4, #32]
 8006324:	602b      	str	r3, [r5, #0]
 8006326:	d032      	beq.n	800638e <__sflush_r+0x9a>
 8006328:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800632a:	89a3      	ldrh	r3, [r4, #12]
 800632c:	075a      	lsls	r2, r3, #29
 800632e:	d505      	bpl.n	800633c <__sflush_r+0x48>
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	1ac0      	subs	r0, r0, r3
 8006334:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006336:	b10b      	cbz	r3, 800633c <__sflush_r+0x48>
 8006338:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800633a:	1ac0      	subs	r0, r0, r3
 800633c:	2300      	movs	r3, #0
 800633e:	4602      	mov	r2, r0
 8006340:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006342:	6a21      	ldr	r1, [r4, #32]
 8006344:	4628      	mov	r0, r5
 8006346:	47b0      	blx	r6
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	89a3      	ldrh	r3, [r4, #12]
 800634c:	d106      	bne.n	800635c <__sflush_r+0x68>
 800634e:	6829      	ldr	r1, [r5, #0]
 8006350:	291d      	cmp	r1, #29
 8006352:	d82b      	bhi.n	80063ac <__sflush_r+0xb8>
 8006354:	4a29      	ldr	r2, [pc, #164]	; (80063fc <__sflush_r+0x108>)
 8006356:	410a      	asrs	r2, r1
 8006358:	07d6      	lsls	r6, r2, #31
 800635a:	d427      	bmi.n	80063ac <__sflush_r+0xb8>
 800635c:	2200      	movs	r2, #0
 800635e:	6062      	str	r2, [r4, #4]
 8006360:	04d9      	lsls	r1, r3, #19
 8006362:	6922      	ldr	r2, [r4, #16]
 8006364:	6022      	str	r2, [r4, #0]
 8006366:	d504      	bpl.n	8006372 <__sflush_r+0x7e>
 8006368:	1c42      	adds	r2, r0, #1
 800636a:	d101      	bne.n	8006370 <__sflush_r+0x7c>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b903      	cbnz	r3, 8006372 <__sflush_r+0x7e>
 8006370:	6560      	str	r0, [r4, #84]	; 0x54
 8006372:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006374:	602f      	str	r7, [r5, #0]
 8006376:	2900      	cmp	r1, #0
 8006378:	d0c9      	beq.n	800630e <__sflush_r+0x1a>
 800637a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800637e:	4299      	cmp	r1, r3
 8006380:	d002      	beq.n	8006388 <__sflush_r+0x94>
 8006382:	4628      	mov	r0, r5
 8006384:	f7ff fbee 	bl	8005b64 <_free_r>
 8006388:	2000      	movs	r0, #0
 800638a:	6360      	str	r0, [r4, #52]	; 0x34
 800638c:	e7c0      	b.n	8006310 <__sflush_r+0x1c>
 800638e:	2301      	movs	r3, #1
 8006390:	4628      	mov	r0, r5
 8006392:	47b0      	blx	r6
 8006394:	1c41      	adds	r1, r0, #1
 8006396:	d1c8      	bne.n	800632a <__sflush_r+0x36>
 8006398:	682b      	ldr	r3, [r5, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0c5      	beq.n	800632a <__sflush_r+0x36>
 800639e:	2b1d      	cmp	r3, #29
 80063a0:	d001      	beq.n	80063a6 <__sflush_r+0xb2>
 80063a2:	2b16      	cmp	r3, #22
 80063a4:	d101      	bne.n	80063aa <__sflush_r+0xb6>
 80063a6:	602f      	str	r7, [r5, #0]
 80063a8:	e7b1      	b.n	800630e <__sflush_r+0x1a>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b0:	81a3      	strh	r3, [r4, #12]
 80063b2:	e7ad      	b.n	8006310 <__sflush_r+0x1c>
 80063b4:	690f      	ldr	r7, [r1, #16]
 80063b6:	2f00      	cmp	r7, #0
 80063b8:	d0a9      	beq.n	800630e <__sflush_r+0x1a>
 80063ba:	0793      	lsls	r3, r2, #30
 80063bc:	680e      	ldr	r6, [r1, #0]
 80063be:	bf08      	it	eq
 80063c0:	694b      	ldreq	r3, [r1, #20]
 80063c2:	600f      	str	r7, [r1, #0]
 80063c4:	bf18      	it	ne
 80063c6:	2300      	movne	r3, #0
 80063c8:	eba6 0807 	sub.w	r8, r6, r7
 80063cc:	608b      	str	r3, [r1, #8]
 80063ce:	f1b8 0f00 	cmp.w	r8, #0
 80063d2:	dd9c      	ble.n	800630e <__sflush_r+0x1a>
 80063d4:	6a21      	ldr	r1, [r4, #32]
 80063d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063d8:	4643      	mov	r3, r8
 80063da:	463a      	mov	r2, r7
 80063dc:	4628      	mov	r0, r5
 80063de:	47b0      	blx	r6
 80063e0:	2800      	cmp	r0, #0
 80063e2:	dc06      	bgt.n	80063f2 <__sflush_r+0xfe>
 80063e4:	89a3      	ldrh	r3, [r4, #12]
 80063e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ea:	81a3      	strh	r3, [r4, #12]
 80063ec:	f04f 30ff 	mov.w	r0, #4294967295
 80063f0:	e78e      	b.n	8006310 <__sflush_r+0x1c>
 80063f2:	4407      	add	r7, r0
 80063f4:	eba8 0800 	sub.w	r8, r8, r0
 80063f8:	e7e9      	b.n	80063ce <__sflush_r+0xda>
 80063fa:	bf00      	nop
 80063fc:	dfbffffe 	.word	0xdfbffffe

08006400 <_fflush_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	690b      	ldr	r3, [r1, #16]
 8006404:	4605      	mov	r5, r0
 8006406:	460c      	mov	r4, r1
 8006408:	b913      	cbnz	r3, 8006410 <_fflush_r+0x10>
 800640a:	2500      	movs	r5, #0
 800640c:	4628      	mov	r0, r5
 800640e:	bd38      	pop	{r3, r4, r5, pc}
 8006410:	b118      	cbz	r0, 800641a <_fflush_r+0x1a>
 8006412:	6a03      	ldr	r3, [r0, #32]
 8006414:	b90b      	cbnz	r3, 800641a <_fflush_r+0x1a>
 8006416:	f7fe fc13 	bl	8004c40 <__sinit>
 800641a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d0f3      	beq.n	800640a <_fflush_r+0xa>
 8006422:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006424:	07d0      	lsls	r0, r2, #31
 8006426:	d404      	bmi.n	8006432 <_fflush_r+0x32>
 8006428:	0599      	lsls	r1, r3, #22
 800642a:	d402      	bmi.n	8006432 <_fflush_r+0x32>
 800642c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800642e:	f7fe fd0e 	bl	8004e4e <__retarget_lock_acquire_recursive>
 8006432:	4628      	mov	r0, r5
 8006434:	4621      	mov	r1, r4
 8006436:	f7ff ff5d 	bl	80062f4 <__sflush_r>
 800643a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800643c:	07da      	lsls	r2, r3, #31
 800643e:	4605      	mov	r5, r0
 8006440:	d4e4      	bmi.n	800640c <_fflush_r+0xc>
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	059b      	lsls	r3, r3, #22
 8006446:	d4e1      	bmi.n	800640c <_fflush_r+0xc>
 8006448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800644a:	f7fe fd01 	bl	8004e50 <__retarget_lock_release_recursive>
 800644e:	e7dd      	b.n	800640c <_fflush_r+0xc>

08006450 <__assert_func>:
 8006450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006452:	4614      	mov	r4, r2
 8006454:	461a      	mov	r2, r3
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <__assert_func+0x2c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4605      	mov	r5, r0
 800645c:	68d8      	ldr	r0, [r3, #12]
 800645e:	b14c      	cbz	r4, 8006474 <__assert_func+0x24>
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <__assert_func+0x30>)
 8006462:	9100      	str	r1, [sp, #0]
 8006464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006468:	4906      	ldr	r1, [pc, #24]	; (8006484 <__assert_func+0x34>)
 800646a:	462b      	mov	r3, r5
 800646c:	f000 f844 	bl	80064f8 <fiprintf>
 8006470:	f000 f854 	bl	800651c <abort>
 8006474:	4b04      	ldr	r3, [pc, #16]	; (8006488 <__assert_func+0x38>)
 8006476:	461c      	mov	r4, r3
 8006478:	e7f3      	b.n	8006462 <__assert_func+0x12>
 800647a:	bf00      	nop
 800647c:	20000064 	.word	0x20000064
 8006480:	0800ad66 	.word	0x0800ad66
 8006484:	0800ad73 	.word	0x0800ad73
 8006488:	0800ada1 	.word	0x0800ada1

0800648c <_calloc_r>:
 800648c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800648e:	fba1 2402 	umull	r2, r4, r1, r2
 8006492:	b94c      	cbnz	r4, 80064a8 <_calloc_r+0x1c>
 8006494:	4611      	mov	r1, r2
 8006496:	9201      	str	r2, [sp, #4]
 8006498:	f7fd fe54 	bl	8004144 <_malloc_r>
 800649c:	9a01      	ldr	r2, [sp, #4]
 800649e:	4605      	mov	r5, r0
 80064a0:	b930      	cbnz	r0, 80064b0 <_calloc_r+0x24>
 80064a2:	4628      	mov	r0, r5
 80064a4:	b003      	add	sp, #12
 80064a6:	bd30      	pop	{r4, r5, pc}
 80064a8:	220c      	movs	r2, #12
 80064aa:	6002      	str	r2, [r0, #0]
 80064ac:	2500      	movs	r5, #0
 80064ae:	e7f8      	b.n	80064a2 <_calloc_r+0x16>
 80064b0:	4621      	mov	r1, r4
 80064b2:	f7fe fc3e 	bl	8004d32 <memset>
 80064b6:	e7f4      	b.n	80064a2 <_calloc_r+0x16>

080064b8 <__ascii_mbtowc>:
 80064b8:	b082      	sub	sp, #8
 80064ba:	b901      	cbnz	r1, 80064be <__ascii_mbtowc+0x6>
 80064bc:	a901      	add	r1, sp, #4
 80064be:	b142      	cbz	r2, 80064d2 <__ascii_mbtowc+0x1a>
 80064c0:	b14b      	cbz	r3, 80064d6 <__ascii_mbtowc+0x1e>
 80064c2:	7813      	ldrb	r3, [r2, #0]
 80064c4:	600b      	str	r3, [r1, #0]
 80064c6:	7812      	ldrb	r2, [r2, #0]
 80064c8:	1e10      	subs	r0, r2, #0
 80064ca:	bf18      	it	ne
 80064cc:	2001      	movne	r0, #1
 80064ce:	b002      	add	sp, #8
 80064d0:	4770      	bx	lr
 80064d2:	4610      	mov	r0, r2
 80064d4:	e7fb      	b.n	80064ce <__ascii_mbtowc+0x16>
 80064d6:	f06f 0001 	mvn.w	r0, #1
 80064da:	e7f8      	b.n	80064ce <__ascii_mbtowc+0x16>

080064dc <__ascii_wctomb>:
 80064dc:	b149      	cbz	r1, 80064f2 <__ascii_wctomb+0x16>
 80064de:	2aff      	cmp	r2, #255	; 0xff
 80064e0:	bf85      	ittet	hi
 80064e2:	238a      	movhi	r3, #138	; 0x8a
 80064e4:	6003      	strhi	r3, [r0, #0]
 80064e6:	700a      	strbls	r2, [r1, #0]
 80064e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80064ec:	bf98      	it	ls
 80064ee:	2001      	movls	r0, #1
 80064f0:	4770      	bx	lr
 80064f2:	4608      	mov	r0, r1
 80064f4:	4770      	bx	lr
	...

080064f8 <fiprintf>:
 80064f8:	b40e      	push	{r1, r2, r3}
 80064fa:	b503      	push	{r0, r1, lr}
 80064fc:	4601      	mov	r1, r0
 80064fe:	ab03      	add	r3, sp, #12
 8006500:	4805      	ldr	r0, [pc, #20]	; (8006518 <fiprintf+0x20>)
 8006502:	f853 2b04 	ldr.w	r2, [r3], #4
 8006506:	6800      	ldr	r0, [r0, #0]
 8006508:	9301      	str	r3, [sp, #4]
 800650a:	f000 f837 	bl	800657c <_vfiprintf_r>
 800650e:	b002      	add	sp, #8
 8006510:	f85d eb04 	ldr.w	lr, [sp], #4
 8006514:	b003      	add	sp, #12
 8006516:	4770      	bx	lr
 8006518:	20000064 	.word	0x20000064

0800651c <abort>:
 800651c:	b508      	push	{r3, lr}
 800651e:	2006      	movs	r0, #6
 8006520:	f000 fa04 	bl	800692c <raise>
 8006524:	2001      	movs	r0, #1
 8006526:	f7fc fdbd 	bl	80030a4 <_exit>

0800652a <__sfputc_r>:
 800652a:	6893      	ldr	r3, [r2, #8]
 800652c:	3b01      	subs	r3, #1
 800652e:	2b00      	cmp	r3, #0
 8006530:	b410      	push	{r4}
 8006532:	6093      	str	r3, [r2, #8]
 8006534:	da08      	bge.n	8006548 <__sfputc_r+0x1e>
 8006536:	6994      	ldr	r4, [r2, #24]
 8006538:	42a3      	cmp	r3, r4
 800653a:	db01      	blt.n	8006540 <__sfputc_r+0x16>
 800653c:	290a      	cmp	r1, #10
 800653e:	d103      	bne.n	8006548 <__sfputc_r+0x1e>
 8006540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006544:	f000 b934 	b.w	80067b0 <__swbuf_r>
 8006548:	6813      	ldr	r3, [r2, #0]
 800654a:	1c58      	adds	r0, r3, #1
 800654c:	6010      	str	r0, [r2, #0]
 800654e:	7019      	strb	r1, [r3, #0]
 8006550:	4608      	mov	r0, r1
 8006552:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006556:	4770      	bx	lr

08006558 <__sfputs_r>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	4614      	mov	r4, r2
 8006560:	18d5      	adds	r5, r2, r3
 8006562:	42ac      	cmp	r4, r5
 8006564:	d101      	bne.n	800656a <__sfputs_r+0x12>
 8006566:	2000      	movs	r0, #0
 8006568:	e007      	b.n	800657a <__sfputs_r+0x22>
 800656a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800656e:	463a      	mov	r2, r7
 8006570:	4630      	mov	r0, r6
 8006572:	f7ff ffda 	bl	800652a <__sfputc_r>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d1f3      	bne.n	8006562 <__sfputs_r+0xa>
 800657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800657c <_vfiprintf_r>:
 800657c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006580:	460d      	mov	r5, r1
 8006582:	b09d      	sub	sp, #116	; 0x74
 8006584:	4614      	mov	r4, r2
 8006586:	4698      	mov	r8, r3
 8006588:	4606      	mov	r6, r0
 800658a:	b118      	cbz	r0, 8006594 <_vfiprintf_r+0x18>
 800658c:	6a03      	ldr	r3, [r0, #32]
 800658e:	b90b      	cbnz	r3, 8006594 <_vfiprintf_r+0x18>
 8006590:	f7fe fb56 	bl	8004c40 <__sinit>
 8006594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006596:	07d9      	lsls	r1, r3, #31
 8006598:	d405      	bmi.n	80065a6 <_vfiprintf_r+0x2a>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	059a      	lsls	r2, r3, #22
 800659e:	d402      	bmi.n	80065a6 <_vfiprintf_r+0x2a>
 80065a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065a2:	f7fe fc54 	bl	8004e4e <__retarget_lock_acquire_recursive>
 80065a6:	89ab      	ldrh	r3, [r5, #12]
 80065a8:	071b      	lsls	r3, r3, #28
 80065aa:	d501      	bpl.n	80065b0 <_vfiprintf_r+0x34>
 80065ac:	692b      	ldr	r3, [r5, #16]
 80065ae:	b99b      	cbnz	r3, 80065d8 <_vfiprintf_r+0x5c>
 80065b0:	4629      	mov	r1, r5
 80065b2:	4630      	mov	r0, r6
 80065b4:	f000 f93a 	bl	800682c <__swsetup_r>
 80065b8:	b170      	cbz	r0, 80065d8 <_vfiprintf_r+0x5c>
 80065ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065bc:	07dc      	lsls	r4, r3, #31
 80065be:	d504      	bpl.n	80065ca <_vfiprintf_r+0x4e>
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295
 80065c4:	b01d      	add	sp, #116	; 0x74
 80065c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ca:	89ab      	ldrh	r3, [r5, #12]
 80065cc:	0598      	lsls	r0, r3, #22
 80065ce:	d4f7      	bmi.n	80065c0 <_vfiprintf_r+0x44>
 80065d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065d2:	f7fe fc3d 	bl	8004e50 <__retarget_lock_release_recursive>
 80065d6:	e7f3      	b.n	80065c0 <_vfiprintf_r+0x44>
 80065d8:	2300      	movs	r3, #0
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	2320      	movs	r3, #32
 80065de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80065e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e6:	2330      	movs	r3, #48	; 0x30
 80065e8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800679c <_vfiprintf_r+0x220>
 80065ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065f0:	f04f 0901 	mov.w	r9, #1
 80065f4:	4623      	mov	r3, r4
 80065f6:	469a      	mov	sl, r3
 80065f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065fc:	b10a      	cbz	r2, 8006602 <_vfiprintf_r+0x86>
 80065fe:	2a25      	cmp	r2, #37	; 0x25
 8006600:	d1f9      	bne.n	80065f6 <_vfiprintf_r+0x7a>
 8006602:	ebba 0b04 	subs.w	fp, sl, r4
 8006606:	d00b      	beq.n	8006620 <_vfiprintf_r+0xa4>
 8006608:	465b      	mov	r3, fp
 800660a:	4622      	mov	r2, r4
 800660c:	4629      	mov	r1, r5
 800660e:	4630      	mov	r0, r6
 8006610:	f7ff ffa2 	bl	8006558 <__sfputs_r>
 8006614:	3001      	adds	r0, #1
 8006616:	f000 80a9 	beq.w	800676c <_vfiprintf_r+0x1f0>
 800661a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800661c:	445a      	add	r2, fp
 800661e:	9209      	str	r2, [sp, #36]	; 0x24
 8006620:	f89a 3000 	ldrb.w	r3, [sl]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f000 80a1 	beq.w	800676c <_vfiprintf_r+0x1f0>
 800662a:	2300      	movs	r3, #0
 800662c:	f04f 32ff 	mov.w	r2, #4294967295
 8006630:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006634:	f10a 0a01 	add.w	sl, sl, #1
 8006638:	9304      	str	r3, [sp, #16]
 800663a:	9307      	str	r3, [sp, #28]
 800663c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006640:	931a      	str	r3, [sp, #104]	; 0x68
 8006642:	4654      	mov	r4, sl
 8006644:	2205      	movs	r2, #5
 8006646:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664a:	4854      	ldr	r0, [pc, #336]	; (800679c <_vfiprintf_r+0x220>)
 800664c:	f7f9 fdc8 	bl	80001e0 <memchr>
 8006650:	9a04      	ldr	r2, [sp, #16]
 8006652:	b9d8      	cbnz	r0, 800668c <_vfiprintf_r+0x110>
 8006654:	06d1      	lsls	r1, r2, #27
 8006656:	bf44      	itt	mi
 8006658:	2320      	movmi	r3, #32
 800665a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800665e:	0713      	lsls	r3, r2, #28
 8006660:	bf44      	itt	mi
 8006662:	232b      	movmi	r3, #43	; 0x2b
 8006664:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006668:	f89a 3000 	ldrb.w	r3, [sl]
 800666c:	2b2a      	cmp	r3, #42	; 0x2a
 800666e:	d015      	beq.n	800669c <_vfiprintf_r+0x120>
 8006670:	9a07      	ldr	r2, [sp, #28]
 8006672:	4654      	mov	r4, sl
 8006674:	2000      	movs	r0, #0
 8006676:	f04f 0c0a 	mov.w	ip, #10
 800667a:	4621      	mov	r1, r4
 800667c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006680:	3b30      	subs	r3, #48	; 0x30
 8006682:	2b09      	cmp	r3, #9
 8006684:	d94d      	bls.n	8006722 <_vfiprintf_r+0x1a6>
 8006686:	b1b0      	cbz	r0, 80066b6 <_vfiprintf_r+0x13a>
 8006688:	9207      	str	r2, [sp, #28]
 800668a:	e014      	b.n	80066b6 <_vfiprintf_r+0x13a>
 800668c:	eba0 0308 	sub.w	r3, r0, r8
 8006690:	fa09 f303 	lsl.w	r3, r9, r3
 8006694:	4313      	orrs	r3, r2
 8006696:	9304      	str	r3, [sp, #16]
 8006698:	46a2      	mov	sl, r4
 800669a:	e7d2      	b.n	8006642 <_vfiprintf_r+0xc6>
 800669c:	9b03      	ldr	r3, [sp, #12]
 800669e:	1d19      	adds	r1, r3, #4
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	9103      	str	r1, [sp, #12]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	bfbb      	ittet	lt
 80066a8:	425b      	neglt	r3, r3
 80066aa:	f042 0202 	orrlt.w	r2, r2, #2
 80066ae:	9307      	strge	r3, [sp, #28]
 80066b0:	9307      	strlt	r3, [sp, #28]
 80066b2:	bfb8      	it	lt
 80066b4:	9204      	strlt	r2, [sp, #16]
 80066b6:	7823      	ldrb	r3, [r4, #0]
 80066b8:	2b2e      	cmp	r3, #46	; 0x2e
 80066ba:	d10c      	bne.n	80066d6 <_vfiprintf_r+0x15a>
 80066bc:	7863      	ldrb	r3, [r4, #1]
 80066be:	2b2a      	cmp	r3, #42	; 0x2a
 80066c0:	d134      	bne.n	800672c <_vfiprintf_r+0x1b0>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	1d1a      	adds	r2, r3, #4
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	9203      	str	r2, [sp, #12]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfb8      	it	lt
 80066ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80066d2:	3402      	adds	r4, #2
 80066d4:	9305      	str	r3, [sp, #20]
 80066d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80067ac <_vfiprintf_r+0x230>
 80066da:	7821      	ldrb	r1, [r4, #0]
 80066dc:	2203      	movs	r2, #3
 80066de:	4650      	mov	r0, sl
 80066e0:	f7f9 fd7e 	bl	80001e0 <memchr>
 80066e4:	b138      	cbz	r0, 80066f6 <_vfiprintf_r+0x17a>
 80066e6:	9b04      	ldr	r3, [sp, #16]
 80066e8:	eba0 000a 	sub.w	r0, r0, sl
 80066ec:	2240      	movs	r2, #64	; 0x40
 80066ee:	4082      	lsls	r2, r0
 80066f0:	4313      	orrs	r3, r2
 80066f2:	3401      	adds	r4, #1
 80066f4:	9304      	str	r3, [sp, #16]
 80066f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066fa:	4829      	ldr	r0, [pc, #164]	; (80067a0 <_vfiprintf_r+0x224>)
 80066fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006700:	2206      	movs	r2, #6
 8006702:	f7f9 fd6d 	bl	80001e0 <memchr>
 8006706:	2800      	cmp	r0, #0
 8006708:	d03f      	beq.n	800678a <_vfiprintf_r+0x20e>
 800670a:	4b26      	ldr	r3, [pc, #152]	; (80067a4 <_vfiprintf_r+0x228>)
 800670c:	bb1b      	cbnz	r3, 8006756 <_vfiprintf_r+0x1da>
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	3307      	adds	r3, #7
 8006712:	f023 0307 	bic.w	r3, r3, #7
 8006716:	3308      	adds	r3, #8
 8006718:	9303      	str	r3, [sp, #12]
 800671a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800671c:	443b      	add	r3, r7
 800671e:	9309      	str	r3, [sp, #36]	; 0x24
 8006720:	e768      	b.n	80065f4 <_vfiprintf_r+0x78>
 8006722:	fb0c 3202 	mla	r2, ip, r2, r3
 8006726:	460c      	mov	r4, r1
 8006728:	2001      	movs	r0, #1
 800672a:	e7a6      	b.n	800667a <_vfiprintf_r+0xfe>
 800672c:	2300      	movs	r3, #0
 800672e:	3401      	adds	r4, #1
 8006730:	9305      	str	r3, [sp, #20]
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0c0a 	mov.w	ip, #10
 8006738:	4620      	mov	r0, r4
 800673a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800673e:	3a30      	subs	r2, #48	; 0x30
 8006740:	2a09      	cmp	r2, #9
 8006742:	d903      	bls.n	800674c <_vfiprintf_r+0x1d0>
 8006744:	2b00      	cmp	r3, #0
 8006746:	d0c6      	beq.n	80066d6 <_vfiprintf_r+0x15a>
 8006748:	9105      	str	r1, [sp, #20]
 800674a:	e7c4      	b.n	80066d6 <_vfiprintf_r+0x15a>
 800674c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006750:	4604      	mov	r4, r0
 8006752:	2301      	movs	r3, #1
 8006754:	e7f0      	b.n	8006738 <_vfiprintf_r+0x1bc>
 8006756:	ab03      	add	r3, sp, #12
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	462a      	mov	r2, r5
 800675c:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <_vfiprintf_r+0x22c>)
 800675e:	a904      	add	r1, sp, #16
 8006760:	4630      	mov	r0, r6
 8006762:	f7fd fe1b 	bl	800439c <_printf_float>
 8006766:	4607      	mov	r7, r0
 8006768:	1c78      	adds	r0, r7, #1
 800676a:	d1d6      	bne.n	800671a <_vfiprintf_r+0x19e>
 800676c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800676e:	07d9      	lsls	r1, r3, #31
 8006770:	d405      	bmi.n	800677e <_vfiprintf_r+0x202>
 8006772:	89ab      	ldrh	r3, [r5, #12]
 8006774:	059a      	lsls	r2, r3, #22
 8006776:	d402      	bmi.n	800677e <_vfiprintf_r+0x202>
 8006778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800677a:	f7fe fb69 	bl	8004e50 <__retarget_lock_release_recursive>
 800677e:	89ab      	ldrh	r3, [r5, #12]
 8006780:	065b      	lsls	r3, r3, #25
 8006782:	f53f af1d 	bmi.w	80065c0 <_vfiprintf_r+0x44>
 8006786:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006788:	e71c      	b.n	80065c4 <_vfiprintf_r+0x48>
 800678a:	ab03      	add	r3, sp, #12
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	462a      	mov	r2, r5
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <_vfiprintf_r+0x22c>)
 8006792:	a904      	add	r1, sp, #16
 8006794:	4630      	mov	r0, r6
 8006796:	f7fe f8a5 	bl	80048e4 <_printf_i>
 800679a:	e7e4      	b.n	8006766 <_vfiprintf_r+0x1ea>
 800679c:	0800aea3 	.word	0x0800aea3
 80067a0:	0800aead 	.word	0x0800aead
 80067a4:	0800439d 	.word	0x0800439d
 80067a8:	08006559 	.word	0x08006559
 80067ac:	0800aea9 	.word	0x0800aea9

080067b0 <__swbuf_r>:
 80067b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b2:	460e      	mov	r6, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	4605      	mov	r5, r0
 80067b8:	b118      	cbz	r0, 80067c2 <__swbuf_r+0x12>
 80067ba:	6a03      	ldr	r3, [r0, #32]
 80067bc:	b90b      	cbnz	r3, 80067c2 <__swbuf_r+0x12>
 80067be:	f7fe fa3f 	bl	8004c40 <__sinit>
 80067c2:	69a3      	ldr	r3, [r4, #24]
 80067c4:	60a3      	str	r3, [r4, #8]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	071a      	lsls	r2, r3, #28
 80067ca:	d525      	bpl.n	8006818 <__swbuf_r+0x68>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	b31b      	cbz	r3, 8006818 <__swbuf_r+0x68>
 80067d0:	6823      	ldr	r3, [r4, #0]
 80067d2:	6922      	ldr	r2, [r4, #16]
 80067d4:	1a98      	subs	r0, r3, r2
 80067d6:	6963      	ldr	r3, [r4, #20]
 80067d8:	b2f6      	uxtb	r6, r6
 80067da:	4283      	cmp	r3, r0
 80067dc:	4637      	mov	r7, r6
 80067de:	dc04      	bgt.n	80067ea <__swbuf_r+0x3a>
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f7ff fe0c 	bl	8006400 <_fflush_r>
 80067e8:	b9e0      	cbnz	r0, 8006824 <__swbuf_r+0x74>
 80067ea:	68a3      	ldr	r3, [r4, #8]
 80067ec:	3b01      	subs	r3, #1
 80067ee:	60a3      	str	r3, [r4, #8]
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	1c5a      	adds	r2, r3, #1
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	701e      	strb	r6, [r3, #0]
 80067f8:	6962      	ldr	r2, [r4, #20]
 80067fa:	1c43      	adds	r3, r0, #1
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d004      	beq.n	800680a <__swbuf_r+0x5a>
 8006800:	89a3      	ldrh	r3, [r4, #12]
 8006802:	07db      	lsls	r3, r3, #31
 8006804:	d506      	bpl.n	8006814 <__swbuf_r+0x64>
 8006806:	2e0a      	cmp	r6, #10
 8006808:	d104      	bne.n	8006814 <__swbuf_r+0x64>
 800680a:	4621      	mov	r1, r4
 800680c:	4628      	mov	r0, r5
 800680e:	f7ff fdf7 	bl	8006400 <_fflush_r>
 8006812:	b938      	cbnz	r0, 8006824 <__swbuf_r+0x74>
 8006814:	4638      	mov	r0, r7
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	4621      	mov	r1, r4
 800681a:	4628      	mov	r0, r5
 800681c:	f000 f806 	bl	800682c <__swsetup_r>
 8006820:	2800      	cmp	r0, #0
 8006822:	d0d5      	beq.n	80067d0 <__swbuf_r+0x20>
 8006824:	f04f 37ff 	mov.w	r7, #4294967295
 8006828:	e7f4      	b.n	8006814 <__swbuf_r+0x64>
	...

0800682c <__swsetup_r>:
 800682c:	b538      	push	{r3, r4, r5, lr}
 800682e:	4b2a      	ldr	r3, [pc, #168]	; (80068d8 <__swsetup_r+0xac>)
 8006830:	4605      	mov	r5, r0
 8006832:	6818      	ldr	r0, [r3, #0]
 8006834:	460c      	mov	r4, r1
 8006836:	b118      	cbz	r0, 8006840 <__swsetup_r+0x14>
 8006838:	6a03      	ldr	r3, [r0, #32]
 800683a:	b90b      	cbnz	r3, 8006840 <__swsetup_r+0x14>
 800683c:	f7fe fa00 	bl	8004c40 <__sinit>
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006846:	0718      	lsls	r0, r3, #28
 8006848:	d422      	bmi.n	8006890 <__swsetup_r+0x64>
 800684a:	06d9      	lsls	r1, r3, #27
 800684c:	d407      	bmi.n	800685e <__swsetup_r+0x32>
 800684e:	2309      	movs	r3, #9
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006856:	81a3      	strh	r3, [r4, #12]
 8006858:	f04f 30ff 	mov.w	r0, #4294967295
 800685c:	e034      	b.n	80068c8 <__swsetup_r+0x9c>
 800685e:	0758      	lsls	r0, r3, #29
 8006860:	d512      	bpl.n	8006888 <__swsetup_r+0x5c>
 8006862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006864:	b141      	cbz	r1, 8006878 <__swsetup_r+0x4c>
 8006866:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800686a:	4299      	cmp	r1, r3
 800686c:	d002      	beq.n	8006874 <__swsetup_r+0x48>
 800686e:	4628      	mov	r0, r5
 8006870:	f7ff f978 	bl	8005b64 <_free_r>
 8006874:	2300      	movs	r3, #0
 8006876:	6363      	str	r3, [r4, #52]	; 0x34
 8006878:	89a3      	ldrh	r3, [r4, #12]
 800687a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	2300      	movs	r3, #0
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	6023      	str	r3, [r4, #0]
 8006888:	89a3      	ldrh	r3, [r4, #12]
 800688a:	f043 0308 	orr.w	r3, r3, #8
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	6923      	ldr	r3, [r4, #16]
 8006892:	b94b      	cbnz	r3, 80068a8 <__swsetup_r+0x7c>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800689a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689e:	d003      	beq.n	80068a8 <__swsetup_r+0x7c>
 80068a0:	4621      	mov	r1, r4
 80068a2:	4628      	mov	r0, r5
 80068a4:	f000 f884 	bl	80069b0 <__smakebuf_r>
 80068a8:	89a0      	ldrh	r0, [r4, #12]
 80068aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ae:	f010 0301 	ands.w	r3, r0, #1
 80068b2:	d00a      	beq.n	80068ca <__swsetup_r+0x9e>
 80068b4:	2300      	movs	r3, #0
 80068b6:	60a3      	str	r3, [r4, #8]
 80068b8:	6963      	ldr	r3, [r4, #20]
 80068ba:	425b      	negs	r3, r3
 80068bc:	61a3      	str	r3, [r4, #24]
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	b943      	cbnz	r3, 80068d4 <__swsetup_r+0xa8>
 80068c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068c6:	d1c4      	bne.n	8006852 <__swsetup_r+0x26>
 80068c8:	bd38      	pop	{r3, r4, r5, pc}
 80068ca:	0781      	lsls	r1, r0, #30
 80068cc:	bf58      	it	pl
 80068ce:	6963      	ldrpl	r3, [r4, #20]
 80068d0:	60a3      	str	r3, [r4, #8]
 80068d2:	e7f4      	b.n	80068be <__swsetup_r+0x92>
 80068d4:	2000      	movs	r0, #0
 80068d6:	e7f7      	b.n	80068c8 <__swsetup_r+0x9c>
 80068d8:	20000064 	.word	0x20000064

080068dc <_raise_r>:
 80068dc:	291f      	cmp	r1, #31
 80068de:	b538      	push	{r3, r4, r5, lr}
 80068e0:	4604      	mov	r4, r0
 80068e2:	460d      	mov	r5, r1
 80068e4:	d904      	bls.n	80068f0 <_raise_r+0x14>
 80068e6:	2316      	movs	r3, #22
 80068e8:	6003      	str	r3, [r0, #0]
 80068ea:	f04f 30ff 	mov.w	r0, #4294967295
 80068ee:	bd38      	pop	{r3, r4, r5, pc}
 80068f0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80068f2:	b112      	cbz	r2, 80068fa <_raise_r+0x1e>
 80068f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068f8:	b94b      	cbnz	r3, 800690e <_raise_r+0x32>
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 f830 	bl	8006960 <_getpid_r>
 8006900:	462a      	mov	r2, r5
 8006902:	4601      	mov	r1, r0
 8006904:	4620      	mov	r0, r4
 8006906:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800690a:	f000 b817 	b.w	800693c <_kill_r>
 800690e:	2b01      	cmp	r3, #1
 8006910:	d00a      	beq.n	8006928 <_raise_r+0x4c>
 8006912:	1c59      	adds	r1, r3, #1
 8006914:	d103      	bne.n	800691e <_raise_r+0x42>
 8006916:	2316      	movs	r3, #22
 8006918:	6003      	str	r3, [r0, #0]
 800691a:	2001      	movs	r0, #1
 800691c:	e7e7      	b.n	80068ee <_raise_r+0x12>
 800691e:	2400      	movs	r4, #0
 8006920:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006924:	4628      	mov	r0, r5
 8006926:	4798      	blx	r3
 8006928:	2000      	movs	r0, #0
 800692a:	e7e0      	b.n	80068ee <_raise_r+0x12>

0800692c <raise>:
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <raise+0xc>)
 800692e:	4601      	mov	r1, r0
 8006930:	6818      	ldr	r0, [r3, #0]
 8006932:	f7ff bfd3 	b.w	80068dc <_raise_r>
 8006936:	bf00      	nop
 8006938:	20000064 	.word	0x20000064

0800693c <_kill_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d07      	ldr	r5, [pc, #28]	; (800695c <_kill_r+0x20>)
 8006940:	2300      	movs	r3, #0
 8006942:	4604      	mov	r4, r0
 8006944:	4608      	mov	r0, r1
 8006946:	4611      	mov	r1, r2
 8006948:	602b      	str	r3, [r5, #0]
 800694a:	f7fc fb9b 	bl	8003084 <_kill>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d102      	bne.n	8006958 <_kill_r+0x1c>
 8006952:	682b      	ldr	r3, [r5, #0]
 8006954:	b103      	cbz	r3, 8006958 <_kill_r+0x1c>
 8006956:	6023      	str	r3, [r4, #0]
 8006958:	bd38      	pop	{r3, r4, r5, pc}
 800695a:	bf00      	nop
 800695c:	2000033c 	.word	0x2000033c

08006960 <_getpid_r>:
 8006960:	f7fc bb88 	b.w	8003074 <_getpid>

08006964 <__swhatbuf_r>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	460c      	mov	r4, r1
 8006968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800696c:	2900      	cmp	r1, #0
 800696e:	b096      	sub	sp, #88	; 0x58
 8006970:	4615      	mov	r5, r2
 8006972:	461e      	mov	r6, r3
 8006974:	da0d      	bge.n	8006992 <__swhatbuf_r+0x2e>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f013 0f80 	tst.w	r3, #128	; 0x80
 800697c:	f04f 0100 	mov.w	r1, #0
 8006980:	bf0c      	ite	eq
 8006982:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006986:	2340      	movne	r3, #64	; 0x40
 8006988:	2000      	movs	r0, #0
 800698a:	6031      	str	r1, [r6, #0]
 800698c:	602b      	str	r3, [r5, #0]
 800698e:	b016      	add	sp, #88	; 0x58
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	466a      	mov	r2, sp
 8006994:	f000 f848 	bl	8006a28 <_fstat_r>
 8006998:	2800      	cmp	r0, #0
 800699a:	dbec      	blt.n	8006976 <__swhatbuf_r+0x12>
 800699c:	9901      	ldr	r1, [sp, #4]
 800699e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069a6:	4259      	negs	r1, r3
 80069a8:	4159      	adcs	r1, r3
 80069aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ae:	e7eb      	b.n	8006988 <__swhatbuf_r+0x24>

080069b0 <__smakebuf_r>:
 80069b0:	898b      	ldrh	r3, [r1, #12]
 80069b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069b4:	079d      	lsls	r5, r3, #30
 80069b6:	4606      	mov	r6, r0
 80069b8:	460c      	mov	r4, r1
 80069ba:	d507      	bpl.n	80069cc <__smakebuf_r+0x1c>
 80069bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	6123      	str	r3, [r4, #16]
 80069c4:	2301      	movs	r3, #1
 80069c6:	6163      	str	r3, [r4, #20]
 80069c8:	b002      	add	sp, #8
 80069ca:	bd70      	pop	{r4, r5, r6, pc}
 80069cc:	ab01      	add	r3, sp, #4
 80069ce:	466a      	mov	r2, sp
 80069d0:	f7ff ffc8 	bl	8006964 <__swhatbuf_r>
 80069d4:	9900      	ldr	r1, [sp, #0]
 80069d6:	4605      	mov	r5, r0
 80069d8:	4630      	mov	r0, r6
 80069da:	f7fd fbb3 	bl	8004144 <_malloc_r>
 80069de:	b948      	cbnz	r0, 80069f4 <__smakebuf_r+0x44>
 80069e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e4:	059a      	lsls	r2, r3, #22
 80069e6:	d4ef      	bmi.n	80069c8 <__smakebuf_r+0x18>
 80069e8:	f023 0303 	bic.w	r3, r3, #3
 80069ec:	f043 0302 	orr.w	r3, r3, #2
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	e7e3      	b.n	80069bc <__smakebuf_r+0xc>
 80069f4:	89a3      	ldrh	r3, [r4, #12]
 80069f6:	6020      	str	r0, [r4, #0]
 80069f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	9b00      	ldr	r3, [sp, #0]
 8006a00:	6163      	str	r3, [r4, #20]
 8006a02:	9b01      	ldr	r3, [sp, #4]
 8006a04:	6120      	str	r0, [r4, #16]
 8006a06:	b15b      	cbz	r3, 8006a20 <__smakebuf_r+0x70>
 8006a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 f81d 	bl	8006a4c <_isatty_r>
 8006a12:	b128      	cbz	r0, 8006a20 <__smakebuf_r+0x70>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	f023 0303 	bic.w	r3, r3, #3
 8006a1a:	f043 0301 	orr.w	r3, r3, #1
 8006a1e:	81a3      	strh	r3, [r4, #12]
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	431d      	orrs	r5, r3
 8006a24:	81a5      	strh	r5, [r4, #12]
 8006a26:	e7cf      	b.n	80069c8 <__smakebuf_r+0x18>

08006a28 <_fstat_r>:
 8006a28:	b538      	push	{r3, r4, r5, lr}
 8006a2a:	4d07      	ldr	r5, [pc, #28]	; (8006a48 <_fstat_r+0x20>)
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	4604      	mov	r4, r0
 8006a30:	4608      	mov	r0, r1
 8006a32:	4611      	mov	r1, r2
 8006a34:	602b      	str	r3, [r5, #0]
 8006a36:	f7fc fb84 	bl	8003142 <_fstat>
 8006a3a:	1c43      	adds	r3, r0, #1
 8006a3c:	d102      	bne.n	8006a44 <_fstat_r+0x1c>
 8006a3e:	682b      	ldr	r3, [r5, #0]
 8006a40:	b103      	cbz	r3, 8006a44 <_fstat_r+0x1c>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	bd38      	pop	{r3, r4, r5, pc}
 8006a46:	bf00      	nop
 8006a48:	2000033c 	.word	0x2000033c

08006a4c <_isatty_r>:
 8006a4c:	b538      	push	{r3, r4, r5, lr}
 8006a4e:	4d06      	ldr	r5, [pc, #24]	; (8006a68 <_isatty_r+0x1c>)
 8006a50:	2300      	movs	r3, #0
 8006a52:	4604      	mov	r4, r0
 8006a54:	4608      	mov	r0, r1
 8006a56:	602b      	str	r3, [r5, #0]
 8006a58:	f7fc fb83 	bl	8003162 <_isatty>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d102      	bne.n	8006a66 <_isatty_r+0x1a>
 8006a60:	682b      	ldr	r3, [r5, #0]
 8006a62:	b103      	cbz	r3, 8006a66 <_isatty_r+0x1a>
 8006a64:	6023      	str	r3, [r4, #0]
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	2000033c 	.word	0x2000033c

08006a6c <_init>:
 8006a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6e:	bf00      	nop
 8006a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a72:	bc08      	pop	{r3}
 8006a74:	469e      	mov	lr, r3
 8006a76:	4770      	bx	lr

08006a78 <_fini>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr
