
stm32f401cdu6 - first test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012690  08007bd0  08007bd0  00017bd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a260  0801a260  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a260  0801a260  0002a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a268  0801a268  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a268  0801a268  0002a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a26c  0801a26c  0002a26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801a270  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001d8  0801a448  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0801a448  00030354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005bd5  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000157c  00000000  00000000  00035e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005f0  00000000  00000000  000373a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000450  00000000  00000000  00037990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169c5  00000000  00000000  00037de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007a4f  00000000  00000000  0004e7a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000862a6  00000000  00000000  000561f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000029ec  00000000  00000000  000dc49c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000dee88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007bb8 	.word	0x08007bb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007bb8 	.word	0x08007bb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <tft_write_bus>:
GPIO_TypeDef* PORT_NAME_ARR[]={D0_PORT,D1_PORT,D2_PORT,D3_PORT,D4_PORT,D5_PORT,D6_PORT,D7_PORT,D8_PORT,D9_PORT,D10_PORT,D11_PORT,D12_PORT,D13_PORT,D14_PORT,D15_PORT};
uint16_t      PIN_NAME_ARR[]={D0_PIN,D1_PIN,D2_PIN,D3_PIN,D4_PIN,D5_PIN,D6_PIN,D7_PIN,D8_PIN,D9_PIN,D10_PIN,D11_PIN,D12_PIN,D13_PIN,D14_PIN,D15_PIN};


void tft_write_bus(uint8_t high_byte,uint8_t low_byte)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
    else
    {
      pin_low(PORT_NAME_ARR[i],PIN_NAME_ARR[i]);
    }
  }*/
	PORTA->ODR = (PORTA->ODR & 0xffffff00) | low_byte;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <tft_write_bus+0x54>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <tft_write_bus+0x54>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	614b      	str	r3, [r1, #20]
	PORTB->ODR = (PORTB->ODR & 0xffffff00) | high_byte;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <tft_write_bus+0x58>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	490b      	ldr	r1, [pc, #44]	; (8000fac <tft_write_bus+0x58>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	614b      	str	r3, [r1, #20]
	asm("nop");
 8000f84:	bf00      	nop
	pin_low(WR_PORT,WR_PIN);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <tft_write_bus+0x58>)
 8000f8e:	f002 fab9 	bl	8003504 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <tft_write_bus+0x58>)
 8000f9a:	f002 fab3 	bl	8003504 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400

08000fb0 <Lcd_Write_Data>:



void Lcd_Write_Data(uint16_t data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  pin_high(RS_PORT,RS_PIN);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <Lcd_Write_Data+0x34>)
 8000fc2:	f002 fa9f 	bl	8003504 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffbd 	bl	8000f54 <tft_write_bus>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <Lcd_Write_Cmd+0x34>)
 8000ffa:	f002 fa83 	bl	8003504 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffa1 	bl	8000f54 <tft_write_bus>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000

08001020 <Lcd_SetArea>:


void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4623      	mov	r3, r4
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	4603      	mov	r3, r0
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 800103e:	202a      	movs	r0, #42	; 0x2a
 8001040:	f7ff ffd2 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffb0 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffaa 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffa4 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff9e 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 8001074:	202b      	movs	r0, #43	; 0x2b
 8001076:	f7ff ffb7 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff95 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff8f 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff89 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 800109e:	883b      	ldrh	r3, [r7, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff83 	bl	8000fb0 <Lcd_Write_Data>
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
	...

080010b4 <Init_SSD1963>:
}



void Init_SSD1963(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

	pin_high(CS_PORT,CS_PIN);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010be:	4875      	ldr	r0, [pc, #468]	; (8001294 <Init_SSD1963+0x1e0>)
 80010c0:	f002 fa20 	bl	8003504 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	4873      	ldr	r0, [pc, #460]	; (8001298 <Init_SSD1963+0x1e4>)
 80010cc:	f002 fa1a 	bl	8003504 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	4870      	ldr	r0, [pc, #448]	; (8001298 <Init_SSD1963+0x1e4>)
 80010d8:	f002 fa14 	bl	8003504 <HAL_GPIO_WritePin>
	pin_low(REST_PORT,REST_PIN);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	486c      	ldr	r0, [pc, #432]	; (8001294 <Init_SSD1963+0x1e0>)
 80010e4:	f002 fa0e 	bl	8003504 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 80010e8:	2014      	movs	r0, #20
 80010ea:	f001 ff7d 	bl	8002fe8 <HAL_Delay>
	pin_high(REST_PORT,REST_PIN);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4867      	ldr	r0, [pc, #412]	; (8001294 <Init_SSD1963+0x1e0>)
 80010f6:	f002 fa05 	bl	8003504 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010fa:	2014      	movs	r0, #20
 80010fc:	f001 ff74 	bl	8002fe8 <HAL_Delay>
	pin_low(CS_PORT,CS_PIN);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	4863      	ldr	r0, [pc, #396]	; (8001294 <Init_SSD1963+0x1e0>)
 8001108:	f002 f9fc 	bl	8003504 <HAL_GPIO_WritePin>


Lcd_Write_Cmd(0xE2);		//PLL multiplier, set PLL clock to 120M
 800110c:	20e2      	movs	r0, #226	; 0xe2
 800110e:	f7ff ff6b 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 8001112:	2023      	movs	r0, #35	; 0x23
 8001114:	f7ff ff4c 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x02);
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff ff49 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x04);
 800111e:	2004      	movs	r0, #4
 8001120:	f7ff ff46 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Cmd(0xE0);		// PLL enable
 8001124:	20e0      	movs	r0, #224	; 0xe0
 8001126:	f7ff ff5f 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ff40 	bl	8000fb0 <Lcd_Write_Data>
HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f001 ff59 	bl	8002fe8 <HAL_Delay>
Lcd_Write_Cmd(0xE0);
 8001136:	20e0      	movs	r0, #224	; 0xe0
 8001138:	f7ff ff56 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff ff37 	bl	8000fb0 <Lcd_Write_Data>
HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f001 ff50 	bl	8002fe8 <HAL_Delay>
Lcd_Write_Cmd(0x01);		// software reset
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff ff4d 	bl	8000fe8 <Lcd_Write_Cmd>
HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f001 ff4a 	bl	8002fe8 <HAL_Delay>
Lcd_Write_Cmd(0xE6);		//PLL setting for PCLK, depends on resolution
 8001154:	20e6      	movs	r0, #230	; 0xe6
 8001156:	f7ff ff47 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x04);
 800115a:	2004      	movs	r0, #4
 800115c:	f7ff ff28 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x93);
 8001160:	2093      	movs	r0, #147	; 0x93
 8001162:	f7ff ff25 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xE0);
 8001166:	20e0      	movs	r0, #224	; 0xe0
 8001168:	f7ff ff22 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB0);		//LCD SPECIFICATION
 800116c:	20b0      	movs	r0, #176	; 0xb0
 800116e:	f7ff ff3b 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x00);		// 0x24
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ff1c 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff19 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x03);		//Set HDP	799
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff ff16 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x1F);
 8001184:	201f      	movs	r0, #31
 8001186:	f7ff ff13 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//Set VDP	479
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff ff10 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xDF);
 8001190:	20df      	movs	r0, #223	; 0xdf
 8001192:	f7ff ff0d 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ff0a 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB4);		//HSYNC
 800119c:	20b4      	movs	r0, #180	; 0xb4
 800119e:	f7ff ff23 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);		//Set HT	928
 80011a2:	2003      	movs	r0, #3
 80011a4:	f7ff ff04 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xA0);
 80011a8:	20a0      	movs	r0, #160	; 0xa0
 80011aa:	f7ff ff01 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set HPS	46
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fefe 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x2E);
 80011b4:	202e      	movs	r0, #46	; 0x2e
 80011b6:	f7ff fefb 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x30);		//Set HPW	48
 80011ba:	2030      	movs	r0, #48	; 0x30
 80011bc:	f7ff fef8 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set LPS	15
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fef5 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x0F);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f7ff fef2 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff feef 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB6);		//VSYNC
 80011d2:	20b6      	movs	r0, #182	; 0xb6
 80011d4:	f7ff ff08 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x02);		//Set VT	525
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff fee9 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x0D);
 80011de:	200d      	movs	r0, #13
 80011e0:	f7ff fee6 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set VPS	16
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fee3 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x10);
 80011ea:	2010      	movs	r0, #16
 80011ec:	f7ff fee0 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x10);		//Set VPW	16
 80011f0:	2010      	movs	r0, #16
 80011f2:	f7ff fedd 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set FPS	8
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff feda 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x08);
 80011fc:	2008      	movs	r0, #8
 80011fe:	f7ff fed7 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xBA);
 8001202:	20ba      	movs	r0, #186	; 0xba
 8001204:	f7ff fef0 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x05);		//GPIO[3:0] out 1
 8001208:	2005      	movs	r0, #5
 800120a:	f7ff fed1 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB8);
 800120e:	20b8      	movs	r0, #184	; 0xb8
 8001210:	f7ff feea 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8001214:	2007      	movs	r0, #7
 8001216:	f7ff fecb 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//GPIO0 normal
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fec8 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xba);		//rotation
 8001220:	20ba      	movs	r0, #186	; 0xba
 8001222:	f7ff fee1 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff fec2 	bl	8000fb0 <Lcd_Write_Data>


Lcd_Write_Cmd(0xF0);		//pixel data interface
 800122c:	20f0      	movs	r0, #240	; 0xf0
 800122e:	f7ff fedb 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 8001232:	2003      	movs	r0, #3
 8001234:	f7ff febc 	bl	8000fb0 <Lcd_Write_Data>


HAL_Delay(10);
 8001238:	200a      	movs	r0, #10
 800123a:	f001 fed5 	bl	8002fe8 <HAL_Delay>

Lcd_SetArea(0, 0, 799, 479);
 800123e:	f240 13df 	movw	r3, #479	; 0x1df
 8001242:	f240 321f 	movw	r2, #799	; 0x31f
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fee9 	bl	8001020 <Lcd_SetArea>
Lcd_Write_Cmd(0x29);		//display on
 800124e:	2029      	movs	r0, #41	; 0x29
 8001250:	f7ff feca 	bl	8000fe8 <Lcd_Write_Cmd>

Lcd_Write_Cmd(0xBE);		//set PWM for B/L
 8001254:	20be      	movs	r0, #190	; 0xbe
 8001256:	f7ff fec7 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x06);
 800125a:	2006      	movs	r0, #6
 800125c:	f7ff fea8 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 8001260:	20f0      	movs	r0, #240	; 0xf0
 8001262:	f7ff fea5 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x01);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fea2 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 800126c:	20f0      	movs	r0, #240	; 0xf0
 800126e:	f7ff fe9f 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fe9c 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fe99 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xD0);
 800127e:	20d0      	movs	r0, #208	; 0xd0
 8001280:	f7ff feb2 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x0D);
 8001284:	200d      	movs	r0, #13
 8001286:	f7ff fe93 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0x2C);
 800128a:	202c      	movs	r0, #44	; 0x2c
 800128c:	f7ff feac 	bl	8000fe8 <Lcd_Write_Cmd>

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400

0800129c <TFT_Set_X>:



void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	4613      	mov	r3, r2
 80012aa:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002A);
 80012ac:	202a      	movs	r0, #42	; 0x2a
 80012ae:	f7ff fe9b 	bl	8000fe8 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_x>>8);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe79 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(start_x&0x00ff);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe73 	bl	8000fb0 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_x>>8);
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe6d 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(end_x&0x00ff);
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe67 	bl	8000fb0 <Lcd_Write_Data>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <TFT_Set_Y>:


void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	460a      	mov	r2, r1
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002B);
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f7ff fe74 	bl	8000fe8 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_y>>8);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe52 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(start_y&0x00ff);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe4c 	bl	8000fb0 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_y>>8);
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe46 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(end_y&0x00ff);
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe40 	bl	8000fb0 <Lcd_Write_Data>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <TFT_Set_Work_Area>:
}



void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4604      	mov	r4, r0
 8001340:	4608      	mov	r0, r1
 8001342:	4611      	mov	r1, r2
 8001344:	461a      	mov	r2, r3
 8001346:	4623      	mov	r3, r4
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	4603      	mov	r3, r0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	807b      	strh	r3, [r7, #2]
 8001352:	4613      	mov	r3, r2
 8001354:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff98 	bl	800129c <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 800136c:	88ba      	ldrh	r2, [r7, #4]
 800136e:	883b      	ldrh	r3, [r7, #0]
 8001370:	4413      	add	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	3b01      	subs	r3, #1
 8001376:	b29a      	uxth	r2, r3
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ffb4 	bl	80012ea <TFT_Set_Y>
	Lcd_Write_Cmd(0x2C);
 8001382:	202c      	movs	r0, #44	; 0x2c
 8001384:	f7ff fe30 	bl	8000fe8 <Lcd_Write_Cmd>
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <TFT_Clear_Screen>:


void TFT_Clear_Screen(uint16_t color)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 800139e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffc5 	bl	8001338 <TFT_Set_Work_Area>
	pin_high(RS_PORT,RS_PIN);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <TFT_Clear_Screen+0x5c>)
 80013b6:	f002 f8a5 	bl	8003504 <HAL_GPIO_WritePin>
	for(i=0; i < 384000; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e00c      	b.n	80013da <TFT_Clear_Screen+0x4a>
	{


		  tft_write_bus(color>>8,color&0x00ff);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fdc0 	bl	8000f54 <tft_write_bus>
	for(i=0; i < 384000; i++)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <TFT_Clear_Screen+0x60>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d9ee      	bls.n	80013c0 <TFT_Clear_Screen+0x30>
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020000 	.word	0x40020000
 80013f0:	0005dbff 	.word	0x0005dbff

080013f4 <TFT_Draw_Line>:
	}
}


void TFT_Draw_Line (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2, uint8_t size,uint16_t color)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	4623      	mov	r3, r4
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	4603      	mov	r3, r0
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]
 800140e:	4613      	mov	r3, r2
 8001410:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	bfb8      	it	lt
 800141c:	425b      	neglt	r3, r3
 800141e:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8001420:	883a      	ldrh	r2, [r7, #0]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	bfb8      	it	lt
 800142a:	425b      	neglt	r3, r3
 800142c:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	429a      	cmp	r2, r3
 8001434:	d201      	bcs.n	800143a <TFT_Draw_Line+0x46>
 8001436:	2301      	movs	r3, #1
 8001438:	e001      	b.n	800143e <TFT_Draw_Line+0x4a>
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001440:	88ba      	ldrh	r2, [r7, #4]
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d201      	bcs.n	800144c <TFT_Draw_Line+0x58>
 8001448:	2301      	movs	r3, #1
 800144a:	e001      	b.n	8001450 <TFT_Draw_Line+0x5c>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 800145e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001462:	b29a      	uxth	r2, r3
 8001464:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001468:	b29c      	uxth	r4, r3
 800146a:	88b9      	ldrh	r1, [r7, #4]
 800146c:	88f8      	ldrh	r0, [r7, #6]
 800146e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4623      	mov	r3, r4
 8001474:	f000 f886 	bl	8001584 <TFT_Draw_Fill_Rectangle>
		
		if(x1 == x2 && y1 == y2)
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	429a      	cmp	r2, r3
 800147e:	d103      	bne.n	8001488 <TFT_Draw_Line+0x94>
 8001480:	88ba      	ldrh	r2, [r7, #4]
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d01e      	beq.n	80014c6 <TFT_Draw_Line+0xd2>
		break;
		
		error2 = error * 2;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
		
		if(error2 > -deltaY)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	425b      	negs	r3, r3
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	dd08      	ble.n	80014aa <TFT_Draw_Line+0xb6>
		{
			error -= deltaY;
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4413      	add	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
		}
		
		if(error2 < deltaX)
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dad5      	bge.n	800145e <TFT_Draw_Line+0x6a>
		{
			error += deltaX;
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4413      	add	r3, r2
 80014b8:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	80bb      	strh	r3, [r7, #4]
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 80014c4:	e7cb      	b.n	800145e <TFT_Draw_Line+0x6a>
		break;
 80014c6:	bf00      	nop
		}
	}
}
 80014c8:	bf00      	nop
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}

080014d0 <TFT_Draw_HLine>:


void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4603      	mov	r3, r0
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 80014f2:	883b      	ldrh	r3, [r7, #0]
 80014f4:	887a      	ldrh	r2, [r7, #2]
 80014f6:	88b9      	ldrh	r1, [r7, #4]
 80014f8:	88f8      	ldrh	r0, [r7, #6]
 80014fa:	f7ff ff1d 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	81fb      	strh	r3, [r7, #14]
 8001502:	e006      	b.n	8001512 <TFT_Draw_HLine+0x42>
	Lcd_Write_Data(color);
 8001504:	8c3b      	ldrh	r3, [r7, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd52 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	3301      	adds	r3, #1
 8001510:	81fb      	strh	r3, [r7, #14]
 8001512:	89fa      	ldrh	r2, [r7, #14]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	8839      	ldrh	r1, [r7, #0]
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf1      	blt.n	8001504 <TFT_Draw_HLine+0x34>
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <TFT_Draw_VLine>:

void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 800152a:	b590      	push	{r4, r7, lr}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	461a      	mov	r2, r3
 8001538:	4623      	mov	r3, r4
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	4603      	mov	r3, r0
 800153e:	80bb      	strh	r3, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 8001548:	2300      	movs	r3, #0
 800154a:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	883a      	ldrh	r2, [r7, #0]
 8001550:	88b9      	ldrh	r1, [r7, #4]
 8001552:	88f8      	ldrh	r0, [r7, #6]
 8001554:	f7ff fef0 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 8001558:	2300      	movs	r3, #0
 800155a:	81fb      	strh	r3, [r7, #14]
 800155c:	e006      	b.n	800156c <TFT_Draw_VLine+0x42>
	Lcd_Write_Data(color);
 800155e:	8c3b      	ldrh	r3, [r7, #32]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fd25 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	3301      	adds	r3, #1
 800156a:	81fb      	strh	r3, [r7, #14]
 800156c:	89fa      	ldrh	r2, [r7, #14]
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	8839      	ldrh	r1, [r7, #0]
 8001572:	fb01 f303 	mul.w	r3, r1, r3
 8001576:	429a      	cmp	r2, r3
 8001578:	dbf1      	blt.n	800155e <TFT_Draw_VLine+0x34>
}
 800157a:	bf00      	nop
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}

08001584 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}


void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	4623      	mov	r3, r4
 8001594:	80fb      	strh	r3, [r7, #6]
 8001596:	4603      	mov	r3, r0
 8001598:	80bb      	strh	r3, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	807b      	strh	r3, [r7, #2]
 800159e:	4613      	mov	r3, r2
 80015a0:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 80015a6:	883b      	ldrh	r3, [r7, #0]
 80015a8:	887a      	ldrh	r2, [r7, #2]
 80015aa:	88b9      	ldrh	r1, [r7, #4]
 80015ac:	88f8      	ldrh	r0, [r7, #6]
 80015ae:	f7ff fec3 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e006      	b.n	80015c6 <TFT_Draw_Fill_Rectangle+0x42>
	{
		Lcd_Write_Data(color);
 80015b8:	8c3b      	ldrh	r3, [r7, #32]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fcf8 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60fb      	str	r3, [r7, #12]
 80015c6:	887b      	ldrh	r3, [r7, #2]
 80015c8:	883a      	ldrh	r2, [r7, #0]
 80015ca:	fb02 f303 	mul.w	r3, r2, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d3f0      	bcc.n	80015b8 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}

080015e0 <TFT_Draw_Circle_Helper>:
	}
}


void TFT_Draw_Circle_Helper( int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint16_t color)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b089      	sub	sp, #36	; 0x24
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	4604      	mov	r4, r0
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4623      	mov	r3, r4
 80015f0:	80fb      	strh	r3, [r7, #6]
 80015f2:	4603      	mov	r3, r0
 80015f4:	80bb      	strh	r3, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	807b      	strh	r3, [r7, #2]
 80015fa:	4613      	mov	r3, r2
 80015fc:	707b      	strb	r3, [r7, #1]
  int16_t f     = 1 - r;
 80015fe:	887b      	ldrh	r3, [r7, #2]
 8001600:	f1c3 0301 	rsb	r3, r3, #1
 8001604:	b29b      	uxth	r3, r3
 8001606:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001608:	2301      	movs	r3, #1
 800160a:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 800160c:	887b      	ldrh	r3, [r7, #2]
 800160e:	461a      	mov	r2, r3
 8001610:	03d2      	lsls	r2, r2, #15
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	b29b      	uxth	r3, r3
 8001618:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 800161e:	887b      	ldrh	r3, [r7, #2]
 8001620:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001622:	e0cd      	b.n	80017c0 <TFT_Draw_Circle_Helper+0x1e0>
    if (f >= 0) {
 8001624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0e      	blt.n	800164a <TFT_Draw_Circle_Helper+0x6a>
      y--;
 800162c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001630:	b29b      	uxth	r3, r3
 8001632:	3b01      	subs	r3, #1
 8001634:	b29b      	uxth	r3, r3
 8001636:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001638:	8a7b      	ldrh	r3, [r7, #18]
 800163a:	3302      	adds	r3, #2
 800163c:	b29b      	uxth	r3, r3
 800163e:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001640:	8afa      	ldrh	r2, [r7, #22]
 8001642:	8a7b      	ldrh	r3, [r7, #18]
 8001644:	4413      	add	r3, r2
 8001646:	b29b      	uxth	r3, r3
 8001648:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 800164a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800164e:	b29b      	uxth	r3, r3
 8001650:	3301      	adds	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001656:	8abb      	ldrh	r3, [r7, #20]
 8001658:	3302      	adds	r3, #2
 800165a:	b29b      	uxth	r3, r3
 800165c:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 800165e:	8afa      	ldrh	r2, [r7, #22]
 8001660:	8abb      	ldrh	r3, [r7, #20]
 8001662:	4413      	add	r3, r2
 8001664:	b29b      	uxth	r3, r3
 8001666:	82fb      	strh	r3, [r7, #22]
    if (cornername & 0x4) {
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	f003 0304 	and.w	r3, r3, #4
 800166e:	2b00      	cmp	r3, #0
 8001670:	d025      	beq.n	80016be <TFT_Draw_Circle_Helper+0xde>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 + y, size, size, color);
 8001672:	88fa      	ldrh	r2, [r7, #6]
 8001674:	8a3b      	ldrh	r3, [r7, #16]
 8001676:	4413      	add	r3, r2
 8001678:	b298      	uxth	r0, r3
 800167a:	88ba      	ldrh	r2, [r7, #4]
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	4413      	add	r3, r2
 8001680:	b299      	uxth	r1, r3
 8001682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001686:	b29a      	uxth	r2, r3
 8001688:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800168c:	b29c      	uxth	r4, r3
 800168e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4623      	mov	r3, r4
 8001694:	f7ff ff76 	bl	8001584 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 + x, size, size, color);
 8001698:	88fa      	ldrh	r2, [r7, #6]
 800169a:	89fb      	ldrh	r3, [r7, #14]
 800169c:	4413      	add	r3, r2
 800169e:	b298      	uxth	r0, r3
 80016a0:	88ba      	ldrh	r2, [r7, #4]
 80016a2:	8a3b      	ldrh	r3, [r7, #16]
 80016a4:	4413      	add	r3, r2
 80016a6:	b299      	uxth	r1, r3
 80016a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016b2:	b29c      	uxth	r4, r3
 80016b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016b6:	9300      	str	r3, [sp, #0]
 80016b8:	4623      	mov	r3, r4
 80016ba:	f7ff ff63 	bl	8001584 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x2) {
 80016be:	787b      	ldrb	r3, [r7, #1]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d025      	beq.n	8001714 <TFT_Draw_Circle_Helper+0x134>
      TFT_Draw_Fill_Rectangle(x0 + x, y0 - y, size, size, color);
 80016c8:	88fa      	ldrh	r2, [r7, #6]
 80016ca:	8a3b      	ldrh	r3, [r7, #16]
 80016cc:	4413      	add	r3, r2
 80016ce:	b298      	uxth	r0, r3
 80016d0:	88ba      	ldrh	r2, [r7, #4]
 80016d2:	89fb      	ldrh	r3, [r7, #14]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	b299      	uxth	r1, r3
 80016d8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016dc:	b29a      	uxth	r2, r3
 80016de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80016e2:	b29c      	uxth	r4, r3
 80016e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016e6:	9300      	str	r3, [sp, #0]
 80016e8:	4623      	mov	r3, r4
 80016ea:	f7ff ff4b 	bl	8001584 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 + y, y0 - x, size, size, color);
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	89fb      	ldrh	r3, [r7, #14]
 80016f2:	4413      	add	r3, r2
 80016f4:	b298      	uxth	r0, r3
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	8a3b      	ldrh	r3, [r7, #16]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b299      	uxth	r1, r3
 80016fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001702:	b29a      	uxth	r2, r3
 8001704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001708:	b29c      	uxth	r4, r3
 800170a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	4623      	mov	r3, r4
 8001710:	f7ff ff38 	bl	8001584 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x8) {
 8001714:	787b      	ldrb	r3, [r7, #1]
 8001716:	f003 0308 	and.w	r3, r3, #8
 800171a:	2b00      	cmp	r3, #0
 800171c:	d025      	beq.n	800176a <TFT_Draw_Circle_Helper+0x18a>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 + x, size, size, color);
 800171e:	88fa      	ldrh	r2, [r7, #6]
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	b298      	uxth	r0, r3
 8001726:	88ba      	ldrh	r2, [r7, #4]
 8001728:	8a3b      	ldrh	r3, [r7, #16]
 800172a:	4413      	add	r3, r2
 800172c:	b299      	uxth	r1, r3
 800172e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001732:	b29a      	uxth	r2, r3
 8001734:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001738:	b29c      	uxth	r4, r3
 800173a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4623      	mov	r3, r4
 8001740:	f7ff ff20 	bl	8001584 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 + y, size, size, color);
 8001744:	88fa      	ldrh	r2, [r7, #6]
 8001746:	8a3b      	ldrh	r3, [r7, #16]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b298      	uxth	r0, r3
 800174c:	88ba      	ldrh	r2, [r7, #4]
 800174e:	89fb      	ldrh	r3, [r7, #14]
 8001750:	4413      	add	r3, r2
 8001752:	b299      	uxth	r1, r3
 8001754:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001758:	b29a      	uxth	r2, r3
 800175a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800175e:	b29c      	uxth	r4, r3
 8001760:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff ff0d 	bl	8001584 <TFT_Draw_Fill_Rectangle>
    }
    if (cornername & 0x1) {
 800176a:	787b      	ldrb	r3, [r7, #1]
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d025      	beq.n	80017c0 <TFT_Draw_Circle_Helper+0x1e0>
      TFT_Draw_Fill_Rectangle(x0 - y, y0 - x, size, size, color);
 8001774:	88fa      	ldrh	r2, [r7, #6]
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	b298      	uxth	r0, r3
 800177c:	88ba      	ldrh	r2, [r7, #4]
 800177e:	8a3b      	ldrh	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	b299      	uxth	r1, r3
 8001784:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001788:	b29a      	uxth	r2, r3
 800178a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800178e:	b29c      	uxth	r4, r3
 8001790:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4623      	mov	r3, r4
 8001796:	f7ff fef5 	bl	8001584 <TFT_Draw_Fill_Rectangle>
      TFT_Draw_Fill_Rectangle(x0 - x, y0 - y, size, size, color);
 800179a:	88fa      	ldrh	r2, [r7, #6]
 800179c:	8a3b      	ldrh	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	b298      	uxth	r0, r3
 80017a2:	88ba      	ldrh	r2, [r7, #4]
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	b299      	uxth	r1, r3
 80017aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80017b4:	b29c      	uxth	r4, r3
 80017b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	4623      	mov	r3, r4
 80017bc:	f7ff fee2 	bl	8001584 <TFT_Draw_Fill_Rectangle>
  while (x<y) {
 80017c0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80017c4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f6ff af2b 	blt.w	8001624 <TFT_Draw_Circle_Helper+0x44>
    }
  }
}
 80017ce:	bf00      	nop
 80017d0:	bf00      	nop
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <TFT_Draw_Round_Rect>:


void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b085      	sub	sp, #20
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4604      	mov	r4, r0
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4623      	mov	r3, r4
 80017e8:	80fb      	strh	r3, [r7, #6]
 80017ea:	4603      	mov	r3, r0
 80017ec:	80bb      	strh	r3, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	807b      	strh	r3, [r7, #2]
 80017f2:	4613      	mov	r3, r2
 80017f4:	803b      	strh	r3, [r7, #0]

  TFT_Draw_HLine(x+r  , y    , length-2*r, size, color); // Top
 80017f6:	88fa      	ldrh	r2, [r7, #6]
 80017f8:	8b3b      	ldrh	r3, [r7, #24]
 80017fa:	4413      	add	r3, r2
 80017fc:	b298      	uxth	r0, r3
 80017fe:	8b3b      	ldrh	r3, [r7, #24]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	887a      	ldrh	r2, [r7, #2]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	b29a      	uxth	r2, r3
 800180a:	7f3b      	ldrb	r3, [r7, #28]
 800180c:	b29c      	uxth	r4, r3
 800180e:	88b9      	ldrh	r1, [r7, #4]
 8001810:	8c3b      	ldrh	r3, [r7, #32]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	4623      	mov	r3, r4
 8001816:	f7ff fe5b 	bl	80014d0 <TFT_Draw_HLine>
  TFT_Draw_HLine(x+r  , y+width-1, length-2*r, size, color); // Bottom
 800181a:	88fa      	ldrh	r2, [r7, #6]
 800181c:	8b3b      	ldrh	r3, [r7, #24]
 800181e:	4413      	add	r3, r2
 8001820:	b298      	uxth	r0, r3
 8001822:	88ba      	ldrh	r2, [r7, #4]
 8001824:	883b      	ldrh	r3, [r7, #0]
 8001826:	4413      	add	r3, r2
 8001828:	b29b      	uxth	r3, r3
 800182a:	3b01      	subs	r3, #1
 800182c:	b299      	uxth	r1, r3
 800182e:	8b3b      	ldrh	r3, [r7, #24]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	b29b      	uxth	r3, r3
 8001834:	887a      	ldrh	r2, [r7, #2]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	b29a      	uxth	r2, r3
 800183a:	7f3b      	ldrb	r3, [r7, #28]
 800183c:	b29c      	uxth	r4, r3
 800183e:	8c3b      	ldrh	r3, [r7, #32]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	4623      	mov	r3, r4
 8001844:	f7ff fe44 	bl	80014d0 <TFT_Draw_HLine>
  TFT_Draw_VLine(x    , y+r  , width-2*r, size, color); // Left
 8001848:	88ba      	ldrh	r2, [r7, #4]
 800184a:	8b3b      	ldrh	r3, [r7, #24]
 800184c:	4413      	add	r3, r2
 800184e:	b299      	uxth	r1, r3
 8001850:	8b3b      	ldrh	r3, [r7, #24]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	b29b      	uxth	r3, r3
 8001856:	883a      	ldrh	r2, [r7, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	b29a      	uxth	r2, r3
 800185c:	7f3b      	ldrb	r3, [r7, #28]
 800185e:	b29c      	uxth	r4, r3
 8001860:	88f8      	ldrh	r0, [r7, #6]
 8001862:	8c3b      	ldrh	r3, [r7, #32]
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	4623      	mov	r3, r4
 8001868:	f7ff fe5f 	bl	800152a <TFT_Draw_VLine>
  TFT_Draw_VLine(x+length-1, y+r  , width-2*r, size, color); // Right
 800186c:	88fa      	ldrh	r2, [r7, #6]
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b298      	uxth	r0, r3
 8001878:	88ba      	ldrh	r2, [r7, #4]
 800187a:	8b3b      	ldrh	r3, [r7, #24]
 800187c:	4413      	add	r3, r2
 800187e:	b299      	uxth	r1, r3
 8001880:	8b3b      	ldrh	r3, [r7, #24]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	b29b      	uxth	r3, r3
 8001886:	883a      	ldrh	r2, [r7, #0]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b29a      	uxth	r2, r3
 800188c:	7f3b      	ldrb	r3, [r7, #28]
 800188e:	b29c      	uxth	r4, r3
 8001890:	8c3b      	ldrh	r3, [r7, #32]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	f7ff fe48 	bl	800152a <TFT_Draw_VLine>

  TFT_Draw_Circle_Helper(x+r    , y+r    , r, 		 			1, size, color);
 800189a:	88fa      	ldrh	r2, [r7, #6]
 800189c:	8b3b      	ldrh	r3, [r7, #24]
 800189e:	4413      	add	r3, r2
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	b218      	sxth	r0, r3
 80018a4:	88ba      	ldrh	r2, [r7, #4]
 80018a6:	8b3b      	ldrh	r3, [r7, #24]
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	b219      	sxth	r1, r3
 80018ae:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80018b2:	8c3b      	ldrh	r3, [r7, #32]
 80018b4:	9301      	str	r3, [sp, #4]
 80018b6:	7f3b      	ldrb	r3, [r7, #28]
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2301      	movs	r3, #1
 80018bc:	f7ff fe90 	bl	80015e0 <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+r    , r, 			2, size, color);
 80018c0:	88fa      	ldrh	r2, [r7, #6]
 80018c2:	887b      	ldrh	r3, [r7, #2]
 80018c4:	4413      	add	r3, r2
 80018c6:	b29a      	uxth	r2, r3
 80018c8:	8b3b      	ldrh	r3, [r7, #24]
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	b218      	sxth	r0, r3
 80018d4:	88ba      	ldrh	r2, [r7, #4]
 80018d6:	8b3b      	ldrh	r3, [r7, #24]
 80018d8:	4413      	add	r3, r2
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b219      	sxth	r1, r3
 80018de:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80018e2:	8c3b      	ldrh	r3, [r7, #32]
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	7f3b      	ldrb	r3, [r7, #28]
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2302      	movs	r3, #2
 80018ec:	f7ff fe78 	bl	80015e0 <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+length-r-1, y+width-r-1, r,  4, size, color);
 80018f0:	88fa      	ldrh	r2, [r7, #6]
 80018f2:	887b      	ldrh	r3, [r7, #2]
 80018f4:	4413      	add	r3, r2
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	8b3b      	ldrh	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	3b01      	subs	r3, #1
 8001900:	b29b      	uxth	r3, r3
 8001902:	b218      	sxth	r0, r3
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	883b      	ldrh	r3, [r7, #0]
 8001908:	4413      	add	r3, r2
 800190a:	b29a      	uxth	r2, r3
 800190c:	8b3b      	ldrh	r3, [r7, #24]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	b29b      	uxth	r3, r3
 8001912:	3b01      	subs	r3, #1
 8001914:	b29b      	uxth	r3, r3
 8001916:	b219      	sxth	r1, r3
 8001918:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800191c:	8c3b      	ldrh	r3, [r7, #32]
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	7f3b      	ldrb	r3, [r7, #28]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	2304      	movs	r3, #4
 8001926:	f7ff fe5b 	bl	80015e0 <TFT_Draw_Circle_Helper>
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
 800192a:	88fa      	ldrh	r2, [r7, #6]
 800192c:	8b3b      	ldrh	r3, [r7, #24]
 800192e:	4413      	add	r3, r2
 8001930:	b29b      	uxth	r3, r3
 8001932:	b218      	sxth	r0, r3
 8001934:	88ba      	ldrh	r2, [r7, #4]
 8001936:	883b      	ldrh	r3, [r7, #0]
 8001938:	4413      	add	r3, r2
 800193a:	b29a      	uxth	r2, r3
 800193c:	8b3b      	ldrh	r3, [r7, #24]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	3b01      	subs	r3, #1
 8001944:	b29b      	uxth	r3, r3
 8001946:	b219      	sxth	r1, r3
 8001948:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800194c:	8c3b      	ldrh	r3, [r7, #32]
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	7f3b      	ldrb	r3, [r7, #28]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2308      	movs	r3, #8
 8001956:	f7ff fe43 	bl	80015e0 <TFT_Draw_Circle_Helper>
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	bd90      	pop	{r4, r7, pc}

08001962 <LCD_Char>:
}



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001962:	b590      	push	{r4, r7, lr}
 8001964:	b08b      	sub	sp, #44	; 0x2c
 8001966:	af02      	add	r7, sp, #8
 8001968:	60ba      	str	r2, [r7, #8]
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	4603      	mov	r3, r0
 800196e:	81fb      	strh	r3, [r7, #14]
 8001970:	460b      	mov	r3, r1
 8001972:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	777b      	strb	r3, [r7, #29]
 8001984:	2300      	movs	r3, #0
 8001986:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 800198c:	2300      	movs	r3, #0
 800198e:	763b      	strb	r3, [r7, #24]
 8001990:	e095      	b.n	8001abe <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001992:	2300      	movs	r3, #0
 8001994:	767b      	strb	r3, [r7, #25]
 8001996:	e053      	b.n	8001a40 <LCD_Char+0xde>
		{
			if(bit == 0)
 8001998:	7f3b      	ldrb	r3, [r7, #28]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d109      	bne.n	80019b2 <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 800199e:	8bfb      	ldrh	r3, [r7, #30]
 80019a0:	1c5a      	adds	r2, r3, #1
 80019a2:	83fa      	strh	r2, [r7, #30]
 80019a4:	461a      	mov	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	4413      	add	r3, r2
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 80019ae:	2380      	movs	r3, #128	; 0x80
 80019b0:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 80019b2:	7f7a      	ldrb	r2, [r7, #29]
 80019b4:	7f3b      	ldrb	r3, [r7, #28]
 80019b6:	4013      	ands	r3, r2
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <LCD_Char+0x64>
			{
				set_pixels++;
 80019be:	8b7b      	ldrh	r3, [r7, #26]
 80019c0:	3301      	adds	r3, #1
 80019c2:	837b      	strh	r3, [r7, #26]
 80019c4:	e036      	b.n	8001a34 <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 80019c6:	8b7b      	ldrh	r3, [r7, #26]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d033      	beq.n	8001a34 <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80019d2:	461a      	mov	r2, r3
 80019d4:	7e7b      	ldrb	r3, [r7, #25]
 80019d6:	441a      	add	r2, r3
 80019d8:	8b7b      	ldrh	r3, [r7, #26]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	b29a      	uxth	r2, r3
 80019de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	fb12 f303 	smulbb	r3, r2, r3
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	4413      	add	r3, r2
 80019ee:	b298      	uxth	r0, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80019f6:	461a      	mov	r2, r3
 80019f8:	7e3b      	ldrb	r3, [r7, #24]
 80019fa:	4413      	add	r3, r2
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	fb12 f303 	smulbb	r3, r2, r3
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	89bb      	ldrh	r3, [r7, #12]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	b299      	uxth	r1, r3
 8001a10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	8b7a      	ldrh	r2, [r7, #26]
 8001a18:	fb12 f303 	smulbb	r3, r2, r3
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a22:	b29c      	uxth	r4, r3
 8001a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	f7ff fdaa 	bl	8001584 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001a34:	7f3b      	ldrb	r3, [r7, #28]
 8001a36:	085b      	lsrs	r3, r3, #1
 8001a38:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001a3a:	7e7b      	ldrb	r3, [r7, #25]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	767b      	strb	r3, [r7, #25]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	789b      	ldrb	r3, [r3, #2]
 8001a44:	7e7a      	ldrb	r2, [r7, #25]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d3a6      	bcc.n	8001998 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001a4a:	8b7b      	ldrh	r3, [r7, #26]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d033      	beq.n	8001ab8 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001a56:	461a      	mov	r2, r3
 8001a58:	7e7b      	ldrb	r3, [r7, #25]
 8001a5a:	441a      	add	r2, r3
 8001a5c:	8b7b      	ldrh	r3, [r7, #26]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a66:	b29b      	uxth	r3, r3
 8001a68:	fb12 f303 	smulbb	r3, r2, r3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	89fb      	ldrh	r3, [r7, #14]
 8001a70:	4413      	add	r3, r2
 8001a72:	b298      	uxth	r0, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	7e3b      	ldrb	r3, [r7, #24]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	fb12 f303 	smulbb	r3, r2, r3
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	89bb      	ldrh	r3, [r7, #12]
 8001a90:	4413      	add	r3, r2
 8001a92:	b299      	uxth	r1, r3
 8001a94:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	8b7a      	ldrh	r2, [r7, #26]
 8001a9c:	fb12 f303 	smulbb	r3, r2, r3
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001aa6:	b29c      	uxth	r4, r3
 8001aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4623      	mov	r3, r4
 8001ab0:	f7ff fd68 	bl	8001584 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001ab8:	7e3b      	ldrb	r3, [r7, #24]
 8001aba:	3301      	adds	r3, #1
 8001abc:	763b      	strb	r3, [r7, #24]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	78db      	ldrb	r3, [r3, #3]
 8001ac2:	7e3a      	ldrb	r2, [r7, #24]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	f4ff af64 	bcc.w	8001992 <LCD_Char+0x30>
		}
	}
}
 8001aca:	bf00      	nop
 8001acc:	bf00      	nop
 8001ace:	3724      	adds	r7, #36	; 0x24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd90      	pop	{r4, r7, pc}

08001ad4 <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001ad4:	b590      	push	{r4, r7, lr}
 8001ad6:	b08f      	sub	sp, #60	; 0x3c
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	60ba      	str	r2, [r7, #8]
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	4603      	mov	r3, r0
 8001ae0:	81fb      	strh	r3, [r7, #14]
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001aea:	89bb      	ldrh	r3, [r7, #12]
 8001aec:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	220c      	movs	r2, #12
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 ff4d 	bl	8004996 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001b00:	e056      	b.n	8001bb0 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001b02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b04:	68ba      	ldr	r2, [r7, #8]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8001b0e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b12:	2b0a      	cmp	r3, #10
 8001b14:	d10f      	bne.n	8001b36 <LCD_Font+0x62>
		{
			cursor_x = x;
 8001b16:	89fb      	ldrh	r3, [r7, #14]
 8001b18:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001b1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	fb12 f303 	smulbb	r3, r2, r3
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b2e:	4413      	add	r3, r2
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001b34:	e039      	b.n	8001baa <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8001b36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001b3a:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d333      	bcc.n	8001baa <LCD_Font+0xd6>
 8001b42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b46:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d82d      	bhi.n	8001baa <LCD_Font+0xd6>
 8001b4e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b52:	2b0d      	cmp	r3, #13
 8001b54:	d029      	beq.n	8001baa <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001b56:	6a3a      	ldr	r2, [r7, #32]
 8001b58:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b5c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001b60:	1a5b      	subs	r3, r3, r1
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	18d1      	adds	r1, r2, r3
 8001b66:	f107 0314 	add.w	r3, r7, #20
 8001b6a:	2208      	movs	r2, #8
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f002 ff12 	bl	8004996 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001b72:	f107 041c 	add.w	r4, r7, #28
 8001b76:	f107 0214 	add.w	r2, r7, #20
 8001b7a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001b7e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001b82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f7ff fee8 	bl	8001962 <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001b92:	7e3b      	ldrb	r3, [r7, #24]
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	fb12 f303 	smulbb	r3, r2, r3
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001baa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001bac:	3301      	adds	r3, #1
 8001bae:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001bb0:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f7fe fb64 	bl	8000280 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	429c      	cmp	r4, r3
 8001bbc:	d3a1      	bcc.n	8001b02 <LCD_Font+0x2e>
		}
	}
}
 8001bbe:	bf00      	nop
 8001bc0:	bf00      	nop
 8001bc2:	3734      	adds	r7, #52	; 0x34
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <LCD_FillTriangle>:

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b091      	sub	sp, #68	; 0x44
 8001bcc:	af02      	add	r7, sp, #8
 8001bce:	4604      	mov	r4, r0
 8001bd0:	4608      	mov	r0, r1
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4623      	mov	r3, r4
 8001bd8:	80fb      	strh	r3, [r7, #6]
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80bb      	strh	r3, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	807b      	strh	r3, [r7, #2]
 8001be2:	4613      	mov	r3, r2
 8001be4:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 8001be6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001bea:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dd0b      	ble.n	8001c0a <LCD_FillTriangle+0x42>
		swap(y0, y1);
 8001bf2:	88bb      	ldrh	r3, [r7, #4]
 8001bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001bf6:	883b      	ldrh	r3, [r7, #0]
 8001bf8:	80bb      	strh	r3, [r7, #4]
 8001bfa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001bfc:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	80fb      	strh	r3, [r7, #6]
 8001c06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c08:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 8001c0a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001c0e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001c12:	429a      	cmp	r2, r3
 8001c14:	dd0f      	ble.n	8001c36 <LCD_FillTriangle+0x6e>
		swap(y2, y1);
 8001c16:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001c1a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c1c:	883b      	ldrh	r3, [r7, #0]
 8001c1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001c22:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c24:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 8001c26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001c2a:	843b      	strh	r3, [r7, #32]
 8001c2c:	887b      	ldrh	r3, [r7, #2]
 8001c2e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001c32:	8c3b      	ldrh	r3, [r7, #32]
 8001c34:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8001c36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	dd0b      	ble.n	8001c5a <LCD_FillTriangle+0x92>
		swap(y0, y1);
 8001c42:	88bb      	ldrh	r3, [r7, #4]
 8001c44:	83fb      	strh	r3, [r7, #30]
 8001c46:	883b      	ldrh	r3, [r7, #0]
 8001c48:	80bb      	strh	r3, [r7, #4]
 8001c4a:	8bfb      	ldrh	r3, [r7, #30]
 8001c4c:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001c4e:	88fb      	ldrh	r3, [r7, #6]
 8001c50:	83bb      	strh	r3, [r7, #28]
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	80fb      	strh	r3, [r7, #6]
 8001c56:	8bbb      	ldrh	r3, [r7, #28]
 8001c58:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001c5a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001c5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d136      	bne.n	8001cd4 <LCD_FillTriangle+0x10c>
		a = b = x0;
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001c6a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001c6c:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(x1 < a)      a = x1;
 8001c6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c72:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c76:	429a      	cmp	r2, r3
 8001c78:	da02      	bge.n	8001c80 <LCD_FillTriangle+0xb8>
 8001c7a:	887b      	ldrh	r3, [r7, #2]
 8001c7c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001c7e:	e007      	b.n	8001c90 <LCD_FillTriangle+0xc8>
		else if(x1 > b) b = x1;
 8001c80:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001c84:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	dd01      	ble.n	8001c90 <LCD_FillTriangle+0xc8>
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(x2 < a)      a = x2;
 8001c90:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001c94:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	da03      	bge.n	8001ca4 <LCD_FillTriangle+0xdc>
 8001c9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ca0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ca2:	e008      	b.n	8001cb6 <LCD_FillTriangle+0xee>
		else if(x2 > b) b = x2;
 8001ca4:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001ca8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001cac:	429a      	cmp	r2, r3
 8001cae:	dd02      	ble.n	8001cb6 <LCD_FillTriangle+0xee>
 8001cb0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001cb4:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y0, b - a + 1,1, color);
 8001cb6:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001cb8:	88b9      	ldrh	r1, [r7, #4]
 8001cba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f7ff fbff 	bl	80014d0 <TFT_Draw_HLine>
		return;
 8001cd2:	e0d2      	b.n	8001e7a <LCD_FillTriangle+0x2b2>
	}

	int16_t	dx01 = x1 - x0,
 8001cd4:	887a      	ldrh	r2, [r7, #2]
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	837b      	strh	r3, [r7, #26]
			dy01 = y1 - y0,
 8001cde:	883a      	ldrh	r2, [r7, #0]
 8001ce0:	88bb      	ldrh	r3, [r7, #4]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	833b      	strh	r3, [r7, #24]
			dx02 = x2 - x0,
 8001ce8:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001cec:	88fb      	ldrh	r3, [r7, #6]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	82fb      	strh	r3, [r7, #22]
			dy02 = y2 - y0,
 8001cf4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	82bb      	strh	r3, [r7, #20]
			dx12 = x2 - x1,
 8001d00:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d04:	887b      	ldrh	r3, [r7, #2]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	827b      	strh	r3, [r7, #18]
			dy12 = y2 - y1;
 8001d0c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001d10:	883b      	ldrh	r3, [r7, #0]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	823b      	strh	r3, [r7, #16]
	int32_t	sa   = 0,
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			sb   = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62bb      	str	r3, [r7, #40]	; 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2) last = y1;   // Include y1 scanline
 8001d20:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d102      	bne.n	8001d32 <LCD_FillTriangle+0x16a>
 8001d2c:	883b      	ldrh	r3, [r7, #0]
 8001d2e:	863b      	strh	r3, [r7, #48]	; 0x30
 8001d30:	e003      	b.n	8001d3a <LCD_FillTriangle+0x172>
	else last = y1 - 1; // Skip it
 8001d32:	883b      	ldrh	r3, [r7, #0]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	863b      	strh	r3, [r7, #48]	; 0x30

	for(y = y0; y <= last; y++) {
 8001d3a:	88bb      	ldrh	r3, [r7, #4]
 8001d3c:	867b      	strh	r3, [r7, #50]	; 0x32
 8001d3e:	e03d      	b.n	8001dbc <LCD_FillTriangle+0x1f4>
		a = x0 + sa / dy01;
 8001d40:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d46:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8001d54:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d5a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	88fb      	ldrh	r3, [r7, #6]
 8001d62:	4413      	add	r3, r2
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx01;
 8001d68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6e:	4413      	add	r3, r2
 8001d70:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8001d72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d78:	4413      	add	r3, r2
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8001d7c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001d80:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dd05      	ble.n	8001d94 <LCD_FillTriangle+0x1cc>
 8001d88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d8a:	81bb      	strh	r3, [r7, #12]
 8001d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001d8e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001d90:	89bb      	ldrh	r3, [r7, #12]
 8001d92:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b-a+1,1, color);
 8001d94:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001d96:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001d98:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001d9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	3301      	adds	r3, #1
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2301      	movs	r3, #1
 8001dac:	f7ff fb90 	bl	80014d0 <TFT_Draw_HLine>
	for(y = y0; y <= last; y++) {
 8001db0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	867b      	strh	r3, [r7, #50]	; 0x32
 8001dbc:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001dc0:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	ddbb      	ble.n	8001d40 <LCD_FillTriangle+0x178>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 8001dc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001dcc:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001dd0:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001dd4:	1a8a      	subs	r2, r1, r2
 8001dd6:	fb02 f303 	mul.w	r3, r2, r3
 8001dda:	62fb      	str	r3, [r7, #44]	; 0x2c
	sb = dx02 * (y - y0);
 8001ddc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001de0:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8001de4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001de8:	1a8a      	subs	r2, r1, r2
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	62bb      	str	r3, [r7, #40]	; 0x28
	for(; y <= y2; y++) {
 8001df0:	e03d      	b.n	8001e6e <LCD_FillTriangle+0x2a6>
		a = x1 + sa / dy12;
 8001df2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001df8:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	4413      	add	r3, r2
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 8001e06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4413      	add	r3, r2
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx12;
 8001e1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e20:	4413      	add	r3, r2
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 8001e24:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e2a:	4413      	add	r3, r2
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8001e2e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8001e32:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001e36:	429a      	cmp	r2, r3
 8001e38:	dd05      	ble.n	8001e46 <LCD_FillTriangle+0x27e>
 8001e3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e3c:	81fb      	strh	r3, [r7, #14]
 8001e3e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001e40:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e42:	89fb      	ldrh	r3, [r7, #14]
 8001e44:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b - a + 1,1, color);
 8001e46:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8001e48:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8001e4a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001e4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	3301      	adds	r3, #1
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	f7ff fb37 	bl	80014d0 <TFT_Draw_HLine>
	for(; y <= y2; y++) {
 8001e62:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	867b      	strh	r3, [r7, #50]	; 0x32
 8001e6e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001e72:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001e76:	429a      	cmp	r2, r3
 8001e78:	ddbb      	ble.n	8001df2 <LCD_FillTriangle+0x22a>
	}
}
 8001e7a:	373c      	adds	r7, #60	; 0x3c
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd90      	pop	{r4, r7, pc}

08001e80 <rainbow>:


uint16_t rainbow(uint16_t value)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	80fb      	strh	r3, [r7, #6]
  // Value is expected to be in range 0-127
  // The value is converted to a spectrum colour from 0 = blue through to 127 = red

	uint16_t red = 0; // Red is the top 5 bits of a 16 bit colour value
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	81fb      	strh	r3, [r7, #14]
	uint16_t green = 0;// Green is the middle 6 bits
 8001e8e:	2300      	movs	r3, #0
 8001e90:	81bb      	strh	r3, [r7, #12]
	uint16_t blue = 0; // Blue is the bottom 5 bits
 8001e92:	2300      	movs	r3, #0
 8001e94:	817b      	strh	r3, [r7, #10]

	uint16_t quadrant = value / 32;
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	813b      	strh	r3, [r7, #8]

  if (quadrant == 0) {
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d109      	bne.n	8001eb6 <rainbow+0x36>
    blue = 31;
 8001ea2:	231f      	movs	r3, #31
 8001ea4:	817b      	strh	r3, [r7, #10]
    green = 2 * (value % 32);
 8001ea6:	88fb      	ldrh	r3, [r7, #6]
 8001ea8:	f003 031f 	and.w	r3, r3, #31
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 1) {
 8001eb6:	893b      	ldrh	r3, [r7, #8]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d109      	bne.n	8001ed0 <rainbow+0x50>
    blue = 31 - (value % 32);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	f003 031f 	and.w	r3, r3, #31
 8001ec6:	817b      	strh	r3, [r7, #10]
    green = 63;
 8001ec8:	233f      	movs	r3, #63	; 0x3f
 8001eca:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 2) {
 8001ed0:	893b      	ldrh	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d107      	bne.n	8001ee6 <rainbow+0x66>
    blue = 0;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	817b      	strh	r3, [r7, #10]
    green = 63;
 8001eda:	233f      	movs	r3, #63	; 0x3f
 8001edc:	81bb      	strh	r3, [r7, #12]
    red = value % 32;
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 3) {
 8001ee6:	893b      	ldrh	r3, [r7, #8]
 8001ee8:	2b03      	cmp	r3, #3
 8001eea:	d10c      	bne.n	8001f06 <rainbow+0x86>
    blue = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	817b      	strh	r3, [r7, #10]
    green = 63 - 2 * (value % 32);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	f003 031f 	and.w	r3, r3, #31
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001f00:	81bb      	strh	r3, [r7, #12]
    red = 31;
 8001f02:	231f      	movs	r3, #31
 8001f04:	81fb      	strh	r3, [r7, #14]
  }
  return (red << 11) + (green << 5) + blue;
 8001f06:	89fb      	ldrh	r3, [r7, #14]
 8001f08:	02db      	lsls	r3, r3, #11
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	89bb      	ldrh	r3, [r7, #12]
 8001f0e:	015b      	lsls	r3, r3, #5
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	897b      	ldrh	r3, [r7, #10]
 8001f18:	4413      	add	r3, r2
 8001f1a:	b29b      	uxth	r3, r3
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3714      	adds	r7, #20
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
 8001f34:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	69b9      	ldr	r1, [r7, #24]
 8001f3e:	683a      	ldr	r2, [r7, #0]
 8001f40:	1a8a      	subs	r2, r1, r2
 8001f42:	fb03 f202 	mul.w	r2, r3, r2
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1acb      	subs	r3, r1, r3
 8001f4c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	4413      	add	r3, r2
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <ringMeter>:

int ringMeter(int value, int vmin, int vmax, int x, int y, int r, uint16_t scheme){
 8001f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f62:	b099      	sub	sp, #100	; 0x64
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	603b      	str	r3, [r7, #0]
  // Minimum value of r is about 52 before value text intrudes on ring
  // drawing the text first is an option
  x += r; y += r;   // Calculate coords of centre of ring
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f72:	4413      	add	r3, r2
 8001f74:	603b      	str	r3, [r7, #0]
 8001f76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f7a:	4413      	add	r3, r2
 8001f7c:	66bb      	str	r3, [r7, #104]	; 0x68
  int w = r / 6;    // Width of outer ring is 1/4 of radius
 8001f7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f80:	4a36      	ldr	r2, [pc, #216]	; (800205c <ringMeter+0xfc>)
 8001f82:	fb82 1203 	smull	r1, r2, r2, r3
 8001f86:	17db      	asrs	r3, r3, #31
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  int angle = 180;  // Half the sweep angle of meter (300 degrees)
 8001f8c:	23b4      	movs	r3, #180	; 0xb4
 8001f8e:	643b      	str	r3, [r7, #64]	; 0x40
//  int text_colour = 0; // To hold the text colour
  int v = map(value, vmin, vmax, -angle, angle); // Map the value to an angle v
 8001f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f92:	425a      	negs	r2, r3
 8001f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ffc2 	bl	8001f28 <map>
 8001fa4:	63f8      	str	r0, [r7, #60]	; 0x3c
  uint16_t seg = 5; // Segments are 5 degrees wide = 60 segments for 300 degrees
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t inc = 5; // Draw segments every 5 degrees, increase to 10 for segmented ring
 8001faa:	2305      	movs	r3, #5
 8001fac:	873b      	strh	r3, [r7, #56]	; 0x38

  // Draw colour blocks every inc degrees
  for (int i = -angle; i < angle; i += inc) {
 8001fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb0:	425b      	negs	r3, r3
 8001fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fb4:	e1d8      	b.n	8002368 <ringMeter+0x408>
    // Choose colour from scheme
    int colour = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (scheme) {
 8001fba:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d84e      	bhi.n	8002060 <ringMeter+0x100>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <ringMeter+0x68>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001fe9 	.word	0x08001fe9
 8001fd0:	08001ff1 	.word	0x08001ff1
 8001fd4:	08001ff7 	.word	0x08001ff7
 8001fd8:	08002019 	.word	0x08002019
 8001fdc:	0800203b 	.word	0x0800203b
      case 0: colour = RED; break; // Fixed colour
 8001fe0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fe4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fe6:	e03e      	b.n	8002066 <ringMeter+0x106>
      case 1: colour = GREEN; break; // Fixed colour
 8001fe8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001fec:	64bb      	str	r3, [r7, #72]	; 0x48
 8001fee:	e03a      	b.n	8002066 <ringMeter+0x106>
      case 2: colour = BLUE; break; // Fixed colour
 8001ff0:	231f      	movs	r3, #31
 8001ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ff4:	e037      	b.n	8002066 <ringMeter+0x106>
      case 3: colour = rainbow(map(i, -angle, angle, 0, 127)); break; // Full spectrum blue to red
 8001ff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ff8:	4259      	negs	r1, r3
 8001ffa:	237f      	movs	r3, #127	; 0x7f
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	2300      	movs	r3, #0
 8002000:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002002:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002004:	f7ff ff90 	bl	8001f28 <map>
 8002008:	4603      	mov	r3, r0
 800200a:	b29b      	uxth	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	f7ff ff37 	bl	8001e80 <rainbow>
 8002012:	4603      	mov	r3, r0
 8002014:	64bb      	str	r3, [r7, #72]	; 0x48
 8002016:	e026      	b.n	8002066 <ringMeter+0x106>
      case 4: colour = rainbow(map(i, -angle, angle, 63, 127)); break; // Green to red (high temperature etc)
 8002018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201a:	4259      	negs	r1, r3
 800201c:	237f      	movs	r3, #127	; 0x7f
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	233f      	movs	r3, #63	; 0x3f
 8002022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002024:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002026:	f7ff ff7f 	bl	8001f28 <map>
 800202a:	4603      	mov	r3, r0
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff ff26 	bl	8001e80 <rainbow>
 8002034:	4603      	mov	r3, r0
 8002036:	64bb      	str	r3, [r7, #72]	; 0x48
 8002038:	e015      	b.n	8002066 <ringMeter+0x106>
      case 5: colour = rainbow(map(i, -angle, angle, 127, 63)); break; // Red to green (low battery etc)
 800203a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800203c:	4259      	negs	r1, r3
 800203e:	233f      	movs	r3, #63	; 0x3f
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	237f      	movs	r3, #127	; 0x7f
 8002044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002046:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002048:	f7ff ff6e 	bl	8001f28 <map>
 800204c:	4603      	mov	r3, r0
 800204e:	b29b      	uxth	r3, r3
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff ff15 	bl	8001e80 <rainbow>
 8002056:	4603      	mov	r3, r0
 8002058:	64bb      	str	r3, [r7, #72]	; 0x48
 800205a:	e004      	b.n	8002066 <ringMeter+0x106>
 800205c:	2aaaaaab 	.word	0x2aaaaaab
      default: colour = BLUE; break; // Fixed colour
 8002060:	231f      	movs	r3, #31
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
 8002064:	bf00      	nop
    }

    // Calculate pair of coordinates for segment start
    float sx = cos((i - 90) * 0.0174532925);
 8002066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002068:	3b5a      	subs	r3, #90	; 0x5a
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fa62 	bl	8000534 <__aeabi_i2d>
 8002070:	a3c3      	add	r3, pc, #780	; (adr r3, 8002380 <ringMeter+0x420>)
 8002072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002076:	f7fe fac7 	bl	8000608 <__aeabi_dmul>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	ec43 2b17 	vmov	d7, r2, r3
 8002082:	eeb0 0a47 	vmov.f32	s0, s14
 8002086:	eef0 0a67 	vmov.f32	s1, s15
 800208a:	f004 fd01 	bl	8006a90 <cos>
 800208e:	ec53 2b10 	vmov	r2, r3, d0
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fd8f 	bl	8000bb8 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	637b      	str	r3, [r7, #52]	; 0x34
    float sy = sin((i - 90) * 0.0174532925);
 800209e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020a0:	3b5a      	subs	r3, #90	; 0x5a
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fa46 	bl	8000534 <__aeabi_i2d>
 80020a8:	a3b5      	add	r3, pc, #724	; (adr r3, 8002380 <ringMeter+0x420>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe faab 	bl	8000608 <__aeabi_dmul>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	ec43 2b17 	vmov	d7, r2, r3
 80020ba:	eeb0 0a47 	vmov.f32	s0, s14
 80020be:	eef0 0a67 	vmov.f32	s1, s15
 80020c2:	f004 fd39 	bl	8006b38 <sin>
 80020c6:	ec53 2b10 	vmov	r2, r3, d0
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f7fe fd73 	bl	8000bb8 <__aeabi_d2f>
 80020d2:	4603      	mov	r3, r0
 80020d4:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t x0 = sx * (r - w) + x;
 80020d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80020d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	ee07 3a90 	vmov	s15, r3
 80020e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	ee07 3a90 	vmov	s15, r3
 80020f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fe:	ee17 3a90 	vmov	r3, s15
 8002102:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t y0 = sy * (r - w) + y;
 8002104:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002106:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	ee07 3a90 	vmov	s15, r3
 800210e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002112:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800211c:	ee07 3a90 	vmov	s15, r3
 8002120:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212c:	ee17 3a90 	vmov	r3, s15
 8002130:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t x1 = sx * r + x;
 8002132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	ee07 3a90 	vmov	s15, r3
 800214a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002156:	ee17 3a90 	vmov	r3, s15
 800215a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t y1 = sy * r + y;
 800215c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800215e:	ee07 3a90 	vmov	s15, r3
 8002162:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002166:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800216a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002170:	ee07 3a90 	vmov	s15, r3
 8002174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002180:	ee17 3a90 	vmov	r3, s15
 8002184:	853b      	strh	r3, [r7, #40]	; 0x28

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * 0.0174532925);
 8002186:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8002188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800218a:	4413      	add	r3, r2
 800218c:	3b5a      	subs	r3, #90	; 0x5a
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f9d0 	bl	8000534 <__aeabi_i2d>
 8002194:	a37a      	add	r3, pc, #488	; (adr r3, 8002380 <ringMeter+0x420>)
 8002196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219a:	f7fe fa35 	bl	8000608 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	ec43 2b17 	vmov	d7, r2, r3
 80021a6:	eeb0 0a47 	vmov.f32	s0, s14
 80021aa:	eef0 0a67 	vmov.f32	s1, s15
 80021ae:	f004 fc6f 	bl	8006a90 <cos>
 80021b2:	ec53 2b10 	vmov	r2, r3, d0
 80021b6:	4610      	mov	r0, r2
 80021b8:	4619      	mov	r1, r3
 80021ba:	f7fe fcfd 	bl	8000bb8 <__aeabi_d2f>
 80021be:	4603      	mov	r3, r0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    float sy2 = sin((i + seg - 90) * 0.0174532925);
 80021c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80021c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c6:	4413      	add	r3, r2
 80021c8:	3b5a      	subs	r3, #90	; 0x5a
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7fe f9b2 	bl	8000534 <__aeabi_i2d>
 80021d0:	a36b      	add	r3, pc, #428	; (adr r3, 8002380 <ringMeter+0x420>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fa17 	bl	8000608 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ec43 2b17 	vmov	d7, r2, r3
 80021e2:	eeb0 0a47 	vmov.f32	s0, s14
 80021e6:	eef0 0a67 	vmov.f32	s1, s15
 80021ea:	f004 fca5 	bl	8006b38 <sin>
 80021ee:	ec53 2b10 	vmov	r2, r3, d0
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fcdf 	bl	8000bb8 <__aeabi_d2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	623b      	str	r3, [r7, #32]
    int x2 = sx2 * (r - w) + x;
 80021fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	ee07 3a90 	vmov	s15, r3
 8002208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800220c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002210:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	ee07 3a90 	vmov	s15, r3
 800221a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002222:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002226:	ee17 3a90 	vmov	r3, s15
 800222a:	61fb      	str	r3, [r7, #28]
    int y2 = sy2 * (r - w) + y;
 800222c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223a:	edd7 7a08 	vldr	s15, [r7, #32]
 800223e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002242:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002250:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002254:	ee17 3a90 	vmov	r3, s15
 8002258:	61bb      	str	r3, [r7, #24]
    int x3 = sx2 * r + x;
 800225a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800225c:	ee07 3a90 	vmov	s15, r3
 8002260:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002264:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002268:	ee27 7a27 	vmul.f32	s14, s14, s15
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227e:	ee17 3a90 	vmov	r3, s15
 8002282:	617b      	str	r3, [r7, #20]
    int y3 = sy2 * r + y;
 8002284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002286:	ee07 3a90 	vmov	s15, r3
 800228a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800228e:	edd7 7a08 	vldr	s15, [r7, #32]
 8002292:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002296:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002298:	ee07 3a90 	vmov	s15, r3
 800229c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a8:	ee17 3a90 	vmov	r3, s15
 80022ac:	613b      	str	r3, [r7, #16]

    if (i < v) { // Fill in coloured segments with 2 triangles
 80022ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	429a      	cmp	r2, r3
 80022b4:	da2c      	bge.n	8002310 <ringMeter+0x3b0>

    	LCD_FillTriangle(x0, y0, x1, y1, x2, y2, colour);
 80022b6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80022ba:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	; 0x2c
 80022be:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 80022c2:	f9b7 6028 	ldrsh.w	r6, [r7, #40]	; 0x28
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	b212      	sxth	r2, r2
 80022ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80022d0:	b289      	uxth	r1, r1
 80022d2:	9102      	str	r1, [sp, #8]
 80022d4:	9201      	str	r2, [sp, #4]
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	4633      	mov	r3, r6
 80022da:	462a      	mov	r2, r5
 80022dc:	4621      	mov	r1, r4
 80022de:	f7ff fc73 	bl	8001bc8 <LCD_FillTriangle>
    	LCD_FillTriangle(x1, y1, x2, y2, x3, y3, colour);
 80022e2:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 80022e6:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	b21d      	sxth	r5, r3
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	b21e      	sxth	r6, r3
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	b212      	sxth	r2, r2
 80022fa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80022fc:	b289      	uxth	r1, r1
 80022fe:	9102      	str	r1, [sp, #8]
 8002300:	9201      	str	r2, [sp, #4]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	4633      	mov	r3, r6
 8002306:	462a      	mov	r2, r5
 8002308:	4621      	mov	r1, r4
 800230a:	f7ff fc5d 	bl	8001bc8 <LCD_FillTriangle>
 800230e:	e027      	b.n	8002360 <ringMeter+0x400>

    }
    else // Fill in blank segments
    {

    	LCD_FillTriangle(x0, y0, x1, y1, x2, y2, BLUE);
 8002310:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8002314:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8002318:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 800231c:	f9b7 5028 	ldrsh.w	r5, [r7, #40]	; 0x28
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	b21b      	sxth	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	b212      	sxth	r2, r2
 8002328:	261f      	movs	r6, #31
 800232a:	9602      	str	r6, [sp, #8]
 800232c:	9201      	str	r2, [sp, #4]
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	462b      	mov	r3, r5
 8002332:	4622      	mov	r2, r4
 8002334:	f7ff fc48 	bl	8001bc8 <LCD_FillTriangle>
    	LCD_FillTriangle(x1, y1, x2, y2, x3, y3, BLUE);
 8002338:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 800233c:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	b21c      	sxth	r4, r3
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	b21d      	sxth	r5, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	b21b      	sxth	r3, r3
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	b212      	sxth	r2, r2
 8002350:	261f      	movs	r6, #31
 8002352:	9602      	str	r6, [sp, #8]
 8002354:	9201      	str	r2, [sp, #4]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	462b      	mov	r3, r5
 800235a:	4622      	mov	r2, r4
 800235c:	f7ff fc34 	bl	8001bc8 <LCD_FillTriangle>
  for (int i = -angle; i < angle; i += inc) {
 8002360:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002364:	4413      	add	r3, r2
 8002366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800236a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800236c:	429a      	cmp	r2, r3
 800236e:	f6ff ae22 	blt.w	8001fb6 <ringMeter+0x56>
    }


  }

  return x + r;
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002376:	4413      	add	r3, r2
}
 8002378:	4618      	mov	r0, r3
 800237a:	3754      	adds	r7, #84	; 0x54
 800237c:	46bd      	mov	sp, r7
 800237e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002380:	a1fae711 	.word	0xa1fae711
 8002384:	3f91df46 	.word	0x3f91df46

08002388 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800238e:	f107 030c 	add.w	r3, r7, #12
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
 8002398:	609a      	str	r2, [r3, #8]
 800239a:	60da      	str	r2, [r3, #12]
 800239c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239e:	2300      	movs	r3, #0
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	4b2b      	ldr	r3, [pc, #172]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a2a      	ldr	r2, [pc, #168]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b28      	ldr	r3, [pc, #160]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b6:	60bb      	str	r3, [r7, #8]
 80023b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ba:	2300      	movs	r3, #0
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	4b24      	ldr	r3, [pc, #144]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	4a23      	ldr	r2, [pc, #140]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	607b      	str	r3, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d6:	2300      	movs	r3, #0
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	4a1c      	ldr	r2, [pc, #112]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	6313      	str	r3, [r2, #48]	; 0x30
 80023e6:	4b1a      	ldr	r3, [pc, #104]	; (8002450 <MX_GPIO_Init+0xc8>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	603b      	str	r3, [r7, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 80023f2:	2200      	movs	r2, #0
 80023f4:	f248 31ff 	movw	r1, #33791	; 0x83ff
 80023f8:	4816      	ldr	r0, [pc, #88]	; (8002454 <MX_GPIO_Init+0xcc>)
 80023fa:	f001 f883 	bl	8003504 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D8_Pin|D9_Pin|D10_Pin|D11_Pin
 80023fe:	2200      	movs	r2, #0
 8002400:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002404:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_GPIO_Init+0xd0>)
 8002406:	f001 f87d 	bl	8003504 <HAL_GPIO_WritePin>
                          |WR_Pin|RD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800240a:	f248 33ff 	movw	r3, #33791	; 0x83ff
 800240e:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002410:	2301      	movs	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002418:	2303      	movs	r3, #3
 800241a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241c:	f107 030c 	add.w	r3, r7, #12
 8002420:	4619      	mov	r1, r3
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <MX_GPIO_Init+0xcc>)
 8002424:	f000 feea 	bl	80031fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002428:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800242c:	60fb      	str	r3, [r7, #12]
                          |D12_Pin|D13_Pin|D14_Pin|D15_Pin
                          |WR_Pin|RD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	4619      	mov	r1, r3
 8002440:	4805      	ldr	r0, [pc, #20]	; (8002458 <MX_GPIO_Init+0xd0>)
 8002442:	f000 fedb 	bl	80031fc <HAL_GPIO_Init>

}
 8002446:	bf00      	nop
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020000 	.word	0x40020000
 8002458:	40020400 	.word	0x40020400
 800245c:	00000000 	.word	0x00000000

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b099      	sub	sp, #100	; 0x64
 8002464:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002466:	f000 fd4d 	bl	8002f04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800246a:	f000 fb87 	bl	8002b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246e:	f7ff ff8b 	bl	8002388 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 8002472:	f7fe fe1f 	bl	80010b4 <Init_SSD1963>


  //  XPT2046_Init();
    TFT_Clear_Screen(RED);
 8002476:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800247a:	f7fe ff89 	bl	8001390 <TFT_Clear_Screen>
    LCD_Font(120, 450, "SSD1963", _Open_Sans_Bold_128, 1, RED);
 800247e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2301      	movs	r3, #1
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	4ba3      	ldr	r3, [pc, #652]	; (8002718 <main+0x2b8>)
 800248a:	4aa4      	ldr	r2, [pc, #656]	; (800271c <main+0x2bc>)
 800248c:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8002490:	2078      	movs	r0, #120	; 0x78
 8002492:	f7ff fb1f 	bl	8001ad4 <LCD_Font>
  	for(int i = 0; i<360; i+= 30) {
 8002496:	2300      	movs	r3, #0
 8002498:	64fb      	str	r3, [r7, #76]	; 0x4c
 800249a:	e0a8      	b.n	80025ee <main+0x18e>

  	    sx = cos((i-90)*0.0174532925);
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	3b5a      	subs	r3, #90	; 0x5a
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f847 	bl	8000534 <__aeabi_i2d>
 80024a6:	a39a      	add	r3, pc, #616	; (adr r3, 8002710 <main+0x2b0>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f8ac 	bl	8000608 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	ec43 2b17 	vmov	d7, r2, r3
 80024b8:	eeb0 0a47 	vmov.f32	s0, s14
 80024bc:	eef0 0a67 	vmov.f32	s1, s15
 80024c0:	f004 fae6 	bl	8006a90 <cos>
 80024c4:	ec53 2b10 	vmov	r2, r3, d0
 80024c8:	4610      	mov	r0, r2
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7fe fb74 	bl	8000bb8 <__aeabi_d2f>
 80024d0:	4603      	mov	r3, r0
 80024d2:	4a93      	ldr	r2, [pc, #588]	; (8002720 <main+0x2c0>)
 80024d4:	6013      	str	r3, [r2, #0]
  	    sy = sin((i-90)*0.0174532925);
 80024d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024d8:	3b5a      	subs	r3, #90	; 0x5a
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe f82a 	bl	8000534 <__aeabi_i2d>
 80024e0:	a38b      	add	r3, pc, #556	; (adr r3, 8002710 <main+0x2b0>)
 80024e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e6:	f7fe f88f 	bl	8000608 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ec43 2b17 	vmov	d7, r2, r3
 80024f2:	eeb0 0a47 	vmov.f32	s0, s14
 80024f6:	eef0 0a67 	vmov.f32	s1, s15
 80024fa:	f004 fb1d 	bl	8006b38 <sin>
 80024fe:	ec53 2b10 	vmov	r2, r3, d0
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f7fe fb57 	bl	8000bb8 <__aeabi_d2f>
 800250a:	4603      	mov	r3, r0
 800250c:	4a85      	ldr	r2, [pc, #532]	; (8002724 <main+0x2c4>)
 800250e:	6013      	str	r3, [r2, #0]
  	    x00 = sx*114+240;
 8002510:	4b83      	ldr	r3, [pc, #524]	; (8002720 <main+0x2c0>)
 8002512:	edd3 7a00 	vldr	s15, [r3]
 8002516:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002728 <main+0x2c8>
 800251a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251e:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800272c <main+0x2cc>
 8002522:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252a:	ee17 3a90 	vmov	r3, s15
 800252e:	b29a      	uxth	r2, r3
 8002530:	4b7f      	ldr	r3, [pc, #508]	; (8002730 <main+0x2d0>)
 8002532:	801a      	strh	r2, [r3, #0]
  	    y00 = sy*114+160;
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <main+0x2c4>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002728 <main+0x2c8>
 800253e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002542:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002734 <main+0x2d4>
 8002546:	ee77 7a87 	vadd.f32	s15, s15, s14
 800254a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254e:	ee17 3a90 	vmov	r3, s15
 8002552:	b29a      	uxth	r2, r3
 8002554:	4b78      	ldr	r3, [pc, #480]	; (8002738 <main+0x2d8>)
 8002556:	801a      	strh	r2, [r3, #0]
  	    x11 = sx*100+240;
 8002558:	4b71      	ldr	r3, [pc, #452]	; (8002720 <main+0x2c0>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800273c <main+0x2dc>
 8002562:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002566:	ed9f 7a71 	vldr	s14, [pc, #452]	; 800272c <main+0x2cc>
 800256a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800256e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002572:	ee17 3a90 	vmov	r3, s15
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b71      	ldr	r3, [pc, #452]	; (8002740 <main+0x2e0>)
 800257a:	801a      	strh	r2, [r3, #0]
  	    y11 = sy*100+160;
 800257c:	4b69      	ldr	r3, [pc, #420]	; (8002724 <main+0x2c4>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800273c <main+0x2dc>
 8002586:	ee67 7a87 	vmul.f32	s15, s15, s14
 800258a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002734 <main+0x2d4>
 800258e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002592:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002596:	ee17 3a90 	vmov	r3, s15
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b69      	ldr	r3, [pc, #420]	; (8002744 <main+0x2e4>)
 800259e:	801a      	strh	r2, [r3, #0]

  	    TFT_Draw_Line(x00-1, y00-1, x11, y11,1,WHITE);
 80025a0:	4b63      	ldr	r3, [pc, #396]	; (8002730 <main+0x2d0>)
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b298      	uxth	r0, r3
 80025a8:	4b63      	ldr	r3, [pc, #396]	; (8002738 <main+0x2d8>)
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	b299      	uxth	r1, r3
 80025b0:	4b63      	ldr	r3, [pc, #396]	; (8002740 <main+0x2e0>)
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	4b63      	ldr	r3, [pc, #396]	; (8002744 <main+0x2e4>)
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80025bc:	9401      	str	r4, [sp, #4]
 80025be:	2401      	movs	r4, #1
 80025c0:	9400      	str	r4, [sp, #0]
 80025c2:	f7fe ff17 	bl	80013f4 <TFT_Draw_Line>
  	    if (i == 150) {
 80025c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025c8:	2b96      	cmp	r3, #150	; 0x96
 80025ca:	d10d      	bne.n	80025e8 <main+0x188>
  	    	TFT_Draw_Line(x00, y00, x11, y11,1,BLACK);
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <main+0x2d0>)
 80025ce:	8818      	ldrh	r0, [r3, #0]
 80025d0:	4b59      	ldr	r3, [pc, #356]	; (8002738 <main+0x2d8>)
 80025d2:	8819      	ldrh	r1, [r3, #0]
 80025d4:	4b5a      	ldr	r3, [pc, #360]	; (8002740 <main+0x2e0>)
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <main+0x2e4>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	2400      	movs	r4, #0
 80025de:	9401      	str	r4, [sp, #4]
 80025e0:	2401      	movs	r4, #1
 80025e2:	9400      	str	r4, [sp, #0]
 80025e4:	f7fe ff06 	bl	80013f4 <TFT_Draw_Line>
  	for(int i = 0; i<360; i+= 30) {
 80025e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025ea:	331e      	adds	r3, #30
 80025ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025f0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80025f4:	f6ff af52 	blt.w	800249c <main+0x3c>
  	    }
  	  }

  	LCD_Font(235, 254, "0", _Open_Sans_Bold_18, 1, WHITE);
 80025f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2301      	movs	r3, #1
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4b51      	ldr	r3, [pc, #324]	; (8002748 <main+0x2e8>)
 8002604:	4a51      	ldr	r2, [pc, #324]	; (800274c <main+0x2ec>)
 8002606:	21fe      	movs	r1, #254	; 0xfe
 8002608:	20eb      	movs	r0, #235	; 0xeb
 800260a:	f7ff fa63 	bl	8001ad4 <LCD_Font>
  	LCD_Font(193, 240, "10", _Open_Sans_Bold_18, 1, WHITE);
 800260e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002612:	9301      	str	r3, [sp, #4]
 8002614:	2301      	movs	r3, #1
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4b4b      	ldr	r3, [pc, #300]	; (8002748 <main+0x2e8>)
 800261a:	4a4d      	ldr	r2, [pc, #308]	; (8002750 <main+0x2f0>)
 800261c:	21f0      	movs	r1, #240	; 0xf0
 800261e:	20c1      	movs	r0, #193	; 0xc1
 8002620:	f7ff fa58 	bl	8001ad4 <LCD_Font>
  	LCD_Font(158, 210, "20", _Open_Sans_Bold_18, 1, WHITE);
 8002624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	2301      	movs	r3, #1
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4b46      	ldr	r3, [pc, #280]	; (8002748 <main+0x2e8>)
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <main+0x2f4>)
 8002632:	21d2      	movs	r1, #210	; 0xd2
 8002634:	209e      	movs	r0, #158	; 0x9e
 8002636:	f7ff fa4d 	bl	8001ad4 <LCD_Font>
  	LCD_Font(142, 165, "30", _Open_Sans_Bold_18, 1, WHITE);
 800263a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	2301      	movs	r3, #1
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	4b40      	ldr	r3, [pc, #256]	; (8002748 <main+0x2e8>)
 8002646:	4a44      	ldr	r2, [pc, #272]	; (8002758 <main+0x2f8>)
 8002648:	21a5      	movs	r1, #165	; 0xa5
 800264a:	208e      	movs	r0, #142	; 0x8e
 800264c:	f7ff fa42 	bl	8001ad4 <LCD_Font>
  	LCD_Font(155, 120, "40", _Open_Sans_Bold_18, 1, WHITE);
 8002650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	2301      	movs	r3, #1
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <main+0x2e8>)
 800265c:	4a3f      	ldr	r2, [pc, #252]	; (800275c <main+0x2fc>)
 800265e:	2178      	movs	r1, #120	; 0x78
 8002660:	209b      	movs	r0, #155	; 0x9b
 8002662:	f7ff fa37 	bl	8001ad4 <LCD_Font>
  	LCD_Font(185, 91, "50", _Open_Sans_Bold_18, 1, WHITE);
 8002666:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2301      	movs	r3, #1
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4b35      	ldr	r3, [pc, #212]	; (8002748 <main+0x2e8>)
 8002672:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <main+0x300>)
 8002674:	215b      	movs	r1, #91	; 0x5b
 8002676:	20b9      	movs	r0, #185	; 0xb9
 8002678:	f7ff fa2c 	bl	8001ad4 <LCD_Font>
  	LCD_Font(230, 76, "60", _Open_Sans_Bold_18, 1, WHITE);
 800267c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2301      	movs	r3, #1
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	4b30      	ldr	r3, [pc, #192]	; (8002748 <main+0x2e8>)
 8002688:	4a36      	ldr	r2, [pc, #216]	; (8002764 <main+0x304>)
 800268a:	214c      	movs	r1, #76	; 0x4c
 800268c:	20e6      	movs	r0, #230	; 0xe6
 800268e:	f7ff fa21 	bl	8001ad4 <LCD_Font>
  	LCD_Font(275, 91, "70", _Open_Sans_Bold_18, 1, WHITE);
 8002692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	2301      	movs	r3, #1
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	4b2a      	ldr	r3, [pc, #168]	; (8002748 <main+0x2e8>)
 800269e:	4a32      	ldr	r2, [pc, #200]	; (8002768 <main+0x308>)
 80026a0:	215b      	movs	r1, #91	; 0x5b
 80026a2:	f240 1013 	movw	r0, #275	; 0x113
 80026a6:	f7ff fa15 	bl	8001ad4 <LCD_Font>
  	LCD_Font(300, 120, "80", _Open_Sans_Bold_18, 1, WHITE);
 80026aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	2301      	movs	r3, #1
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	4b24      	ldr	r3, [pc, #144]	; (8002748 <main+0x2e8>)
 80026b6:	4a2d      	ldr	r2, [pc, #180]	; (800276c <main+0x30c>)
 80026b8:	2178      	movs	r1, #120	; 0x78
 80026ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80026be:	f7ff fa09 	bl	8001ad4 <LCD_Font>
  	LCD_Font(315, 165, "90", _Open_Sans_Bold_18, 1, WHITE);
 80026c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	2301      	movs	r3, #1
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4b1e      	ldr	r3, [pc, #120]	; (8002748 <main+0x2e8>)
 80026ce:	4a28      	ldr	r2, [pc, #160]	; (8002770 <main+0x310>)
 80026d0:	21a5      	movs	r1, #165	; 0xa5
 80026d2:	f240 103b 	movw	r0, #315	; 0x13b
 80026d6:	f7ff f9fd 	bl	8001ad4 <LCD_Font>
  	LCD_Font(290, 215, "100", _Open_Sans_Bold_18, 1, WHITE);
 80026da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	2301      	movs	r3, #1
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <main+0x2e8>)
 80026e6:	4a23      	ldr	r2, [pc, #140]	; (8002774 <main+0x314>)
 80026e8:	21d7      	movs	r1, #215	; 0xd7
 80026ea:	f44f 7091 	mov.w	r0, #290	; 0x122
 80026ee:	f7ff f9f1 	bl	8001ad4 <LCD_Font>
  	LCD_Font(228, 210, "C", _Open_Sans_Bold_48, 1, WHITE);
 80026f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	2301      	movs	r3, #1
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <main+0x318>)
 80026fe:	4a1f      	ldr	r2, [pc, #124]	; (800277c <main+0x31c>)
 8002700:	21d2      	movs	r1, #210	; 0xd2
 8002702:	20e4      	movs	r0, #228	; 0xe4
 8002704:	f7ff f9e6 	bl	8001ad4 <LCD_Font>




  	for(int i = 0; i<360; i+= 30) {
 8002708:	2300      	movs	r3, #0
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
 800270c:	e0e1      	b.n	80028d2 <main+0x472>
 800270e:	bf00      	nop
 8002710:	a1fae711 	.word	0xa1fae711
 8002714:	3f91df46 	.word	0x3f91df46
 8002718:	08019cf4 	.word	0x08019cf4
 800271c:	08007bd0 	.word	0x08007bd0
 8002720:	200001fc 	.word	0x200001fc
 8002724:	20000000 	.word	0x20000000
 8002728:	42e40000 	.word	0x42e40000
 800272c:	43700000 	.word	0x43700000
 8002730:	200001f4 	.word	0x200001f4
 8002734:	43200000 	.word	0x43200000
 8002738:	200001f8 	.word	0x200001f8
 800273c:	42c80000 	.word	0x42c80000
 8002740:	200001f6 	.word	0x200001f6
 8002744:	200001fa 	.word	0x200001fa
 8002748:	08008440 	.word	0x08008440
 800274c:	08007bd8 	.word	0x08007bd8
 8002750:	08007bdc 	.word	0x08007bdc
 8002754:	08007be0 	.word	0x08007be0
 8002758:	08007be4 	.word	0x08007be4
 800275c:	08007be8 	.word	0x08007be8
 8002760:	08007bec 	.word	0x08007bec
 8002764:	08007bf0 	.word	0x08007bf0
 8002768:	08007bf4 	.word	0x08007bf4
 800276c:	08007bf8 	.word	0x08007bf8
 8002770:	08007bfc 	.word	0x08007bfc
 8002774:	08007c00 	.word	0x08007c00
 8002778:	0800a9ac 	.word	0x0800a9ac
 800277c:	08007c04 	.word	0x08007c04

  	    sx = cos((i-90)*0.0174532925);
 8002780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002782:	3b5a      	subs	r3, #90	; 0x5a
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fed5 	bl	8000534 <__aeabi_i2d>
 800278a:	a3a9      	add	r3, pc, #676	; (adr r3, 8002a30 <main+0x5d0>)
 800278c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002790:	f7fd ff3a 	bl	8000608 <__aeabi_dmul>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	ec43 2b17 	vmov	d7, r2, r3
 800279c:	eeb0 0a47 	vmov.f32	s0, s14
 80027a0:	eef0 0a67 	vmov.f32	s1, s15
 80027a4:	f004 f974 	bl	8006a90 <cos>
 80027a8:	ec53 2b10 	vmov	r2, r3, d0
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f7fe fa02 	bl	8000bb8 <__aeabi_d2f>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4aa0      	ldr	r2, [pc, #640]	; (8002a38 <main+0x5d8>)
 80027b8:	6013      	str	r3, [r2, #0]
  	    sy = sin((i-90)*0.0174532925);
 80027ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027bc:	3b5a      	subs	r3, #90	; 0x5a
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd feb8 	bl	8000534 <__aeabi_i2d>
 80027c4:	a39a      	add	r3, pc, #616	; (adr r3, 8002a30 <main+0x5d0>)
 80027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ca:	f7fd ff1d 	bl	8000608 <__aeabi_dmul>
 80027ce:	4602      	mov	r2, r0
 80027d0:	460b      	mov	r3, r1
 80027d2:	ec43 2b17 	vmov	d7, r2, r3
 80027d6:	eeb0 0a47 	vmov.f32	s0, s14
 80027da:	eef0 0a67 	vmov.f32	s1, s15
 80027de:	f004 f9ab 	bl	8006b38 <sin>
 80027e2:	ec53 2b10 	vmov	r2, r3, d0
 80027e6:	4610      	mov	r0, r2
 80027e8:	4619      	mov	r1, r3
 80027ea:	f7fe f9e5 	bl	8000bb8 <__aeabi_d2f>
 80027ee:	4603      	mov	r3, r0
 80027f0:	4a92      	ldr	r2, [pc, #584]	; (8002a3c <main+0x5dc>)
 80027f2:	6013      	str	r3, [r2, #0]
  	    x00 = sx*114+540;  //240
 80027f4:	4b90      	ldr	r3, [pc, #576]	; (8002a38 <main+0x5d8>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002a40 <main+0x5e0>
 80027fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002802:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8002a44 <main+0x5e4>
 8002806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800280a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800280e:	ee17 3a90 	vmov	r3, s15
 8002812:	b29a      	uxth	r2, r3
 8002814:	4b8c      	ldr	r3, [pc, #560]	; (8002a48 <main+0x5e8>)
 8002816:	801a      	strh	r2, [r3, #0]
  	    y00 = sy*114+160;
 8002818:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <main+0x5dc>)
 800281a:	edd3 7a00 	vldr	s15, [r3]
 800281e:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8002a40 <main+0x5e0>
 8002822:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002826:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8002a4c <main+0x5ec>
 800282a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800282e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002832:	ee17 3a90 	vmov	r3, s15
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b85      	ldr	r3, [pc, #532]	; (8002a50 <main+0x5f0>)
 800283a:	801a      	strh	r2, [r3, #0]
  	    x11 = sx*100+540;   //240
 800283c:	4b7e      	ldr	r3, [pc, #504]	; (8002a38 <main+0x5d8>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002a54 <main+0x5f4>
 8002846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800284a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002a44 <main+0x5e4>
 800284e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002856:	ee17 3a90 	vmov	r3, s15
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b7e      	ldr	r3, [pc, #504]	; (8002a58 <main+0x5f8>)
 800285e:	801a      	strh	r2, [r3, #0]
  	    y11 = sy*100+160;
 8002860:	4b76      	ldr	r3, [pc, #472]	; (8002a3c <main+0x5dc>)
 8002862:	edd3 7a00 	vldr	s15, [r3]
 8002866:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002a54 <main+0x5f4>
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002a4c <main+0x5ec>
 8002872:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800287a:	ee17 3a90 	vmov	r3, s15
 800287e:	b29a      	uxth	r2, r3
 8002880:	4b76      	ldr	r3, [pc, #472]	; (8002a5c <main+0x5fc>)
 8002882:	801a      	strh	r2, [r3, #0]

  	    TFT_Draw_Line(x00-1, y00-1, x11, y11,1,WHITE);
 8002884:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <main+0x5e8>)
 8002886:	881b      	ldrh	r3, [r3, #0]
 8002888:	3b01      	subs	r3, #1
 800288a:	b298      	uxth	r0, r3
 800288c:	4b70      	ldr	r3, [pc, #448]	; (8002a50 <main+0x5f0>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	3b01      	subs	r3, #1
 8002892:	b299      	uxth	r1, r3
 8002894:	4b70      	ldr	r3, [pc, #448]	; (8002a58 <main+0x5f8>)
 8002896:	881a      	ldrh	r2, [r3, #0]
 8002898:	4b70      	ldr	r3, [pc, #448]	; (8002a5c <main+0x5fc>)
 800289a:	881b      	ldrh	r3, [r3, #0]
 800289c:	f64f 74ff 	movw	r4, #65535	; 0xffff
 80028a0:	9401      	str	r4, [sp, #4]
 80028a2:	2401      	movs	r4, #1
 80028a4:	9400      	str	r4, [sp, #0]
 80028a6:	f7fe fda5 	bl	80013f4 <TFT_Draw_Line>
  	    if (i == 150) {
 80028aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ac:	2b96      	cmp	r3, #150	; 0x96
 80028ae:	d10d      	bne.n	80028cc <main+0x46c>
  	    	TFT_Draw_Line(x00, y00, x11, y11,1,BLACK);
 80028b0:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <main+0x5e8>)
 80028b2:	8818      	ldrh	r0, [r3, #0]
 80028b4:	4b66      	ldr	r3, [pc, #408]	; (8002a50 <main+0x5f0>)
 80028b6:	8819      	ldrh	r1, [r3, #0]
 80028b8:	4b67      	ldr	r3, [pc, #412]	; (8002a58 <main+0x5f8>)
 80028ba:	881a      	ldrh	r2, [r3, #0]
 80028bc:	4b67      	ldr	r3, [pc, #412]	; (8002a5c <main+0x5fc>)
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	2400      	movs	r4, #0
 80028c2:	9401      	str	r4, [sp, #4]
 80028c4:	2401      	movs	r4, #1
 80028c6:	9400      	str	r4, [sp, #0]
 80028c8:	f7fe fd94 	bl	80013f4 <TFT_Draw_Line>
  	for(int i = 0; i<360; i+= 30) {
 80028cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028ce:	331e      	adds	r3, #30
 80028d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80028d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028d4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80028d8:	f6ff af52 	blt.w	8002780 <main+0x320>
  	    }
  	  }

  	LCD_Font(535, 254, "0", _Open_Sans_Bold_18, 1, WHITE);
 80028dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e0:	9301      	str	r3, [sp, #4]
 80028e2:	2301      	movs	r3, #1
 80028e4:	9300      	str	r3, [sp, #0]
 80028e6:	4b5e      	ldr	r3, [pc, #376]	; (8002a60 <main+0x600>)
 80028e8:	4a5e      	ldr	r2, [pc, #376]	; (8002a64 <main+0x604>)
 80028ea:	21fe      	movs	r1, #254	; 0xfe
 80028ec:	f240 2017 	movw	r0, #535	; 0x217
 80028f0:	f7ff f8f0 	bl	8001ad4 <LCD_Font>
  	LCD_Font(493, 240, "10", _Open_Sans_Bold_18, 1, WHITE);
 80028f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	2301      	movs	r3, #1
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <main+0x600>)
 8002900:	4a59      	ldr	r2, [pc, #356]	; (8002a68 <main+0x608>)
 8002902:	21f0      	movs	r1, #240	; 0xf0
 8002904:	f240 10ed 	movw	r0, #493	; 0x1ed
 8002908:	f7ff f8e4 	bl	8001ad4 <LCD_Font>
  	LCD_Font(458, 210, "20", _Open_Sans_Bold_18, 1, WHITE);
 800290c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	2301      	movs	r3, #1
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4b52      	ldr	r3, [pc, #328]	; (8002a60 <main+0x600>)
 8002918:	4a54      	ldr	r2, [pc, #336]	; (8002a6c <main+0x60c>)
 800291a:	21d2      	movs	r1, #210	; 0xd2
 800291c:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
 8002920:	f7ff f8d8 	bl	8001ad4 <LCD_Font>
  	LCD_Font(442, 165, "30", _Open_Sans_Bold_18, 1, WHITE);
 8002924:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2301      	movs	r3, #1
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	4b4c      	ldr	r3, [pc, #304]	; (8002a60 <main+0x600>)
 8002930:	4a4f      	ldr	r2, [pc, #316]	; (8002a70 <main+0x610>)
 8002932:	21a5      	movs	r1, #165	; 0xa5
 8002934:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
 8002938:	f7ff f8cc 	bl	8001ad4 <LCD_Font>
  	LCD_Font(455, 120, "40", _Open_Sans_Bold_18, 1, WHITE);
 800293c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002940:	9301      	str	r3, [sp, #4]
 8002942:	2301      	movs	r3, #1
 8002944:	9300      	str	r3, [sp, #0]
 8002946:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <main+0x600>)
 8002948:	4a4a      	ldr	r2, [pc, #296]	; (8002a74 <main+0x614>)
 800294a:	2178      	movs	r1, #120	; 0x78
 800294c:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002950:	f7ff f8c0 	bl	8001ad4 <LCD_Font>
  	LCD_Font(485, 91, "50", _Open_Sans_Bold_18, 1, WHITE);
 8002954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	2301      	movs	r3, #1
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <main+0x600>)
 8002960:	4a45      	ldr	r2, [pc, #276]	; (8002a78 <main+0x618>)
 8002962:	215b      	movs	r1, #91	; 0x5b
 8002964:	f240 10e5 	movw	r0, #485	; 0x1e5
 8002968:	f7ff f8b4 	bl	8001ad4 <LCD_Font>
  	LCD_Font(530, 76, "60", _Open_Sans_Bold_18, 1, WHITE);
 800296c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2301      	movs	r3, #1
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	4b3a      	ldr	r3, [pc, #232]	; (8002a60 <main+0x600>)
 8002978:	4a40      	ldr	r2, [pc, #256]	; (8002a7c <main+0x61c>)
 800297a:	214c      	movs	r1, #76	; 0x4c
 800297c:	f240 2012 	movw	r0, #530	; 0x212
 8002980:	f7ff f8a8 	bl	8001ad4 <LCD_Font>
  	LCD_Font(575, 91, "70", _Open_Sans_Bold_18, 1, WHITE);
 8002984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	2301      	movs	r3, #1
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <main+0x600>)
 8002990:	4a3b      	ldr	r2, [pc, #236]	; (8002a80 <main+0x620>)
 8002992:	215b      	movs	r1, #91	; 0x5b
 8002994:	f240 203f 	movw	r0, #575	; 0x23f
 8002998:	f7ff f89c 	bl	8001ad4 <LCD_Font>
  	LCD_Font(600, 120, "80", _Open_Sans_Bold_18, 1, WHITE);
 800299c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	2301      	movs	r3, #1
 80029a4:	9300      	str	r3, [sp, #0]
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <main+0x600>)
 80029a8:	4a36      	ldr	r2, [pc, #216]	; (8002a84 <main+0x624>)
 80029aa:	2178      	movs	r1, #120	; 0x78
 80029ac:	f44f 7016 	mov.w	r0, #600	; 0x258
 80029b0:	f7ff f890 	bl	8001ad4 <LCD_Font>
  	LCD_Font(615, 165, "90", _Open_Sans_Bold_18, 1, WHITE);
 80029b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	2301      	movs	r3, #1
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <main+0x600>)
 80029c0:	4a31      	ldr	r2, [pc, #196]	; (8002a88 <main+0x628>)
 80029c2:	21a5      	movs	r1, #165	; 0xa5
 80029c4:	f240 2067 	movw	r0, #615	; 0x267
 80029c8:	f7ff f884 	bl	8001ad4 <LCD_Font>
  	LCD_Font(590, 215, "100", _Open_Sans_Bold_18, 1, WHITE);
 80029cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	2301      	movs	r3, #1
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	4b22      	ldr	r3, [pc, #136]	; (8002a60 <main+0x600>)
 80029d8:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <main+0x62c>)
 80029da:	21d7      	movs	r1, #215	; 0xd7
 80029dc:	f240 204e 	movw	r0, #590	; 0x24e
 80029e0:	f7ff f878 	bl	8001ad4 <LCD_Font>
  	LCD_Font(528, 210, "C", _Open_Sans_Bold_48, 1, WHITE);
 80029e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	2301      	movs	r3, #1
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	4b28      	ldr	r3, [pc, #160]	; (8002a90 <main+0x630>)
 80029f0:	4a28      	ldr	r2, [pc, #160]	; (8002a94 <main+0x634>)
 80029f2:	21d2      	movs	r1, #210	; 0xd2
 80029f4:	f44f 7004 	mov.w	r0, #528	; 0x210
 80029f8:	f7ff f86c 	bl	8001ad4 <LCD_Font>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    //void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
    //void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
    TFT_Draw_Fill_Rectangle (50, 300, 80, 80, BLUE);
 80029fc:	231f      	movs	r3, #31
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2350      	movs	r3, #80	; 0x50
 8002a02:	2250      	movs	r2, #80	; 0x50
 8002a04:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a08:	2032      	movs	r0, #50	; 0x32
 8002a0a:	f7fe fdbb 	bl	8001584 <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Round_Rect (700, 300, 80, 80, 10, 10, BLUE);
 8002a0e:	231f      	movs	r3, #31
 8002a10:	9302      	str	r3, [sp, #8]
 8002a12:	230a      	movs	r3, #10
 8002a14:	9301      	str	r3, [sp, #4]
 8002a16:	230a      	movs	r3, #10
 8002a18:	9300      	str	r3, [sp, #0]
 8002a1a:	2350      	movs	r3, #80	; 0x50
 8002a1c:	2250      	movs	r2, #80	; 0x50
 8002a1e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002a22:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002a26:	f7fe fed7 	bl	80017d8 <TFT_Draw_Round_Rect>
	  	  //	  TFT_Clear_Screen(RED);




	  	  					 	for(int j = 0; j<850; j+= 30) {
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	647b      	str	r3, [r7, #68]	; 0x44
 8002a2e:	e099      	b.n	8002b64 <main+0x704>
 8002a30:	a1fae711 	.word	0xa1fae711
 8002a34:	3f91df46 	.word	0x3f91df46
 8002a38:	200001fc 	.word	0x200001fc
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	42e40000 	.word	0x42e40000
 8002a44:	44070000 	.word	0x44070000
 8002a48:	200001f4 	.word	0x200001f4
 8002a4c:	43200000 	.word	0x43200000
 8002a50:	200001f8 	.word	0x200001f8
 8002a54:	42c80000 	.word	0x42c80000
 8002a58:	200001f6 	.word	0x200001f6
 8002a5c:	200001fa 	.word	0x200001fa
 8002a60:	08008440 	.word	0x08008440
 8002a64:	08007bd8 	.word	0x08007bd8
 8002a68:	08007bdc 	.word	0x08007bdc
 8002a6c:	08007be0 	.word	0x08007be0
 8002a70:	08007be4 	.word	0x08007be4
 8002a74:	08007be8 	.word	0x08007be8
 8002a78:	08007bec 	.word	0x08007bec
 8002a7c:	08007bf0 	.word	0x08007bf0
 8002a80:	08007bf4 	.word	0x08007bf4
 8002a84:	08007bf8 	.word	0x08007bf8
 8002a88:	08007bfc 	.word	0x08007bfc
 8002a8c:	08007c00 	.word	0x08007c00
 8002a90:	0800a9ac 	.word	0x0800a9ac
 8002a94:	08007c04 	.word	0x08007c04
	  	  					 		ringMeter(j, 0, 1020, 100, 20, 140, RED2GREEN);
 8002a98:	2305      	movs	r3, #5
 8002a9a:	9302      	str	r3, [sp, #8]
 8002a9c:	238c      	movs	r3, #140	; 0x8c
 8002a9e:	9301      	str	r3, [sp, #4]
 8002aa0:	2314      	movs	r3, #20
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	2364      	movs	r3, #100	; 0x64
 8002aa6:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002aaa:	2100      	movs	r1, #0
 8002aac:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002aae:	f7ff fa57 	bl	8001f60 <ringMeter>
	  	  					 		sprintf(string, "%.1f", j/8.5);
 8002ab2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002ab4:	f7fd fd3e 	bl	8000534 <__aeabi_i2d>
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <main+0x710>)
 8002abe:	f7fd fecd 	bl	800085c <__aeabi_ddiv>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002aca:	492a      	ldr	r1, [pc, #168]	; (8002b74 <main+0x714>)
 8002acc:	f001 fe80 	bl	80047d0 <siprintf>
	  	  					 		TFT_Draw_Fill_Rectangle(190,115, 100, 50,BLACK);
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	2332      	movs	r3, #50	; 0x32
 8002ad6:	2264      	movs	r2, #100	; 0x64
 8002ad8:	2173      	movs	r1, #115	; 0x73
 8002ada:	20be      	movs	r0, #190	; 0xbe
 8002adc:	f7fe fd52 	bl	8001584 <TFT_Draw_Fill_Rectangle>
	  	  					 		  LCD_Font(190, 165, string, _Open_Sans_Bold_48, 1, WHITE);
 8002ae0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae8:	9301      	str	r3, [sp, #4]
 8002aea:	2301      	movs	r3, #1
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	4b22      	ldr	r3, [pc, #136]	; (8002b78 <main+0x718>)
 8002af0:	21a5      	movs	r1, #165	; 0xa5
 8002af2:	20be      	movs	r0, #190	; 0xbe
 8002af4:	f7fe ffee 	bl	8001ad4 <LCD_Font>


	  	  						 		ringMeter(j, 0, 1020, 400, 20, 140, GREEN2RED);
 8002af8:	2304      	movs	r3, #4
 8002afa:	9302      	str	r3, [sp, #8]
 8002afc:	238c      	movs	r3, #140	; 0x8c
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	2314      	movs	r3, #20
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002b08:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b10:	f7ff fa26 	bl	8001f60 <ringMeter>
	  	  						 		sprintf(string, "%.1f", j/8.5);
 8002b14:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002b16:	f7fd fd0d 	bl	8000534 <__aeabi_i2d>
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <main+0x710>)
 8002b20:	f7fd fe9c 	bl	800085c <__aeabi_ddiv>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002b2c:	4911      	ldr	r1, [pc, #68]	; (8002b74 <main+0x714>)
 8002b2e:	f001 fe4f 	bl	80047d0 <siprintf>
	  	  						 		TFT_Draw_Fill_Rectangle(490,115, 100, 50,BLACK);
 8002b32:	2300      	movs	r3, #0
 8002b34:	9300      	str	r3, [sp, #0]
 8002b36:	2332      	movs	r3, #50	; 0x32
 8002b38:	2264      	movs	r2, #100	; 0x64
 8002b3a:	2173      	movs	r1, #115	; 0x73
 8002b3c:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8002b40:	f7fe fd20 	bl	8001584 <TFT_Draw_Fill_Rectangle>
	  	  						 		  LCD_Font(490, 165, string, _Open_Sans_Bold_48, 1, WHITE);
 8002b44:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002b48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	2301      	movs	r3, #1
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <main+0x718>)
 8002b54:	21a5      	movs	r1, #165	; 0xa5
 8002b56:	f44f 70f5 	mov.w	r0, #490	; 0x1ea
 8002b5a:	f7fe ffbb 	bl	8001ad4 <LCD_Font>
	  	  					 	for(int j = 0; j<850; j+= 30) {
 8002b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b60:	331e      	adds	r3, #30
 8002b62:	647b      	str	r3, [r7, #68]	; 0x44
 8002b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b66:	f240 3251 	movw	r2, #849	; 0x351
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	dd94      	ble.n	8002a98 <main+0x638>
 8002b6e:	e75c      	b.n	8002a2a <main+0x5ca>
 8002b70:	40210000 	.word	0x40210000
 8002b74:	08007c08 	.word	0x08007c08
 8002b78:	0800a9ac 	.word	0x0800a9ac

08002b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b094      	sub	sp, #80	; 0x50
 8002b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b82:	f107 0320 	add.w	r3, r7, #32
 8002b86:	2230      	movs	r2, #48	; 0x30
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f001 fe83 	bl	8004896 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b90:	f107 030c 	add.w	r3, r7, #12
 8002b94:	2200      	movs	r2, #0
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	605a      	str	r2, [r3, #4]
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	60da      	str	r2, [r3, #12]
 8002b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	4b28      	ldr	r3, [pc, #160]	; (8002c48 <SystemClock_Config+0xcc>)
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	4a27      	ldr	r2, [pc, #156]	; (8002c48 <SystemClock_Config+0xcc>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb0:	4b25      	ldr	r3, [pc, #148]	; (8002c48 <SystemClock_Config+0xcc>)
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	4b22      	ldr	r3, [pc, #136]	; (8002c4c <SystemClock_Config+0xd0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <SystemClock_Config+0xd0>)
 8002bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b1e      	ldr	r3, [pc, #120]	; (8002c4c <SystemClock_Config+0xd0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002bd8:	607b      	str	r3, [r7, #4]
 8002bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002be0:	2301      	movs	r3, #1
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002be4:	2310      	movs	r3, #16
 8002be6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be8:	2302      	movs	r3, #2
 8002bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bec:	2300      	movs	r3, #0
 8002bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002bf0:	2308      	movs	r3, #8
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002bf4:	2354      	movs	r3, #84	; 0x54
 8002bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002bfc:	2304      	movs	r3, #4
 8002bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c00:	f107 0320 	add.w	r3, r7, #32
 8002c04:	4618      	mov	r0, r3
 8002c06:	f000 fc97 	bl	8003538 <HAL_RCC_OscConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002c10:	f000 f81e 	bl	8002c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c14:	230f      	movs	r3, #15
 8002c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002c2a:	f107 030c 	add.w	r3, r7, #12
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fef9 	bl	8003a28 <HAL_RCC_ClockConfig>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002c3c:	f000 f808 	bl	8002c50 <Error_Handler>
  }
}
 8002c40:	bf00      	nop
 8002c42:	3750      	adds	r7, #80	; 0x50
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000

08002c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c54:	b672      	cpsid	i
}
 8002c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c58:	e7fe      	b.n	8002c58 <Error_Handler+0x8>
	...

08002c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c62:	2300      	movs	r3, #0
 8002c64:	607b      	str	r3, [r7, #4]
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c70:	6453      	str	r3, [r2, #68]	; 0x44
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7e:	2300      	movs	r3, #0
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	4a08      	ldr	r2, [pc, #32]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8e:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_MspInit+0x4c>)
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800

08002cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cb0:	e7fe      	b.n	8002cb0 <NMI_Handler+0x4>

08002cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cb6:	e7fe      	b.n	8002cb6 <HardFault_Handler+0x4>

08002cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <MemManage_Handler+0x4>

08002cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cc2:	e7fe      	b.n	8002cc2 <BusFault_Handler+0x4>

08002cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc8:	e7fe      	b.n	8002cc8 <UsageFault_Handler+0x4>

08002cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cca:	b480      	push	{r7}
 8002ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cdc:	bf00      	nop
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cea:	bf00      	nop
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr

08002cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf8:	f000 f956 	bl	8002fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cfc:	bf00      	nop
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  return 1;
 8002d04:	2301      	movs	r3, #1
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_kill>:

int _kill(int pid, int sig)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d1a:	f001 fe0f 	bl	800493c <__errno>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2216      	movs	r2, #22
 8002d22:	601a      	str	r2, [r3, #0]
  return -1;
 8002d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <_exit>:

void _exit (int status)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ffe7 	bl	8002d10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d42:	e7fe      	b.n	8002d42 <_exit+0x12>

08002d44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b086      	sub	sp, #24
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e00a      	b.n	8002d6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d56:	f3af 8000 	nop.w
 8002d5a:	4601      	mov	r1, r0
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	1c5a      	adds	r2, r3, #1
 8002d60:	60ba      	str	r2, [r7, #8]
 8002d62:	b2ca      	uxtb	r2, r1
 8002d64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	dbf0      	blt.n	8002d56 <_read+0x12>
  }

  return len;
 8002d74:	687b      	ldr	r3, [r7, #4]
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	60f8      	str	r0, [r7, #12]
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	e009      	b.n	8002da4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	1c5a      	adds	r2, r3, #1
 8002d94:	60ba      	str	r2, [r7, #8]
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	3301      	adds	r3, #1
 8002da2:	617b      	str	r3, [r7, #20]
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	dbf1      	blt.n	8002d90 <_write+0x12>
  }
  return len;
 8002dac:	687b      	ldr	r3, [r7, #4]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_close>:

int _close(int file)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	b083      	sub	sp, #12
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dde:	605a      	str	r2, [r3, #4]
  return 0;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_isatty>:

int _isatty(int file)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e28:	4a14      	ldr	r2, [pc, #80]	; (8002e7c <_sbrk+0x5c>)
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <_sbrk+0x60>)
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e34:	4b13      	ldr	r3, [pc, #76]	; (8002e84 <_sbrk+0x64>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e3c:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <_sbrk+0x64>)
 8002e3e:	4a12      	ldr	r2, [pc, #72]	; (8002e88 <_sbrk+0x68>)
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e42:	4b10      	ldr	r3, [pc, #64]	; (8002e84 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e50:	f001 fd74 	bl	800493c <__errno>
 8002e54:	4603      	mov	r3, r0
 8002e56:	220c      	movs	r2, #12
 8002e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e5e:	e009      	b.n	8002e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e60:	4b08      	ldr	r3, [pc, #32]	; (8002e84 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e66:	4b07      	ldr	r3, [pc, #28]	; (8002e84 <_sbrk+0x64>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <_sbrk+0x64>)
 8002e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e72:	68fb      	ldr	r3, [r7, #12]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20018000 	.word	0x20018000
 8002e80:	00000400 	.word	0x00000400
 8002e84:	20000200 	.word	0x20000200
 8002e88:	20000358 	.word	0x20000358

08002e8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <SystemInit+0x20>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	4a05      	ldr	r2, [pc, #20]	; (8002eac <SystemInit+0x20>)
 8002e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00

08002eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002eb6:	490e      	ldr	r1, [pc, #56]	; (8002ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ebc:	e002      	b.n	8002ec4 <LoopCopyDataInit>

08002ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec2:	3304      	adds	r3, #4

08002ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ec8:	d3f9      	bcc.n	8002ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eca:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ecc:	4c0b      	ldr	r4, [pc, #44]	; (8002efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed0:	e001      	b.n	8002ed6 <LoopFillZerobss>

08002ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed4:	3204      	adds	r2, #4

08002ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ed8:	d3fb      	bcc.n	8002ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002eda:	f7ff ffd7 	bl	8002e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ede:	f001 fd33 	bl	8004948 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee2:	f7ff fabd 	bl	8002460 <main>
  bx  lr    
 8002ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ee8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002ef4:	0801a270 	.word	0x0801a270
  ldr r2, =_sbss
 8002ef8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002efc:	20000354 	.word	0x20000354

08002f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f00:	e7fe      	b.n	8002f00 <ADC_IRQHandler>
	...

08002f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f08:	4b0e      	ldr	r3, [pc, #56]	; (8002f44 <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0d      	ldr	r2, [pc, #52]	; (8002f44 <HAL_Init+0x40>)
 8002f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f14:	4b0b      	ldr	r3, [pc, #44]	; (8002f44 <HAL_Init+0x40>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <HAL_Init+0x40>)
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f20:	4b08      	ldr	r3, [pc, #32]	; (8002f44 <HAL_Init+0x40>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <HAL_Init+0x40>)
 8002f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f2c:	2003      	movs	r0, #3
 8002f2e:	f000 f931 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f32:	200f      	movs	r0, #15
 8002f34:	f000 f808 	bl	8002f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f38:	f7ff fe90 	bl	8002c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40023c00 	.word	0x40023c00

08002f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <HAL_InitTick+0x54>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	4b12      	ldr	r3, [pc, #72]	; (8002fa0 <HAL_InitTick+0x58>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	f000 f93b 	bl	80031e2 <HAL_SYSTICK_Config>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e00e      	b.n	8002f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b0f      	cmp	r3, #15
 8002f7a:	d80a      	bhi.n	8002f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	f04f 30ff 	mov.w	r0, #4294967295
 8002f84:	f000 f911 	bl	80031aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f88:	4a06      	ldr	r2, [pc, #24]	; (8002fa4 <HAL_InitTick+0x5c>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20000004 	.word	0x20000004
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	20000008 	.word	0x20000008

08002fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <HAL_IncTick+0x20>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_IncTick+0x24>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	4a04      	ldr	r2, [pc, #16]	; (8002fcc <HAL_IncTick+0x24>)
 8002fba:	6013      	str	r3, [r2, #0]
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	2000000c 	.word	0x2000000c
 8002fcc:	20000204 	.word	0x20000204

08002fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_GetTick+0x14>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000204 	.word	0x20000204

08002fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7ff ffee 	bl	8002fd0 <HAL_GetTick>
 8002ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d005      	beq.n	800300e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003002:	4b0a      	ldr	r3, [pc, #40]	; (800302c <HAL_Delay+0x44>)
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4413      	add	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800300e:	bf00      	nop
 8003010:	f7ff ffde 	bl	8002fd0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d8f7      	bhi.n	8003010 <HAL_Delay+0x28>
  {
  }
}
 8003020:	bf00      	nop
 8003022:	bf00      	nop
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	2000000c 	.word	0x2000000c

08003030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003040:	4b0c      	ldr	r3, [pc, #48]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003046:	68ba      	ldr	r2, [r7, #8]
 8003048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800304c:	4013      	ands	r3, r2
 800304e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800305c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003062:	4a04      	ldr	r2, [pc, #16]	; (8003074 <__NVIC_SetPriorityGrouping+0x44>)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	60d3      	str	r3, [r2, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	e000ed00 	.word	0xe000ed00

08003078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <__NVIC_GetPriorityGrouping+0x18>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 0307 	and.w	r3, r3, #7
}
 8003086:	4618      	mov	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr
 8003090:	e000ed00 	.word	0xe000ed00

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	; (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	; (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	; 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	; 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	; (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff8e 	bl	8003094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff47 	bl	8003030 <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff5c 	bl	8003078 <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff8e 	bl	80030e8 <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5d 	bl	8003094 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ffb0 	bl	8003150 <SysTick_Config>
 80031f0:	4603      	mov	r3, r0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3708      	adds	r7, #8
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003206:	2300      	movs	r3, #0
 8003208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003212:	2300      	movs	r3, #0
 8003214:	61fb      	str	r3, [r7, #28]
 8003216:	e159      	b.n	80034cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003218:	2201      	movs	r2, #1
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	429a      	cmp	r2, r3
 8003232:	f040 8148 	bne.w	80034c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d005      	beq.n	800324e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800324a:	2b02      	cmp	r3, #2
 800324c:	d130      	bne.n	80032b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	2203      	movs	r2, #3
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003284:	2201      	movs	r2, #1
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	43db      	mvns	r3, r3
 800328e:	69ba      	ldr	r2, [r7, #24]
 8003290:	4013      	ands	r3, r2
 8003292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	091b      	lsrs	r3, r3, #4
 800329a:	f003 0201 	and.w	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d017      	beq.n	80032ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	2203      	movs	r2, #3
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	43db      	mvns	r3, r3
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4013      	ands	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d123      	bne.n	8003340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	08da      	lsrs	r2, r3, #3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3208      	adds	r2, #8
 8003300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	f003 0307 	and.w	r3, r3, #7
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	220f      	movs	r2, #15
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f003 0307 	and.w	r3, r3, #7
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	08da      	lsrs	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3208      	adds	r2, #8
 800333a:	69b9      	ldr	r1, [r7, #24]
 800333c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	2203      	movs	r2, #3
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	4013      	ands	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 0203 	and.w	r2, r3, #3
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 80a2 	beq.w	80034c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	4b57      	ldr	r3, [pc, #348]	; (80034e4 <HAL_GPIO_Init+0x2e8>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a56      	ldr	r2, [pc, #344]	; (80034e4 <HAL_GPIO_Init+0x2e8>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b54      	ldr	r3, [pc, #336]	; (80034e4 <HAL_GPIO_Init+0x2e8>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800339e:	4a52      	ldr	r2, [pc, #328]	; (80034e8 <HAL_GPIO_Init+0x2ec>)
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	089b      	lsrs	r3, r3, #2
 80033a4:	3302      	adds	r3, #2
 80033a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	220f      	movs	r2, #15
 80033b6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ba:	43db      	mvns	r3, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4013      	ands	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a49      	ldr	r2, [pc, #292]	; (80034ec <HAL_GPIO_Init+0x2f0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0x202>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a48      	ldr	r2, [pc, #288]	; (80034f0 <HAL_GPIO_Init+0x2f4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_GPIO_Init+0x1fe>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a47      	ldr	r2, [pc, #284]	; (80034f4 <HAL_GPIO_Init+0x2f8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_GPIO_Init+0x1fa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a46      	ldr	r2, [pc, #280]	; (80034f8 <HAL_GPIO_Init+0x2fc>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x1f6>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a45      	ldr	r2, [pc, #276]	; (80034fc <HAL_GPIO_Init+0x300>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_GPIO_Init+0x1f2>
 80033ea:	2304      	movs	r3, #4
 80033ec:	e008      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033ee:	2307      	movs	r3, #7
 80033f0:	e006      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033f2:	2303      	movs	r3, #3
 80033f4:	e004      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e002      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033fa:	2301      	movs	r3, #1
 80033fc:	e000      	b.n	8003400 <HAL_GPIO_Init+0x204>
 80033fe:	2300      	movs	r3, #0
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	f002 0203 	and.w	r2, r2, #3
 8003406:	0092      	lsls	r2, r2, #2
 8003408:	4093      	lsls	r3, r2
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003410:	4935      	ldr	r1, [pc, #212]	; (80034e8 <HAL_GPIO_Init+0x2ec>)
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	089b      	lsrs	r3, r3, #2
 8003416:	3302      	adds	r3, #2
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4013      	ands	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003442:	4a2f      	ldr	r2, [pc, #188]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003448:	4b2d      	ldr	r3, [pc, #180]	; (8003500 <HAL_GPIO_Init+0x304>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800346c:	4a24      	ldr	r2, [pc, #144]	; (8003500 <HAL_GPIO_Init+0x304>)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003472:	4b23      	ldr	r3, [pc, #140]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	43db      	mvns	r3, r3
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	4013      	ands	r3, r2
 8003480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003496:	4a1a      	ldr	r2, [pc, #104]	; (8003500 <HAL_GPIO_Init+0x304>)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_GPIO_Init+0x304>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	43db      	mvns	r3, r3
 80034a6:	69ba      	ldr	r2, [r7, #24]
 80034a8:	4013      	ands	r3, r2
 80034aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d003      	beq.n	80034c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034c0:	4a0f      	ldr	r2, [pc, #60]	; (8003500 <HAL_GPIO_Init+0x304>)
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3301      	adds	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	2b0f      	cmp	r3, #15
 80034d0:	f67f aea2 	bls.w	8003218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
 80034d8:	3724      	adds	r7, #36	; 0x24
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40013800 	.word	0x40013800
 80034ec:	40020000 	.word	0x40020000
 80034f0:	40020400 	.word	0x40020400
 80034f4:	40020800 	.word	0x40020800
 80034f8:	40020c00 	.word	0x40020c00
 80034fc:	40021000 	.word	0x40021000
 8003500:	40013c00 	.word	0x40013c00

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e267      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d075      	beq.n	8003642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003556:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b04      	cmp	r3, #4
 8003560:	d00c      	beq.n	800357c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b85      	ldr	r3, [pc, #532]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356a:	2b08      	cmp	r3, #8
 800356c:	d112      	bne.n	8003594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800356e:	4b82      	ldr	r3, [pc, #520]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800357a:	d10b      	bne.n	8003594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	4b7e      	ldr	r3, [pc, #504]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d05b      	beq.n	8003640 <HAL_RCC_OscConfig+0x108>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d157      	bne.n	8003640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e242      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800359c:	d106      	bne.n	80035ac <HAL_RCC_OscConfig+0x74>
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e01d      	b.n	80035e8 <HAL_RCC_OscConfig+0xb0>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0x98>
 80035b6:	4b70      	ldr	r3, [pc, #448]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6f      	ldr	r2, [pc, #444]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b6d      	ldr	r3, [pc, #436]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a6c      	ldr	r2, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0xb0>
 80035d0:	4b69      	ldr	r3, [pc, #420]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a68      	ldr	r2, [pc, #416]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b66      	ldr	r3, [pc, #408]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a65      	ldr	r2, [pc, #404]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7ff fcee 	bl	8002fd0 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035f8:	f7ff fcea 	bl	8002fd0 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	; 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e207      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b5b      	ldr	r3, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0xc0>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7ff fcda 	bl	8002fd0 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003620:	f7ff fcd6 	bl	8002fd0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	; 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e1f3      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	4b51      	ldr	r3, [pc, #324]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0xe8>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d063      	beq.n	8003716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800364e:	4b4a      	ldr	r3, [pc, #296]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003662:	2b08      	cmp	r3, #8
 8003664:	d11c      	bne.n	80036a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003666:	4b44      	ldr	r3, [pc, #272]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d116      	bne.n	80036a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003672:	4b41      	ldr	r3, [pc, #260]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d005      	beq.n	800368a <HAL_RCC_OscConfig+0x152>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d001      	beq.n	800368a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e1c7      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b3b      	ldr	r3, [pc, #236]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	00db      	lsls	r3, r3, #3
 8003698:	4937      	ldr	r1, [pc, #220]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800369a:	4313      	orrs	r3, r2
 800369c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800369e:	e03a      	b.n	8003716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036a8:	4b34      	ldr	r3, [pc, #208]	; (800377c <HAL_RCC_OscConfig+0x244>)
 80036aa:	2201      	movs	r2, #1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7ff fc8f 	bl	8002fd0 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b6:	f7ff fc8b 	bl	8002fd0 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1a8      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	4b2b      	ldr	r3, [pc, #172]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036d4:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	00db      	lsls	r3, r3, #3
 80036e2:	4925      	ldr	r1, [pc, #148]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	600b      	str	r3, [r1, #0]
 80036e8:	e015      	b.n	8003716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ea:	4b24      	ldr	r3, [pc, #144]	; (800377c <HAL_RCC_OscConfig+0x244>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7ff fc6e 	bl	8002fd0 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f8:	f7ff fc6a 	bl	8002fd0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e187      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	2b00      	cmp	r3, #0
 8003720:	d036      	beq.n	8003790 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d016      	beq.n	8003758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_RCC_OscConfig+0x248>)
 800372c:	2201      	movs	r2, #1
 800372e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7ff fc4e 	bl	8002fd0 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003738:	f7ff fc4a 	bl	8002fd0 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e167      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_RCC_OscConfig+0x240>)
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0x200>
 8003756:	e01b      	b.n	8003790 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <HAL_RCC_OscConfig+0x248>)
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375e:	f7ff fc37 	bl	8002fd0 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003764:	e00e      	b.n	8003784 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003766:	f7ff fc33 	bl	8002fd0 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	2b02      	cmp	r3, #2
 8003772:	d907      	bls.n	8003784 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e150      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	42470000 	.word	0x42470000
 8003780:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ea      	bne.n	8003766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 8097 	beq.w	80038cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800379e:	2300      	movs	r3, #0
 80037a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037a2:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10f      	bne.n	80037ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	4a7c      	ldr	r2, [pc, #496]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037bc:	6413      	str	r3, [r2, #64]	; 0x40
 80037be:	4b7a      	ldr	r3, [pc, #488]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	60bb      	str	r3, [r7, #8]
 80037c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037ca:	2301      	movs	r3, #1
 80037cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ce:	4b77      	ldr	r3, [pc, #476]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d118      	bne.n	800380c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037da:	4b74      	ldr	r3, [pc, #464]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a73      	ldr	r2, [pc, #460]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 80037e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037e6:	f7ff fbf3 	bl	8002fd0 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ec:	e008      	b.n	8003800 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ee:	f7ff fbef 	bl	8002fd0 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d901      	bls.n	8003800 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e10c      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003800:	4b6a      	ldr	r3, [pc, #424]	; (80039ac <HAL_RCC_OscConfig+0x474>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003808:	2b00      	cmp	r3, #0
 800380a:	d0f0      	beq.n	80037ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x2ea>
 8003814:	4b64      	ldr	r3, [pc, #400]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a63      	ldr	r2, [pc, #396]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	e01c      	b.n	800385c <HAL_RCC_OscConfig+0x324>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b05      	cmp	r3, #5
 8003828:	d10c      	bne.n	8003844 <HAL_RCC_OscConfig+0x30c>
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800382e:	4a5e      	ldr	r2, [pc, #376]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0304 	orr.w	r3, r3, #4
 8003834:	6713      	str	r3, [r2, #112]	; 0x70
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	4a5b      	ldr	r2, [pc, #364]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
 8003842:	e00b      	b.n	800385c <HAL_RCC_OscConfig+0x324>
 8003844:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a57      	ldr	r2, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0301 	bic.w	r3, r3, #1
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
 8003850:	4b55      	ldr	r3, [pc, #340]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003854:	4a54      	ldr	r2, [pc, #336]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003856:	f023 0304 	bic.w	r3, r3, #4
 800385a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d015      	beq.n	8003890 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003864:	f7ff fbb4 	bl	8002fd0 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386a:	e00a      	b.n	8003882 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800386c:	f7ff fbb0 	bl	8002fd0 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e0cb      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	4b49      	ldr	r3, [pc, #292]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0ee      	beq.n	800386c <HAL_RCC_OscConfig+0x334>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003890:	f7ff fb9e 	bl	8002fd0 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003896:	e00a      	b.n	80038ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003898:	f7ff fb9a 	bl	8002fd0 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e0b5      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ae:	4b3e      	ldr	r3, [pc, #248]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1ee      	bne.n	8003898 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ba:	7dfb      	ldrb	r3, [r7, #23]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c0:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	4a38      	ldr	r2, [pc, #224]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80a1 	beq.w	8003a18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038d6:	4b34      	ldr	r3, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 030c 	and.w	r3, r3, #12
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d05c      	beq.n	800399c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	699b      	ldr	r3, [r3, #24]
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d141      	bne.n	800396e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ea:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <HAL_RCC_OscConfig+0x478>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7ff fb6e 	bl	8002fd0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038f8:	f7ff fb6a 	bl	8002fd0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e087      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	4b27      	ldr	r3, [pc, #156]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69da      	ldr	r2, [r3, #28]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a1b      	ldr	r3, [r3, #32]
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800392c:	085b      	lsrs	r3, r3, #1
 800392e:	3b01      	subs	r3, #1
 8003930:	041b      	lsls	r3, r3, #16
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003938:	061b      	lsls	r3, r3, #24
 800393a:	491b      	ldr	r1, [pc, #108]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 800393c:	4313      	orrs	r3, r2
 800393e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003940:	4b1b      	ldr	r3, [pc, #108]	; (80039b0 <HAL_RCC_OscConfig+0x478>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003946:	f7ff fb43 	bl	8002fd0 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800394e:	f7ff fb3f 	bl	8002fd0 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e05c      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x416>
 800396c:	e054      	b.n	8003a18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b10      	ldr	r3, [pc, #64]	; (80039b0 <HAL_RCC_OscConfig+0x478>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7ff fb2c 	bl	8002fd0 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7ff fb28 	bl	8002fd0 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e045      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	4b06      	ldr	r3, [pc, #24]	; (80039a8 <HAL_RCC_OscConfig+0x470>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x444>
 800399a:	e03d      	b.n	8003a18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e038      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40007000 	.word	0x40007000
 80039b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039b4:	4b1b      	ldr	r3, [pc, #108]	; (8003a24 <HAL_RCC_OscConfig+0x4ec>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d028      	beq.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d121      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d11a      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039e4:	4013      	ands	r3, r2
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d111      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	085b      	lsrs	r3, r3, #1
 80039fc:	3b01      	subs	r3, #1
 80039fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d107      	bne.n	8003a14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e000      	b.n	8003a1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3718      	adds	r7, #24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800

08003a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b68      	ldr	r3, [pc, #416]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d90c      	bls.n	8003a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a4c:	683a      	ldr	r2, [r7, #0]
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b63      	ldr	r3, [pc, #396]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e0b8      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d020      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a7c:	4b59      	ldr	r3, [pc, #356]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a94:	4b53      	ldr	r3, [pc, #332]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a52      	ldr	r2, [pc, #328]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4b50      	ldr	r3, [pc, #320]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	494d      	ldr	r1, [pc, #308]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d044      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	4b47      	ldr	r3, [pc, #284]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d119      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e07f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b3f      	ldr	r3, [pc, #252]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e06f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e067      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4934      	ldr	r1, [pc, #208]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b18:	f7ff fa5a 	bl	8002fd0 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7ff fa56 	bl	8002fd0 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e04f      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b25      	ldr	r3, [pc, #148]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d20c      	bcs.n	8003b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b58:	683a      	ldr	r2, [r7, #0]
 8003b5a:	b2d2      	uxtb	r2, r2
 8003b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b5e:	4b20      	ldr	r3, [pc, #128]	; (8003be0 <HAL_RCC_ClockConfig+0x1b8>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d001      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e032      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0304 	and.w	r3, r3, #4
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d008      	beq.n	8003b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4916      	ldr	r1, [pc, #88]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d009      	beq.n	8003bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b9a:	4b12      	ldr	r3, [pc, #72]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	490e      	ldr	r1, [pc, #56]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bae:	f000 f821 	bl	8003bf4 <HAL_RCC_GetSysClockFreq>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	490a      	ldr	r1, [pc, #40]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc0:	5ccb      	ldrb	r3, [r1, r3]
 8003bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bc6:	4a09      	ldr	r2, [pc, #36]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bca:	4b09      	ldr	r3, [pc, #36]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff f9ba 	bl	8002f48 <HAL_InitTick>

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023c00 	.word	0x40023c00
 8003be4:	40023800 	.word	0x40023800
 8003be8:	08019d00 	.word	0x08019d00
 8003bec:	20000004 	.word	0x20000004
 8003bf0:	20000008 	.word	0x20000008

08003bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bf8:	b090      	sub	sp, #64	; 0x40
 8003bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
 8003c00:	2300      	movs	r3, #0
 8003c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c04:	2300      	movs	r3, #0
 8003c06:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c0c:	4b59      	ldr	r3, [pc, #356]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b08      	cmp	r3, #8
 8003c16:	d00d      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x40>
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	f200 80a1 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x34>
 8003c22:	2b04      	cmp	r3, #4
 8003c24:	d003      	beq.n	8003c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c26:	e09b      	b.n	8003d60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b53      	ldr	r3, [pc, #332]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c2c:	e09b      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c2e:	4b53      	ldr	r3, [pc, #332]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c32:	e098      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c34:	4b4f      	ldr	r3, [pc, #316]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c3e:	4b4d      	ldr	r3, [pc, #308]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d028      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4a:	4b4a      	ldr	r3, [pc, #296]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	099b      	lsrs	r3, r3, #6
 8003c50:	2200      	movs	r2, #0
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	627a      	str	r2, [r7, #36]	; 0x24
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	4b47      	ldr	r3, [pc, #284]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c60:	fb03 f201 	mul.w	r2, r3, r1
 8003c64:	2300      	movs	r3, #0
 8003c66:	fb00 f303 	mul.w	r3, r0, r3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4a43      	ldr	r2, [pc, #268]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x188>)
 8003c6e:	fba0 1202 	umull	r1, r2, r0, r2
 8003c72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c74:	460a      	mov	r2, r1
 8003c76:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7a:	4413      	add	r3, r2
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c80:	2200      	movs	r2, #0
 8003c82:	61bb      	str	r3, [r7, #24]
 8003c84:	61fa      	str	r2, [r7, #28]
 8003c86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c8a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c8e:	f7fc ffe3 	bl	8000c58 <__aeabi_uldivmod>
 8003c92:	4602      	mov	r2, r0
 8003c94:	460b      	mov	r3, r1
 8003c96:	4613      	mov	r3, r2
 8003c98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9a:	e053      	b.n	8003d44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9c:	4b35      	ldr	r3, [pc, #212]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	099b      	lsrs	r3, r3, #6
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	613b      	str	r3, [r7, #16]
 8003ca6:	617a      	str	r2, [r7, #20]
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cae:	f04f 0b00 	mov.w	fp, #0
 8003cb2:	4652      	mov	r2, sl
 8003cb4:	465b      	mov	r3, fp
 8003cb6:	f04f 0000 	mov.w	r0, #0
 8003cba:	f04f 0100 	mov.w	r1, #0
 8003cbe:	0159      	lsls	r1, r3, #5
 8003cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc4:	0150      	lsls	r0, r2, #5
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	ebb2 080a 	subs.w	r8, r2, sl
 8003cce:	eb63 090b 	sbc.w	r9, r3, fp
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cde:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ce2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ce6:	ebb2 0408 	subs.w	r4, r2, r8
 8003cea:	eb63 0509 	sbc.w	r5, r3, r9
 8003cee:	f04f 0200 	mov.w	r2, #0
 8003cf2:	f04f 0300 	mov.w	r3, #0
 8003cf6:	00eb      	lsls	r3, r5, #3
 8003cf8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cfc:	00e2      	lsls	r2, r4, #3
 8003cfe:	4614      	mov	r4, r2
 8003d00:	461d      	mov	r5, r3
 8003d02:	eb14 030a 	adds.w	r3, r4, sl
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	eb45 030b 	adc.w	r3, r5, fp
 8003d0c:	607b      	str	r3, [r7, #4]
 8003d0e:	f04f 0200 	mov.w	r2, #0
 8003d12:	f04f 0300 	mov.w	r3, #0
 8003d16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d1a:	4629      	mov	r1, r5
 8003d1c:	028b      	lsls	r3, r1, #10
 8003d1e:	4621      	mov	r1, r4
 8003d20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d24:	4621      	mov	r1, r4
 8003d26:	028a      	lsls	r2, r1, #10
 8003d28:	4610      	mov	r0, r2
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	2200      	movs	r2, #0
 8003d30:	60bb      	str	r3, [r7, #8]
 8003d32:	60fa      	str	r2, [r7, #12]
 8003d34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d38:	f7fc ff8e 	bl	8000c58 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4613      	mov	r3, r2
 8003d42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d44:	4b0b      	ldr	r3, [pc, #44]	; (8003d74 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	3301      	adds	r3, #1
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d5e:	e002      	b.n	8003d66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3740      	adds	r7, #64	; 0x40
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d72:	bf00      	nop
 8003d74:	40023800 	.word	0x40023800
 8003d78:	00f42400 	.word	0x00f42400
 8003d7c:	017d7840 	.word	0x017d7840

08003d80 <__cvt>:
 8003d80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d84:	ec55 4b10 	vmov	r4, r5, d0
 8003d88:	2d00      	cmp	r5, #0
 8003d8a:	460e      	mov	r6, r1
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	462b      	mov	r3, r5
 8003d90:	bfbb      	ittet	lt
 8003d92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d96:	461d      	movlt	r5, r3
 8003d98:	2300      	movge	r3, #0
 8003d9a:	232d      	movlt	r3, #45	; 0x2d
 8003d9c:	700b      	strb	r3, [r1, #0]
 8003d9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003da0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003da4:	4691      	mov	r9, r2
 8003da6:	f023 0820 	bic.w	r8, r3, #32
 8003daa:	bfbc      	itt	lt
 8003dac:	4622      	movlt	r2, r4
 8003dae:	4614      	movlt	r4, r2
 8003db0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003db4:	d005      	beq.n	8003dc2 <__cvt+0x42>
 8003db6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dba:	d100      	bne.n	8003dbe <__cvt+0x3e>
 8003dbc:	3601      	adds	r6, #1
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	e000      	b.n	8003dc4 <__cvt+0x44>
 8003dc2:	2103      	movs	r1, #3
 8003dc4:	ab03      	add	r3, sp, #12
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	ab02      	add	r3, sp, #8
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	ec45 4b10 	vmov	d0, r4, r5
 8003dd0:	4653      	mov	r3, sl
 8003dd2:	4632      	mov	r2, r6
 8003dd4:	f000 fe78 	bl	8004ac8 <_dtoa_r>
 8003dd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ddc:	4607      	mov	r7, r0
 8003dde:	d102      	bne.n	8003de6 <__cvt+0x66>
 8003de0:	f019 0f01 	tst.w	r9, #1
 8003de4:	d022      	beq.n	8003e2c <__cvt+0xac>
 8003de6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dea:	eb07 0906 	add.w	r9, r7, r6
 8003dee:	d110      	bne.n	8003e12 <__cvt+0x92>
 8003df0:	783b      	ldrb	r3, [r7, #0]
 8003df2:	2b30      	cmp	r3, #48	; 0x30
 8003df4:	d10a      	bne.n	8003e0c <__cvt+0x8c>
 8003df6:	2200      	movs	r2, #0
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	4629      	mov	r1, r5
 8003dfe:	f7fc fe6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e02:	b918      	cbnz	r0, 8003e0c <__cvt+0x8c>
 8003e04:	f1c6 0601 	rsb	r6, r6, #1
 8003e08:	f8ca 6000 	str.w	r6, [sl]
 8003e0c:	f8da 3000 	ldr.w	r3, [sl]
 8003e10:	4499      	add	r9, r3
 8003e12:	2200      	movs	r2, #0
 8003e14:	2300      	movs	r3, #0
 8003e16:	4620      	mov	r0, r4
 8003e18:	4629      	mov	r1, r5
 8003e1a:	f7fc fe5d 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e1e:	b108      	cbz	r0, 8003e24 <__cvt+0xa4>
 8003e20:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e24:	2230      	movs	r2, #48	; 0x30
 8003e26:	9b03      	ldr	r3, [sp, #12]
 8003e28:	454b      	cmp	r3, r9
 8003e2a:	d307      	bcc.n	8003e3c <__cvt+0xbc>
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e30:	1bdb      	subs	r3, r3, r7
 8003e32:	4638      	mov	r0, r7
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	b004      	add	sp, #16
 8003e38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3c:	1c59      	adds	r1, r3, #1
 8003e3e:	9103      	str	r1, [sp, #12]
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e7f0      	b.n	8003e26 <__cvt+0xa6>

08003e44 <__exponent>:
 8003e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e46:	4603      	mov	r3, r0
 8003e48:	2900      	cmp	r1, #0
 8003e4a:	bfb8      	it	lt
 8003e4c:	4249      	neglt	r1, r1
 8003e4e:	f803 2b02 	strb.w	r2, [r3], #2
 8003e52:	bfb4      	ite	lt
 8003e54:	222d      	movlt	r2, #45	; 0x2d
 8003e56:	222b      	movge	r2, #43	; 0x2b
 8003e58:	2909      	cmp	r1, #9
 8003e5a:	7042      	strb	r2, [r0, #1]
 8003e5c:	dd2a      	ble.n	8003eb4 <__exponent+0x70>
 8003e5e:	f10d 0207 	add.w	r2, sp, #7
 8003e62:	4617      	mov	r7, r2
 8003e64:	260a      	movs	r6, #10
 8003e66:	4694      	mov	ip, r2
 8003e68:	fb91 f5f6 	sdiv	r5, r1, r6
 8003e6c:	fb06 1415 	mls	r4, r6, r5, r1
 8003e70:	3430      	adds	r4, #48	; 0x30
 8003e72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003e76:	460c      	mov	r4, r1
 8003e78:	2c63      	cmp	r4, #99	; 0x63
 8003e7a:	f102 32ff 	add.w	r2, r2, #4294967295
 8003e7e:	4629      	mov	r1, r5
 8003e80:	dcf1      	bgt.n	8003e66 <__exponent+0x22>
 8003e82:	3130      	adds	r1, #48	; 0x30
 8003e84:	f1ac 0402 	sub.w	r4, ip, #2
 8003e88:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003e8c:	1c41      	adds	r1, r0, #1
 8003e8e:	4622      	mov	r2, r4
 8003e90:	42ba      	cmp	r2, r7
 8003e92:	d30a      	bcc.n	8003eaa <__exponent+0x66>
 8003e94:	f10d 0209 	add.w	r2, sp, #9
 8003e98:	eba2 020c 	sub.w	r2, r2, ip
 8003e9c:	42bc      	cmp	r4, r7
 8003e9e:	bf88      	it	hi
 8003ea0:	2200      	movhi	r2, #0
 8003ea2:	4413      	add	r3, r2
 8003ea4:	1a18      	subs	r0, r3, r0
 8003ea6:	b003      	add	sp, #12
 8003ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003eae:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003eb2:	e7ed      	b.n	8003e90 <__exponent+0x4c>
 8003eb4:	2330      	movs	r3, #48	; 0x30
 8003eb6:	3130      	adds	r1, #48	; 0x30
 8003eb8:	7083      	strb	r3, [r0, #2]
 8003eba:	70c1      	strb	r1, [r0, #3]
 8003ebc:	1d03      	adds	r3, r0, #4
 8003ebe:	e7f1      	b.n	8003ea4 <__exponent+0x60>

08003ec0 <_printf_float>:
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	ed2d 8b02 	vpush	{d8}
 8003ec8:	b08d      	sub	sp, #52	; 0x34
 8003eca:	460c      	mov	r4, r1
 8003ecc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ed0:	4616      	mov	r6, r2
 8003ed2:	461f      	mov	r7, r3
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	f000 fce7 	bl	80048a8 <_localeconv_r>
 8003eda:	f8d0 a000 	ldr.w	sl, [r0]
 8003ede:	4650      	mov	r0, sl
 8003ee0:	f7fc f9ce 	bl	8000280 <strlen>
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	930a      	str	r3, [sp, #40]	; 0x28
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	9305      	str	r3, [sp, #20]
 8003eec:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ef4:	3307      	adds	r3, #7
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	f103 0208 	add.w	r2, r3, #8
 8003efe:	f8c8 2000 	str.w	r2, [r8]
 8003f02:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f0a:	9307      	str	r3, [sp, #28]
 8003f0c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f10:	ee08 0a10 	vmov	s16, r0
 8003f14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8003f18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f1c:	4b9e      	ldr	r3, [pc, #632]	; (8004198 <_printf_float+0x2d8>)
 8003f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f22:	f7fc fe0b 	bl	8000b3c <__aeabi_dcmpun>
 8003f26:	bb88      	cbnz	r0, 8003f8c <_printf_float+0xcc>
 8003f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f2c:	4b9a      	ldr	r3, [pc, #616]	; (8004198 <_printf_float+0x2d8>)
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f32:	f7fc fde5 	bl	8000b00 <__aeabi_dcmple>
 8003f36:	bb48      	cbnz	r0, 8003f8c <_printf_float+0xcc>
 8003f38:	2200      	movs	r2, #0
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	4640      	mov	r0, r8
 8003f3e:	4649      	mov	r1, r9
 8003f40:	f7fc fdd4 	bl	8000aec <__aeabi_dcmplt>
 8003f44:	b110      	cbz	r0, 8003f4c <_printf_float+0x8c>
 8003f46:	232d      	movs	r3, #45	; 0x2d
 8003f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f4c:	4a93      	ldr	r2, [pc, #588]	; (800419c <_printf_float+0x2dc>)
 8003f4e:	4b94      	ldr	r3, [pc, #592]	; (80041a0 <_printf_float+0x2e0>)
 8003f50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f54:	bf94      	ite	ls
 8003f56:	4690      	movls	r8, r2
 8003f58:	4698      	movhi	r8, r3
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	6123      	str	r3, [r4, #16]
 8003f5e:	9b05      	ldr	r3, [sp, #20]
 8003f60:	f023 0304 	bic.w	r3, r3, #4
 8003f64:	6023      	str	r3, [r4, #0]
 8003f66:	f04f 0900 	mov.w	r9, #0
 8003f6a:	9700      	str	r7, [sp, #0]
 8003f6c:	4633      	mov	r3, r6
 8003f6e:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f70:	4621      	mov	r1, r4
 8003f72:	4628      	mov	r0, r5
 8003f74:	f000 f9da 	bl	800432c <_printf_common>
 8003f78:	3001      	adds	r0, #1
 8003f7a:	f040 8090 	bne.w	800409e <_printf_float+0x1de>
 8003f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8003f82:	b00d      	add	sp, #52	; 0x34
 8003f84:	ecbd 8b02 	vpop	{d8}
 8003f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f8c:	4642      	mov	r2, r8
 8003f8e:	464b      	mov	r3, r9
 8003f90:	4640      	mov	r0, r8
 8003f92:	4649      	mov	r1, r9
 8003f94:	f7fc fdd2 	bl	8000b3c <__aeabi_dcmpun>
 8003f98:	b140      	cbz	r0, 8003fac <_printf_float+0xec>
 8003f9a:	464b      	mov	r3, r9
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	bfbc      	itt	lt
 8003fa0:	232d      	movlt	r3, #45	; 0x2d
 8003fa2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fa6:	4a7f      	ldr	r2, [pc, #508]	; (80041a4 <_printf_float+0x2e4>)
 8003fa8:	4b7f      	ldr	r3, [pc, #508]	; (80041a8 <_printf_float+0x2e8>)
 8003faa:	e7d1      	b.n	8003f50 <_printf_float+0x90>
 8003fac:	6863      	ldr	r3, [r4, #4]
 8003fae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003fb2:	9206      	str	r2, [sp, #24]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	d13f      	bne.n	8004038 <_printf_float+0x178>
 8003fb8:	2306      	movs	r3, #6
 8003fba:	6063      	str	r3, [r4, #4]
 8003fbc:	9b05      	ldr	r3, [sp, #20]
 8003fbe:	6861      	ldr	r1, [r4, #4]
 8003fc0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	9303      	str	r3, [sp, #12]
 8003fc8:	ab0a      	add	r3, sp, #40	; 0x28
 8003fca:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fce:	ab09      	add	r3, sp, #36	; 0x24
 8003fd0:	ec49 8b10 	vmov	d0, r8, r9
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6022      	str	r2, [r4, #0]
 8003fd8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fdc:	4628      	mov	r0, r5
 8003fde:	f7ff fecf 	bl	8003d80 <__cvt>
 8003fe2:	9b06      	ldr	r3, [sp, #24]
 8003fe4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fe6:	2b47      	cmp	r3, #71	; 0x47
 8003fe8:	4680      	mov	r8, r0
 8003fea:	d108      	bne.n	8003ffe <_printf_float+0x13e>
 8003fec:	1cc8      	adds	r0, r1, #3
 8003fee:	db02      	blt.n	8003ff6 <_printf_float+0x136>
 8003ff0:	6863      	ldr	r3, [r4, #4]
 8003ff2:	4299      	cmp	r1, r3
 8003ff4:	dd41      	ble.n	800407a <_printf_float+0x1ba>
 8003ff6:	f1ab 0302 	sub.w	r3, fp, #2
 8003ffa:	fa5f fb83 	uxtb.w	fp, r3
 8003ffe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004002:	d820      	bhi.n	8004046 <_printf_float+0x186>
 8004004:	3901      	subs	r1, #1
 8004006:	465a      	mov	r2, fp
 8004008:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800400c:	9109      	str	r1, [sp, #36]	; 0x24
 800400e:	f7ff ff19 	bl	8003e44 <__exponent>
 8004012:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004014:	1813      	adds	r3, r2, r0
 8004016:	2a01      	cmp	r2, #1
 8004018:	4681      	mov	r9, r0
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	dc02      	bgt.n	8004024 <_printf_float+0x164>
 800401e:	6822      	ldr	r2, [r4, #0]
 8004020:	07d2      	lsls	r2, r2, #31
 8004022:	d501      	bpl.n	8004028 <_printf_float+0x168>
 8004024:	3301      	adds	r3, #1
 8004026:	6123      	str	r3, [r4, #16]
 8004028:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800402c:	2b00      	cmp	r3, #0
 800402e:	d09c      	beq.n	8003f6a <_printf_float+0xaa>
 8004030:	232d      	movs	r3, #45	; 0x2d
 8004032:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004036:	e798      	b.n	8003f6a <_printf_float+0xaa>
 8004038:	9a06      	ldr	r2, [sp, #24]
 800403a:	2a47      	cmp	r2, #71	; 0x47
 800403c:	d1be      	bne.n	8003fbc <_printf_float+0xfc>
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1bc      	bne.n	8003fbc <_printf_float+0xfc>
 8004042:	2301      	movs	r3, #1
 8004044:	e7b9      	b.n	8003fba <_printf_float+0xfa>
 8004046:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800404a:	d118      	bne.n	800407e <_printf_float+0x1be>
 800404c:	2900      	cmp	r1, #0
 800404e:	6863      	ldr	r3, [r4, #4]
 8004050:	dd0b      	ble.n	800406a <_printf_float+0x1aa>
 8004052:	6121      	str	r1, [r4, #16]
 8004054:	b913      	cbnz	r3, 800405c <_printf_float+0x19c>
 8004056:	6822      	ldr	r2, [r4, #0]
 8004058:	07d0      	lsls	r0, r2, #31
 800405a:	d502      	bpl.n	8004062 <_printf_float+0x1a2>
 800405c:	3301      	adds	r3, #1
 800405e:	440b      	add	r3, r1
 8004060:	6123      	str	r3, [r4, #16]
 8004062:	65a1      	str	r1, [r4, #88]	; 0x58
 8004064:	f04f 0900 	mov.w	r9, #0
 8004068:	e7de      	b.n	8004028 <_printf_float+0x168>
 800406a:	b913      	cbnz	r3, 8004072 <_printf_float+0x1b2>
 800406c:	6822      	ldr	r2, [r4, #0]
 800406e:	07d2      	lsls	r2, r2, #31
 8004070:	d501      	bpl.n	8004076 <_printf_float+0x1b6>
 8004072:	3302      	adds	r3, #2
 8004074:	e7f4      	b.n	8004060 <_printf_float+0x1a0>
 8004076:	2301      	movs	r3, #1
 8004078:	e7f2      	b.n	8004060 <_printf_float+0x1a0>
 800407a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800407e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004080:	4299      	cmp	r1, r3
 8004082:	db05      	blt.n	8004090 <_printf_float+0x1d0>
 8004084:	6823      	ldr	r3, [r4, #0]
 8004086:	6121      	str	r1, [r4, #16]
 8004088:	07d8      	lsls	r0, r3, #31
 800408a:	d5ea      	bpl.n	8004062 <_printf_float+0x1a2>
 800408c:	1c4b      	adds	r3, r1, #1
 800408e:	e7e7      	b.n	8004060 <_printf_float+0x1a0>
 8004090:	2900      	cmp	r1, #0
 8004092:	bfd4      	ite	le
 8004094:	f1c1 0202 	rsble	r2, r1, #2
 8004098:	2201      	movgt	r2, #1
 800409a:	4413      	add	r3, r2
 800409c:	e7e0      	b.n	8004060 <_printf_float+0x1a0>
 800409e:	6823      	ldr	r3, [r4, #0]
 80040a0:	055a      	lsls	r2, r3, #21
 80040a2:	d407      	bmi.n	80040b4 <_printf_float+0x1f4>
 80040a4:	6923      	ldr	r3, [r4, #16]
 80040a6:	4642      	mov	r2, r8
 80040a8:	4631      	mov	r1, r6
 80040aa:	4628      	mov	r0, r5
 80040ac:	47b8      	blx	r7
 80040ae:	3001      	adds	r0, #1
 80040b0:	d12c      	bne.n	800410c <_printf_float+0x24c>
 80040b2:	e764      	b.n	8003f7e <_printf_float+0xbe>
 80040b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040b8:	f240 80e0 	bls.w	800427c <_printf_float+0x3bc>
 80040bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c0:	2200      	movs	r2, #0
 80040c2:	2300      	movs	r3, #0
 80040c4:	f7fc fd08 	bl	8000ad8 <__aeabi_dcmpeq>
 80040c8:	2800      	cmp	r0, #0
 80040ca:	d034      	beq.n	8004136 <_printf_float+0x276>
 80040cc:	4a37      	ldr	r2, [pc, #220]	; (80041ac <_printf_float+0x2ec>)
 80040ce:	2301      	movs	r3, #1
 80040d0:	4631      	mov	r1, r6
 80040d2:	4628      	mov	r0, r5
 80040d4:	47b8      	blx	r7
 80040d6:	3001      	adds	r0, #1
 80040d8:	f43f af51 	beq.w	8003f7e <_printf_float+0xbe>
 80040dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040e0:	429a      	cmp	r2, r3
 80040e2:	db02      	blt.n	80040ea <_printf_float+0x22a>
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	07d8      	lsls	r0, r3, #31
 80040e8:	d510      	bpl.n	800410c <_printf_float+0x24c>
 80040ea:	ee18 3a10 	vmov	r3, s16
 80040ee:	4652      	mov	r2, sl
 80040f0:	4631      	mov	r1, r6
 80040f2:	4628      	mov	r0, r5
 80040f4:	47b8      	blx	r7
 80040f6:	3001      	adds	r0, #1
 80040f8:	f43f af41 	beq.w	8003f7e <_printf_float+0xbe>
 80040fc:	f04f 0800 	mov.w	r8, #0
 8004100:	f104 091a 	add.w	r9, r4, #26
 8004104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004106:	3b01      	subs	r3, #1
 8004108:	4543      	cmp	r3, r8
 800410a:	dc09      	bgt.n	8004120 <_printf_float+0x260>
 800410c:	6823      	ldr	r3, [r4, #0]
 800410e:	079b      	lsls	r3, r3, #30
 8004110:	f100 8107 	bmi.w	8004322 <_printf_float+0x462>
 8004114:	68e0      	ldr	r0, [r4, #12]
 8004116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004118:	4298      	cmp	r0, r3
 800411a:	bfb8      	it	lt
 800411c:	4618      	movlt	r0, r3
 800411e:	e730      	b.n	8003f82 <_printf_float+0xc2>
 8004120:	2301      	movs	r3, #1
 8004122:	464a      	mov	r2, r9
 8004124:	4631      	mov	r1, r6
 8004126:	4628      	mov	r0, r5
 8004128:	47b8      	blx	r7
 800412a:	3001      	adds	r0, #1
 800412c:	f43f af27 	beq.w	8003f7e <_printf_float+0xbe>
 8004130:	f108 0801 	add.w	r8, r8, #1
 8004134:	e7e6      	b.n	8004104 <_printf_float+0x244>
 8004136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004138:	2b00      	cmp	r3, #0
 800413a:	dc39      	bgt.n	80041b0 <_printf_float+0x2f0>
 800413c:	4a1b      	ldr	r2, [pc, #108]	; (80041ac <_printf_float+0x2ec>)
 800413e:	2301      	movs	r3, #1
 8004140:	4631      	mov	r1, r6
 8004142:	4628      	mov	r0, r5
 8004144:	47b8      	blx	r7
 8004146:	3001      	adds	r0, #1
 8004148:	f43f af19 	beq.w	8003f7e <_printf_float+0xbe>
 800414c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004150:	4313      	orrs	r3, r2
 8004152:	d102      	bne.n	800415a <_printf_float+0x29a>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	07d9      	lsls	r1, r3, #31
 8004158:	d5d8      	bpl.n	800410c <_printf_float+0x24c>
 800415a:	ee18 3a10 	vmov	r3, s16
 800415e:	4652      	mov	r2, sl
 8004160:	4631      	mov	r1, r6
 8004162:	4628      	mov	r0, r5
 8004164:	47b8      	blx	r7
 8004166:	3001      	adds	r0, #1
 8004168:	f43f af09 	beq.w	8003f7e <_printf_float+0xbe>
 800416c:	f04f 0900 	mov.w	r9, #0
 8004170:	f104 0a1a 	add.w	sl, r4, #26
 8004174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004176:	425b      	negs	r3, r3
 8004178:	454b      	cmp	r3, r9
 800417a:	dc01      	bgt.n	8004180 <_printf_float+0x2c0>
 800417c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800417e:	e792      	b.n	80040a6 <_printf_float+0x1e6>
 8004180:	2301      	movs	r3, #1
 8004182:	4652      	mov	r2, sl
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	47b8      	blx	r7
 800418a:	3001      	adds	r0, #1
 800418c:	f43f aef7 	beq.w	8003f7e <_printf_float+0xbe>
 8004190:	f109 0901 	add.w	r9, r9, #1
 8004194:	e7ee      	b.n	8004174 <_printf_float+0x2b4>
 8004196:	bf00      	nop
 8004198:	7fefffff 	.word	0x7fefffff
 800419c:	08019d10 	.word	0x08019d10
 80041a0:	08019d14 	.word	0x08019d14
 80041a4:	08019d18 	.word	0x08019d18
 80041a8:	08019d1c 	.word	0x08019d1c
 80041ac:	08019d20 	.word	0x08019d20
 80041b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041b4:	429a      	cmp	r2, r3
 80041b6:	bfa8      	it	ge
 80041b8:	461a      	movge	r2, r3
 80041ba:	2a00      	cmp	r2, #0
 80041bc:	4691      	mov	r9, r2
 80041be:	dc37      	bgt.n	8004230 <_printf_float+0x370>
 80041c0:	f04f 0b00 	mov.w	fp, #0
 80041c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041c8:	f104 021a 	add.w	r2, r4, #26
 80041cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041ce:	9305      	str	r3, [sp, #20]
 80041d0:	eba3 0309 	sub.w	r3, r3, r9
 80041d4:	455b      	cmp	r3, fp
 80041d6:	dc33      	bgt.n	8004240 <_printf_float+0x380>
 80041d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041dc:	429a      	cmp	r2, r3
 80041de:	db3b      	blt.n	8004258 <_printf_float+0x398>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	07da      	lsls	r2, r3, #31
 80041e4:	d438      	bmi.n	8004258 <_printf_float+0x398>
 80041e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80041ea:	eba2 0903 	sub.w	r9, r2, r3
 80041ee:	9b05      	ldr	r3, [sp, #20]
 80041f0:	1ad2      	subs	r2, r2, r3
 80041f2:	4591      	cmp	r9, r2
 80041f4:	bfa8      	it	ge
 80041f6:	4691      	movge	r9, r2
 80041f8:	f1b9 0f00 	cmp.w	r9, #0
 80041fc:	dc35      	bgt.n	800426a <_printf_float+0x3aa>
 80041fe:	f04f 0800 	mov.w	r8, #0
 8004202:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004206:	f104 0a1a 	add.w	sl, r4, #26
 800420a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800420e:	1a9b      	subs	r3, r3, r2
 8004210:	eba3 0309 	sub.w	r3, r3, r9
 8004214:	4543      	cmp	r3, r8
 8004216:	f77f af79 	ble.w	800410c <_printf_float+0x24c>
 800421a:	2301      	movs	r3, #1
 800421c:	4652      	mov	r2, sl
 800421e:	4631      	mov	r1, r6
 8004220:	4628      	mov	r0, r5
 8004222:	47b8      	blx	r7
 8004224:	3001      	adds	r0, #1
 8004226:	f43f aeaa 	beq.w	8003f7e <_printf_float+0xbe>
 800422a:	f108 0801 	add.w	r8, r8, #1
 800422e:	e7ec      	b.n	800420a <_printf_float+0x34a>
 8004230:	4613      	mov	r3, r2
 8004232:	4631      	mov	r1, r6
 8004234:	4642      	mov	r2, r8
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	d1c0      	bne.n	80041c0 <_printf_float+0x300>
 800423e:	e69e      	b.n	8003f7e <_printf_float+0xbe>
 8004240:	2301      	movs	r3, #1
 8004242:	4631      	mov	r1, r6
 8004244:	4628      	mov	r0, r5
 8004246:	9205      	str	r2, [sp, #20]
 8004248:	47b8      	blx	r7
 800424a:	3001      	adds	r0, #1
 800424c:	f43f ae97 	beq.w	8003f7e <_printf_float+0xbe>
 8004250:	9a05      	ldr	r2, [sp, #20]
 8004252:	f10b 0b01 	add.w	fp, fp, #1
 8004256:	e7b9      	b.n	80041cc <_printf_float+0x30c>
 8004258:	ee18 3a10 	vmov	r3, s16
 800425c:	4652      	mov	r2, sl
 800425e:	4631      	mov	r1, r6
 8004260:	4628      	mov	r0, r5
 8004262:	47b8      	blx	r7
 8004264:	3001      	adds	r0, #1
 8004266:	d1be      	bne.n	80041e6 <_printf_float+0x326>
 8004268:	e689      	b.n	8003f7e <_printf_float+0xbe>
 800426a:	9a05      	ldr	r2, [sp, #20]
 800426c:	464b      	mov	r3, r9
 800426e:	4442      	add	r2, r8
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	d1c1      	bne.n	80041fe <_printf_float+0x33e>
 800427a:	e680      	b.n	8003f7e <_printf_float+0xbe>
 800427c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800427e:	2a01      	cmp	r2, #1
 8004280:	dc01      	bgt.n	8004286 <_printf_float+0x3c6>
 8004282:	07db      	lsls	r3, r3, #31
 8004284:	d53a      	bpl.n	80042fc <_printf_float+0x43c>
 8004286:	2301      	movs	r3, #1
 8004288:	4642      	mov	r2, r8
 800428a:	4631      	mov	r1, r6
 800428c:	4628      	mov	r0, r5
 800428e:	47b8      	blx	r7
 8004290:	3001      	adds	r0, #1
 8004292:	f43f ae74 	beq.w	8003f7e <_printf_float+0xbe>
 8004296:	ee18 3a10 	vmov	r3, s16
 800429a:	4652      	mov	r2, sl
 800429c:	4631      	mov	r1, r6
 800429e:	4628      	mov	r0, r5
 80042a0:	47b8      	blx	r7
 80042a2:	3001      	adds	r0, #1
 80042a4:	f43f ae6b 	beq.w	8003f7e <_printf_float+0xbe>
 80042a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042ac:	2200      	movs	r2, #0
 80042ae:	2300      	movs	r3, #0
 80042b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80042b4:	f7fc fc10 	bl	8000ad8 <__aeabi_dcmpeq>
 80042b8:	b9d8      	cbnz	r0, 80042f2 <_printf_float+0x432>
 80042ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 80042be:	f108 0201 	add.w	r2, r8, #1
 80042c2:	4631      	mov	r1, r6
 80042c4:	4628      	mov	r0, r5
 80042c6:	47b8      	blx	r7
 80042c8:	3001      	adds	r0, #1
 80042ca:	d10e      	bne.n	80042ea <_printf_float+0x42a>
 80042cc:	e657      	b.n	8003f7e <_printf_float+0xbe>
 80042ce:	2301      	movs	r3, #1
 80042d0:	4652      	mov	r2, sl
 80042d2:	4631      	mov	r1, r6
 80042d4:	4628      	mov	r0, r5
 80042d6:	47b8      	blx	r7
 80042d8:	3001      	adds	r0, #1
 80042da:	f43f ae50 	beq.w	8003f7e <_printf_float+0xbe>
 80042de:	f108 0801 	add.w	r8, r8, #1
 80042e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	4543      	cmp	r3, r8
 80042e8:	dcf1      	bgt.n	80042ce <_printf_float+0x40e>
 80042ea:	464b      	mov	r3, r9
 80042ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042f0:	e6da      	b.n	80040a8 <_printf_float+0x1e8>
 80042f2:	f04f 0800 	mov.w	r8, #0
 80042f6:	f104 0a1a 	add.w	sl, r4, #26
 80042fa:	e7f2      	b.n	80042e2 <_printf_float+0x422>
 80042fc:	2301      	movs	r3, #1
 80042fe:	4642      	mov	r2, r8
 8004300:	e7df      	b.n	80042c2 <_printf_float+0x402>
 8004302:	2301      	movs	r3, #1
 8004304:	464a      	mov	r2, r9
 8004306:	4631      	mov	r1, r6
 8004308:	4628      	mov	r0, r5
 800430a:	47b8      	blx	r7
 800430c:	3001      	adds	r0, #1
 800430e:	f43f ae36 	beq.w	8003f7e <_printf_float+0xbe>
 8004312:	f108 0801 	add.w	r8, r8, #1
 8004316:	68e3      	ldr	r3, [r4, #12]
 8004318:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800431a:	1a5b      	subs	r3, r3, r1
 800431c:	4543      	cmp	r3, r8
 800431e:	dcf0      	bgt.n	8004302 <_printf_float+0x442>
 8004320:	e6f8      	b.n	8004114 <_printf_float+0x254>
 8004322:	f04f 0800 	mov.w	r8, #0
 8004326:	f104 0919 	add.w	r9, r4, #25
 800432a:	e7f4      	b.n	8004316 <_printf_float+0x456>

0800432c <_printf_common>:
 800432c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004330:	4616      	mov	r6, r2
 8004332:	4699      	mov	r9, r3
 8004334:	688a      	ldr	r2, [r1, #8]
 8004336:	690b      	ldr	r3, [r1, #16]
 8004338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800433c:	4293      	cmp	r3, r2
 800433e:	bfb8      	it	lt
 8004340:	4613      	movlt	r3, r2
 8004342:	6033      	str	r3, [r6, #0]
 8004344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004348:	4607      	mov	r7, r0
 800434a:	460c      	mov	r4, r1
 800434c:	b10a      	cbz	r2, 8004352 <_printf_common+0x26>
 800434e:	3301      	adds	r3, #1
 8004350:	6033      	str	r3, [r6, #0]
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	0699      	lsls	r1, r3, #26
 8004356:	bf42      	ittt	mi
 8004358:	6833      	ldrmi	r3, [r6, #0]
 800435a:	3302      	addmi	r3, #2
 800435c:	6033      	strmi	r3, [r6, #0]
 800435e:	6825      	ldr	r5, [r4, #0]
 8004360:	f015 0506 	ands.w	r5, r5, #6
 8004364:	d106      	bne.n	8004374 <_printf_common+0x48>
 8004366:	f104 0a19 	add.w	sl, r4, #25
 800436a:	68e3      	ldr	r3, [r4, #12]
 800436c:	6832      	ldr	r2, [r6, #0]
 800436e:	1a9b      	subs	r3, r3, r2
 8004370:	42ab      	cmp	r3, r5
 8004372:	dc26      	bgt.n	80043c2 <_printf_common+0x96>
 8004374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004378:	1e13      	subs	r3, r2, #0
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	bf18      	it	ne
 800437e:	2301      	movne	r3, #1
 8004380:	0692      	lsls	r2, r2, #26
 8004382:	d42b      	bmi.n	80043dc <_printf_common+0xb0>
 8004384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004388:	4649      	mov	r1, r9
 800438a:	4638      	mov	r0, r7
 800438c:	47c0      	blx	r8
 800438e:	3001      	adds	r0, #1
 8004390:	d01e      	beq.n	80043d0 <_printf_common+0xa4>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	6922      	ldr	r2, [r4, #16]
 8004396:	f003 0306 	and.w	r3, r3, #6
 800439a:	2b04      	cmp	r3, #4
 800439c:	bf02      	ittt	eq
 800439e:	68e5      	ldreq	r5, [r4, #12]
 80043a0:	6833      	ldreq	r3, [r6, #0]
 80043a2:	1aed      	subeq	r5, r5, r3
 80043a4:	68a3      	ldr	r3, [r4, #8]
 80043a6:	bf0c      	ite	eq
 80043a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043ac:	2500      	movne	r5, #0
 80043ae:	4293      	cmp	r3, r2
 80043b0:	bfc4      	itt	gt
 80043b2:	1a9b      	subgt	r3, r3, r2
 80043b4:	18ed      	addgt	r5, r5, r3
 80043b6:	2600      	movs	r6, #0
 80043b8:	341a      	adds	r4, #26
 80043ba:	42b5      	cmp	r5, r6
 80043bc:	d11a      	bne.n	80043f4 <_printf_common+0xc8>
 80043be:	2000      	movs	r0, #0
 80043c0:	e008      	b.n	80043d4 <_printf_common+0xa8>
 80043c2:	2301      	movs	r3, #1
 80043c4:	4652      	mov	r2, sl
 80043c6:	4649      	mov	r1, r9
 80043c8:	4638      	mov	r0, r7
 80043ca:	47c0      	blx	r8
 80043cc:	3001      	adds	r0, #1
 80043ce:	d103      	bne.n	80043d8 <_printf_common+0xac>
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	3501      	adds	r5, #1
 80043da:	e7c6      	b.n	800436a <_printf_common+0x3e>
 80043dc:	18e1      	adds	r1, r4, r3
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	2030      	movs	r0, #48	; 0x30
 80043e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043e6:	4422      	add	r2, r4
 80043e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f0:	3302      	adds	r3, #2
 80043f2:	e7c7      	b.n	8004384 <_printf_common+0x58>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4622      	mov	r2, r4
 80043f8:	4649      	mov	r1, r9
 80043fa:	4638      	mov	r0, r7
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d0e6      	beq.n	80043d0 <_printf_common+0xa4>
 8004402:	3601      	adds	r6, #1
 8004404:	e7d9      	b.n	80043ba <_printf_common+0x8e>
	...

08004408 <_printf_i>:
 8004408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	7e0f      	ldrb	r7, [r1, #24]
 800440e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004410:	2f78      	cmp	r7, #120	; 0x78
 8004412:	4691      	mov	r9, r2
 8004414:	4680      	mov	r8, r0
 8004416:	460c      	mov	r4, r1
 8004418:	469a      	mov	sl, r3
 800441a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800441e:	d807      	bhi.n	8004430 <_printf_i+0x28>
 8004420:	2f62      	cmp	r7, #98	; 0x62
 8004422:	d80a      	bhi.n	800443a <_printf_i+0x32>
 8004424:	2f00      	cmp	r7, #0
 8004426:	f000 80d4 	beq.w	80045d2 <_printf_i+0x1ca>
 800442a:	2f58      	cmp	r7, #88	; 0x58
 800442c:	f000 80c0 	beq.w	80045b0 <_printf_i+0x1a8>
 8004430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004438:	e03a      	b.n	80044b0 <_printf_i+0xa8>
 800443a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800443e:	2b15      	cmp	r3, #21
 8004440:	d8f6      	bhi.n	8004430 <_printf_i+0x28>
 8004442:	a101      	add	r1, pc, #4	; (adr r1, 8004448 <_printf_i+0x40>)
 8004444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004448:	080044a1 	.word	0x080044a1
 800444c:	080044b5 	.word	0x080044b5
 8004450:	08004431 	.word	0x08004431
 8004454:	08004431 	.word	0x08004431
 8004458:	08004431 	.word	0x08004431
 800445c:	08004431 	.word	0x08004431
 8004460:	080044b5 	.word	0x080044b5
 8004464:	08004431 	.word	0x08004431
 8004468:	08004431 	.word	0x08004431
 800446c:	08004431 	.word	0x08004431
 8004470:	08004431 	.word	0x08004431
 8004474:	080045b9 	.word	0x080045b9
 8004478:	080044e1 	.word	0x080044e1
 800447c:	08004573 	.word	0x08004573
 8004480:	08004431 	.word	0x08004431
 8004484:	08004431 	.word	0x08004431
 8004488:	080045db 	.word	0x080045db
 800448c:	08004431 	.word	0x08004431
 8004490:	080044e1 	.word	0x080044e1
 8004494:	08004431 	.word	0x08004431
 8004498:	08004431 	.word	0x08004431
 800449c:	0800457b 	.word	0x0800457b
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	1d1a      	adds	r2, r3, #4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	602a      	str	r2, [r5, #0]
 80044a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b0:	2301      	movs	r3, #1
 80044b2:	e09f      	b.n	80045f4 <_printf_i+0x1ec>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	682b      	ldr	r3, [r5, #0]
 80044b8:	0607      	lsls	r7, r0, #24
 80044ba:	f103 0104 	add.w	r1, r3, #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	d501      	bpl.n	80044c6 <_printf_i+0xbe>
 80044c2:	681e      	ldr	r6, [r3, #0]
 80044c4:	e003      	b.n	80044ce <_printf_i+0xc6>
 80044c6:	0646      	lsls	r6, r0, #25
 80044c8:	d5fb      	bpl.n	80044c2 <_printf_i+0xba>
 80044ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80044ce:	2e00      	cmp	r6, #0
 80044d0:	da03      	bge.n	80044da <_printf_i+0xd2>
 80044d2:	232d      	movs	r3, #45	; 0x2d
 80044d4:	4276      	negs	r6, r6
 80044d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044da:	485a      	ldr	r0, [pc, #360]	; (8004644 <_printf_i+0x23c>)
 80044dc:	230a      	movs	r3, #10
 80044de:	e012      	b.n	8004506 <_printf_i+0xfe>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	6820      	ldr	r0, [r4, #0]
 80044e4:	1d19      	adds	r1, r3, #4
 80044e6:	6029      	str	r1, [r5, #0]
 80044e8:	0605      	lsls	r5, r0, #24
 80044ea:	d501      	bpl.n	80044f0 <_printf_i+0xe8>
 80044ec:	681e      	ldr	r6, [r3, #0]
 80044ee:	e002      	b.n	80044f6 <_printf_i+0xee>
 80044f0:	0641      	lsls	r1, r0, #25
 80044f2:	d5fb      	bpl.n	80044ec <_printf_i+0xe4>
 80044f4:	881e      	ldrh	r6, [r3, #0]
 80044f6:	4853      	ldr	r0, [pc, #332]	; (8004644 <_printf_i+0x23c>)
 80044f8:	2f6f      	cmp	r7, #111	; 0x6f
 80044fa:	bf0c      	ite	eq
 80044fc:	2308      	moveq	r3, #8
 80044fe:	230a      	movne	r3, #10
 8004500:	2100      	movs	r1, #0
 8004502:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004506:	6865      	ldr	r5, [r4, #4]
 8004508:	60a5      	str	r5, [r4, #8]
 800450a:	2d00      	cmp	r5, #0
 800450c:	bfa2      	ittt	ge
 800450e:	6821      	ldrge	r1, [r4, #0]
 8004510:	f021 0104 	bicge.w	r1, r1, #4
 8004514:	6021      	strge	r1, [r4, #0]
 8004516:	b90e      	cbnz	r6, 800451c <_printf_i+0x114>
 8004518:	2d00      	cmp	r5, #0
 800451a:	d04b      	beq.n	80045b4 <_printf_i+0x1ac>
 800451c:	4615      	mov	r5, r2
 800451e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004522:	fb03 6711 	mls	r7, r3, r1, r6
 8004526:	5dc7      	ldrb	r7, [r0, r7]
 8004528:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800452c:	4637      	mov	r7, r6
 800452e:	42bb      	cmp	r3, r7
 8004530:	460e      	mov	r6, r1
 8004532:	d9f4      	bls.n	800451e <_printf_i+0x116>
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10b      	bne.n	8004550 <_printf_i+0x148>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	07de      	lsls	r6, r3, #31
 800453c:	d508      	bpl.n	8004550 <_printf_i+0x148>
 800453e:	6923      	ldr	r3, [r4, #16]
 8004540:	6861      	ldr	r1, [r4, #4]
 8004542:	4299      	cmp	r1, r3
 8004544:	bfde      	ittt	le
 8004546:	2330      	movle	r3, #48	; 0x30
 8004548:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004550:	1b52      	subs	r2, r2, r5
 8004552:	6122      	str	r2, [r4, #16]
 8004554:	f8cd a000 	str.w	sl, [sp]
 8004558:	464b      	mov	r3, r9
 800455a:	aa03      	add	r2, sp, #12
 800455c:	4621      	mov	r1, r4
 800455e:	4640      	mov	r0, r8
 8004560:	f7ff fee4 	bl	800432c <_printf_common>
 8004564:	3001      	adds	r0, #1
 8004566:	d14a      	bne.n	80045fe <_printf_i+0x1f6>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	b004      	add	sp, #16
 800456e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004572:	6823      	ldr	r3, [r4, #0]
 8004574:	f043 0320 	orr.w	r3, r3, #32
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	4833      	ldr	r0, [pc, #204]	; (8004648 <_printf_i+0x240>)
 800457c:	2778      	movs	r7, #120	; 0x78
 800457e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	6829      	ldr	r1, [r5, #0]
 8004586:	061f      	lsls	r7, r3, #24
 8004588:	f851 6b04 	ldr.w	r6, [r1], #4
 800458c:	d402      	bmi.n	8004594 <_printf_i+0x18c>
 800458e:	065f      	lsls	r7, r3, #25
 8004590:	bf48      	it	mi
 8004592:	b2b6      	uxthmi	r6, r6
 8004594:	07df      	lsls	r7, r3, #31
 8004596:	bf48      	it	mi
 8004598:	f043 0320 	orrmi.w	r3, r3, #32
 800459c:	6029      	str	r1, [r5, #0]
 800459e:	bf48      	it	mi
 80045a0:	6023      	strmi	r3, [r4, #0]
 80045a2:	b91e      	cbnz	r6, 80045ac <_printf_i+0x1a4>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	f023 0320 	bic.w	r3, r3, #32
 80045aa:	6023      	str	r3, [r4, #0]
 80045ac:	2310      	movs	r3, #16
 80045ae:	e7a7      	b.n	8004500 <_printf_i+0xf8>
 80045b0:	4824      	ldr	r0, [pc, #144]	; (8004644 <_printf_i+0x23c>)
 80045b2:	e7e4      	b.n	800457e <_printf_i+0x176>
 80045b4:	4615      	mov	r5, r2
 80045b6:	e7bd      	b.n	8004534 <_printf_i+0x12c>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	6826      	ldr	r6, [r4, #0]
 80045bc:	6961      	ldr	r1, [r4, #20]
 80045be:	1d18      	adds	r0, r3, #4
 80045c0:	6028      	str	r0, [r5, #0]
 80045c2:	0635      	lsls	r5, r6, #24
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	d501      	bpl.n	80045cc <_printf_i+0x1c4>
 80045c8:	6019      	str	r1, [r3, #0]
 80045ca:	e002      	b.n	80045d2 <_printf_i+0x1ca>
 80045cc:	0670      	lsls	r0, r6, #25
 80045ce:	d5fb      	bpl.n	80045c8 <_printf_i+0x1c0>
 80045d0:	8019      	strh	r1, [r3, #0]
 80045d2:	2300      	movs	r3, #0
 80045d4:	6123      	str	r3, [r4, #16]
 80045d6:	4615      	mov	r5, r2
 80045d8:	e7bc      	b.n	8004554 <_printf_i+0x14c>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	1d1a      	adds	r2, r3, #4
 80045de:	602a      	str	r2, [r5, #0]
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	6862      	ldr	r2, [r4, #4]
 80045e4:	2100      	movs	r1, #0
 80045e6:	4628      	mov	r0, r5
 80045e8:	f7fb fdfa 	bl	80001e0 <memchr>
 80045ec:	b108      	cbz	r0, 80045f2 <_printf_i+0x1ea>
 80045ee:	1b40      	subs	r0, r0, r5
 80045f0:	6060      	str	r0, [r4, #4]
 80045f2:	6863      	ldr	r3, [r4, #4]
 80045f4:	6123      	str	r3, [r4, #16]
 80045f6:	2300      	movs	r3, #0
 80045f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045fc:	e7aa      	b.n	8004554 <_printf_i+0x14c>
 80045fe:	6923      	ldr	r3, [r4, #16]
 8004600:	462a      	mov	r2, r5
 8004602:	4649      	mov	r1, r9
 8004604:	4640      	mov	r0, r8
 8004606:	47d0      	blx	sl
 8004608:	3001      	adds	r0, #1
 800460a:	d0ad      	beq.n	8004568 <_printf_i+0x160>
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	079b      	lsls	r3, r3, #30
 8004610:	d413      	bmi.n	800463a <_printf_i+0x232>
 8004612:	68e0      	ldr	r0, [r4, #12]
 8004614:	9b03      	ldr	r3, [sp, #12]
 8004616:	4298      	cmp	r0, r3
 8004618:	bfb8      	it	lt
 800461a:	4618      	movlt	r0, r3
 800461c:	e7a6      	b.n	800456c <_printf_i+0x164>
 800461e:	2301      	movs	r3, #1
 8004620:	4632      	mov	r2, r6
 8004622:	4649      	mov	r1, r9
 8004624:	4640      	mov	r0, r8
 8004626:	47d0      	blx	sl
 8004628:	3001      	adds	r0, #1
 800462a:	d09d      	beq.n	8004568 <_printf_i+0x160>
 800462c:	3501      	adds	r5, #1
 800462e:	68e3      	ldr	r3, [r4, #12]
 8004630:	9903      	ldr	r1, [sp, #12]
 8004632:	1a5b      	subs	r3, r3, r1
 8004634:	42ab      	cmp	r3, r5
 8004636:	dcf2      	bgt.n	800461e <_printf_i+0x216>
 8004638:	e7eb      	b.n	8004612 <_printf_i+0x20a>
 800463a:	2500      	movs	r5, #0
 800463c:	f104 0619 	add.w	r6, r4, #25
 8004640:	e7f5      	b.n	800462e <_printf_i+0x226>
 8004642:	bf00      	nop
 8004644:	08019d22 	.word	0x08019d22
 8004648:	08019d33 	.word	0x08019d33

0800464c <std>:
 800464c:	2300      	movs	r3, #0
 800464e:	b510      	push	{r4, lr}
 8004650:	4604      	mov	r4, r0
 8004652:	e9c0 3300 	strd	r3, r3, [r0]
 8004656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800465a:	6083      	str	r3, [r0, #8]
 800465c:	8181      	strh	r1, [r0, #12]
 800465e:	6643      	str	r3, [r0, #100]	; 0x64
 8004660:	81c2      	strh	r2, [r0, #14]
 8004662:	6183      	str	r3, [r0, #24]
 8004664:	4619      	mov	r1, r3
 8004666:	2208      	movs	r2, #8
 8004668:	305c      	adds	r0, #92	; 0x5c
 800466a:	f000 f914 	bl	8004896 <memset>
 800466e:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <std+0x58>)
 8004670:	6263      	str	r3, [r4, #36]	; 0x24
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <std+0x5c>)
 8004674:	62a3      	str	r3, [r4, #40]	; 0x28
 8004676:	4b0d      	ldr	r3, [pc, #52]	; (80046ac <std+0x60>)
 8004678:	62e3      	str	r3, [r4, #44]	; 0x2c
 800467a:	4b0d      	ldr	r3, [pc, #52]	; (80046b0 <std+0x64>)
 800467c:	6323      	str	r3, [r4, #48]	; 0x30
 800467e:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <std+0x68>)
 8004680:	6224      	str	r4, [r4, #32]
 8004682:	429c      	cmp	r4, r3
 8004684:	d006      	beq.n	8004694 <std+0x48>
 8004686:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800468a:	4294      	cmp	r4, r2
 800468c:	d002      	beq.n	8004694 <std+0x48>
 800468e:	33d0      	adds	r3, #208	; 0xd0
 8004690:	429c      	cmp	r4, r3
 8004692:	d105      	bne.n	80046a0 <std+0x54>
 8004694:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800469c:	f000 b978 	b.w	8004990 <__retarget_lock_init_recursive>
 80046a0:	bd10      	pop	{r4, pc}
 80046a2:	bf00      	nop
 80046a4:	08004811 	.word	0x08004811
 80046a8:	08004833 	.word	0x08004833
 80046ac:	0800486b 	.word	0x0800486b
 80046b0:	0800488f 	.word	0x0800488f
 80046b4:	20000208 	.word	0x20000208

080046b8 <stdio_exit_handler>:
 80046b8:	4a02      	ldr	r2, [pc, #8]	; (80046c4 <stdio_exit_handler+0xc>)
 80046ba:	4903      	ldr	r1, [pc, #12]	; (80046c8 <stdio_exit_handler+0x10>)
 80046bc:	4803      	ldr	r0, [pc, #12]	; (80046cc <stdio_exit_handler+0x14>)
 80046be:	f000 b869 	b.w	8004794 <_fwalk_sglue>
 80046c2:	bf00      	nop
 80046c4:	20000010 	.word	0x20000010
 80046c8:	08006361 	.word	0x08006361
 80046cc:	2000001c 	.word	0x2000001c

080046d0 <cleanup_stdio>:
 80046d0:	6841      	ldr	r1, [r0, #4]
 80046d2:	4b0c      	ldr	r3, [pc, #48]	; (8004704 <cleanup_stdio+0x34>)
 80046d4:	4299      	cmp	r1, r3
 80046d6:	b510      	push	{r4, lr}
 80046d8:	4604      	mov	r4, r0
 80046da:	d001      	beq.n	80046e0 <cleanup_stdio+0x10>
 80046dc:	f001 fe40 	bl	8006360 <_fflush_r>
 80046e0:	68a1      	ldr	r1, [r4, #8]
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <cleanup_stdio+0x38>)
 80046e4:	4299      	cmp	r1, r3
 80046e6:	d002      	beq.n	80046ee <cleanup_stdio+0x1e>
 80046e8:	4620      	mov	r0, r4
 80046ea:	f001 fe39 	bl	8006360 <_fflush_r>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <cleanup_stdio+0x3c>)
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d004      	beq.n	8004700 <cleanup_stdio+0x30>
 80046f6:	4620      	mov	r0, r4
 80046f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046fc:	f001 be30 	b.w	8006360 <_fflush_r>
 8004700:	bd10      	pop	{r4, pc}
 8004702:	bf00      	nop
 8004704:	20000208 	.word	0x20000208
 8004708:	20000270 	.word	0x20000270
 800470c:	200002d8 	.word	0x200002d8

08004710 <global_stdio_init.part.0>:
 8004710:	b510      	push	{r4, lr}
 8004712:	4b0b      	ldr	r3, [pc, #44]	; (8004740 <global_stdio_init.part.0+0x30>)
 8004714:	4c0b      	ldr	r4, [pc, #44]	; (8004744 <global_stdio_init.part.0+0x34>)
 8004716:	4a0c      	ldr	r2, [pc, #48]	; (8004748 <global_stdio_init.part.0+0x38>)
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	4620      	mov	r0, r4
 800471c:	2200      	movs	r2, #0
 800471e:	2104      	movs	r1, #4
 8004720:	f7ff ff94 	bl	800464c <std>
 8004724:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004728:	2201      	movs	r2, #1
 800472a:	2109      	movs	r1, #9
 800472c:	f7ff ff8e 	bl	800464c <std>
 8004730:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004734:	2202      	movs	r2, #2
 8004736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800473a:	2112      	movs	r1, #18
 800473c:	f7ff bf86 	b.w	800464c <std>
 8004740:	20000340 	.word	0x20000340
 8004744:	20000208 	.word	0x20000208
 8004748:	080046b9 	.word	0x080046b9

0800474c <__sfp_lock_acquire>:
 800474c:	4801      	ldr	r0, [pc, #4]	; (8004754 <__sfp_lock_acquire+0x8>)
 800474e:	f000 b920 	b.w	8004992 <__retarget_lock_acquire_recursive>
 8004752:	bf00      	nop
 8004754:	20000349 	.word	0x20000349

08004758 <__sfp_lock_release>:
 8004758:	4801      	ldr	r0, [pc, #4]	; (8004760 <__sfp_lock_release+0x8>)
 800475a:	f000 b91b 	b.w	8004994 <__retarget_lock_release_recursive>
 800475e:	bf00      	nop
 8004760:	20000349 	.word	0x20000349

08004764 <__sinit>:
 8004764:	b510      	push	{r4, lr}
 8004766:	4604      	mov	r4, r0
 8004768:	f7ff fff0 	bl	800474c <__sfp_lock_acquire>
 800476c:	6a23      	ldr	r3, [r4, #32]
 800476e:	b11b      	cbz	r3, 8004778 <__sinit+0x14>
 8004770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004774:	f7ff bff0 	b.w	8004758 <__sfp_lock_release>
 8004778:	4b04      	ldr	r3, [pc, #16]	; (800478c <__sinit+0x28>)
 800477a:	6223      	str	r3, [r4, #32]
 800477c:	4b04      	ldr	r3, [pc, #16]	; (8004790 <__sinit+0x2c>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f5      	bne.n	8004770 <__sinit+0xc>
 8004784:	f7ff ffc4 	bl	8004710 <global_stdio_init.part.0>
 8004788:	e7f2      	b.n	8004770 <__sinit+0xc>
 800478a:	bf00      	nop
 800478c:	080046d1 	.word	0x080046d1
 8004790:	20000340 	.word	0x20000340

08004794 <_fwalk_sglue>:
 8004794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004798:	4607      	mov	r7, r0
 800479a:	4688      	mov	r8, r1
 800479c:	4614      	mov	r4, r2
 800479e:	2600      	movs	r6, #0
 80047a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80047a4:	f1b9 0901 	subs.w	r9, r9, #1
 80047a8:	d505      	bpl.n	80047b6 <_fwalk_sglue+0x22>
 80047aa:	6824      	ldr	r4, [r4, #0]
 80047ac:	2c00      	cmp	r4, #0
 80047ae:	d1f7      	bne.n	80047a0 <_fwalk_sglue+0xc>
 80047b0:	4630      	mov	r0, r6
 80047b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047b6:	89ab      	ldrh	r3, [r5, #12]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d907      	bls.n	80047cc <_fwalk_sglue+0x38>
 80047bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047c0:	3301      	adds	r3, #1
 80047c2:	d003      	beq.n	80047cc <_fwalk_sglue+0x38>
 80047c4:	4629      	mov	r1, r5
 80047c6:	4638      	mov	r0, r7
 80047c8:	47c0      	blx	r8
 80047ca:	4306      	orrs	r6, r0
 80047cc:	3568      	adds	r5, #104	; 0x68
 80047ce:	e7e9      	b.n	80047a4 <_fwalk_sglue+0x10>

080047d0 <siprintf>:
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	b500      	push	{lr}
 80047d4:	b09c      	sub	sp, #112	; 0x70
 80047d6:	ab1d      	add	r3, sp, #116	; 0x74
 80047d8:	9002      	str	r0, [sp, #8]
 80047da:	9006      	str	r0, [sp, #24]
 80047dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80047e0:	4809      	ldr	r0, [pc, #36]	; (8004808 <siprintf+0x38>)
 80047e2:	9107      	str	r1, [sp, #28]
 80047e4:	9104      	str	r1, [sp, #16]
 80047e6:	4909      	ldr	r1, [pc, #36]	; (800480c <siprintf+0x3c>)
 80047e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ec:	9105      	str	r1, [sp, #20]
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	a902      	add	r1, sp, #8
 80047f4:	f001 fc30 	bl	8006058 <_svfiprintf_r>
 80047f8:	9b02      	ldr	r3, [sp, #8]
 80047fa:	2200      	movs	r2, #0
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	b01c      	add	sp, #112	; 0x70
 8004800:	f85d eb04 	ldr.w	lr, [sp], #4
 8004804:	b003      	add	sp, #12
 8004806:	4770      	bx	lr
 8004808:	20000068 	.word	0x20000068
 800480c:	ffff0208 	.word	0xffff0208

08004810 <__sread>:
 8004810:	b510      	push	{r4, lr}
 8004812:	460c      	mov	r4, r1
 8004814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004818:	f000 f86c 	bl	80048f4 <_read_r>
 800481c:	2800      	cmp	r0, #0
 800481e:	bfab      	itete	ge
 8004820:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004822:	89a3      	ldrhlt	r3, [r4, #12]
 8004824:	181b      	addge	r3, r3, r0
 8004826:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800482a:	bfac      	ite	ge
 800482c:	6563      	strge	r3, [r4, #84]	; 0x54
 800482e:	81a3      	strhlt	r3, [r4, #12]
 8004830:	bd10      	pop	{r4, pc}

08004832 <__swrite>:
 8004832:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004836:	461f      	mov	r7, r3
 8004838:	898b      	ldrh	r3, [r1, #12]
 800483a:	05db      	lsls	r3, r3, #23
 800483c:	4605      	mov	r5, r0
 800483e:	460c      	mov	r4, r1
 8004840:	4616      	mov	r6, r2
 8004842:	d505      	bpl.n	8004850 <__swrite+0x1e>
 8004844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004848:	2302      	movs	r3, #2
 800484a:	2200      	movs	r2, #0
 800484c:	f000 f840 	bl	80048d0 <_lseek_r>
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800485a:	81a3      	strh	r3, [r4, #12]
 800485c:	4632      	mov	r2, r6
 800485e:	463b      	mov	r3, r7
 8004860:	4628      	mov	r0, r5
 8004862:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004866:	f000 b857 	b.w	8004918 <_write_r>

0800486a <__sseek>:
 800486a:	b510      	push	{r4, lr}
 800486c:	460c      	mov	r4, r1
 800486e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004872:	f000 f82d 	bl	80048d0 <_lseek_r>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	89a3      	ldrh	r3, [r4, #12]
 800487a:	bf15      	itete	ne
 800487c:	6560      	strne	r0, [r4, #84]	; 0x54
 800487e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004882:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004886:	81a3      	strheq	r3, [r4, #12]
 8004888:	bf18      	it	ne
 800488a:	81a3      	strhne	r3, [r4, #12]
 800488c:	bd10      	pop	{r4, pc}

0800488e <__sclose>:
 800488e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004892:	f000 b80d 	b.w	80048b0 <_close_r>

08004896 <memset>:
 8004896:	4402      	add	r2, r0
 8004898:	4603      	mov	r3, r0
 800489a:	4293      	cmp	r3, r2
 800489c:	d100      	bne.n	80048a0 <memset+0xa>
 800489e:	4770      	bx	lr
 80048a0:	f803 1b01 	strb.w	r1, [r3], #1
 80048a4:	e7f9      	b.n	800489a <memset+0x4>
	...

080048a8 <_localeconv_r>:
 80048a8:	4800      	ldr	r0, [pc, #0]	; (80048ac <_localeconv_r+0x4>)
 80048aa:	4770      	bx	lr
 80048ac:	2000015c 	.word	0x2000015c

080048b0 <_close_r>:
 80048b0:	b538      	push	{r3, r4, r5, lr}
 80048b2:	4d06      	ldr	r5, [pc, #24]	; (80048cc <_close_r+0x1c>)
 80048b4:	2300      	movs	r3, #0
 80048b6:	4604      	mov	r4, r0
 80048b8:	4608      	mov	r0, r1
 80048ba:	602b      	str	r3, [r5, #0]
 80048bc:	f7fe fa7b 	bl	8002db6 <_close>
 80048c0:	1c43      	adds	r3, r0, #1
 80048c2:	d102      	bne.n	80048ca <_close_r+0x1a>
 80048c4:	682b      	ldr	r3, [r5, #0]
 80048c6:	b103      	cbz	r3, 80048ca <_close_r+0x1a>
 80048c8:	6023      	str	r3, [r4, #0]
 80048ca:	bd38      	pop	{r3, r4, r5, pc}
 80048cc:	20000344 	.word	0x20000344

080048d0 <_lseek_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	4d07      	ldr	r5, [pc, #28]	; (80048f0 <_lseek_r+0x20>)
 80048d4:	4604      	mov	r4, r0
 80048d6:	4608      	mov	r0, r1
 80048d8:	4611      	mov	r1, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	602a      	str	r2, [r5, #0]
 80048de:	461a      	mov	r2, r3
 80048e0:	f7fe fa90 	bl	8002e04 <_lseek>
 80048e4:	1c43      	adds	r3, r0, #1
 80048e6:	d102      	bne.n	80048ee <_lseek_r+0x1e>
 80048e8:	682b      	ldr	r3, [r5, #0]
 80048ea:	b103      	cbz	r3, 80048ee <_lseek_r+0x1e>
 80048ec:	6023      	str	r3, [r4, #0]
 80048ee:	bd38      	pop	{r3, r4, r5, pc}
 80048f0:	20000344 	.word	0x20000344

080048f4 <_read_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d07      	ldr	r5, [pc, #28]	; (8004914 <_read_r+0x20>)
 80048f8:	4604      	mov	r4, r0
 80048fa:	4608      	mov	r0, r1
 80048fc:	4611      	mov	r1, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f7fe fa1e 	bl	8002d44 <_read>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_read_r+0x1e>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_read_r+0x1e>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000344 	.word	0x20000344

08004918 <_write_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	4d07      	ldr	r5, [pc, #28]	; (8004938 <_write_r+0x20>)
 800491c:	4604      	mov	r4, r0
 800491e:	4608      	mov	r0, r1
 8004920:	4611      	mov	r1, r2
 8004922:	2200      	movs	r2, #0
 8004924:	602a      	str	r2, [r5, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	f7fe fa29 	bl	8002d7e <_write>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	d102      	bne.n	8004936 <_write_r+0x1e>
 8004930:	682b      	ldr	r3, [r5, #0]
 8004932:	b103      	cbz	r3, 8004936 <_write_r+0x1e>
 8004934:	6023      	str	r3, [r4, #0]
 8004936:	bd38      	pop	{r3, r4, r5, pc}
 8004938:	20000344 	.word	0x20000344

0800493c <__errno>:
 800493c:	4b01      	ldr	r3, [pc, #4]	; (8004944 <__errno+0x8>)
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	4770      	bx	lr
 8004942:	bf00      	nop
 8004944:	20000068 	.word	0x20000068

08004948 <__libc_init_array>:
 8004948:	b570      	push	{r4, r5, r6, lr}
 800494a:	4d0d      	ldr	r5, [pc, #52]	; (8004980 <__libc_init_array+0x38>)
 800494c:	4c0d      	ldr	r4, [pc, #52]	; (8004984 <__libc_init_array+0x3c>)
 800494e:	1b64      	subs	r4, r4, r5
 8004950:	10a4      	asrs	r4, r4, #2
 8004952:	2600      	movs	r6, #0
 8004954:	42a6      	cmp	r6, r4
 8004956:	d109      	bne.n	800496c <__libc_init_array+0x24>
 8004958:	4d0b      	ldr	r5, [pc, #44]	; (8004988 <__libc_init_array+0x40>)
 800495a:	4c0c      	ldr	r4, [pc, #48]	; (800498c <__libc_init_array+0x44>)
 800495c:	f003 f92c 	bl	8007bb8 <_init>
 8004960:	1b64      	subs	r4, r4, r5
 8004962:	10a4      	asrs	r4, r4, #2
 8004964:	2600      	movs	r6, #0
 8004966:	42a6      	cmp	r6, r4
 8004968:	d105      	bne.n	8004976 <__libc_init_array+0x2e>
 800496a:	bd70      	pop	{r4, r5, r6, pc}
 800496c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004970:	4798      	blx	r3
 8004972:	3601      	adds	r6, #1
 8004974:	e7ee      	b.n	8004954 <__libc_init_array+0xc>
 8004976:	f855 3b04 	ldr.w	r3, [r5], #4
 800497a:	4798      	blx	r3
 800497c:	3601      	adds	r6, #1
 800497e:	e7f2      	b.n	8004966 <__libc_init_array+0x1e>
 8004980:	0801a268 	.word	0x0801a268
 8004984:	0801a268 	.word	0x0801a268
 8004988:	0801a268 	.word	0x0801a268
 800498c:	0801a26c 	.word	0x0801a26c

08004990 <__retarget_lock_init_recursive>:
 8004990:	4770      	bx	lr

08004992 <__retarget_lock_acquire_recursive>:
 8004992:	4770      	bx	lr

08004994 <__retarget_lock_release_recursive>:
 8004994:	4770      	bx	lr

08004996 <memcpy>:
 8004996:	440a      	add	r2, r1
 8004998:	4291      	cmp	r1, r2
 800499a:	f100 33ff 	add.w	r3, r0, #4294967295
 800499e:	d100      	bne.n	80049a2 <memcpy+0xc>
 80049a0:	4770      	bx	lr
 80049a2:	b510      	push	{r4, lr}
 80049a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049ac:	4291      	cmp	r1, r2
 80049ae:	d1f9      	bne.n	80049a4 <memcpy+0xe>
 80049b0:	bd10      	pop	{r4, pc}

080049b2 <quorem>:
 80049b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b6:	6903      	ldr	r3, [r0, #16]
 80049b8:	690c      	ldr	r4, [r1, #16]
 80049ba:	42a3      	cmp	r3, r4
 80049bc:	4607      	mov	r7, r0
 80049be:	db7e      	blt.n	8004abe <quorem+0x10c>
 80049c0:	3c01      	subs	r4, #1
 80049c2:	f101 0814 	add.w	r8, r1, #20
 80049c6:	f100 0514 	add.w	r5, r0, #20
 80049ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049ce:	9301      	str	r3, [sp, #4]
 80049d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049d8:	3301      	adds	r3, #1
 80049da:	429a      	cmp	r2, r3
 80049dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80049e8:	d331      	bcc.n	8004a4e <quorem+0x9c>
 80049ea:	f04f 0e00 	mov.w	lr, #0
 80049ee:	4640      	mov	r0, r8
 80049f0:	46ac      	mov	ip, r5
 80049f2:	46f2      	mov	sl, lr
 80049f4:	f850 2b04 	ldr.w	r2, [r0], #4
 80049f8:	b293      	uxth	r3, r2
 80049fa:	fb06 e303 	mla	r3, r6, r3, lr
 80049fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a02:	0c1a      	lsrs	r2, r3, #16
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ebaa 0303 	sub.w	r3, sl, r3
 8004a0a:	f8dc a000 	ldr.w	sl, [ip]
 8004a0e:	fa13 f38a 	uxtah	r3, r3, sl
 8004a12:	fb06 220e 	mla	r2, r6, lr, r2
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	9b00      	ldr	r3, [sp, #0]
 8004a1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a1e:	b292      	uxth	r2, r2
 8004a20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a28:	f8bd 3000 	ldrh.w	r3, [sp]
 8004a2c:	4581      	cmp	r9, r0
 8004a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a32:	f84c 3b04 	str.w	r3, [ip], #4
 8004a36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a3a:	d2db      	bcs.n	80049f4 <quorem+0x42>
 8004a3c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a40:	b92b      	cbnz	r3, 8004a4e <quorem+0x9c>
 8004a42:	9b01      	ldr	r3, [sp, #4]
 8004a44:	3b04      	subs	r3, #4
 8004a46:	429d      	cmp	r5, r3
 8004a48:	461a      	mov	r2, r3
 8004a4a:	d32c      	bcc.n	8004aa6 <quorem+0xf4>
 8004a4c:	613c      	str	r4, [r7, #16]
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f001 f9a8 	bl	8005da4 <__mcmp>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	db22      	blt.n	8004a9e <quorem+0xec>
 8004a58:	3601      	adds	r6, #1
 8004a5a:	4629      	mov	r1, r5
 8004a5c:	2000      	movs	r0, #0
 8004a5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8004a62:	f8d1 c000 	ldr.w	ip, [r1]
 8004a66:	b293      	uxth	r3, r2
 8004a68:	1ac3      	subs	r3, r0, r3
 8004a6a:	0c12      	lsrs	r2, r2, #16
 8004a6c:	fa13 f38c 	uxtah	r3, r3, ip
 8004a70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004a74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a7e:	45c1      	cmp	r9, r8
 8004a80:	f841 3b04 	str.w	r3, [r1], #4
 8004a84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004a88:	d2e9      	bcs.n	8004a5e <quorem+0xac>
 8004a8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a92:	b922      	cbnz	r2, 8004a9e <quorem+0xec>
 8004a94:	3b04      	subs	r3, #4
 8004a96:	429d      	cmp	r5, r3
 8004a98:	461a      	mov	r2, r3
 8004a9a:	d30a      	bcc.n	8004ab2 <quorem+0x100>
 8004a9c:	613c      	str	r4, [r7, #16]
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	b003      	add	sp, #12
 8004aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	3b04      	subs	r3, #4
 8004aaa:	2a00      	cmp	r2, #0
 8004aac:	d1ce      	bne.n	8004a4c <quorem+0x9a>
 8004aae:	3c01      	subs	r4, #1
 8004ab0:	e7c9      	b.n	8004a46 <quorem+0x94>
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	3b04      	subs	r3, #4
 8004ab6:	2a00      	cmp	r2, #0
 8004ab8:	d1f0      	bne.n	8004a9c <quorem+0xea>
 8004aba:	3c01      	subs	r4, #1
 8004abc:	e7eb      	b.n	8004a96 <quorem+0xe4>
 8004abe:	2000      	movs	r0, #0
 8004ac0:	e7ee      	b.n	8004aa0 <quorem+0xee>
 8004ac2:	0000      	movs	r0, r0
 8004ac4:	0000      	movs	r0, r0
	...

08004ac8 <_dtoa_r>:
 8004ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004acc:	ed2d 8b04 	vpush	{d8-d9}
 8004ad0:	69c5      	ldr	r5, [r0, #28]
 8004ad2:	b093      	sub	sp, #76	; 0x4c
 8004ad4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004ad8:	ec57 6b10 	vmov	r6, r7, d0
 8004adc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004ae0:	9107      	str	r1, [sp, #28]
 8004ae2:	4604      	mov	r4, r0
 8004ae4:	920a      	str	r2, [sp, #40]	; 0x28
 8004ae6:	930d      	str	r3, [sp, #52]	; 0x34
 8004ae8:	b975      	cbnz	r5, 8004b08 <_dtoa_r+0x40>
 8004aea:	2010      	movs	r0, #16
 8004aec:	f000 fe2a 	bl	8005744 <malloc>
 8004af0:	4602      	mov	r2, r0
 8004af2:	61e0      	str	r0, [r4, #28]
 8004af4:	b920      	cbnz	r0, 8004b00 <_dtoa_r+0x38>
 8004af6:	4bae      	ldr	r3, [pc, #696]	; (8004db0 <_dtoa_r+0x2e8>)
 8004af8:	21ef      	movs	r1, #239	; 0xef
 8004afa:	48ae      	ldr	r0, [pc, #696]	; (8004db4 <_dtoa_r+0x2ec>)
 8004afc:	f001 fc82 	bl	8006404 <__assert_func>
 8004b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b04:	6005      	str	r5, [r0, #0]
 8004b06:	60c5      	str	r5, [r0, #12]
 8004b08:	69e3      	ldr	r3, [r4, #28]
 8004b0a:	6819      	ldr	r1, [r3, #0]
 8004b0c:	b151      	cbz	r1, 8004b24 <_dtoa_r+0x5c>
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	604a      	str	r2, [r1, #4]
 8004b12:	2301      	movs	r3, #1
 8004b14:	4093      	lsls	r3, r2
 8004b16:	608b      	str	r3, [r1, #8]
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f000 ff07 	bl	800592c <_Bfree>
 8004b1e:	69e3      	ldr	r3, [r4, #28]
 8004b20:	2200      	movs	r2, #0
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	1e3b      	subs	r3, r7, #0
 8004b26:	bfbb      	ittet	lt
 8004b28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b2c:	9303      	strlt	r3, [sp, #12]
 8004b2e:	2300      	movge	r3, #0
 8004b30:	2201      	movlt	r2, #1
 8004b32:	bfac      	ite	ge
 8004b34:	f8c8 3000 	strge.w	r3, [r8]
 8004b38:	f8c8 2000 	strlt.w	r2, [r8]
 8004b3c:	4b9e      	ldr	r3, [pc, #632]	; (8004db8 <_dtoa_r+0x2f0>)
 8004b3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004b42:	ea33 0308 	bics.w	r3, r3, r8
 8004b46:	d11b      	bne.n	8004b80 <_dtoa_r+0xb8>
 8004b48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b4e:	6013      	str	r3, [r2, #0]
 8004b50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8004b54:	4333      	orrs	r3, r6
 8004b56:	f000 8593 	beq.w	8005680 <_dtoa_r+0xbb8>
 8004b5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b5c:	b963      	cbnz	r3, 8004b78 <_dtoa_r+0xb0>
 8004b5e:	4b97      	ldr	r3, [pc, #604]	; (8004dbc <_dtoa_r+0x2f4>)
 8004b60:	e027      	b.n	8004bb2 <_dtoa_r+0xea>
 8004b62:	4b97      	ldr	r3, [pc, #604]	; (8004dc0 <_dtoa_r+0x2f8>)
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	3308      	adds	r3, #8
 8004b68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	9800      	ldr	r0, [sp, #0]
 8004b6e:	b013      	add	sp, #76	; 0x4c
 8004b70:	ecbd 8b04 	vpop	{d8-d9}
 8004b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b78:	4b90      	ldr	r3, [pc, #576]	; (8004dbc <_dtoa_r+0x2f4>)
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	3303      	adds	r3, #3
 8004b7e:	e7f3      	b.n	8004b68 <_dtoa_r+0xa0>
 8004b80:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b84:	2200      	movs	r2, #0
 8004b86:	ec51 0b17 	vmov	r0, r1, d7
 8004b8a:	eeb0 8a47 	vmov.f32	s16, s14
 8004b8e:	eef0 8a67 	vmov.f32	s17, s15
 8004b92:	2300      	movs	r3, #0
 8004b94:	f7fb ffa0 	bl	8000ad8 <__aeabi_dcmpeq>
 8004b98:	4681      	mov	r9, r0
 8004b9a:	b160      	cbz	r0, 8004bb6 <_dtoa_r+0xee>
 8004b9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]
 8004ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8568 	beq.w	800567a <_dtoa_r+0xbb2>
 8004baa:	4b86      	ldr	r3, [pc, #536]	; (8004dc4 <_dtoa_r+0x2fc>)
 8004bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bae:	6013      	str	r3, [r2, #0]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	e7da      	b.n	8004b6c <_dtoa_r+0xa4>
 8004bb6:	aa10      	add	r2, sp, #64	; 0x40
 8004bb8:	a911      	add	r1, sp, #68	; 0x44
 8004bba:	4620      	mov	r0, r4
 8004bbc:	eeb0 0a48 	vmov.f32	s0, s16
 8004bc0:	eef0 0a68 	vmov.f32	s1, s17
 8004bc4:	f001 f994 	bl	8005ef0 <__d2b>
 8004bc8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004bcc:	4682      	mov	sl, r0
 8004bce:	2d00      	cmp	r5, #0
 8004bd0:	d07f      	beq.n	8004cd2 <_dtoa_r+0x20a>
 8004bd2:	ee18 3a90 	vmov	r3, s17
 8004bd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004bde:	ec51 0b18 	vmov	r0, r1, d8
 8004be2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004be6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004bea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004bee:	4619      	mov	r1, r3
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	4b75      	ldr	r3, [pc, #468]	; (8004dc8 <_dtoa_r+0x300>)
 8004bf4:	f7fb fb50 	bl	8000298 <__aeabi_dsub>
 8004bf8:	a367      	add	r3, pc, #412	; (adr r3, 8004d98 <_dtoa_r+0x2d0>)
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	f7fb fd03 	bl	8000608 <__aeabi_dmul>
 8004c02:	a367      	add	r3, pc, #412	; (adr r3, 8004da0 <_dtoa_r+0x2d8>)
 8004c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c08:	f7fb fb48 	bl	800029c <__adddf3>
 8004c0c:	4606      	mov	r6, r0
 8004c0e:	4628      	mov	r0, r5
 8004c10:	460f      	mov	r7, r1
 8004c12:	f7fb fc8f 	bl	8000534 <__aeabi_i2d>
 8004c16:	a364      	add	r3, pc, #400	; (adr r3, 8004da8 <_dtoa_r+0x2e0>)
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f7fb fcf4 	bl	8000608 <__aeabi_dmul>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	f7fb fb38 	bl	800029c <__adddf3>
 8004c2c:	4606      	mov	r6, r0
 8004c2e:	460f      	mov	r7, r1
 8004c30:	f7fb ff9a 	bl	8000b68 <__aeabi_d2iz>
 8004c34:	2200      	movs	r2, #0
 8004c36:	4683      	mov	fp, r0
 8004c38:	2300      	movs	r3, #0
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	4639      	mov	r1, r7
 8004c3e:	f7fb ff55 	bl	8000aec <__aeabi_dcmplt>
 8004c42:	b148      	cbz	r0, 8004c58 <_dtoa_r+0x190>
 8004c44:	4658      	mov	r0, fp
 8004c46:	f7fb fc75 	bl	8000534 <__aeabi_i2d>
 8004c4a:	4632      	mov	r2, r6
 8004c4c:	463b      	mov	r3, r7
 8004c4e:	f7fb ff43 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c52:	b908      	cbnz	r0, 8004c58 <_dtoa_r+0x190>
 8004c54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c58:	f1bb 0f16 	cmp.w	fp, #22
 8004c5c:	d857      	bhi.n	8004d0e <_dtoa_r+0x246>
 8004c5e:	4b5b      	ldr	r3, [pc, #364]	; (8004dcc <_dtoa_r+0x304>)
 8004c60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	ec51 0b18 	vmov	r0, r1, d8
 8004c6c:	f7fb ff3e 	bl	8000aec <__aeabi_dcmplt>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d04e      	beq.n	8004d12 <_dtoa_r+0x24a>
 8004c74:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c78:	2300      	movs	r3, #0
 8004c7a:	930c      	str	r3, [sp, #48]	; 0x30
 8004c7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c7e:	1b5b      	subs	r3, r3, r5
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	bf45      	ittet	mi
 8004c84:	f1c3 0301 	rsbmi	r3, r3, #1
 8004c88:	9305      	strmi	r3, [sp, #20]
 8004c8a:	2300      	movpl	r3, #0
 8004c8c:	2300      	movmi	r3, #0
 8004c8e:	9206      	str	r2, [sp, #24]
 8004c90:	bf54      	ite	pl
 8004c92:	9305      	strpl	r3, [sp, #20]
 8004c94:	9306      	strmi	r3, [sp, #24]
 8004c96:	f1bb 0f00 	cmp.w	fp, #0
 8004c9a:	db3c      	blt.n	8004d16 <_dtoa_r+0x24e>
 8004c9c:	9b06      	ldr	r3, [sp, #24]
 8004c9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004ca2:	445b      	add	r3, fp
 8004ca4:	9306      	str	r3, [sp, #24]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9308      	str	r3, [sp, #32]
 8004caa:	9b07      	ldr	r3, [sp, #28]
 8004cac:	2b09      	cmp	r3, #9
 8004cae:	d868      	bhi.n	8004d82 <_dtoa_r+0x2ba>
 8004cb0:	2b05      	cmp	r3, #5
 8004cb2:	bfc4      	itt	gt
 8004cb4:	3b04      	subgt	r3, #4
 8004cb6:	9307      	strgt	r3, [sp, #28]
 8004cb8:	9b07      	ldr	r3, [sp, #28]
 8004cba:	f1a3 0302 	sub.w	r3, r3, #2
 8004cbe:	bfcc      	ite	gt
 8004cc0:	2500      	movgt	r5, #0
 8004cc2:	2501      	movle	r5, #1
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	f200 8085 	bhi.w	8004dd4 <_dtoa_r+0x30c>
 8004cca:	e8df f003 	tbb	[pc, r3]
 8004cce:	3b2e      	.short	0x3b2e
 8004cd0:	5839      	.short	0x5839
 8004cd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004cd6:	441d      	add	r5, r3
 8004cd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	bfc1      	itttt	gt
 8004ce0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004ce4:	fa08 f803 	lslgt.w	r8, r8, r3
 8004ce8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8004cec:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004cf0:	bfd6      	itet	le
 8004cf2:	f1c3 0320 	rsble	r3, r3, #32
 8004cf6:	ea48 0003 	orrgt.w	r0, r8, r3
 8004cfa:	fa06 f003 	lslle.w	r0, r6, r3
 8004cfe:	f7fb fc09 	bl	8000514 <__aeabi_ui2d>
 8004d02:	2201      	movs	r2, #1
 8004d04:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004d08:	3d01      	subs	r5, #1
 8004d0a:	920e      	str	r2, [sp, #56]	; 0x38
 8004d0c:	e76f      	b.n	8004bee <_dtoa_r+0x126>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e7b3      	b.n	8004c7a <_dtoa_r+0x1b2>
 8004d12:	900c      	str	r0, [sp, #48]	; 0x30
 8004d14:	e7b2      	b.n	8004c7c <_dtoa_r+0x1b4>
 8004d16:	9b05      	ldr	r3, [sp, #20]
 8004d18:	eba3 030b 	sub.w	r3, r3, fp
 8004d1c:	9305      	str	r3, [sp, #20]
 8004d1e:	f1cb 0300 	rsb	r3, fp, #0
 8004d22:	9308      	str	r3, [sp, #32]
 8004d24:	2300      	movs	r3, #0
 8004d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d28:	e7bf      	b.n	8004caa <_dtoa_r+0x1e2>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	dc52      	bgt.n	8004dda <_dtoa_r+0x312>
 8004d34:	2301      	movs	r3, #1
 8004d36:	9301      	str	r3, [sp, #4]
 8004d38:	9304      	str	r3, [sp, #16]
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8004d3e:	e00b      	b.n	8004d58 <_dtoa_r+0x290>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e7f3      	b.n	8004d2c <_dtoa_r+0x264>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9309      	str	r3, [sp, #36]	; 0x24
 8004d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d4a:	445b      	add	r3, fp
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	9304      	str	r3, [sp, #16]
 8004d54:	bfb8      	it	lt
 8004d56:	2301      	movlt	r3, #1
 8004d58:	69e0      	ldr	r0, [r4, #28]
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2204      	movs	r2, #4
 8004d5e:	f102 0614 	add.w	r6, r2, #20
 8004d62:	429e      	cmp	r6, r3
 8004d64:	d93d      	bls.n	8004de2 <_dtoa_r+0x31a>
 8004d66:	6041      	str	r1, [r0, #4]
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f000 fd9f 	bl	80058ac <_Balloc>
 8004d6e:	9000      	str	r0, [sp, #0]
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d139      	bne.n	8004de8 <_dtoa_r+0x320>
 8004d74:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <_dtoa_r+0x308>)
 8004d76:	4602      	mov	r2, r0
 8004d78:	f240 11af 	movw	r1, #431	; 0x1af
 8004d7c:	e6bd      	b.n	8004afa <_dtoa_r+0x32>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e7e1      	b.n	8004d46 <_dtoa_r+0x27e>
 8004d82:	2501      	movs	r5, #1
 8004d84:	2300      	movs	r3, #0
 8004d86:	9307      	str	r3, [sp, #28]
 8004d88:	9509      	str	r5, [sp, #36]	; 0x24
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	9304      	str	r3, [sp, #16]
 8004d92:	2200      	movs	r2, #0
 8004d94:	2312      	movs	r3, #18
 8004d96:	e7d1      	b.n	8004d3c <_dtoa_r+0x274>
 8004d98:	636f4361 	.word	0x636f4361
 8004d9c:	3fd287a7 	.word	0x3fd287a7
 8004da0:	8b60c8b3 	.word	0x8b60c8b3
 8004da4:	3fc68a28 	.word	0x3fc68a28
 8004da8:	509f79fb 	.word	0x509f79fb
 8004dac:	3fd34413 	.word	0x3fd34413
 8004db0:	08019d51 	.word	0x08019d51
 8004db4:	08019d68 	.word	0x08019d68
 8004db8:	7ff00000 	.word	0x7ff00000
 8004dbc:	08019d4d 	.word	0x08019d4d
 8004dc0:	08019d44 	.word	0x08019d44
 8004dc4:	08019d21 	.word	0x08019d21
 8004dc8:	3ff80000 	.word	0x3ff80000
 8004dcc:	08019e58 	.word	0x08019e58
 8004dd0:	08019dc0 	.word	0x08019dc0
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dd8:	e7d7      	b.n	8004d8a <_dtoa_r+0x2c2>
 8004dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ddc:	9301      	str	r3, [sp, #4]
 8004dde:	9304      	str	r3, [sp, #16]
 8004de0:	e7ba      	b.n	8004d58 <_dtoa_r+0x290>
 8004de2:	3101      	adds	r1, #1
 8004de4:	0052      	lsls	r2, r2, #1
 8004de6:	e7ba      	b.n	8004d5e <_dtoa_r+0x296>
 8004de8:	69e3      	ldr	r3, [r4, #28]
 8004dea:	9a00      	ldr	r2, [sp, #0]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	9b04      	ldr	r3, [sp, #16]
 8004df0:	2b0e      	cmp	r3, #14
 8004df2:	f200 80a8 	bhi.w	8004f46 <_dtoa_r+0x47e>
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	f000 80a5 	beq.w	8004f46 <_dtoa_r+0x47e>
 8004dfc:	f1bb 0f00 	cmp.w	fp, #0
 8004e00:	dd38      	ble.n	8004e74 <_dtoa_r+0x3ac>
 8004e02:	4bc0      	ldr	r3, [pc, #768]	; (8005104 <_dtoa_r+0x63c>)
 8004e04:	f00b 020f 	and.w	r2, fp, #15
 8004e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004e10:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004e14:	ea4f 182b 	mov.w	r8, fp, asr #4
 8004e18:	d019      	beq.n	8004e4e <_dtoa_r+0x386>
 8004e1a:	4bbb      	ldr	r3, [pc, #748]	; (8005108 <_dtoa_r+0x640>)
 8004e1c:	ec51 0b18 	vmov	r0, r1, d8
 8004e20:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e24:	f7fb fd1a 	bl	800085c <__aeabi_ddiv>
 8004e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e2c:	f008 080f 	and.w	r8, r8, #15
 8004e30:	2503      	movs	r5, #3
 8004e32:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005108 <_dtoa_r+0x640>
 8004e36:	f1b8 0f00 	cmp.w	r8, #0
 8004e3a:	d10a      	bne.n	8004e52 <_dtoa_r+0x38a>
 8004e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e40:	4632      	mov	r2, r6
 8004e42:	463b      	mov	r3, r7
 8004e44:	f7fb fd0a 	bl	800085c <__aeabi_ddiv>
 8004e48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e4c:	e02b      	b.n	8004ea6 <_dtoa_r+0x3de>
 8004e4e:	2502      	movs	r5, #2
 8004e50:	e7ef      	b.n	8004e32 <_dtoa_r+0x36a>
 8004e52:	f018 0f01 	tst.w	r8, #1
 8004e56:	d008      	beq.n	8004e6a <_dtoa_r+0x3a2>
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004e60:	f7fb fbd2 	bl	8000608 <__aeabi_dmul>
 8004e64:	3501      	adds	r5, #1
 8004e66:	4606      	mov	r6, r0
 8004e68:	460f      	mov	r7, r1
 8004e6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e6e:	f109 0908 	add.w	r9, r9, #8
 8004e72:	e7e0      	b.n	8004e36 <_dtoa_r+0x36e>
 8004e74:	f000 809f 	beq.w	8004fb6 <_dtoa_r+0x4ee>
 8004e78:	f1cb 0600 	rsb	r6, fp, #0
 8004e7c:	4ba1      	ldr	r3, [pc, #644]	; (8005104 <_dtoa_r+0x63c>)
 8004e7e:	4fa2      	ldr	r7, [pc, #648]	; (8005108 <_dtoa_r+0x640>)
 8004e80:	f006 020f 	and.w	r2, r6, #15
 8004e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	ec51 0b18 	vmov	r0, r1, d8
 8004e90:	f7fb fbba 	bl	8000608 <__aeabi_dmul>
 8004e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e98:	1136      	asrs	r6, r6, #4
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	2502      	movs	r5, #2
 8004e9e:	2e00      	cmp	r6, #0
 8004ea0:	d17e      	bne.n	8004fa0 <_dtoa_r+0x4d8>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1d0      	bne.n	8004e48 <_dtoa_r+0x380>
 8004ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004ea8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 8084 	beq.w	8004fba <_dtoa_r+0x4f2>
 8004eb2:	4b96      	ldr	r3, [pc, #600]	; (800510c <_dtoa_r+0x644>)
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4640      	mov	r0, r8
 8004eb8:	4649      	mov	r1, r9
 8004eba:	f7fb fe17 	bl	8000aec <__aeabi_dcmplt>
 8004ebe:	2800      	cmp	r0, #0
 8004ec0:	d07b      	beq.n	8004fba <_dtoa_r+0x4f2>
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d078      	beq.n	8004fba <_dtoa_r+0x4f2>
 8004ec8:	9b01      	ldr	r3, [sp, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	dd39      	ble.n	8004f42 <_dtoa_r+0x47a>
 8004ece:	4b90      	ldr	r3, [pc, #576]	; (8005110 <_dtoa_r+0x648>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	4649      	mov	r1, r9
 8004ed6:	f7fb fb97 	bl	8000608 <__aeabi_dmul>
 8004eda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ede:	9e01      	ldr	r6, [sp, #4]
 8004ee0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004eea:	4628      	mov	r0, r5
 8004eec:	f7fb fb22 	bl	8000534 <__aeabi_i2d>
 8004ef0:	4642      	mov	r2, r8
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	f7fb fb88 	bl	8000608 <__aeabi_dmul>
 8004ef8:	4b86      	ldr	r3, [pc, #536]	; (8005114 <_dtoa_r+0x64c>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	f7fb f9ce 	bl	800029c <__adddf3>
 8004f00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004f04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	2e00      	cmp	r6, #0
 8004f0c:	d158      	bne.n	8004fc0 <_dtoa_r+0x4f8>
 8004f0e:	4b82      	ldr	r3, [pc, #520]	; (8005118 <_dtoa_r+0x650>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f7fb f9bf 	bl	8000298 <__aeabi_dsub>
 8004f1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f1e:	4680      	mov	r8, r0
 8004f20:	4689      	mov	r9, r1
 8004f22:	f7fb fe01 	bl	8000b28 <__aeabi_dcmpgt>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	f040 8296 	bne.w	8005458 <_dtoa_r+0x990>
 8004f2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f30:	4640      	mov	r0, r8
 8004f32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f36:	4649      	mov	r1, r9
 8004f38:	f7fb fdd8 	bl	8000aec <__aeabi_dcmplt>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	f040 8289 	bne.w	8005454 <_dtoa_r+0x98c>
 8004f42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8004f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	f2c0 814e 	blt.w	80051ea <_dtoa_r+0x722>
 8004f4e:	f1bb 0f0e 	cmp.w	fp, #14
 8004f52:	f300 814a 	bgt.w	80051ea <_dtoa_r+0x722>
 8004f56:	4b6b      	ldr	r3, [pc, #428]	; (8005104 <_dtoa_r+0x63c>)
 8004f58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f280 80dc 	bge.w	8005120 <_dtoa_r+0x658>
 8004f68:	9b04      	ldr	r3, [sp, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f300 80d8 	bgt.w	8005120 <_dtoa_r+0x658>
 8004f70:	f040 826f 	bne.w	8005452 <_dtoa_r+0x98a>
 8004f74:	4b68      	ldr	r3, [pc, #416]	; (8005118 <_dtoa_r+0x650>)
 8004f76:	2200      	movs	r2, #0
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb fb44 	bl	8000608 <__aeabi_dmul>
 8004f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f84:	f7fb fdc6 	bl	8000b14 <__aeabi_dcmpge>
 8004f88:	9e04      	ldr	r6, [sp, #16]
 8004f8a:	4637      	mov	r7, r6
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	f040 8245 	bne.w	800541c <_dtoa_r+0x954>
 8004f92:	9d00      	ldr	r5, [sp, #0]
 8004f94:	2331      	movs	r3, #49	; 0x31
 8004f96:	f805 3b01 	strb.w	r3, [r5], #1
 8004f9a:	f10b 0b01 	add.w	fp, fp, #1
 8004f9e:	e241      	b.n	8005424 <_dtoa_r+0x95c>
 8004fa0:	07f2      	lsls	r2, r6, #31
 8004fa2:	d505      	bpl.n	8004fb0 <_dtoa_r+0x4e8>
 8004fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa8:	f7fb fb2e 	bl	8000608 <__aeabi_dmul>
 8004fac:	3501      	adds	r5, #1
 8004fae:	2301      	movs	r3, #1
 8004fb0:	1076      	asrs	r6, r6, #1
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	e773      	b.n	8004e9e <_dtoa_r+0x3d6>
 8004fb6:	2502      	movs	r5, #2
 8004fb8:	e775      	b.n	8004ea6 <_dtoa_r+0x3de>
 8004fba:	9e04      	ldr	r6, [sp, #16]
 8004fbc:	465f      	mov	r7, fp
 8004fbe:	e792      	b.n	8004ee6 <_dtoa_r+0x41e>
 8004fc0:	9900      	ldr	r1, [sp, #0]
 8004fc2:	4b50      	ldr	r3, [pc, #320]	; (8005104 <_dtoa_r+0x63c>)
 8004fc4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004fc8:	4431      	add	r1, r6
 8004fca:	9102      	str	r1, [sp, #8]
 8004fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fce:	eeb0 9a47 	vmov.f32	s18, s14
 8004fd2:	eef0 9a67 	vmov.f32	s19, s15
 8004fd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004fda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fde:	2900      	cmp	r1, #0
 8004fe0:	d044      	beq.n	800506c <_dtoa_r+0x5a4>
 8004fe2:	494e      	ldr	r1, [pc, #312]	; (800511c <_dtoa_r+0x654>)
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	f7fb fc39 	bl	800085c <__aeabi_ddiv>
 8004fea:	ec53 2b19 	vmov	r2, r3, d9
 8004fee:	f7fb f953 	bl	8000298 <__aeabi_dsub>
 8004ff2:	9d00      	ldr	r5, [sp, #0]
 8004ff4:	ec41 0b19 	vmov	d9, r0, r1
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4640      	mov	r0, r8
 8004ffc:	f7fb fdb4 	bl	8000b68 <__aeabi_d2iz>
 8005000:	4606      	mov	r6, r0
 8005002:	f7fb fa97 	bl	8000534 <__aeabi_i2d>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	4640      	mov	r0, r8
 800500c:	4649      	mov	r1, r9
 800500e:	f7fb f943 	bl	8000298 <__aeabi_dsub>
 8005012:	3630      	adds	r6, #48	; 0x30
 8005014:	f805 6b01 	strb.w	r6, [r5], #1
 8005018:	ec53 2b19 	vmov	r2, r3, d9
 800501c:	4680      	mov	r8, r0
 800501e:	4689      	mov	r9, r1
 8005020:	f7fb fd64 	bl	8000aec <__aeabi_dcmplt>
 8005024:	2800      	cmp	r0, #0
 8005026:	d164      	bne.n	80050f2 <_dtoa_r+0x62a>
 8005028:	4642      	mov	r2, r8
 800502a:	464b      	mov	r3, r9
 800502c:	4937      	ldr	r1, [pc, #220]	; (800510c <_dtoa_r+0x644>)
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb f932 	bl	8000298 <__aeabi_dsub>
 8005034:	ec53 2b19 	vmov	r2, r3, d9
 8005038:	f7fb fd58 	bl	8000aec <__aeabi_dcmplt>
 800503c:	2800      	cmp	r0, #0
 800503e:	f040 80b6 	bne.w	80051ae <_dtoa_r+0x6e6>
 8005042:	9b02      	ldr	r3, [sp, #8]
 8005044:	429d      	cmp	r5, r3
 8005046:	f43f af7c 	beq.w	8004f42 <_dtoa_r+0x47a>
 800504a:	4b31      	ldr	r3, [pc, #196]	; (8005110 <_dtoa_r+0x648>)
 800504c:	ec51 0b19 	vmov	r0, r1, d9
 8005050:	2200      	movs	r2, #0
 8005052:	f7fb fad9 	bl	8000608 <__aeabi_dmul>
 8005056:	4b2e      	ldr	r3, [pc, #184]	; (8005110 <_dtoa_r+0x648>)
 8005058:	ec41 0b19 	vmov	d9, r0, r1
 800505c:	2200      	movs	r2, #0
 800505e:	4640      	mov	r0, r8
 8005060:	4649      	mov	r1, r9
 8005062:	f7fb fad1 	bl	8000608 <__aeabi_dmul>
 8005066:	4680      	mov	r8, r0
 8005068:	4689      	mov	r9, r1
 800506a:	e7c5      	b.n	8004ff8 <_dtoa_r+0x530>
 800506c:	ec51 0b17 	vmov	r0, r1, d7
 8005070:	f7fb faca 	bl	8000608 <__aeabi_dmul>
 8005074:	9b02      	ldr	r3, [sp, #8]
 8005076:	9d00      	ldr	r5, [sp, #0]
 8005078:	930f      	str	r3, [sp, #60]	; 0x3c
 800507a:	ec41 0b19 	vmov	d9, r0, r1
 800507e:	4649      	mov	r1, r9
 8005080:	4640      	mov	r0, r8
 8005082:	f7fb fd71 	bl	8000b68 <__aeabi_d2iz>
 8005086:	4606      	mov	r6, r0
 8005088:	f7fb fa54 	bl	8000534 <__aeabi_i2d>
 800508c:	3630      	adds	r6, #48	; 0x30
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	4640      	mov	r0, r8
 8005094:	4649      	mov	r1, r9
 8005096:	f7fb f8ff 	bl	8000298 <__aeabi_dsub>
 800509a:	f805 6b01 	strb.w	r6, [r5], #1
 800509e:	9b02      	ldr	r3, [sp, #8]
 80050a0:	429d      	cmp	r5, r3
 80050a2:	4680      	mov	r8, r0
 80050a4:	4689      	mov	r9, r1
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	d124      	bne.n	80050f6 <_dtoa_r+0x62e>
 80050ac:	4b1b      	ldr	r3, [pc, #108]	; (800511c <_dtoa_r+0x654>)
 80050ae:	ec51 0b19 	vmov	r0, r1, d9
 80050b2:	f7fb f8f3 	bl	800029c <__adddf3>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4640      	mov	r0, r8
 80050bc:	4649      	mov	r1, r9
 80050be:	f7fb fd33 	bl	8000b28 <__aeabi_dcmpgt>
 80050c2:	2800      	cmp	r0, #0
 80050c4:	d173      	bne.n	80051ae <_dtoa_r+0x6e6>
 80050c6:	ec53 2b19 	vmov	r2, r3, d9
 80050ca:	4914      	ldr	r1, [pc, #80]	; (800511c <_dtoa_r+0x654>)
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fb f8e3 	bl	8000298 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4640      	mov	r0, r8
 80050d8:	4649      	mov	r1, r9
 80050da:	f7fb fd07 	bl	8000aec <__aeabi_dcmplt>
 80050de:	2800      	cmp	r0, #0
 80050e0:	f43f af2f 	beq.w	8004f42 <_dtoa_r+0x47a>
 80050e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80050e6:	1e6b      	subs	r3, r5, #1
 80050e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80050ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80050ee:	2b30      	cmp	r3, #48	; 0x30
 80050f0:	d0f8      	beq.n	80050e4 <_dtoa_r+0x61c>
 80050f2:	46bb      	mov	fp, r7
 80050f4:	e04a      	b.n	800518c <_dtoa_r+0x6c4>
 80050f6:	4b06      	ldr	r3, [pc, #24]	; (8005110 <_dtoa_r+0x648>)
 80050f8:	f7fb fa86 	bl	8000608 <__aeabi_dmul>
 80050fc:	4680      	mov	r8, r0
 80050fe:	4689      	mov	r9, r1
 8005100:	e7bd      	b.n	800507e <_dtoa_r+0x5b6>
 8005102:	bf00      	nop
 8005104:	08019e58 	.word	0x08019e58
 8005108:	08019e30 	.word	0x08019e30
 800510c:	3ff00000 	.word	0x3ff00000
 8005110:	40240000 	.word	0x40240000
 8005114:	401c0000 	.word	0x401c0000
 8005118:	40140000 	.word	0x40140000
 800511c:	3fe00000 	.word	0x3fe00000
 8005120:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005124:	9d00      	ldr	r5, [sp, #0]
 8005126:	4642      	mov	r2, r8
 8005128:	464b      	mov	r3, r9
 800512a:	4630      	mov	r0, r6
 800512c:	4639      	mov	r1, r7
 800512e:	f7fb fb95 	bl	800085c <__aeabi_ddiv>
 8005132:	f7fb fd19 	bl	8000b68 <__aeabi_d2iz>
 8005136:	9001      	str	r0, [sp, #4]
 8005138:	f7fb f9fc 	bl	8000534 <__aeabi_i2d>
 800513c:	4642      	mov	r2, r8
 800513e:	464b      	mov	r3, r9
 8005140:	f7fb fa62 	bl	8000608 <__aeabi_dmul>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4630      	mov	r0, r6
 800514a:	4639      	mov	r1, r7
 800514c:	f7fb f8a4 	bl	8000298 <__aeabi_dsub>
 8005150:	9e01      	ldr	r6, [sp, #4]
 8005152:	9f04      	ldr	r7, [sp, #16]
 8005154:	3630      	adds	r6, #48	; 0x30
 8005156:	f805 6b01 	strb.w	r6, [r5], #1
 800515a:	9e00      	ldr	r6, [sp, #0]
 800515c:	1bae      	subs	r6, r5, r6
 800515e:	42b7      	cmp	r7, r6
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	d134      	bne.n	80051d0 <_dtoa_r+0x708>
 8005166:	f7fb f899 	bl	800029c <__adddf3>
 800516a:	4642      	mov	r2, r8
 800516c:	464b      	mov	r3, r9
 800516e:	4606      	mov	r6, r0
 8005170:	460f      	mov	r7, r1
 8005172:	f7fb fcd9 	bl	8000b28 <__aeabi_dcmpgt>
 8005176:	b9c8      	cbnz	r0, 80051ac <_dtoa_r+0x6e4>
 8005178:	4642      	mov	r2, r8
 800517a:	464b      	mov	r3, r9
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb fcaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8005184:	b110      	cbz	r0, 800518c <_dtoa_r+0x6c4>
 8005186:	9b01      	ldr	r3, [sp, #4]
 8005188:	07db      	lsls	r3, r3, #31
 800518a:	d40f      	bmi.n	80051ac <_dtoa_r+0x6e4>
 800518c:	4651      	mov	r1, sl
 800518e:	4620      	mov	r0, r4
 8005190:	f000 fbcc 	bl	800592c <_Bfree>
 8005194:	2300      	movs	r3, #0
 8005196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005198:	702b      	strb	r3, [r5, #0]
 800519a:	f10b 0301 	add.w	r3, fp, #1
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f43f ace2 	beq.w	8004b6c <_dtoa_r+0xa4>
 80051a8:	601d      	str	r5, [r3, #0]
 80051aa:	e4df      	b.n	8004b6c <_dtoa_r+0xa4>
 80051ac:	465f      	mov	r7, fp
 80051ae:	462b      	mov	r3, r5
 80051b0:	461d      	mov	r5, r3
 80051b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80051b6:	2a39      	cmp	r2, #57	; 0x39
 80051b8:	d106      	bne.n	80051c8 <_dtoa_r+0x700>
 80051ba:	9a00      	ldr	r2, [sp, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d1f7      	bne.n	80051b0 <_dtoa_r+0x6e8>
 80051c0:	9900      	ldr	r1, [sp, #0]
 80051c2:	2230      	movs	r2, #48	; 0x30
 80051c4:	3701      	adds	r7, #1
 80051c6:	700a      	strb	r2, [r1, #0]
 80051c8:	781a      	ldrb	r2, [r3, #0]
 80051ca:	3201      	adds	r2, #1
 80051cc:	701a      	strb	r2, [r3, #0]
 80051ce:	e790      	b.n	80050f2 <_dtoa_r+0x62a>
 80051d0:	4ba3      	ldr	r3, [pc, #652]	; (8005460 <_dtoa_r+0x998>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	f7fb fa18 	bl	8000608 <__aeabi_dmul>
 80051d8:	2200      	movs	r2, #0
 80051da:	2300      	movs	r3, #0
 80051dc:	4606      	mov	r6, r0
 80051de:	460f      	mov	r7, r1
 80051e0:	f7fb fc7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d09e      	beq.n	8005126 <_dtoa_r+0x65e>
 80051e8:	e7d0      	b.n	800518c <_dtoa_r+0x6c4>
 80051ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	f000 80ca 	beq.w	8005386 <_dtoa_r+0x8be>
 80051f2:	9a07      	ldr	r2, [sp, #28]
 80051f4:	2a01      	cmp	r2, #1
 80051f6:	f300 80ad 	bgt.w	8005354 <_dtoa_r+0x88c>
 80051fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80051fc:	2a00      	cmp	r2, #0
 80051fe:	f000 80a5 	beq.w	800534c <_dtoa_r+0x884>
 8005202:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005206:	9e08      	ldr	r6, [sp, #32]
 8005208:	9d05      	ldr	r5, [sp, #20]
 800520a:	9a05      	ldr	r2, [sp, #20]
 800520c:	441a      	add	r2, r3
 800520e:	9205      	str	r2, [sp, #20]
 8005210:	9a06      	ldr	r2, [sp, #24]
 8005212:	2101      	movs	r1, #1
 8005214:	441a      	add	r2, r3
 8005216:	4620      	mov	r0, r4
 8005218:	9206      	str	r2, [sp, #24]
 800521a:	f000 fc3d 	bl	8005a98 <__i2b>
 800521e:	4607      	mov	r7, r0
 8005220:	b165      	cbz	r5, 800523c <_dtoa_r+0x774>
 8005222:	9b06      	ldr	r3, [sp, #24]
 8005224:	2b00      	cmp	r3, #0
 8005226:	dd09      	ble.n	800523c <_dtoa_r+0x774>
 8005228:	42ab      	cmp	r3, r5
 800522a:	9a05      	ldr	r2, [sp, #20]
 800522c:	bfa8      	it	ge
 800522e:	462b      	movge	r3, r5
 8005230:	1ad2      	subs	r2, r2, r3
 8005232:	9205      	str	r2, [sp, #20]
 8005234:	9a06      	ldr	r2, [sp, #24]
 8005236:	1aed      	subs	r5, r5, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	9306      	str	r3, [sp, #24]
 800523c:	9b08      	ldr	r3, [sp, #32]
 800523e:	b1f3      	cbz	r3, 800527e <_dtoa_r+0x7b6>
 8005240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80a3 	beq.w	800538e <_dtoa_r+0x8c6>
 8005248:	2e00      	cmp	r6, #0
 800524a:	dd10      	ble.n	800526e <_dtoa_r+0x7a6>
 800524c:	4639      	mov	r1, r7
 800524e:	4632      	mov	r2, r6
 8005250:	4620      	mov	r0, r4
 8005252:	f000 fce1 	bl	8005c18 <__pow5mult>
 8005256:	4652      	mov	r2, sl
 8005258:	4601      	mov	r1, r0
 800525a:	4607      	mov	r7, r0
 800525c:	4620      	mov	r0, r4
 800525e:	f000 fc31 	bl	8005ac4 <__multiply>
 8005262:	4651      	mov	r1, sl
 8005264:	4680      	mov	r8, r0
 8005266:	4620      	mov	r0, r4
 8005268:	f000 fb60 	bl	800592c <_Bfree>
 800526c:	46c2      	mov	sl, r8
 800526e:	9b08      	ldr	r3, [sp, #32]
 8005270:	1b9a      	subs	r2, r3, r6
 8005272:	d004      	beq.n	800527e <_dtoa_r+0x7b6>
 8005274:	4651      	mov	r1, sl
 8005276:	4620      	mov	r0, r4
 8005278:	f000 fcce 	bl	8005c18 <__pow5mult>
 800527c:	4682      	mov	sl, r0
 800527e:	2101      	movs	r1, #1
 8005280:	4620      	mov	r0, r4
 8005282:	f000 fc09 	bl	8005a98 <__i2b>
 8005286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005288:	2b00      	cmp	r3, #0
 800528a:	4606      	mov	r6, r0
 800528c:	f340 8081 	ble.w	8005392 <_dtoa_r+0x8ca>
 8005290:	461a      	mov	r2, r3
 8005292:	4601      	mov	r1, r0
 8005294:	4620      	mov	r0, r4
 8005296:	f000 fcbf 	bl	8005c18 <__pow5mult>
 800529a:	9b07      	ldr	r3, [sp, #28]
 800529c:	2b01      	cmp	r3, #1
 800529e:	4606      	mov	r6, r0
 80052a0:	dd7a      	ble.n	8005398 <_dtoa_r+0x8d0>
 80052a2:	f04f 0800 	mov.w	r8, #0
 80052a6:	6933      	ldr	r3, [r6, #16]
 80052a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80052ac:	6918      	ldr	r0, [r3, #16]
 80052ae:	f000 fba5 	bl	80059fc <__hi0bits>
 80052b2:	f1c0 0020 	rsb	r0, r0, #32
 80052b6:	9b06      	ldr	r3, [sp, #24]
 80052b8:	4418      	add	r0, r3
 80052ba:	f010 001f 	ands.w	r0, r0, #31
 80052be:	f000 8094 	beq.w	80053ea <_dtoa_r+0x922>
 80052c2:	f1c0 0320 	rsb	r3, r0, #32
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	f340 8085 	ble.w	80053d6 <_dtoa_r+0x90e>
 80052cc:	9b05      	ldr	r3, [sp, #20]
 80052ce:	f1c0 001c 	rsb	r0, r0, #28
 80052d2:	4403      	add	r3, r0
 80052d4:	9305      	str	r3, [sp, #20]
 80052d6:	9b06      	ldr	r3, [sp, #24]
 80052d8:	4403      	add	r3, r0
 80052da:	4405      	add	r5, r0
 80052dc:	9306      	str	r3, [sp, #24]
 80052de:	9b05      	ldr	r3, [sp, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	dd05      	ble.n	80052f0 <_dtoa_r+0x828>
 80052e4:	4651      	mov	r1, sl
 80052e6:	461a      	mov	r2, r3
 80052e8:	4620      	mov	r0, r4
 80052ea:	f000 fcef 	bl	8005ccc <__lshift>
 80052ee:	4682      	mov	sl, r0
 80052f0:	9b06      	ldr	r3, [sp, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dd05      	ble.n	8005302 <_dtoa_r+0x83a>
 80052f6:	4631      	mov	r1, r6
 80052f8:	461a      	mov	r2, r3
 80052fa:	4620      	mov	r0, r4
 80052fc:	f000 fce6 	bl	8005ccc <__lshift>
 8005300:	4606      	mov	r6, r0
 8005302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005304:	2b00      	cmp	r3, #0
 8005306:	d072      	beq.n	80053ee <_dtoa_r+0x926>
 8005308:	4631      	mov	r1, r6
 800530a:	4650      	mov	r0, sl
 800530c:	f000 fd4a 	bl	8005da4 <__mcmp>
 8005310:	2800      	cmp	r0, #0
 8005312:	da6c      	bge.n	80053ee <_dtoa_r+0x926>
 8005314:	2300      	movs	r3, #0
 8005316:	4651      	mov	r1, sl
 8005318:	220a      	movs	r2, #10
 800531a:	4620      	mov	r0, r4
 800531c:	f000 fb28 	bl	8005970 <__multadd>
 8005320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005326:	4682      	mov	sl, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	f000 81b0 	beq.w	800568e <_dtoa_r+0xbc6>
 800532e:	2300      	movs	r3, #0
 8005330:	4639      	mov	r1, r7
 8005332:	220a      	movs	r2, #10
 8005334:	4620      	mov	r0, r4
 8005336:	f000 fb1b 	bl	8005970 <__multadd>
 800533a:	9b01      	ldr	r3, [sp, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	4607      	mov	r7, r0
 8005340:	f300 8096 	bgt.w	8005470 <_dtoa_r+0x9a8>
 8005344:	9b07      	ldr	r3, [sp, #28]
 8005346:	2b02      	cmp	r3, #2
 8005348:	dc59      	bgt.n	80053fe <_dtoa_r+0x936>
 800534a:	e091      	b.n	8005470 <_dtoa_r+0x9a8>
 800534c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800534e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005352:	e758      	b.n	8005206 <_dtoa_r+0x73e>
 8005354:	9b04      	ldr	r3, [sp, #16]
 8005356:	1e5e      	subs	r6, r3, #1
 8005358:	9b08      	ldr	r3, [sp, #32]
 800535a:	42b3      	cmp	r3, r6
 800535c:	bfbf      	itttt	lt
 800535e:	9b08      	ldrlt	r3, [sp, #32]
 8005360:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005362:	9608      	strlt	r6, [sp, #32]
 8005364:	1af3      	sublt	r3, r6, r3
 8005366:	bfb4      	ite	lt
 8005368:	18d2      	addlt	r2, r2, r3
 800536a:	1b9e      	subge	r6, r3, r6
 800536c:	9b04      	ldr	r3, [sp, #16]
 800536e:	bfbc      	itt	lt
 8005370:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005372:	2600      	movlt	r6, #0
 8005374:	2b00      	cmp	r3, #0
 8005376:	bfb7      	itett	lt
 8005378:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800537c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005380:	1a9d      	sublt	r5, r3, r2
 8005382:	2300      	movlt	r3, #0
 8005384:	e741      	b.n	800520a <_dtoa_r+0x742>
 8005386:	9e08      	ldr	r6, [sp, #32]
 8005388:	9d05      	ldr	r5, [sp, #20]
 800538a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800538c:	e748      	b.n	8005220 <_dtoa_r+0x758>
 800538e:	9a08      	ldr	r2, [sp, #32]
 8005390:	e770      	b.n	8005274 <_dtoa_r+0x7ac>
 8005392:	9b07      	ldr	r3, [sp, #28]
 8005394:	2b01      	cmp	r3, #1
 8005396:	dc19      	bgt.n	80053cc <_dtoa_r+0x904>
 8005398:	9b02      	ldr	r3, [sp, #8]
 800539a:	b9bb      	cbnz	r3, 80053cc <_dtoa_r+0x904>
 800539c:	9b03      	ldr	r3, [sp, #12]
 800539e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053a2:	b99b      	cbnz	r3, 80053cc <_dtoa_r+0x904>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80053aa:	0d1b      	lsrs	r3, r3, #20
 80053ac:	051b      	lsls	r3, r3, #20
 80053ae:	b183      	cbz	r3, 80053d2 <_dtoa_r+0x90a>
 80053b0:	9b05      	ldr	r3, [sp, #20]
 80053b2:	3301      	adds	r3, #1
 80053b4:	9305      	str	r3, [sp, #20]
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	3301      	adds	r3, #1
 80053ba:	9306      	str	r3, [sp, #24]
 80053bc:	f04f 0801 	mov.w	r8, #1
 80053c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f47f af6f 	bne.w	80052a6 <_dtoa_r+0x7de>
 80053c8:	2001      	movs	r0, #1
 80053ca:	e774      	b.n	80052b6 <_dtoa_r+0x7ee>
 80053cc:	f04f 0800 	mov.w	r8, #0
 80053d0:	e7f6      	b.n	80053c0 <_dtoa_r+0x8f8>
 80053d2:	4698      	mov	r8, r3
 80053d4:	e7f4      	b.n	80053c0 <_dtoa_r+0x8f8>
 80053d6:	d082      	beq.n	80052de <_dtoa_r+0x816>
 80053d8:	9a05      	ldr	r2, [sp, #20]
 80053da:	331c      	adds	r3, #28
 80053dc:	441a      	add	r2, r3
 80053de:	9205      	str	r2, [sp, #20]
 80053e0:	9a06      	ldr	r2, [sp, #24]
 80053e2:	441a      	add	r2, r3
 80053e4:	441d      	add	r5, r3
 80053e6:	9206      	str	r2, [sp, #24]
 80053e8:	e779      	b.n	80052de <_dtoa_r+0x816>
 80053ea:	4603      	mov	r3, r0
 80053ec:	e7f4      	b.n	80053d8 <_dtoa_r+0x910>
 80053ee:	9b04      	ldr	r3, [sp, #16]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	dc37      	bgt.n	8005464 <_dtoa_r+0x99c>
 80053f4:	9b07      	ldr	r3, [sp, #28]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	dd34      	ble.n	8005464 <_dtoa_r+0x99c>
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	9b01      	ldr	r3, [sp, #4]
 8005400:	b963      	cbnz	r3, 800541c <_dtoa_r+0x954>
 8005402:	4631      	mov	r1, r6
 8005404:	2205      	movs	r2, #5
 8005406:	4620      	mov	r0, r4
 8005408:	f000 fab2 	bl	8005970 <__multadd>
 800540c:	4601      	mov	r1, r0
 800540e:	4606      	mov	r6, r0
 8005410:	4650      	mov	r0, sl
 8005412:	f000 fcc7 	bl	8005da4 <__mcmp>
 8005416:	2800      	cmp	r0, #0
 8005418:	f73f adbb 	bgt.w	8004f92 <_dtoa_r+0x4ca>
 800541c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800541e:	9d00      	ldr	r5, [sp, #0]
 8005420:	ea6f 0b03 	mvn.w	fp, r3
 8005424:	f04f 0800 	mov.w	r8, #0
 8005428:	4631      	mov	r1, r6
 800542a:	4620      	mov	r0, r4
 800542c:	f000 fa7e 	bl	800592c <_Bfree>
 8005430:	2f00      	cmp	r7, #0
 8005432:	f43f aeab 	beq.w	800518c <_dtoa_r+0x6c4>
 8005436:	f1b8 0f00 	cmp.w	r8, #0
 800543a:	d005      	beq.n	8005448 <_dtoa_r+0x980>
 800543c:	45b8      	cmp	r8, r7
 800543e:	d003      	beq.n	8005448 <_dtoa_r+0x980>
 8005440:	4641      	mov	r1, r8
 8005442:	4620      	mov	r0, r4
 8005444:	f000 fa72 	bl	800592c <_Bfree>
 8005448:	4639      	mov	r1, r7
 800544a:	4620      	mov	r0, r4
 800544c:	f000 fa6e 	bl	800592c <_Bfree>
 8005450:	e69c      	b.n	800518c <_dtoa_r+0x6c4>
 8005452:	2600      	movs	r6, #0
 8005454:	4637      	mov	r7, r6
 8005456:	e7e1      	b.n	800541c <_dtoa_r+0x954>
 8005458:	46bb      	mov	fp, r7
 800545a:	4637      	mov	r7, r6
 800545c:	e599      	b.n	8004f92 <_dtoa_r+0x4ca>
 800545e:	bf00      	nop
 8005460:	40240000 	.word	0x40240000
 8005464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 80c8 	beq.w	80055fc <_dtoa_r+0xb34>
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2d00      	cmp	r5, #0
 8005472:	dd05      	ble.n	8005480 <_dtoa_r+0x9b8>
 8005474:	4639      	mov	r1, r7
 8005476:	462a      	mov	r2, r5
 8005478:	4620      	mov	r0, r4
 800547a:	f000 fc27 	bl	8005ccc <__lshift>
 800547e:	4607      	mov	r7, r0
 8005480:	f1b8 0f00 	cmp.w	r8, #0
 8005484:	d05b      	beq.n	800553e <_dtoa_r+0xa76>
 8005486:	6879      	ldr	r1, [r7, #4]
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fa0f 	bl	80058ac <_Balloc>
 800548e:	4605      	mov	r5, r0
 8005490:	b928      	cbnz	r0, 800549e <_dtoa_r+0x9d6>
 8005492:	4b83      	ldr	r3, [pc, #524]	; (80056a0 <_dtoa_r+0xbd8>)
 8005494:	4602      	mov	r2, r0
 8005496:	f240 21ef 	movw	r1, #751	; 0x2ef
 800549a:	f7ff bb2e 	b.w	8004afa <_dtoa_r+0x32>
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	3202      	adds	r2, #2
 80054a2:	0092      	lsls	r2, r2, #2
 80054a4:	f107 010c 	add.w	r1, r7, #12
 80054a8:	300c      	adds	r0, #12
 80054aa:	f7ff fa74 	bl	8004996 <memcpy>
 80054ae:	2201      	movs	r2, #1
 80054b0:	4629      	mov	r1, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 fc0a 	bl	8005ccc <__lshift>
 80054b8:	9b00      	ldr	r3, [sp, #0]
 80054ba:	3301      	adds	r3, #1
 80054bc:	9304      	str	r3, [sp, #16]
 80054be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054c2:	4413      	add	r3, r2
 80054c4:	9308      	str	r3, [sp, #32]
 80054c6:	9b02      	ldr	r3, [sp, #8]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	46b8      	mov	r8, r7
 80054ce:	9306      	str	r3, [sp, #24]
 80054d0:	4607      	mov	r7, r0
 80054d2:	9b04      	ldr	r3, [sp, #16]
 80054d4:	4631      	mov	r1, r6
 80054d6:	3b01      	subs	r3, #1
 80054d8:	4650      	mov	r0, sl
 80054da:	9301      	str	r3, [sp, #4]
 80054dc:	f7ff fa69 	bl	80049b2 <quorem>
 80054e0:	4641      	mov	r1, r8
 80054e2:	9002      	str	r0, [sp, #8]
 80054e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80054e8:	4650      	mov	r0, sl
 80054ea:	f000 fc5b 	bl	8005da4 <__mcmp>
 80054ee:	463a      	mov	r2, r7
 80054f0:	9005      	str	r0, [sp, #20]
 80054f2:	4631      	mov	r1, r6
 80054f4:	4620      	mov	r0, r4
 80054f6:	f000 fc71 	bl	8005ddc <__mdiff>
 80054fa:	68c2      	ldr	r2, [r0, #12]
 80054fc:	4605      	mov	r5, r0
 80054fe:	bb02      	cbnz	r2, 8005542 <_dtoa_r+0xa7a>
 8005500:	4601      	mov	r1, r0
 8005502:	4650      	mov	r0, sl
 8005504:	f000 fc4e 	bl	8005da4 <__mcmp>
 8005508:	4602      	mov	r2, r0
 800550a:	4629      	mov	r1, r5
 800550c:	4620      	mov	r0, r4
 800550e:	9209      	str	r2, [sp, #36]	; 0x24
 8005510:	f000 fa0c 	bl	800592c <_Bfree>
 8005514:	9b07      	ldr	r3, [sp, #28]
 8005516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005518:	9d04      	ldr	r5, [sp, #16]
 800551a:	ea43 0102 	orr.w	r1, r3, r2
 800551e:	9b06      	ldr	r3, [sp, #24]
 8005520:	4319      	orrs	r1, r3
 8005522:	d110      	bne.n	8005546 <_dtoa_r+0xa7e>
 8005524:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005528:	d029      	beq.n	800557e <_dtoa_r+0xab6>
 800552a:	9b05      	ldr	r3, [sp, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	dd02      	ble.n	8005536 <_dtoa_r+0xa6e>
 8005530:	9b02      	ldr	r3, [sp, #8]
 8005532:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005536:	9b01      	ldr	r3, [sp, #4]
 8005538:	f883 9000 	strb.w	r9, [r3]
 800553c:	e774      	b.n	8005428 <_dtoa_r+0x960>
 800553e:	4638      	mov	r0, r7
 8005540:	e7ba      	b.n	80054b8 <_dtoa_r+0x9f0>
 8005542:	2201      	movs	r2, #1
 8005544:	e7e1      	b.n	800550a <_dtoa_r+0xa42>
 8005546:	9b05      	ldr	r3, [sp, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	db04      	blt.n	8005556 <_dtoa_r+0xa8e>
 800554c:	9907      	ldr	r1, [sp, #28]
 800554e:	430b      	orrs	r3, r1
 8005550:	9906      	ldr	r1, [sp, #24]
 8005552:	430b      	orrs	r3, r1
 8005554:	d120      	bne.n	8005598 <_dtoa_r+0xad0>
 8005556:	2a00      	cmp	r2, #0
 8005558:	dded      	ble.n	8005536 <_dtoa_r+0xa6e>
 800555a:	4651      	mov	r1, sl
 800555c:	2201      	movs	r2, #1
 800555e:	4620      	mov	r0, r4
 8005560:	f000 fbb4 	bl	8005ccc <__lshift>
 8005564:	4631      	mov	r1, r6
 8005566:	4682      	mov	sl, r0
 8005568:	f000 fc1c 	bl	8005da4 <__mcmp>
 800556c:	2800      	cmp	r0, #0
 800556e:	dc03      	bgt.n	8005578 <_dtoa_r+0xab0>
 8005570:	d1e1      	bne.n	8005536 <_dtoa_r+0xa6e>
 8005572:	f019 0f01 	tst.w	r9, #1
 8005576:	d0de      	beq.n	8005536 <_dtoa_r+0xa6e>
 8005578:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800557c:	d1d8      	bne.n	8005530 <_dtoa_r+0xa68>
 800557e:	9a01      	ldr	r2, [sp, #4]
 8005580:	2339      	movs	r3, #57	; 0x39
 8005582:	7013      	strb	r3, [r2, #0]
 8005584:	462b      	mov	r3, r5
 8005586:	461d      	mov	r5, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800558e:	2a39      	cmp	r2, #57	; 0x39
 8005590:	d06c      	beq.n	800566c <_dtoa_r+0xba4>
 8005592:	3201      	adds	r2, #1
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	e747      	b.n	8005428 <_dtoa_r+0x960>
 8005598:	2a00      	cmp	r2, #0
 800559a:	dd07      	ble.n	80055ac <_dtoa_r+0xae4>
 800559c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055a0:	d0ed      	beq.n	800557e <_dtoa_r+0xab6>
 80055a2:	9a01      	ldr	r2, [sp, #4]
 80055a4:	f109 0301 	add.w	r3, r9, #1
 80055a8:	7013      	strb	r3, [r2, #0]
 80055aa:	e73d      	b.n	8005428 <_dtoa_r+0x960>
 80055ac:	9b04      	ldr	r3, [sp, #16]
 80055ae:	9a08      	ldr	r2, [sp, #32]
 80055b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d043      	beq.n	8005640 <_dtoa_r+0xb78>
 80055b8:	4651      	mov	r1, sl
 80055ba:	2300      	movs	r3, #0
 80055bc:	220a      	movs	r2, #10
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 f9d6 	bl	8005970 <__multadd>
 80055c4:	45b8      	cmp	r8, r7
 80055c6:	4682      	mov	sl, r0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	f04f 020a 	mov.w	r2, #10
 80055d0:	4641      	mov	r1, r8
 80055d2:	4620      	mov	r0, r4
 80055d4:	d107      	bne.n	80055e6 <_dtoa_r+0xb1e>
 80055d6:	f000 f9cb 	bl	8005970 <__multadd>
 80055da:	4680      	mov	r8, r0
 80055dc:	4607      	mov	r7, r0
 80055de:	9b04      	ldr	r3, [sp, #16]
 80055e0:	3301      	adds	r3, #1
 80055e2:	9304      	str	r3, [sp, #16]
 80055e4:	e775      	b.n	80054d2 <_dtoa_r+0xa0a>
 80055e6:	f000 f9c3 	bl	8005970 <__multadd>
 80055ea:	4639      	mov	r1, r7
 80055ec:	4680      	mov	r8, r0
 80055ee:	2300      	movs	r3, #0
 80055f0:	220a      	movs	r2, #10
 80055f2:	4620      	mov	r0, r4
 80055f4:	f000 f9bc 	bl	8005970 <__multadd>
 80055f8:	4607      	mov	r7, r0
 80055fa:	e7f0      	b.n	80055de <_dtoa_r+0xb16>
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	9d00      	ldr	r5, [sp, #0]
 8005602:	4631      	mov	r1, r6
 8005604:	4650      	mov	r0, sl
 8005606:	f7ff f9d4 	bl	80049b2 <quorem>
 800560a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800560e:	9b00      	ldr	r3, [sp, #0]
 8005610:	f805 9b01 	strb.w	r9, [r5], #1
 8005614:	1aea      	subs	r2, r5, r3
 8005616:	9b01      	ldr	r3, [sp, #4]
 8005618:	4293      	cmp	r3, r2
 800561a:	dd07      	ble.n	800562c <_dtoa_r+0xb64>
 800561c:	4651      	mov	r1, sl
 800561e:	2300      	movs	r3, #0
 8005620:	220a      	movs	r2, #10
 8005622:	4620      	mov	r0, r4
 8005624:	f000 f9a4 	bl	8005970 <__multadd>
 8005628:	4682      	mov	sl, r0
 800562a:	e7ea      	b.n	8005602 <_dtoa_r+0xb3a>
 800562c:	9b01      	ldr	r3, [sp, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	bfc8      	it	gt
 8005632:	461d      	movgt	r5, r3
 8005634:	9b00      	ldr	r3, [sp, #0]
 8005636:	bfd8      	it	le
 8005638:	2501      	movle	r5, #1
 800563a:	441d      	add	r5, r3
 800563c:	f04f 0800 	mov.w	r8, #0
 8005640:	4651      	mov	r1, sl
 8005642:	2201      	movs	r2, #1
 8005644:	4620      	mov	r0, r4
 8005646:	f000 fb41 	bl	8005ccc <__lshift>
 800564a:	4631      	mov	r1, r6
 800564c:	4682      	mov	sl, r0
 800564e:	f000 fba9 	bl	8005da4 <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	dc96      	bgt.n	8005584 <_dtoa_r+0xabc>
 8005656:	d102      	bne.n	800565e <_dtoa_r+0xb96>
 8005658:	f019 0f01 	tst.w	r9, #1
 800565c:	d192      	bne.n	8005584 <_dtoa_r+0xabc>
 800565e:	462b      	mov	r3, r5
 8005660:	461d      	mov	r5, r3
 8005662:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005666:	2a30      	cmp	r2, #48	; 0x30
 8005668:	d0fa      	beq.n	8005660 <_dtoa_r+0xb98>
 800566a:	e6dd      	b.n	8005428 <_dtoa_r+0x960>
 800566c:	9a00      	ldr	r2, [sp, #0]
 800566e:	429a      	cmp	r2, r3
 8005670:	d189      	bne.n	8005586 <_dtoa_r+0xabe>
 8005672:	f10b 0b01 	add.w	fp, fp, #1
 8005676:	2331      	movs	r3, #49	; 0x31
 8005678:	e796      	b.n	80055a8 <_dtoa_r+0xae0>
 800567a:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <_dtoa_r+0xbdc>)
 800567c:	f7ff ba99 	b.w	8004bb2 <_dtoa_r+0xea>
 8005680:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f aa6d 	bne.w	8004b62 <_dtoa_r+0x9a>
 8005688:	4b07      	ldr	r3, [pc, #28]	; (80056a8 <_dtoa_r+0xbe0>)
 800568a:	f7ff ba92 	b.w	8004bb2 <_dtoa_r+0xea>
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	dcb5      	bgt.n	8005600 <_dtoa_r+0xb38>
 8005694:	9b07      	ldr	r3, [sp, #28]
 8005696:	2b02      	cmp	r3, #2
 8005698:	f73f aeb1 	bgt.w	80053fe <_dtoa_r+0x936>
 800569c:	e7b0      	b.n	8005600 <_dtoa_r+0xb38>
 800569e:	bf00      	nop
 80056a0:	08019dc0 	.word	0x08019dc0
 80056a4:	08019d20 	.word	0x08019d20
 80056a8:	08019d44 	.word	0x08019d44

080056ac <_free_r>:
 80056ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056ae:	2900      	cmp	r1, #0
 80056b0:	d044      	beq.n	800573c <_free_r+0x90>
 80056b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056b6:	9001      	str	r0, [sp, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f1a1 0404 	sub.w	r4, r1, #4
 80056be:	bfb8      	it	lt
 80056c0:	18e4      	addlt	r4, r4, r3
 80056c2:	f000 f8e7 	bl	8005894 <__malloc_lock>
 80056c6:	4a1e      	ldr	r2, [pc, #120]	; (8005740 <_free_r+0x94>)
 80056c8:	9801      	ldr	r0, [sp, #4]
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	b933      	cbnz	r3, 80056dc <_free_r+0x30>
 80056ce:	6063      	str	r3, [r4, #4]
 80056d0:	6014      	str	r4, [r2, #0]
 80056d2:	b003      	add	sp, #12
 80056d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056d8:	f000 b8e2 	b.w	80058a0 <__malloc_unlock>
 80056dc:	42a3      	cmp	r3, r4
 80056de:	d908      	bls.n	80056f2 <_free_r+0x46>
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	1961      	adds	r1, r4, r5
 80056e4:	428b      	cmp	r3, r1
 80056e6:	bf01      	itttt	eq
 80056e8:	6819      	ldreq	r1, [r3, #0]
 80056ea:	685b      	ldreq	r3, [r3, #4]
 80056ec:	1949      	addeq	r1, r1, r5
 80056ee:	6021      	streq	r1, [r4, #0]
 80056f0:	e7ed      	b.n	80056ce <_free_r+0x22>
 80056f2:	461a      	mov	r2, r3
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b10b      	cbz	r3, 80056fc <_free_r+0x50>
 80056f8:	42a3      	cmp	r3, r4
 80056fa:	d9fa      	bls.n	80056f2 <_free_r+0x46>
 80056fc:	6811      	ldr	r1, [r2, #0]
 80056fe:	1855      	adds	r5, r2, r1
 8005700:	42a5      	cmp	r5, r4
 8005702:	d10b      	bne.n	800571c <_free_r+0x70>
 8005704:	6824      	ldr	r4, [r4, #0]
 8005706:	4421      	add	r1, r4
 8005708:	1854      	adds	r4, r2, r1
 800570a:	42a3      	cmp	r3, r4
 800570c:	6011      	str	r1, [r2, #0]
 800570e:	d1e0      	bne.n	80056d2 <_free_r+0x26>
 8005710:	681c      	ldr	r4, [r3, #0]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	6053      	str	r3, [r2, #4]
 8005716:	440c      	add	r4, r1
 8005718:	6014      	str	r4, [r2, #0]
 800571a:	e7da      	b.n	80056d2 <_free_r+0x26>
 800571c:	d902      	bls.n	8005724 <_free_r+0x78>
 800571e:	230c      	movs	r3, #12
 8005720:	6003      	str	r3, [r0, #0]
 8005722:	e7d6      	b.n	80056d2 <_free_r+0x26>
 8005724:	6825      	ldr	r5, [r4, #0]
 8005726:	1961      	adds	r1, r4, r5
 8005728:	428b      	cmp	r3, r1
 800572a:	bf04      	itt	eq
 800572c:	6819      	ldreq	r1, [r3, #0]
 800572e:	685b      	ldreq	r3, [r3, #4]
 8005730:	6063      	str	r3, [r4, #4]
 8005732:	bf04      	itt	eq
 8005734:	1949      	addeq	r1, r1, r5
 8005736:	6021      	streq	r1, [r4, #0]
 8005738:	6054      	str	r4, [r2, #4]
 800573a:	e7ca      	b.n	80056d2 <_free_r+0x26>
 800573c:	b003      	add	sp, #12
 800573e:	bd30      	pop	{r4, r5, pc}
 8005740:	2000034c 	.word	0x2000034c

08005744 <malloc>:
 8005744:	4b02      	ldr	r3, [pc, #8]	; (8005750 <malloc+0xc>)
 8005746:	4601      	mov	r1, r0
 8005748:	6818      	ldr	r0, [r3, #0]
 800574a:	f000 b823 	b.w	8005794 <_malloc_r>
 800574e:	bf00      	nop
 8005750:	20000068 	.word	0x20000068

08005754 <sbrk_aligned>:
 8005754:	b570      	push	{r4, r5, r6, lr}
 8005756:	4e0e      	ldr	r6, [pc, #56]	; (8005790 <sbrk_aligned+0x3c>)
 8005758:	460c      	mov	r4, r1
 800575a:	6831      	ldr	r1, [r6, #0]
 800575c:	4605      	mov	r5, r0
 800575e:	b911      	cbnz	r1, 8005766 <sbrk_aligned+0x12>
 8005760:	f000 fe40 	bl	80063e4 <_sbrk_r>
 8005764:	6030      	str	r0, [r6, #0]
 8005766:	4621      	mov	r1, r4
 8005768:	4628      	mov	r0, r5
 800576a:	f000 fe3b 	bl	80063e4 <_sbrk_r>
 800576e:	1c43      	adds	r3, r0, #1
 8005770:	d00a      	beq.n	8005788 <sbrk_aligned+0x34>
 8005772:	1cc4      	adds	r4, r0, #3
 8005774:	f024 0403 	bic.w	r4, r4, #3
 8005778:	42a0      	cmp	r0, r4
 800577a:	d007      	beq.n	800578c <sbrk_aligned+0x38>
 800577c:	1a21      	subs	r1, r4, r0
 800577e:	4628      	mov	r0, r5
 8005780:	f000 fe30 	bl	80063e4 <_sbrk_r>
 8005784:	3001      	adds	r0, #1
 8005786:	d101      	bne.n	800578c <sbrk_aligned+0x38>
 8005788:	f04f 34ff 	mov.w	r4, #4294967295
 800578c:	4620      	mov	r0, r4
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	20000350 	.word	0x20000350

08005794 <_malloc_r>:
 8005794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005798:	1ccd      	adds	r5, r1, #3
 800579a:	f025 0503 	bic.w	r5, r5, #3
 800579e:	3508      	adds	r5, #8
 80057a0:	2d0c      	cmp	r5, #12
 80057a2:	bf38      	it	cc
 80057a4:	250c      	movcc	r5, #12
 80057a6:	2d00      	cmp	r5, #0
 80057a8:	4607      	mov	r7, r0
 80057aa:	db01      	blt.n	80057b0 <_malloc_r+0x1c>
 80057ac:	42a9      	cmp	r1, r5
 80057ae:	d905      	bls.n	80057bc <_malloc_r+0x28>
 80057b0:	230c      	movs	r3, #12
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	2600      	movs	r6, #0
 80057b6:	4630      	mov	r0, r6
 80057b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005890 <_malloc_r+0xfc>
 80057c0:	f000 f868 	bl	8005894 <__malloc_lock>
 80057c4:	f8d8 3000 	ldr.w	r3, [r8]
 80057c8:	461c      	mov	r4, r3
 80057ca:	bb5c      	cbnz	r4, 8005824 <_malloc_r+0x90>
 80057cc:	4629      	mov	r1, r5
 80057ce:	4638      	mov	r0, r7
 80057d0:	f7ff ffc0 	bl	8005754 <sbrk_aligned>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	4604      	mov	r4, r0
 80057d8:	d155      	bne.n	8005886 <_malloc_r+0xf2>
 80057da:	f8d8 4000 	ldr.w	r4, [r8]
 80057de:	4626      	mov	r6, r4
 80057e0:	2e00      	cmp	r6, #0
 80057e2:	d145      	bne.n	8005870 <_malloc_r+0xdc>
 80057e4:	2c00      	cmp	r4, #0
 80057e6:	d048      	beq.n	800587a <_malloc_r+0xe6>
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	4631      	mov	r1, r6
 80057ec:	4638      	mov	r0, r7
 80057ee:	eb04 0903 	add.w	r9, r4, r3
 80057f2:	f000 fdf7 	bl	80063e4 <_sbrk_r>
 80057f6:	4581      	cmp	r9, r0
 80057f8:	d13f      	bne.n	800587a <_malloc_r+0xe6>
 80057fa:	6821      	ldr	r1, [r4, #0]
 80057fc:	1a6d      	subs	r5, r5, r1
 80057fe:	4629      	mov	r1, r5
 8005800:	4638      	mov	r0, r7
 8005802:	f7ff ffa7 	bl	8005754 <sbrk_aligned>
 8005806:	3001      	adds	r0, #1
 8005808:	d037      	beq.n	800587a <_malloc_r+0xe6>
 800580a:	6823      	ldr	r3, [r4, #0]
 800580c:	442b      	add	r3, r5
 800580e:	6023      	str	r3, [r4, #0]
 8005810:	f8d8 3000 	ldr.w	r3, [r8]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d038      	beq.n	800588a <_malloc_r+0xf6>
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	42a2      	cmp	r2, r4
 800581c:	d12b      	bne.n	8005876 <_malloc_r+0xe2>
 800581e:	2200      	movs	r2, #0
 8005820:	605a      	str	r2, [r3, #4]
 8005822:	e00f      	b.n	8005844 <_malloc_r+0xb0>
 8005824:	6822      	ldr	r2, [r4, #0]
 8005826:	1b52      	subs	r2, r2, r5
 8005828:	d41f      	bmi.n	800586a <_malloc_r+0xd6>
 800582a:	2a0b      	cmp	r2, #11
 800582c:	d917      	bls.n	800585e <_malloc_r+0xca>
 800582e:	1961      	adds	r1, r4, r5
 8005830:	42a3      	cmp	r3, r4
 8005832:	6025      	str	r5, [r4, #0]
 8005834:	bf18      	it	ne
 8005836:	6059      	strne	r1, [r3, #4]
 8005838:	6863      	ldr	r3, [r4, #4]
 800583a:	bf08      	it	eq
 800583c:	f8c8 1000 	streq.w	r1, [r8]
 8005840:	5162      	str	r2, [r4, r5]
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	4638      	mov	r0, r7
 8005846:	f104 060b 	add.w	r6, r4, #11
 800584a:	f000 f829 	bl	80058a0 <__malloc_unlock>
 800584e:	f026 0607 	bic.w	r6, r6, #7
 8005852:	1d23      	adds	r3, r4, #4
 8005854:	1af2      	subs	r2, r6, r3
 8005856:	d0ae      	beq.n	80057b6 <_malloc_r+0x22>
 8005858:	1b9b      	subs	r3, r3, r6
 800585a:	50a3      	str	r3, [r4, r2]
 800585c:	e7ab      	b.n	80057b6 <_malloc_r+0x22>
 800585e:	42a3      	cmp	r3, r4
 8005860:	6862      	ldr	r2, [r4, #4]
 8005862:	d1dd      	bne.n	8005820 <_malloc_r+0x8c>
 8005864:	f8c8 2000 	str.w	r2, [r8]
 8005868:	e7ec      	b.n	8005844 <_malloc_r+0xb0>
 800586a:	4623      	mov	r3, r4
 800586c:	6864      	ldr	r4, [r4, #4]
 800586e:	e7ac      	b.n	80057ca <_malloc_r+0x36>
 8005870:	4634      	mov	r4, r6
 8005872:	6876      	ldr	r6, [r6, #4]
 8005874:	e7b4      	b.n	80057e0 <_malloc_r+0x4c>
 8005876:	4613      	mov	r3, r2
 8005878:	e7cc      	b.n	8005814 <_malloc_r+0x80>
 800587a:	230c      	movs	r3, #12
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	4638      	mov	r0, r7
 8005880:	f000 f80e 	bl	80058a0 <__malloc_unlock>
 8005884:	e797      	b.n	80057b6 <_malloc_r+0x22>
 8005886:	6025      	str	r5, [r4, #0]
 8005888:	e7dc      	b.n	8005844 <_malloc_r+0xb0>
 800588a:	605b      	str	r3, [r3, #4]
 800588c:	deff      	udf	#255	; 0xff
 800588e:	bf00      	nop
 8005890:	2000034c 	.word	0x2000034c

08005894 <__malloc_lock>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__malloc_lock+0x8>)
 8005896:	f7ff b87c 	b.w	8004992 <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	20000348 	.word	0x20000348

080058a0 <__malloc_unlock>:
 80058a0:	4801      	ldr	r0, [pc, #4]	; (80058a8 <__malloc_unlock+0x8>)
 80058a2:	f7ff b877 	b.w	8004994 <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	20000348 	.word	0x20000348

080058ac <_Balloc>:
 80058ac:	b570      	push	{r4, r5, r6, lr}
 80058ae:	69c6      	ldr	r6, [r0, #28]
 80058b0:	4604      	mov	r4, r0
 80058b2:	460d      	mov	r5, r1
 80058b4:	b976      	cbnz	r6, 80058d4 <_Balloc+0x28>
 80058b6:	2010      	movs	r0, #16
 80058b8:	f7ff ff44 	bl	8005744 <malloc>
 80058bc:	4602      	mov	r2, r0
 80058be:	61e0      	str	r0, [r4, #28]
 80058c0:	b920      	cbnz	r0, 80058cc <_Balloc+0x20>
 80058c2:	4b18      	ldr	r3, [pc, #96]	; (8005924 <_Balloc+0x78>)
 80058c4:	4818      	ldr	r0, [pc, #96]	; (8005928 <_Balloc+0x7c>)
 80058c6:	216b      	movs	r1, #107	; 0x6b
 80058c8:	f000 fd9c 	bl	8006404 <__assert_func>
 80058cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058d0:	6006      	str	r6, [r0, #0]
 80058d2:	60c6      	str	r6, [r0, #12]
 80058d4:	69e6      	ldr	r6, [r4, #28]
 80058d6:	68f3      	ldr	r3, [r6, #12]
 80058d8:	b183      	cbz	r3, 80058fc <_Balloc+0x50>
 80058da:	69e3      	ldr	r3, [r4, #28]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058e2:	b9b8      	cbnz	r0, 8005914 <_Balloc+0x68>
 80058e4:	2101      	movs	r1, #1
 80058e6:	fa01 f605 	lsl.w	r6, r1, r5
 80058ea:	1d72      	adds	r2, r6, #5
 80058ec:	0092      	lsls	r2, r2, #2
 80058ee:	4620      	mov	r0, r4
 80058f0:	f000 fda6 	bl	8006440 <_calloc_r>
 80058f4:	b160      	cbz	r0, 8005910 <_Balloc+0x64>
 80058f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80058fa:	e00e      	b.n	800591a <_Balloc+0x6e>
 80058fc:	2221      	movs	r2, #33	; 0x21
 80058fe:	2104      	movs	r1, #4
 8005900:	4620      	mov	r0, r4
 8005902:	f000 fd9d 	bl	8006440 <_calloc_r>
 8005906:	69e3      	ldr	r3, [r4, #28]
 8005908:	60f0      	str	r0, [r6, #12]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1e4      	bne.n	80058da <_Balloc+0x2e>
 8005910:	2000      	movs	r0, #0
 8005912:	bd70      	pop	{r4, r5, r6, pc}
 8005914:	6802      	ldr	r2, [r0, #0]
 8005916:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800591a:	2300      	movs	r3, #0
 800591c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005920:	e7f7      	b.n	8005912 <_Balloc+0x66>
 8005922:	bf00      	nop
 8005924:	08019d51 	.word	0x08019d51
 8005928:	08019dd1 	.word	0x08019dd1

0800592c <_Bfree>:
 800592c:	b570      	push	{r4, r5, r6, lr}
 800592e:	69c6      	ldr	r6, [r0, #28]
 8005930:	4605      	mov	r5, r0
 8005932:	460c      	mov	r4, r1
 8005934:	b976      	cbnz	r6, 8005954 <_Bfree+0x28>
 8005936:	2010      	movs	r0, #16
 8005938:	f7ff ff04 	bl	8005744 <malloc>
 800593c:	4602      	mov	r2, r0
 800593e:	61e8      	str	r0, [r5, #28]
 8005940:	b920      	cbnz	r0, 800594c <_Bfree+0x20>
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <_Bfree+0x3c>)
 8005944:	4809      	ldr	r0, [pc, #36]	; (800596c <_Bfree+0x40>)
 8005946:	218f      	movs	r1, #143	; 0x8f
 8005948:	f000 fd5c 	bl	8006404 <__assert_func>
 800594c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005950:	6006      	str	r6, [r0, #0]
 8005952:	60c6      	str	r6, [r0, #12]
 8005954:	b13c      	cbz	r4, 8005966 <_Bfree+0x3a>
 8005956:	69eb      	ldr	r3, [r5, #28]
 8005958:	6862      	ldr	r2, [r4, #4]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005960:	6021      	str	r1, [r4, #0]
 8005962:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005966:	bd70      	pop	{r4, r5, r6, pc}
 8005968:	08019d51 	.word	0x08019d51
 800596c:	08019dd1 	.word	0x08019dd1

08005970 <__multadd>:
 8005970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005974:	690d      	ldr	r5, [r1, #16]
 8005976:	4607      	mov	r7, r0
 8005978:	460c      	mov	r4, r1
 800597a:	461e      	mov	r6, r3
 800597c:	f101 0c14 	add.w	ip, r1, #20
 8005980:	2000      	movs	r0, #0
 8005982:	f8dc 3000 	ldr.w	r3, [ip]
 8005986:	b299      	uxth	r1, r3
 8005988:	fb02 6101 	mla	r1, r2, r1, r6
 800598c:	0c1e      	lsrs	r6, r3, #16
 800598e:	0c0b      	lsrs	r3, r1, #16
 8005990:	fb02 3306 	mla	r3, r2, r6, r3
 8005994:	b289      	uxth	r1, r1
 8005996:	3001      	adds	r0, #1
 8005998:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800599c:	4285      	cmp	r5, r0
 800599e:	f84c 1b04 	str.w	r1, [ip], #4
 80059a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059a6:	dcec      	bgt.n	8005982 <__multadd+0x12>
 80059a8:	b30e      	cbz	r6, 80059ee <__multadd+0x7e>
 80059aa:	68a3      	ldr	r3, [r4, #8]
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc19      	bgt.n	80059e4 <__multadd+0x74>
 80059b0:	6861      	ldr	r1, [r4, #4]
 80059b2:	4638      	mov	r0, r7
 80059b4:	3101      	adds	r1, #1
 80059b6:	f7ff ff79 	bl	80058ac <_Balloc>
 80059ba:	4680      	mov	r8, r0
 80059bc:	b928      	cbnz	r0, 80059ca <__multadd+0x5a>
 80059be:	4602      	mov	r2, r0
 80059c0:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <__multadd+0x84>)
 80059c2:	480d      	ldr	r0, [pc, #52]	; (80059f8 <__multadd+0x88>)
 80059c4:	21ba      	movs	r1, #186	; 0xba
 80059c6:	f000 fd1d 	bl	8006404 <__assert_func>
 80059ca:	6922      	ldr	r2, [r4, #16]
 80059cc:	3202      	adds	r2, #2
 80059ce:	f104 010c 	add.w	r1, r4, #12
 80059d2:	0092      	lsls	r2, r2, #2
 80059d4:	300c      	adds	r0, #12
 80059d6:	f7fe ffde 	bl	8004996 <memcpy>
 80059da:	4621      	mov	r1, r4
 80059dc:	4638      	mov	r0, r7
 80059de:	f7ff ffa5 	bl	800592c <_Bfree>
 80059e2:	4644      	mov	r4, r8
 80059e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80059e8:	3501      	adds	r5, #1
 80059ea:	615e      	str	r6, [r3, #20]
 80059ec:	6125      	str	r5, [r4, #16]
 80059ee:	4620      	mov	r0, r4
 80059f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059f4:	08019dc0 	.word	0x08019dc0
 80059f8:	08019dd1 	.word	0x08019dd1

080059fc <__hi0bits>:
 80059fc:	0c03      	lsrs	r3, r0, #16
 80059fe:	041b      	lsls	r3, r3, #16
 8005a00:	b9d3      	cbnz	r3, 8005a38 <__hi0bits+0x3c>
 8005a02:	0400      	lsls	r0, r0, #16
 8005a04:	2310      	movs	r3, #16
 8005a06:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a0a:	bf04      	itt	eq
 8005a0c:	0200      	lsleq	r0, r0, #8
 8005a0e:	3308      	addeq	r3, #8
 8005a10:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a14:	bf04      	itt	eq
 8005a16:	0100      	lsleq	r0, r0, #4
 8005a18:	3304      	addeq	r3, #4
 8005a1a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a1e:	bf04      	itt	eq
 8005a20:	0080      	lsleq	r0, r0, #2
 8005a22:	3302      	addeq	r3, #2
 8005a24:	2800      	cmp	r0, #0
 8005a26:	db05      	blt.n	8005a34 <__hi0bits+0x38>
 8005a28:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005a2c:	f103 0301 	add.w	r3, r3, #1
 8005a30:	bf08      	it	eq
 8005a32:	2320      	moveq	r3, #32
 8005a34:	4618      	mov	r0, r3
 8005a36:	4770      	bx	lr
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e7e4      	b.n	8005a06 <__hi0bits+0xa>

08005a3c <__lo0bits>:
 8005a3c:	6803      	ldr	r3, [r0, #0]
 8005a3e:	f013 0207 	ands.w	r2, r3, #7
 8005a42:	d00c      	beq.n	8005a5e <__lo0bits+0x22>
 8005a44:	07d9      	lsls	r1, r3, #31
 8005a46:	d422      	bmi.n	8005a8e <__lo0bits+0x52>
 8005a48:	079a      	lsls	r2, r3, #30
 8005a4a:	bf49      	itett	mi
 8005a4c:	085b      	lsrmi	r3, r3, #1
 8005a4e:	089b      	lsrpl	r3, r3, #2
 8005a50:	6003      	strmi	r3, [r0, #0]
 8005a52:	2201      	movmi	r2, #1
 8005a54:	bf5c      	itt	pl
 8005a56:	6003      	strpl	r3, [r0, #0]
 8005a58:	2202      	movpl	r2, #2
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	4770      	bx	lr
 8005a5e:	b299      	uxth	r1, r3
 8005a60:	b909      	cbnz	r1, 8005a66 <__lo0bits+0x2a>
 8005a62:	0c1b      	lsrs	r3, r3, #16
 8005a64:	2210      	movs	r2, #16
 8005a66:	b2d9      	uxtb	r1, r3
 8005a68:	b909      	cbnz	r1, 8005a6e <__lo0bits+0x32>
 8005a6a:	3208      	adds	r2, #8
 8005a6c:	0a1b      	lsrs	r3, r3, #8
 8005a6e:	0719      	lsls	r1, r3, #28
 8005a70:	bf04      	itt	eq
 8005a72:	091b      	lsreq	r3, r3, #4
 8005a74:	3204      	addeq	r2, #4
 8005a76:	0799      	lsls	r1, r3, #30
 8005a78:	bf04      	itt	eq
 8005a7a:	089b      	lsreq	r3, r3, #2
 8005a7c:	3202      	addeq	r2, #2
 8005a7e:	07d9      	lsls	r1, r3, #31
 8005a80:	d403      	bmi.n	8005a8a <__lo0bits+0x4e>
 8005a82:	085b      	lsrs	r3, r3, #1
 8005a84:	f102 0201 	add.w	r2, r2, #1
 8005a88:	d003      	beq.n	8005a92 <__lo0bits+0x56>
 8005a8a:	6003      	str	r3, [r0, #0]
 8005a8c:	e7e5      	b.n	8005a5a <__lo0bits+0x1e>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	e7e3      	b.n	8005a5a <__lo0bits+0x1e>
 8005a92:	2220      	movs	r2, #32
 8005a94:	e7e1      	b.n	8005a5a <__lo0bits+0x1e>
	...

08005a98 <__i2b>:
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	f7ff ff05 	bl	80058ac <_Balloc>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	b928      	cbnz	r0, 8005ab2 <__i2b+0x1a>
 8005aa6:	4b05      	ldr	r3, [pc, #20]	; (8005abc <__i2b+0x24>)
 8005aa8:	4805      	ldr	r0, [pc, #20]	; (8005ac0 <__i2b+0x28>)
 8005aaa:	f240 1145 	movw	r1, #325	; 0x145
 8005aae:	f000 fca9 	bl	8006404 <__assert_func>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	6144      	str	r4, [r0, #20]
 8005ab6:	6103      	str	r3, [r0, #16]
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	bf00      	nop
 8005abc:	08019dc0 	.word	0x08019dc0
 8005ac0:	08019dd1 	.word	0x08019dd1

08005ac4 <__multiply>:
 8005ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac8:	4691      	mov	r9, r2
 8005aca:	690a      	ldr	r2, [r1, #16]
 8005acc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	bfb8      	it	lt
 8005ad4:	460b      	movlt	r3, r1
 8005ad6:	460c      	mov	r4, r1
 8005ad8:	bfbc      	itt	lt
 8005ada:	464c      	movlt	r4, r9
 8005adc:	4699      	movlt	r9, r3
 8005ade:	6927      	ldr	r7, [r4, #16]
 8005ae0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ae4:	68a3      	ldr	r3, [r4, #8]
 8005ae6:	6861      	ldr	r1, [r4, #4]
 8005ae8:	eb07 060a 	add.w	r6, r7, sl
 8005aec:	42b3      	cmp	r3, r6
 8005aee:	b085      	sub	sp, #20
 8005af0:	bfb8      	it	lt
 8005af2:	3101      	addlt	r1, #1
 8005af4:	f7ff feda 	bl	80058ac <_Balloc>
 8005af8:	b930      	cbnz	r0, 8005b08 <__multiply+0x44>
 8005afa:	4602      	mov	r2, r0
 8005afc:	4b44      	ldr	r3, [pc, #272]	; (8005c10 <__multiply+0x14c>)
 8005afe:	4845      	ldr	r0, [pc, #276]	; (8005c14 <__multiply+0x150>)
 8005b00:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005b04:	f000 fc7e 	bl	8006404 <__assert_func>
 8005b08:	f100 0514 	add.w	r5, r0, #20
 8005b0c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b10:	462b      	mov	r3, r5
 8005b12:	2200      	movs	r2, #0
 8005b14:	4543      	cmp	r3, r8
 8005b16:	d321      	bcc.n	8005b5c <__multiply+0x98>
 8005b18:	f104 0314 	add.w	r3, r4, #20
 8005b1c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b20:	f109 0314 	add.w	r3, r9, #20
 8005b24:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b28:	9202      	str	r2, [sp, #8]
 8005b2a:	1b3a      	subs	r2, r7, r4
 8005b2c:	3a15      	subs	r2, #21
 8005b2e:	f022 0203 	bic.w	r2, r2, #3
 8005b32:	3204      	adds	r2, #4
 8005b34:	f104 0115 	add.w	r1, r4, #21
 8005b38:	428f      	cmp	r7, r1
 8005b3a:	bf38      	it	cc
 8005b3c:	2204      	movcc	r2, #4
 8005b3e:	9201      	str	r2, [sp, #4]
 8005b40:	9a02      	ldr	r2, [sp, #8]
 8005b42:	9303      	str	r3, [sp, #12]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d80c      	bhi.n	8005b62 <__multiply+0x9e>
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	dd03      	ble.n	8005b54 <__multiply+0x90>
 8005b4c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d05b      	beq.n	8005c0c <__multiply+0x148>
 8005b54:	6106      	str	r6, [r0, #16]
 8005b56:	b005      	add	sp, #20
 8005b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b5c:	f843 2b04 	str.w	r2, [r3], #4
 8005b60:	e7d8      	b.n	8005b14 <__multiply+0x50>
 8005b62:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b66:	f1ba 0f00 	cmp.w	sl, #0
 8005b6a:	d024      	beq.n	8005bb6 <__multiply+0xf2>
 8005b6c:	f104 0e14 	add.w	lr, r4, #20
 8005b70:	46a9      	mov	r9, r5
 8005b72:	f04f 0c00 	mov.w	ip, #0
 8005b76:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b7a:	f8d9 1000 	ldr.w	r1, [r9]
 8005b7e:	fa1f fb82 	uxth.w	fp, r2
 8005b82:	b289      	uxth	r1, r1
 8005b84:	fb0a 110b 	mla	r1, sl, fp, r1
 8005b88:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8005b90:	4461      	add	r1, ip
 8005b92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005b96:	fb0a c20b 	mla	r2, sl, fp, ip
 8005b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005b9e:	b289      	uxth	r1, r1
 8005ba0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005ba4:	4577      	cmp	r7, lr
 8005ba6:	f849 1b04 	str.w	r1, [r9], #4
 8005baa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005bae:	d8e2      	bhi.n	8005b76 <__multiply+0xb2>
 8005bb0:	9a01      	ldr	r2, [sp, #4]
 8005bb2:	f845 c002 	str.w	ip, [r5, r2]
 8005bb6:	9a03      	ldr	r2, [sp, #12]
 8005bb8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	f1b9 0f00 	cmp.w	r9, #0
 8005bc2:	d021      	beq.n	8005c08 <__multiply+0x144>
 8005bc4:	6829      	ldr	r1, [r5, #0]
 8005bc6:	f104 0c14 	add.w	ip, r4, #20
 8005bca:	46ae      	mov	lr, r5
 8005bcc:	f04f 0a00 	mov.w	sl, #0
 8005bd0:	f8bc b000 	ldrh.w	fp, [ip]
 8005bd4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bd8:	fb09 220b 	mla	r2, r9, fp, r2
 8005bdc:	4452      	add	r2, sl
 8005bde:	b289      	uxth	r1, r1
 8005be0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005be4:	f84e 1b04 	str.w	r1, [lr], #4
 8005be8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005bec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005bf0:	f8be 1000 	ldrh.w	r1, [lr]
 8005bf4:	fb09 110a 	mla	r1, r9, sl, r1
 8005bf8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005bfc:	4567      	cmp	r7, ip
 8005bfe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c02:	d8e5      	bhi.n	8005bd0 <__multiply+0x10c>
 8005c04:	9a01      	ldr	r2, [sp, #4]
 8005c06:	50a9      	str	r1, [r5, r2]
 8005c08:	3504      	adds	r5, #4
 8005c0a:	e799      	b.n	8005b40 <__multiply+0x7c>
 8005c0c:	3e01      	subs	r6, #1
 8005c0e:	e79b      	b.n	8005b48 <__multiply+0x84>
 8005c10:	08019dc0 	.word	0x08019dc0
 8005c14:	08019dd1 	.word	0x08019dd1

08005c18 <__pow5mult>:
 8005c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c1c:	4615      	mov	r5, r2
 8005c1e:	f012 0203 	ands.w	r2, r2, #3
 8005c22:	4606      	mov	r6, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	d007      	beq.n	8005c38 <__pow5mult+0x20>
 8005c28:	4c25      	ldr	r4, [pc, #148]	; (8005cc0 <__pow5mult+0xa8>)
 8005c2a:	3a01      	subs	r2, #1
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c32:	f7ff fe9d 	bl	8005970 <__multadd>
 8005c36:	4607      	mov	r7, r0
 8005c38:	10ad      	asrs	r5, r5, #2
 8005c3a:	d03d      	beq.n	8005cb8 <__pow5mult+0xa0>
 8005c3c:	69f4      	ldr	r4, [r6, #28]
 8005c3e:	b97c      	cbnz	r4, 8005c60 <__pow5mult+0x48>
 8005c40:	2010      	movs	r0, #16
 8005c42:	f7ff fd7f 	bl	8005744 <malloc>
 8005c46:	4602      	mov	r2, r0
 8005c48:	61f0      	str	r0, [r6, #28]
 8005c4a:	b928      	cbnz	r0, 8005c58 <__pow5mult+0x40>
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	; (8005cc4 <__pow5mult+0xac>)
 8005c4e:	481e      	ldr	r0, [pc, #120]	; (8005cc8 <__pow5mult+0xb0>)
 8005c50:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005c54:	f000 fbd6 	bl	8006404 <__assert_func>
 8005c58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c5c:	6004      	str	r4, [r0, #0]
 8005c5e:	60c4      	str	r4, [r0, #12]
 8005c60:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005c64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c68:	b94c      	cbnz	r4, 8005c7e <__pow5mult+0x66>
 8005c6a:	f240 2171 	movw	r1, #625	; 0x271
 8005c6e:	4630      	mov	r0, r6
 8005c70:	f7ff ff12 	bl	8005a98 <__i2b>
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	6003      	str	r3, [r0, #0]
 8005c7e:	f04f 0900 	mov.w	r9, #0
 8005c82:	07eb      	lsls	r3, r5, #31
 8005c84:	d50a      	bpl.n	8005c9c <__pow5mult+0x84>
 8005c86:	4639      	mov	r1, r7
 8005c88:	4622      	mov	r2, r4
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f7ff ff1a 	bl	8005ac4 <__multiply>
 8005c90:	4639      	mov	r1, r7
 8005c92:	4680      	mov	r8, r0
 8005c94:	4630      	mov	r0, r6
 8005c96:	f7ff fe49 	bl	800592c <_Bfree>
 8005c9a:	4647      	mov	r7, r8
 8005c9c:	106d      	asrs	r5, r5, #1
 8005c9e:	d00b      	beq.n	8005cb8 <__pow5mult+0xa0>
 8005ca0:	6820      	ldr	r0, [r4, #0]
 8005ca2:	b938      	cbnz	r0, 8005cb4 <__pow5mult+0x9c>
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	4621      	mov	r1, r4
 8005ca8:	4630      	mov	r0, r6
 8005caa:	f7ff ff0b 	bl	8005ac4 <__multiply>
 8005cae:	6020      	str	r0, [r4, #0]
 8005cb0:	f8c0 9000 	str.w	r9, [r0]
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	e7e4      	b.n	8005c82 <__pow5mult+0x6a>
 8005cb8:	4638      	mov	r0, r7
 8005cba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cbe:	bf00      	nop
 8005cc0:	08019f20 	.word	0x08019f20
 8005cc4:	08019d51 	.word	0x08019d51
 8005cc8:	08019dd1 	.word	0x08019dd1

08005ccc <__lshift>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	460c      	mov	r4, r1
 8005cd2:	6849      	ldr	r1, [r1, #4]
 8005cd4:	6923      	ldr	r3, [r4, #16]
 8005cd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cda:	68a3      	ldr	r3, [r4, #8]
 8005cdc:	4607      	mov	r7, r0
 8005cde:	4691      	mov	r9, r2
 8005ce0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ce4:	f108 0601 	add.w	r6, r8, #1
 8005ce8:	42b3      	cmp	r3, r6
 8005cea:	db0b      	blt.n	8005d04 <__lshift+0x38>
 8005cec:	4638      	mov	r0, r7
 8005cee:	f7ff fddd 	bl	80058ac <_Balloc>
 8005cf2:	4605      	mov	r5, r0
 8005cf4:	b948      	cbnz	r0, 8005d0a <__lshift+0x3e>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	4b28      	ldr	r3, [pc, #160]	; (8005d9c <__lshift+0xd0>)
 8005cfa:	4829      	ldr	r0, [pc, #164]	; (8005da0 <__lshift+0xd4>)
 8005cfc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005d00:	f000 fb80 	bl	8006404 <__assert_func>
 8005d04:	3101      	adds	r1, #1
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	e7ee      	b.n	8005ce8 <__lshift+0x1c>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	f100 0114 	add.w	r1, r0, #20
 8005d10:	f100 0210 	add.w	r2, r0, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	4553      	cmp	r3, sl
 8005d18:	db33      	blt.n	8005d82 <__lshift+0xb6>
 8005d1a:	6920      	ldr	r0, [r4, #16]
 8005d1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d20:	f104 0314 	add.w	r3, r4, #20
 8005d24:	f019 091f 	ands.w	r9, r9, #31
 8005d28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d30:	d02b      	beq.n	8005d8a <__lshift+0xbe>
 8005d32:	f1c9 0e20 	rsb	lr, r9, #32
 8005d36:	468a      	mov	sl, r1
 8005d38:	2200      	movs	r2, #0
 8005d3a:	6818      	ldr	r0, [r3, #0]
 8005d3c:	fa00 f009 	lsl.w	r0, r0, r9
 8005d40:	4310      	orrs	r0, r2
 8005d42:	f84a 0b04 	str.w	r0, [sl], #4
 8005d46:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d4a:	459c      	cmp	ip, r3
 8005d4c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005d50:	d8f3      	bhi.n	8005d3a <__lshift+0x6e>
 8005d52:	ebac 0304 	sub.w	r3, ip, r4
 8005d56:	3b15      	subs	r3, #21
 8005d58:	f023 0303 	bic.w	r3, r3, #3
 8005d5c:	3304      	adds	r3, #4
 8005d5e:	f104 0015 	add.w	r0, r4, #21
 8005d62:	4584      	cmp	ip, r0
 8005d64:	bf38      	it	cc
 8005d66:	2304      	movcc	r3, #4
 8005d68:	50ca      	str	r2, [r1, r3]
 8005d6a:	b10a      	cbz	r2, 8005d70 <__lshift+0xa4>
 8005d6c:	f108 0602 	add.w	r6, r8, #2
 8005d70:	3e01      	subs	r6, #1
 8005d72:	4638      	mov	r0, r7
 8005d74:	612e      	str	r6, [r5, #16]
 8005d76:	4621      	mov	r1, r4
 8005d78:	f7ff fdd8 	bl	800592c <_Bfree>
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005d86:	3301      	adds	r3, #1
 8005d88:	e7c5      	b.n	8005d16 <__lshift+0x4a>
 8005d8a:	3904      	subs	r1, #4
 8005d8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d90:	f841 2f04 	str.w	r2, [r1, #4]!
 8005d94:	459c      	cmp	ip, r3
 8005d96:	d8f9      	bhi.n	8005d8c <__lshift+0xc0>
 8005d98:	e7ea      	b.n	8005d70 <__lshift+0xa4>
 8005d9a:	bf00      	nop
 8005d9c:	08019dc0 	.word	0x08019dc0
 8005da0:	08019dd1 	.word	0x08019dd1

08005da4 <__mcmp>:
 8005da4:	b530      	push	{r4, r5, lr}
 8005da6:	6902      	ldr	r2, [r0, #16]
 8005da8:	690c      	ldr	r4, [r1, #16]
 8005daa:	1b12      	subs	r2, r2, r4
 8005dac:	d10e      	bne.n	8005dcc <__mcmp+0x28>
 8005dae:	f100 0314 	add.w	r3, r0, #20
 8005db2:	3114      	adds	r1, #20
 8005db4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005db8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005dbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005dc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005dc4:	42a5      	cmp	r5, r4
 8005dc6:	d003      	beq.n	8005dd0 <__mcmp+0x2c>
 8005dc8:	d305      	bcc.n	8005dd6 <__mcmp+0x32>
 8005dca:	2201      	movs	r2, #1
 8005dcc:	4610      	mov	r0, r2
 8005dce:	bd30      	pop	{r4, r5, pc}
 8005dd0:	4283      	cmp	r3, r0
 8005dd2:	d3f3      	bcc.n	8005dbc <__mcmp+0x18>
 8005dd4:	e7fa      	b.n	8005dcc <__mcmp+0x28>
 8005dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dda:	e7f7      	b.n	8005dcc <__mcmp+0x28>

08005ddc <__mdiff>:
 8005ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de0:	460c      	mov	r4, r1
 8005de2:	4606      	mov	r6, r0
 8005de4:	4611      	mov	r1, r2
 8005de6:	4620      	mov	r0, r4
 8005de8:	4690      	mov	r8, r2
 8005dea:	f7ff ffdb 	bl	8005da4 <__mcmp>
 8005dee:	1e05      	subs	r5, r0, #0
 8005df0:	d110      	bne.n	8005e14 <__mdiff+0x38>
 8005df2:	4629      	mov	r1, r5
 8005df4:	4630      	mov	r0, r6
 8005df6:	f7ff fd59 	bl	80058ac <_Balloc>
 8005dfa:	b930      	cbnz	r0, 8005e0a <__mdiff+0x2e>
 8005dfc:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <__mdiff+0x10c>)
 8005dfe:	4602      	mov	r2, r0
 8005e00:	f240 2137 	movw	r1, #567	; 0x237
 8005e04:	4839      	ldr	r0, [pc, #228]	; (8005eec <__mdiff+0x110>)
 8005e06:	f000 fafd 	bl	8006404 <__assert_func>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e14:	bfa4      	itt	ge
 8005e16:	4643      	movge	r3, r8
 8005e18:	46a0      	movge	r8, r4
 8005e1a:	4630      	mov	r0, r6
 8005e1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005e20:	bfa6      	itte	ge
 8005e22:	461c      	movge	r4, r3
 8005e24:	2500      	movge	r5, #0
 8005e26:	2501      	movlt	r5, #1
 8005e28:	f7ff fd40 	bl	80058ac <_Balloc>
 8005e2c:	b920      	cbnz	r0, 8005e38 <__mdiff+0x5c>
 8005e2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ee8 <__mdiff+0x10c>)
 8005e30:	4602      	mov	r2, r0
 8005e32:	f240 2145 	movw	r1, #581	; 0x245
 8005e36:	e7e5      	b.n	8005e04 <__mdiff+0x28>
 8005e38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005e3c:	6926      	ldr	r6, [r4, #16]
 8005e3e:	60c5      	str	r5, [r0, #12]
 8005e40:	f104 0914 	add.w	r9, r4, #20
 8005e44:	f108 0514 	add.w	r5, r8, #20
 8005e48:	f100 0e14 	add.w	lr, r0, #20
 8005e4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005e50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e54:	f108 0210 	add.w	r2, r8, #16
 8005e58:	46f2      	mov	sl, lr
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005e64:	fa11 f88b 	uxtah	r8, r1, fp
 8005e68:	b299      	uxth	r1, r3
 8005e6a:	0c1b      	lsrs	r3, r3, #16
 8005e6c:	eba8 0801 	sub.w	r8, r8, r1
 8005e70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e74:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005e78:	fa1f f888 	uxth.w	r8, r8
 8005e7c:	1419      	asrs	r1, r3, #16
 8005e7e:	454e      	cmp	r6, r9
 8005e80:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005e84:	f84a 3b04 	str.w	r3, [sl], #4
 8005e88:	d8e8      	bhi.n	8005e5c <__mdiff+0x80>
 8005e8a:	1b33      	subs	r3, r6, r4
 8005e8c:	3b15      	subs	r3, #21
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	3304      	adds	r3, #4
 8005e94:	3415      	adds	r4, #21
 8005e96:	42a6      	cmp	r6, r4
 8005e98:	bf38      	it	cc
 8005e9a:	2304      	movcc	r3, #4
 8005e9c:	441d      	add	r5, r3
 8005e9e:	4473      	add	r3, lr
 8005ea0:	469e      	mov	lr, r3
 8005ea2:	462e      	mov	r6, r5
 8005ea4:	4566      	cmp	r6, ip
 8005ea6:	d30e      	bcc.n	8005ec6 <__mdiff+0xea>
 8005ea8:	f10c 0203 	add.w	r2, ip, #3
 8005eac:	1b52      	subs	r2, r2, r5
 8005eae:	f022 0203 	bic.w	r2, r2, #3
 8005eb2:	3d03      	subs	r5, #3
 8005eb4:	45ac      	cmp	ip, r5
 8005eb6:	bf38      	it	cc
 8005eb8:	2200      	movcc	r2, #0
 8005eba:	4413      	add	r3, r2
 8005ebc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ec0:	b17a      	cbz	r2, 8005ee2 <__mdiff+0x106>
 8005ec2:	6107      	str	r7, [r0, #16]
 8005ec4:	e7a4      	b.n	8005e10 <__mdiff+0x34>
 8005ec6:	f856 8b04 	ldr.w	r8, [r6], #4
 8005eca:	fa11 f288 	uxtah	r2, r1, r8
 8005ece:	1414      	asrs	r4, r2, #16
 8005ed0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ed4:	b292      	uxth	r2, r2
 8005ed6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8005eda:	f84e 2b04 	str.w	r2, [lr], #4
 8005ede:	1421      	asrs	r1, r4, #16
 8005ee0:	e7e0      	b.n	8005ea4 <__mdiff+0xc8>
 8005ee2:	3f01      	subs	r7, #1
 8005ee4:	e7ea      	b.n	8005ebc <__mdiff+0xe0>
 8005ee6:	bf00      	nop
 8005ee8:	08019dc0 	.word	0x08019dc0
 8005eec:	08019dd1 	.word	0x08019dd1

08005ef0 <__d2b>:
 8005ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	460f      	mov	r7, r1
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	ec59 8b10 	vmov	r8, r9, d0
 8005efc:	4616      	mov	r6, r2
 8005efe:	f7ff fcd5 	bl	80058ac <_Balloc>
 8005f02:	4604      	mov	r4, r0
 8005f04:	b930      	cbnz	r0, 8005f14 <__d2b+0x24>
 8005f06:	4602      	mov	r2, r0
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <__d2b+0xac>)
 8005f0a:	4825      	ldr	r0, [pc, #148]	; (8005fa0 <__d2b+0xb0>)
 8005f0c:	f240 310f 	movw	r1, #783	; 0x30f
 8005f10:	f000 fa78 	bl	8006404 <__assert_func>
 8005f14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f1c:	bb2d      	cbnz	r5, 8005f6a <__d2b+0x7a>
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	f1b8 0300 	subs.w	r3, r8, #0
 8005f24:	d026      	beq.n	8005f74 <__d2b+0x84>
 8005f26:	4668      	mov	r0, sp
 8005f28:	9300      	str	r3, [sp, #0]
 8005f2a:	f7ff fd87 	bl	8005a3c <__lo0bits>
 8005f2e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005f32:	b1e8      	cbz	r0, 8005f70 <__d2b+0x80>
 8005f34:	f1c0 0320 	rsb	r3, r0, #32
 8005f38:	fa02 f303 	lsl.w	r3, r2, r3
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	40c2      	lsrs	r2, r0
 8005f40:	6163      	str	r3, [r4, #20]
 8005f42:	9201      	str	r2, [sp, #4]
 8005f44:	9b01      	ldr	r3, [sp, #4]
 8005f46:	61a3      	str	r3, [r4, #24]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	bf14      	ite	ne
 8005f4c:	2202      	movne	r2, #2
 8005f4e:	2201      	moveq	r2, #1
 8005f50:	6122      	str	r2, [r4, #16]
 8005f52:	b1bd      	cbz	r5, 8005f84 <__d2b+0x94>
 8005f54:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f58:	4405      	add	r5, r0
 8005f5a:	603d      	str	r5, [r7, #0]
 8005f5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f60:	6030      	str	r0, [r6, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	b003      	add	sp, #12
 8005f66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f6e:	e7d6      	b.n	8005f1e <__d2b+0x2e>
 8005f70:	6161      	str	r1, [r4, #20]
 8005f72:	e7e7      	b.n	8005f44 <__d2b+0x54>
 8005f74:	a801      	add	r0, sp, #4
 8005f76:	f7ff fd61 	bl	8005a3c <__lo0bits>
 8005f7a:	9b01      	ldr	r3, [sp, #4]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	3020      	adds	r0, #32
 8005f80:	2201      	movs	r2, #1
 8005f82:	e7e5      	b.n	8005f50 <__d2b+0x60>
 8005f84:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005f88:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005f8c:	6038      	str	r0, [r7, #0]
 8005f8e:	6918      	ldr	r0, [r3, #16]
 8005f90:	f7ff fd34 	bl	80059fc <__hi0bits>
 8005f94:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005f98:	e7e2      	b.n	8005f60 <__d2b+0x70>
 8005f9a:	bf00      	nop
 8005f9c:	08019dc0 	.word	0x08019dc0
 8005fa0:	08019dd1 	.word	0x08019dd1

08005fa4 <__ssputs_r>:
 8005fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fa8:	688e      	ldr	r6, [r1, #8]
 8005faa:	461f      	mov	r7, r3
 8005fac:	42be      	cmp	r6, r7
 8005fae:	680b      	ldr	r3, [r1, #0]
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4690      	mov	r8, r2
 8005fb6:	d82c      	bhi.n	8006012 <__ssputs_r+0x6e>
 8005fb8:	898a      	ldrh	r2, [r1, #12]
 8005fba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005fbe:	d026      	beq.n	800600e <__ssputs_r+0x6a>
 8005fc0:	6965      	ldr	r5, [r4, #20]
 8005fc2:	6909      	ldr	r1, [r1, #16]
 8005fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005fc8:	eba3 0901 	sub.w	r9, r3, r1
 8005fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005fd0:	1c7b      	adds	r3, r7, #1
 8005fd2:	444b      	add	r3, r9
 8005fd4:	106d      	asrs	r5, r5, #1
 8005fd6:	429d      	cmp	r5, r3
 8005fd8:	bf38      	it	cc
 8005fda:	461d      	movcc	r5, r3
 8005fdc:	0553      	lsls	r3, r2, #21
 8005fde:	d527      	bpl.n	8006030 <__ssputs_r+0x8c>
 8005fe0:	4629      	mov	r1, r5
 8005fe2:	f7ff fbd7 	bl	8005794 <_malloc_r>
 8005fe6:	4606      	mov	r6, r0
 8005fe8:	b360      	cbz	r0, 8006044 <__ssputs_r+0xa0>
 8005fea:	6921      	ldr	r1, [r4, #16]
 8005fec:	464a      	mov	r2, r9
 8005fee:	f7fe fcd2 	bl	8004996 <memcpy>
 8005ff2:	89a3      	ldrh	r3, [r4, #12]
 8005ff4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ffc:	81a3      	strh	r3, [r4, #12]
 8005ffe:	6126      	str	r6, [r4, #16]
 8006000:	6165      	str	r5, [r4, #20]
 8006002:	444e      	add	r6, r9
 8006004:	eba5 0509 	sub.w	r5, r5, r9
 8006008:	6026      	str	r6, [r4, #0]
 800600a:	60a5      	str	r5, [r4, #8]
 800600c:	463e      	mov	r6, r7
 800600e:	42be      	cmp	r6, r7
 8006010:	d900      	bls.n	8006014 <__ssputs_r+0x70>
 8006012:	463e      	mov	r6, r7
 8006014:	6820      	ldr	r0, [r4, #0]
 8006016:	4632      	mov	r2, r6
 8006018:	4641      	mov	r1, r8
 800601a:	f000 f9c9 	bl	80063b0 <memmove>
 800601e:	68a3      	ldr	r3, [r4, #8]
 8006020:	1b9b      	subs	r3, r3, r6
 8006022:	60a3      	str	r3, [r4, #8]
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	4433      	add	r3, r6
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006030:	462a      	mov	r2, r5
 8006032:	f000 fa2d 	bl	8006490 <_realloc_r>
 8006036:	4606      	mov	r6, r0
 8006038:	2800      	cmp	r0, #0
 800603a:	d1e0      	bne.n	8005ffe <__ssputs_r+0x5a>
 800603c:	6921      	ldr	r1, [r4, #16]
 800603e:	4650      	mov	r0, sl
 8006040:	f7ff fb34 	bl	80056ac <_free_r>
 8006044:	230c      	movs	r3, #12
 8006046:	f8ca 3000 	str.w	r3, [sl]
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	f04f 30ff 	mov.w	r0, #4294967295
 8006056:	e7e9      	b.n	800602c <__ssputs_r+0x88>

08006058 <_svfiprintf_r>:
 8006058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800605c:	4698      	mov	r8, r3
 800605e:	898b      	ldrh	r3, [r1, #12]
 8006060:	061b      	lsls	r3, r3, #24
 8006062:	b09d      	sub	sp, #116	; 0x74
 8006064:	4607      	mov	r7, r0
 8006066:	460d      	mov	r5, r1
 8006068:	4614      	mov	r4, r2
 800606a:	d50e      	bpl.n	800608a <_svfiprintf_r+0x32>
 800606c:	690b      	ldr	r3, [r1, #16]
 800606e:	b963      	cbnz	r3, 800608a <_svfiprintf_r+0x32>
 8006070:	2140      	movs	r1, #64	; 0x40
 8006072:	f7ff fb8f 	bl	8005794 <_malloc_r>
 8006076:	6028      	str	r0, [r5, #0]
 8006078:	6128      	str	r0, [r5, #16]
 800607a:	b920      	cbnz	r0, 8006086 <_svfiprintf_r+0x2e>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e0d0      	b.n	8006228 <_svfiprintf_r+0x1d0>
 8006086:	2340      	movs	r3, #64	; 0x40
 8006088:	616b      	str	r3, [r5, #20]
 800608a:	2300      	movs	r3, #0
 800608c:	9309      	str	r3, [sp, #36]	; 0x24
 800608e:	2320      	movs	r3, #32
 8006090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006094:	f8cd 800c 	str.w	r8, [sp, #12]
 8006098:	2330      	movs	r3, #48	; 0x30
 800609a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006240 <_svfiprintf_r+0x1e8>
 800609e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060a2:	f04f 0901 	mov.w	r9, #1
 80060a6:	4623      	mov	r3, r4
 80060a8:	469a      	mov	sl, r3
 80060aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060ae:	b10a      	cbz	r2, 80060b4 <_svfiprintf_r+0x5c>
 80060b0:	2a25      	cmp	r2, #37	; 0x25
 80060b2:	d1f9      	bne.n	80060a8 <_svfiprintf_r+0x50>
 80060b4:	ebba 0b04 	subs.w	fp, sl, r4
 80060b8:	d00b      	beq.n	80060d2 <_svfiprintf_r+0x7a>
 80060ba:	465b      	mov	r3, fp
 80060bc:	4622      	mov	r2, r4
 80060be:	4629      	mov	r1, r5
 80060c0:	4638      	mov	r0, r7
 80060c2:	f7ff ff6f 	bl	8005fa4 <__ssputs_r>
 80060c6:	3001      	adds	r0, #1
 80060c8:	f000 80a9 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060ce:	445a      	add	r2, fp
 80060d0:	9209      	str	r2, [sp, #36]	; 0x24
 80060d2:	f89a 3000 	ldrb.w	r3, [sl]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 80a1 	beq.w	800621e <_svfiprintf_r+0x1c6>
 80060dc:	2300      	movs	r3, #0
 80060de:	f04f 32ff 	mov.w	r2, #4294967295
 80060e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80060e6:	f10a 0a01 	add.w	sl, sl, #1
 80060ea:	9304      	str	r3, [sp, #16]
 80060ec:	9307      	str	r3, [sp, #28]
 80060ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80060f2:	931a      	str	r3, [sp, #104]	; 0x68
 80060f4:	4654      	mov	r4, sl
 80060f6:	2205      	movs	r2, #5
 80060f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060fc:	4850      	ldr	r0, [pc, #320]	; (8006240 <_svfiprintf_r+0x1e8>)
 80060fe:	f7fa f86f 	bl	80001e0 <memchr>
 8006102:	9a04      	ldr	r2, [sp, #16]
 8006104:	b9d8      	cbnz	r0, 800613e <_svfiprintf_r+0xe6>
 8006106:	06d0      	lsls	r0, r2, #27
 8006108:	bf44      	itt	mi
 800610a:	2320      	movmi	r3, #32
 800610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006110:	0711      	lsls	r1, r2, #28
 8006112:	bf44      	itt	mi
 8006114:	232b      	movmi	r3, #43	; 0x2b
 8006116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800611a:	f89a 3000 	ldrb.w	r3, [sl]
 800611e:	2b2a      	cmp	r3, #42	; 0x2a
 8006120:	d015      	beq.n	800614e <_svfiprintf_r+0xf6>
 8006122:	9a07      	ldr	r2, [sp, #28]
 8006124:	4654      	mov	r4, sl
 8006126:	2000      	movs	r0, #0
 8006128:	f04f 0c0a 	mov.w	ip, #10
 800612c:	4621      	mov	r1, r4
 800612e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006132:	3b30      	subs	r3, #48	; 0x30
 8006134:	2b09      	cmp	r3, #9
 8006136:	d94d      	bls.n	80061d4 <_svfiprintf_r+0x17c>
 8006138:	b1b0      	cbz	r0, 8006168 <_svfiprintf_r+0x110>
 800613a:	9207      	str	r2, [sp, #28]
 800613c:	e014      	b.n	8006168 <_svfiprintf_r+0x110>
 800613e:	eba0 0308 	sub.w	r3, r0, r8
 8006142:	fa09 f303 	lsl.w	r3, r9, r3
 8006146:	4313      	orrs	r3, r2
 8006148:	9304      	str	r3, [sp, #16]
 800614a:	46a2      	mov	sl, r4
 800614c:	e7d2      	b.n	80060f4 <_svfiprintf_r+0x9c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	1d19      	adds	r1, r3, #4
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	9103      	str	r1, [sp, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	bfbb      	ittet	lt
 800615a:	425b      	neglt	r3, r3
 800615c:	f042 0202 	orrlt.w	r2, r2, #2
 8006160:	9307      	strge	r3, [sp, #28]
 8006162:	9307      	strlt	r3, [sp, #28]
 8006164:	bfb8      	it	lt
 8006166:	9204      	strlt	r2, [sp, #16]
 8006168:	7823      	ldrb	r3, [r4, #0]
 800616a:	2b2e      	cmp	r3, #46	; 0x2e
 800616c:	d10c      	bne.n	8006188 <_svfiprintf_r+0x130>
 800616e:	7863      	ldrb	r3, [r4, #1]
 8006170:	2b2a      	cmp	r3, #42	; 0x2a
 8006172:	d134      	bne.n	80061de <_svfiprintf_r+0x186>
 8006174:	9b03      	ldr	r3, [sp, #12]
 8006176:	1d1a      	adds	r2, r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	9203      	str	r2, [sp, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb8      	it	lt
 8006180:	f04f 33ff 	movlt.w	r3, #4294967295
 8006184:	3402      	adds	r4, #2
 8006186:	9305      	str	r3, [sp, #20]
 8006188:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006250 <_svfiprintf_r+0x1f8>
 800618c:	7821      	ldrb	r1, [r4, #0]
 800618e:	2203      	movs	r2, #3
 8006190:	4650      	mov	r0, sl
 8006192:	f7fa f825 	bl	80001e0 <memchr>
 8006196:	b138      	cbz	r0, 80061a8 <_svfiprintf_r+0x150>
 8006198:	9b04      	ldr	r3, [sp, #16]
 800619a:	eba0 000a 	sub.w	r0, r0, sl
 800619e:	2240      	movs	r2, #64	; 0x40
 80061a0:	4082      	lsls	r2, r0
 80061a2:	4313      	orrs	r3, r2
 80061a4:	3401      	adds	r4, #1
 80061a6:	9304      	str	r3, [sp, #16]
 80061a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061ac:	4825      	ldr	r0, [pc, #148]	; (8006244 <_svfiprintf_r+0x1ec>)
 80061ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061b2:	2206      	movs	r2, #6
 80061b4:	f7fa f814 	bl	80001e0 <memchr>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d038      	beq.n	800622e <_svfiprintf_r+0x1d6>
 80061bc:	4b22      	ldr	r3, [pc, #136]	; (8006248 <_svfiprintf_r+0x1f0>)
 80061be:	bb1b      	cbnz	r3, 8006208 <_svfiprintf_r+0x1b0>
 80061c0:	9b03      	ldr	r3, [sp, #12]
 80061c2:	3307      	adds	r3, #7
 80061c4:	f023 0307 	bic.w	r3, r3, #7
 80061c8:	3308      	adds	r3, #8
 80061ca:	9303      	str	r3, [sp, #12]
 80061cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ce:	4433      	add	r3, r6
 80061d0:	9309      	str	r3, [sp, #36]	; 0x24
 80061d2:	e768      	b.n	80060a6 <_svfiprintf_r+0x4e>
 80061d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80061d8:	460c      	mov	r4, r1
 80061da:	2001      	movs	r0, #1
 80061dc:	e7a6      	b.n	800612c <_svfiprintf_r+0xd4>
 80061de:	2300      	movs	r3, #0
 80061e0:	3401      	adds	r4, #1
 80061e2:	9305      	str	r3, [sp, #20]
 80061e4:	4619      	mov	r1, r3
 80061e6:	f04f 0c0a 	mov.w	ip, #10
 80061ea:	4620      	mov	r0, r4
 80061ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80061f0:	3a30      	subs	r2, #48	; 0x30
 80061f2:	2a09      	cmp	r2, #9
 80061f4:	d903      	bls.n	80061fe <_svfiprintf_r+0x1a6>
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d0c6      	beq.n	8006188 <_svfiprintf_r+0x130>
 80061fa:	9105      	str	r1, [sp, #20]
 80061fc:	e7c4      	b.n	8006188 <_svfiprintf_r+0x130>
 80061fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006202:	4604      	mov	r4, r0
 8006204:	2301      	movs	r3, #1
 8006206:	e7f0      	b.n	80061ea <_svfiprintf_r+0x192>
 8006208:	ab03      	add	r3, sp, #12
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	462a      	mov	r2, r5
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <_svfiprintf_r+0x1f4>)
 8006210:	a904      	add	r1, sp, #16
 8006212:	4638      	mov	r0, r7
 8006214:	f7fd fe54 	bl	8003ec0 <_printf_float>
 8006218:	1c42      	adds	r2, r0, #1
 800621a:	4606      	mov	r6, r0
 800621c:	d1d6      	bne.n	80061cc <_svfiprintf_r+0x174>
 800621e:	89ab      	ldrh	r3, [r5, #12]
 8006220:	065b      	lsls	r3, r3, #25
 8006222:	f53f af2d 	bmi.w	8006080 <_svfiprintf_r+0x28>
 8006226:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006228:	b01d      	add	sp, #116	; 0x74
 800622a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800622e:	ab03      	add	r3, sp, #12
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	462a      	mov	r2, r5
 8006234:	4b05      	ldr	r3, [pc, #20]	; (800624c <_svfiprintf_r+0x1f4>)
 8006236:	a904      	add	r1, sp, #16
 8006238:	4638      	mov	r0, r7
 800623a:	f7fe f8e5 	bl	8004408 <_printf_i>
 800623e:	e7eb      	b.n	8006218 <_svfiprintf_r+0x1c0>
 8006240:	08019f2c 	.word	0x08019f2c
 8006244:	08019f36 	.word	0x08019f36
 8006248:	08003ec1 	.word	0x08003ec1
 800624c:	08005fa5 	.word	0x08005fa5
 8006250:	08019f32 	.word	0x08019f32

08006254 <__sflush_r>:
 8006254:	898a      	ldrh	r2, [r1, #12]
 8006256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	0710      	lsls	r0, r2, #28
 800625e:	460c      	mov	r4, r1
 8006260:	d458      	bmi.n	8006314 <__sflush_r+0xc0>
 8006262:	684b      	ldr	r3, [r1, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	dc05      	bgt.n	8006274 <__sflush_r+0x20>
 8006268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800626a:	2b00      	cmp	r3, #0
 800626c:	dc02      	bgt.n	8006274 <__sflush_r+0x20>
 800626e:	2000      	movs	r0, #0
 8006270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006276:	2e00      	cmp	r6, #0
 8006278:	d0f9      	beq.n	800626e <__sflush_r+0x1a>
 800627a:	2300      	movs	r3, #0
 800627c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006280:	682f      	ldr	r7, [r5, #0]
 8006282:	6a21      	ldr	r1, [r4, #32]
 8006284:	602b      	str	r3, [r5, #0]
 8006286:	d032      	beq.n	80062ee <__sflush_r+0x9a>
 8006288:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800628a:	89a3      	ldrh	r3, [r4, #12]
 800628c:	075a      	lsls	r2, r3, #29
 800628e:	d505      	bpl.n	800629c <__sflush_r+0x48>
 8006290:	6863      	ldr	r3, [r4, #4]
 8006292:	1ac0      	subs	r0, r0, r3
 8006294:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006296:	b10b      	cbz	r3, 800629c <__sflush_r+0x48>
 8006298:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800629a:	1ac0      	subs	r0, r0, r3
 800629c:	2300      	movs	r3, #0
 800629e:	4602      	mov	r2, r0
 80062a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062a2:	6a21      	ldr	r1, [r4, #32]
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b0      	blx	r6
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	d106      	bne.n	80062bc <__sflush_r+0x68>
 80062ae:	6829      	ldr	r1, [r5, #0]
 80062b0:	291d      	cmp	r1, #29
 80062b2:	d82b      	bhi.n	800630c <__sflush_r+0xb8>
 80062b4:	4a29      	ldr	r2, [pc, #164]	; (800635c <__sflush_r+0x108>)
 80062b6:	410a      	asrs	r2, r1
 80062b8:	07d6      	lsls	r6, r2, #31
 80062ba:	d427      	bmi.n	800630c <__sflush_r+0xb8>
 80062bc:	2200      	movs	r2, #0
 80062be:	6062      	str	r2, [r4, #4]
 80062c0:	04d9      	lsls	r1, r3, #19
 80062c2:	6922      	ldr	r2, [r4, #16]
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	d504      	bpl.n	80062d2 <__sflush_r+0x7e>
 80062c8:	1c42      	adds	r2, r0, #1
 80062ca:	d101      	bne.n	80062d0 <__sflush_r+0x7c>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b903      	cbnz	r3, 80062d2 <__sflush_r+0x7e>
 80062d0:	6560      	str	r0, [r4, #84]	; 0x54
 80062d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062d4:	602f      	str	r7, [r5, #0]
 80062d6:	2900      	cmp	r1, #0
 80062d8:	d0c9      	beq.n	800626e <__sflush_r+0x1a>
 80062da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062de:	4299      	cmp	r1, r3
 80062e0:	d002      	beq.n	80062e8 <__sflush_r+0x94>
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7ff f9e2 	bl	80056ac <_free_r>
 80062e8:	2000      	movs	r0, #0
 80062ea:	6360      	str	r0, [r4, #52]	; 0x34
 80062ec:	e7c0      	b.n	8006270 <__sflush_r+0x1c>
 80062ee:	2301      	movs	r3, #1
 80062f0:	4628      	mov	r0, r5
 80062f2:	47b0      	blx	r6
 80062f4:	1c41      	adds	r1, r0, #1
 80062f6:	d1c8      	bne.n	800628a <__sflush_r+0x36>
 80062f8:	682b      	ldr	r3, [r5, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0c5      	beq.n	800628a <__sflush_r+0x36>
 80062fe:	2b1d      	cmp	r3, #29
 8006300:	d001      	beq.n	8006306 <__sflush_r+0xb2>
 8006302:	2b16      	cmp	r3, #22
 8006304:	d101      	bne.n	800630a <__sflush_r+0xb6>
 8006306:	602f      	str	r7, [r5, #0]
 8006308:	e7b1      	b.n	800626e <__sflush_r+0x1a>
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	e7ad      	b.n	8006270 <__sflush_r+0x1c>
 8006314:	690f      	ldr	r7, [r1, #16]
 8006316:	2f00      	cmp	r7, #0
 8006318:	d0a9      	beq.n	800626e <__sflush_r+0x1a>
 800631a:	0793      	lsls	r3, r2, #30
 800631c:	680e      	ldr	r6, [r1, #0]
 800631e:	bf08      	it	eq
 8006320:	694b      	ldreq	r3, [r1, #20]
 8006322:	600f      	str	r7, [r1, #0]
 8006324:	bf18      	it	ne
 8006326:	2300      	movne	r3, #0
 8006328:	eba6 0807 	sub.w	r8, r6, r7
 800632c:	608b      	str	r3, [r1, #8]
 800632e:	f1b8 0f00 	cmp.w	r8, #0
 8006332:	dd9c      	ble.n	800626e <__sflush_r+0x1a>
 8006334:	6a21      	ldr	r1, [r4, #32]
 8006336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006338:	4643      	mov	r3, r8
 800633a:	463a      	mov	r2, r7
 800633c:	4628      	mov	r0, r5
 800633e:	47b0      	blx	r6
 8006340:	2800      	cmp	r0, #0
 8006342:	dc06      	bgt.n	8006352 <__sflush_r+0xfe>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	f04f 30ff 	mov.w	r0, #4294967295
 8006350:	e78e      	b.n	8006270 <__sflush_r+0x1c>
 8006352:	4407      	add	r7, r0
 8006354:	eba8 0800 	sub.w	r8, r8, r0
 8006358:	e7e9      	b.n	800632e <__sflush_r+0xda>
 800635a:	bf00      	nop
 800635c:	dfbffffe 	.word	0xdfbffffe

08006360 <_fflush_r>:
 8006360:	b538      	push	{r3, r4, r5, lr}
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	4605      	mov	r5, r0
 8006366:	460c      	mov	r4, r1
 8006368:	b913      	cbnz	r3, 8006370 <_fflush_r+0x10>
 800636a:	2500      	movs	r5, #0
 800636c:	4628      	mov	r0, r5
 800636e:	bd38      	pop	{r3, r4, r5, pc}
 8006370:	b118      	cbz	r0, 800637a <_fflush_r+0x1a>
 8006372:	6a03      	ldr	r3, [r0, #32]
 8006374:	b90b      	cbnz	r3, 800637a <_fflush_r+0x1a>
 8006376:	f7fe f9f5 	bl	8004764 <__sinit>
 800637a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d0f3      	beq.n	800636a <_fflush_r+0xa>
 8006382:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006384:	07d0      	lsls	r0, r2, #31
 8006386:	d404      	bmi.n	8006392 <_fflush_r+0x32>
 8006388:	0599      	lsls	r1, r3, #22
 800638a:	d402      	bmi.n	8006392 <_fflush_r+0x32>
 800638c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800638e:	f7fe fb00 	bl	8004992 <__retarget_lock_acquire_recursive>
 8006392:	4628      	mov	r0, r5
 8006394:	4621      	mov	r1, r4
 8006396:	f7ff ff5d 	bl	8006254 <__sflush_r>
 800639a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800639c:	07da      	lsls	r2, r3, #31
 800639e:	4605      	mov	r5, r0
 80063a0:	d4e4      	bmi.n	800636c <_fflush_r+0xc>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	059b      	lsls	r3, r3, #22
 80063a6:	d4e1      	bmi.n	800636c <_fflush_r+0xc>
 80063a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063aa:	f7fe faf3 	bl	8004994 <__retarget_lock_release_recursive>
 80063ae:	e7dd      	b.n	800636c <_fflush_r+0xc>

080063b0 <memmove>:
 80063b0:	4288      	cmp	r0, r1
 80063b2:	b510      	push	{r4, lr}
 80063b4:	eb01 0402 	add.w	r4, r1, r2
 80063b8:	d902      	bls.n	80063c0 <memmove+0x10>
 80063ba:	4284      	cmp	r4, r0
 80063bc:	4623      	mov	r3, r4
 80063be:	d807      	bhi.n	80063d0 <memmove+0x20>
 80063c0:	1e43      	subs	r3, r0, #1
 80063c2:	42a1      	cmp	r1, r4
 80063c4:	d008      	beq.n	80063d8 <memmove+0x28>
 80063c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80063ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80063ce:	e7f8      	b.n	80063c2 <memmove+0x12>
 80063d0:	4402      	add	r2, r0
 80063d2:	4601      	mov	r1, r0
 80063d4:	428a      	cmp	r2, r1
 80063d6:	d100      	bne.n	80063da <memmove+0x2a>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80063e2:	e7f7      	b.n	80063d4 <memmove+0x24>

080063e4 <_sbrk_r>:
 80063e4:	b538      	push	{r3, r4, r5, lr}
 80063e6:	4d06      	ldr	r5, [pc, #24]	; (8006400 <_sbrk_r+0x1c>)
 80063e8:	2300      	movs	r3, #0
 80063ea:	4604      	mov	r4, r0
 80063ec:	4608      	mov	r0, r1
 80063ee:	602b      	str	r3, [r5, #0]
 80063f0:	f7fc fd16 	bl	8002e20 <_sbrk>
 80063f4:	1c43      	adds	r3, r0, #1
 80063f6:	d102      	bne.n	80063fe <_sbrk_r+0x1a>
 80063f8:	682b      	ldr	r3, [r5, #0]
 80063fa:	b103      	cbz	r3, 80063fe <_sbrk_r+0x1a>
 80063fc:	6023      	str	r3, [r4, #0]
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000344 	.word	0x20000344

08006404 <__assert_func>:
 8006404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006406:	4614      	mov	r4, r2
 8006408:	461a      	mov	r2, r3
 800640a:	4b09      	ldr	r3, [pc, #36]	; (8006430 <__assert_func+0x2c>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4605      	mov	r5, r0
 8006410:	68d8      	ldr	r0, [r3, #12]
 8006412:	b14c      	cbz	r4, 8006428 <__assert_func+0x24>
 8006414:	4b07      	ldr	r3, [pc, #28]	; (8006434 <__assert_func+0x30>)
 8006416:	9100      	str	r1, [sp, #0]
 8006418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800641c:	4906      	ldr	r1, [pc, #24]	; (8006438 <__assert_func+0x34>)
 800641e:	462b      	mov	r3, r5
 8006420:	f000 f872 	bl	8006508 <fiprintf>
 8006424:	f000 f882 	bl	800652c <abort>
 8006428:	4b04      	ldr	r3, [pc, #16]	; (800643c <__assert_func+0x38>)
 800642a:	461c      	mov	r4, r3
 800642c:	e7f3      	b.n	8006416 <__assert_func+0x12>
 800642e:	bf00      	nop
 8006430:	20000068 	.word	0x20000068
 8006434:	08019f47 	.word	0x08019f47
 8006438:	08019f54 	.word	0x08019f54
 800643c:	08019f82 	.word	0x08019f82

08006440 <_calloc_r>:
 8006440:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006442:	fba1 2402 	umull	r2, r4, r1, r2
 8006446:	b94c      	cbnz	r4, 800645c <_calloc_r+0x1c>
 8006448:	4611      	mov	r1, r2
 800644a:	9201      	str	r2, [sp, #4]
 800644c:	f7ff f9a2 	bl	8005794 <_malloc_r>
 8006450:	9a01      	ldr	r2, [sp, #4]
 8006452:	4605      	mov	r5, r0
 8006454:	b930      	cbnz	r0, 8006464 <_calloc_r+0x24>
 8006456:	4628      	mov	r0, r5
 8006458:	b003      	add	sp, #12
 800645a:	bd30      	pop	{r4, r5, pc}
 800645c:	220c      	movs	r2, #12
 800645e:	6002      	str	r2, [r0, #0]
 8006460:	2500      	movs	r5, #0
 8006462:	e7f8      	b.n	8006456 <_calloc_r+0x16>
 8006464:	4621      	mov	r1, r4
 8006466:	f7fe fa16 	bl	8004896 <memset>
 800646a:	e7f4      	b.n	8006456 <_calloc_r+0x16>

0800646c <__ascii_mbtowc>:
 800646c:	b082      	sub	sp, #8
 800646e:	b901      	cbnz	r1, 8006472 <__ascii_mbtowc+0x6>
 8006470:	a901      	add	r1, sp, #4
 8006472:	b142      	cbz	r2, 8006486 <__ascii_mbtowc+0x1a>
 8006474:	b14b      	cbz	r3, 800648a <__ascii_mbtowc+0x1e>
 8006476:	7813      	ldrb	r3, [r2, #0]
 8006478:	600b      	str	r3, [r1, #0]
 800647a:	7812      	ldrb	r2, [r2, #0]
 800647c:	1e10      	subs	r0, r2, #0
 800647e:	bf18      	it	ne
 8006480:	2001      	movne	r0, #1
 8006482:	b002      	add	sp, #8
 8006484:	4770      	bx	lr
 8006486:	4610      	mov	r0, r2
 8006488:	e7fb      	b.n	8006482 <__ascii_mbtowc+0x16>
 800648a:	f06f 0001 	mvn.w	r0, #1
 800648e:	e7f8      	b.n	8006482 <__ascii_mbtowc+0x16>

08006490 <_realloc_r>:
 8006490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006494:	4680      	mov	r8, r0
 8006496:	4614      	mov	r4, r2
 8006498:	460e      	mov	r6, r1
 800649a:	b921      	cbnz	r1, 80064a6 <_realloc_r+0x16>
 800649c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	4611      	mov	r1, r2
 80064a2:	f7ff b977 	b.w	8005794 <_malloc_r>
 80064a6:	b92a      	cbnz	r2, 80064b4 <_realloc_r+0x24>
 80064a8:	f7ff f900 	bl	80056ac <_free_r>
 80064ac:	4625      	mov	r5, r4
 80064ae:	4628      	mov	r0, r5
 80064b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064b4:	f000 f841 	bl	800653a <_malloc_usable_size_r>
 80064b8:	4284      	cmp	r4, r0
 80064ba:	4607      	mov	r7, r0
 80064bc:	d802      	bhi.n	80064c4 <_realloc_r+0x34>
 80064be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064c2:	d812      	bhi.n	80064ea <_realloc_r+0x5a>
 80064c4:	4621      	mov	r1, r4
 80064c6:	4640      	mov	r0, r8
 80064c8:	f7ff f964 	bl	8005794 <_malloc_r>
 80064cc:	4605      	mov	r5, r0
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d0ed      	beq.n	80064ae <_realloc_r+0x1e>
 80064d2:	42bc      	cmp	r4, r7
 80064d4:	4622      	mov	r2, r4
 80064d6:	4631      	mov	r1, r6
 80064d8:	bf28      	it	cs
 80064da:	463a      	movcs	r2, r7
 80064dc:	f7fe fa5b 	bl	8004996 <memcpy>
 80064e0:	4631      	mov	r1, r6
 80064e2:	4640      	mov	r0, r8
 80064e4:	f7ff f8e2 	bl	80056ac <_free_r>
 80064e8:	e7e1      	b.n	80064ae <_realloc_r+0x1e>
 80064ea:	4635      	mov	r5, r6
 80064ec:	e7df      	b.n	80064ae <_realloc_r+0x1e>

080064ee <__ascii_wctomb>:
 80064ee:	b149      	cbz	r1, 8006504 <__ascii_wctomb+0x16>
 80064f0:	2aff      	cmp	r2, #255	; 0xff
 80064f2:	bf85      	ittet	hi
 80064f4:	238a      	movhi	r3, #138	; 0x8a
 80064f6:	6003      	strhi	r3, [r0, #0]
 80064f8:	700a      	strbls	r2, [r1, #0]
 80064fa:	f04f 30ff 	movhi.w	r0, #4294967295
 80064fe:	bf98      	it	ls
 8006500:	2001      	movls	r0, #1
 8006502:	4770      	bx	lr
 8006504:	4608      	mov	r0, r1
 8006506:	4770      	bx	lr

08006508 <fiprintf>:
 8006508:	b40e      	push	{r1, r2, r3}
 800650a:	b503      	push	{r0, r1, lr}
 800650c:	4601      	mov	r1, r0
 800650e:	ab03      	add	r3, sp, #12
 8006510:	4805      	ldr	r0, [pc, #20]	; (8006528 <fiprintf+0x20>)
 8006512:	f853 2b04 	ldr.w	r2, [r3], #4
 8006516:	6800      	ldr	r0, [r0, #0]
 8006518:	9301      	str	r3, [sp, #4]
 800651a:	f000 f83f 	bl	800659c <_vfiprintf_r>
 800651e:	b002      	add	sp, #8
 8006520:	f85d eb04 	ldr.w	lr, [sp], #4
 8006524:	b003      	add	sp, #12
 8006526:	4770      	bx	lr
 8006528:	20000068 	.word	0x20000068

0800652c <abort>:
 800652c:	b508      	push	{r3, lr}
 800652e:	2006      	movs	r0, #6
 8006530:	f000 fa0c 	bl	800694c <raise>
 8006534:	2001      	movs	r0, #1
 8006536:	f7fc fbfb 	bl	8002d30 <_exit>

0800653a <_malloc_usable_size_r>:
 800653a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800653e:	1f18      	subs	r0, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	bfbc      	itt	lt
 8006544:	580b      	ldrlt	r3, [r1, r0]
 8006546:	18c0      	addlt	r0, r0, r3
 8006548:	4770      	bx	lr

0800654a <__sfputc_r>:
 800654a:	6893      	ldr	r3, [r2, #8]
 800654c:	3b01      	subs	r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	b410      	push	{r4}
 8006552:	6093      	str	r3, [r2, #8]
 8006554:	da08      	bge.n	8006568 <__sfputc_r+0x1e>
 8006556:	6994      	ldr	r4, [r2, #24]
 8006558:	42a3      	cmp	r3, r4
 800655a:	db01      	blt.n	8006560 <__sfputc_r+0x16>
 800655c:	290a      	cmp	r1, #10
 800655e:	d103      	bne.n	8006568 <__sfputc_r+0x1e>
 8006560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006564:	f000 b934 	b.w	80067d0 <__swbuf_r>
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	1c58      	adds	r0, r3, #1
 800656c:	6010      	str	r0, [r2, #0]
 800656e:	7019      	strb	r1, [r3, #0]
 8006570:	4608      	mov	r0, r1
 8006572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006576:	4770      	bx	lr

08006578 <__sfputs_r>:
 8006578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800657a:	4606      	mov	r6, r0
 800657c:	460f      	mov	r7, r1
 800657e:	4614      	mov	r4, r2
 8006580:	18d5      	adds	r5, r2, r3
 8006582:	42ac      	cmp	r4, r5
 8006584:	d101      	bne.n	800658a <__sfputs_r+0x12>
 8006586:	2000      	movs	r0, #0
 8006588:	e007      	b.n	800659a <__sfputs_r+0x22>
 800658a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800658e:	463a      	mov	r2, r7
 8006590:	4630      	mov	r0, r6
 8006592:	f7ff ffda 	bl	800654a <__sfputc_r>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d1f3      	bne.n	8006582 <__sfputs_r+0xa>
 800659a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800659c <_vfiprintf_r>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	460d      	mov	r5, r1
 80065a2:	b09d      	sub	sp, #116	; 0x74
 80065a4:	4614      	mov	r4, r2
 80065a6:	4698      	mov	r8, r3
 80065a8:	4606      	mov	r6, r0
 80065aa:	b118      	cbz	r0, 80065b4 <_vfiprintf_r+0x18>
 80065ac:	6a03      	ldr	r3, [r0, #32]
 80065ae:	b90b      	cbnz	r3, 80065b4 <_vfiprintf_r+0x18>
 80065b0:	f7fe f8d8 	bl	8004764 <__sinit>
 80065b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065b6:	07d9      	lsls	r1, r3, #31
 80065b8:	d405      	bmi.n	80065c6 <_vfiprintf_r+0x2a>
 80065ba:	89ab      	ldrh	r3, [r5, #12]
 80065bc:	059a      	lsls	r2, r3, #22
 80065be:	d402      	bmi.n	80065c6 <_vfiprintf_r+0x2a>
 80065c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065c2:	f7fe f9e6 	bl	8004992 <__retarget_lock_acquire_recursive>
 80065c6:	89ab      	ldrh	r3, [r5, #12]
 80065c8:	071b      	lsls	r3, r3, #28
 80065ca:	d501      	bpl.n	80065d0 <_vfiprintf_r+0x34>
 80065cc:	692b      	ldr	r3, [r5, #16]
 80065ce:	b99b      	cbnz	r3, 80065f8 <_vfiprintf_r+0x5c>
 80065d0:	4629      	mov	r1, r5
 80065d2:	4630      	mov	r0, r6
 80065d4:	f000 f93a 	bl	800684c <__swsetup_r>
 80065d8:	b170      	cbz	r0, 80065f8 <_vfiprintf_r+0x5c>
 80065da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065dc:	07dc      	lsls	r4, r3, #31
 80065de:	d504      	bpl.n	80065ea <_vfiprintf_r+0x4e>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	b01d      	add	sp, #116	; 0x74
 80065e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ea:	89ab      	ldrh	r3, [r5, #12]
 80065ec:	0598      	lsls	r0, r3, #22
 80065ee:	d4f7      	bmi.n	80065e0 <_vfiprintf_r+0x44>
 80065f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f2:	f7fe f9cf 	bl	8004994 <__retarget_lock_release_recursive>
 80065f6:	e7f3      	b.n	80065e0 <_vfiprintf_r+0x44>
 80065f8:	2300      	movs	r3, #0
 80065fa:	9309      	str	r3, [sp, #36]	; 0x24
 80065fc:	2320      	movs	r3, #32
 80065fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006602:	f8cd 800c 	str.w	r8, [sp, #12]
 8006606:	2330      	movs	r3, #48	; 0x30
 8006608:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80067bc <_vfiprintf_r+0x220>
 800660c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006610:	f04f 0901 	mov.w	r9, #1
 8006614:	4623      	mov	r3, r4
 8006616:	469a      	mov	sl, r3
 8006618:	f813 2b01 	ldrb.w	r2, [r3], #1
 800661c:	b10a      	cbz	r2, 8006622 <_vfiprintf_r+0x86>
 800661e:	2a25      	cmp	r2, #37	; 0x25
 8006620:	d1f9      	bne.n	8006616 <_vfiprintf_r+0x7a>
 8006622:	ebba 0b04 	subs.w	fp, sl, r4
 8006626:	d00b      	beq.n	8006640 <_vfiprintf_r+0xa4>
 8006628:	465b      	mov	r3, fp
 800662a:	4622      	mov	r2, r4
 800662c:	4629      	mov	r1, r5
 800662e:	4630      	mov	r0, r6
 8006630:	f7ff ffa2 	bl	8006578 <__sfputs_r>
 8006634:	3001      	adds	r0, #1
 8006636:	f000 80a9 	beq.w	800678c <_vfiprintf_r+0x1f0>
 800663a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800663c:	445a      	add	r2, fp
 800663e:	9209      	str	r2, [sp, #36]	; 0x24
 8006640:	f89a 3000 	ldrb.w	r3, [sl]
 8006644:	2b00      	cmp	r3, #0
 8006646:	f000 80a1 	beq.w	800678c <_vfiprintf_r+0x1f0>
 800664a:	2300      	movs	r3, #0
 800664c:	f04f 32ff 	mov.w	r2, #4294967295
 8006650:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006654:	f10a 0a01 	add.w	sl, sl, #1
 8006658:	9304      	str	r3, [sp, #16]
 800665a:	9307      	str	r3, [sp, #28]
 800665c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006660:	931a      	str	r3, [sp, #104]	; 0x68
 8006662:	4654      	mov	r4, sl
 8006664:	2205      	movs	r2, #5
 8006666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666a:	4854      	ldr	r0, [pc, #336]	; (80067bc <_vfiprintf_r+0x220>)
 800666c:	f7f9 fdb8 	bl	80001e0 <memchr>
 8006670:	9a04      	ldr	r2, [sp, #16]
 8006672:	b9d8      	cbnz	r0, 80066ac <_vfiprintf_r+0x110>
 8006674:	06d1      	lsls	r1, r2, #27
 8006676:	bf44      	itt	mi
 8006678:	2320      	movmi	r3, #32
 800667a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800667e:	0713      	lsls	r3, r2, #28
 8006680:	bf44      	itt	mi
 8006682:	232b      	movmi	r3, #43	; 0x2b
 8006684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006688:	f89a 3000 	ldrb.w	r3, [sl]
 800668c:	2b2a      	cmp	r3, #42	; 0x2a
 800668e:	d015      	beq.n	80066bc <_vfiprintf_r+0x120>
 8006690:	9a07      	ldr	r2, [sp, #28]
 8006692:	4654      	mov	r4, sl
 8006694:	2000      	movs	r0, #0
 8006696:	f04f 0c0a 	mov.w	ip, #10
 800669a:	4621      	mov	r1, r4
 800669c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066a0:	3b30      	subs	r3, #48	; 0x30
 80066a2:	2b09      	cmp	r3, #9
 80066a4:	d94d      	bls.n	8006742 <_vfiprintf_r+0x1a6>
 80066a6:	b1b0      	cbz	r0, 80066d6 <_vfiprintf_r+0x13a>
 80066a8:	9207      	str	r2, [sp, #28]
 80066aa:	e014      	b.n	80066d6 <_vfiprintf_r+0x13a>
 80066ac:	eba0 0308 	sub.w	r3, r0, r8
 80066b0:	fa09 f303 	lsl.w	r3, r9, r3
 80066b4:	4313      	orrs	r3, r2
 80066b6:	9304      	str	r3, [sp, #16]
 80066b8:	46a2      	mov	sl, r4
 80066ba:	e7d2      	b.n	8006662 <_vfiprintf_r+0xc6>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	1d19      	adds	r1, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	9103      	str	r1, [sp, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	bfbb      	ittet	lt
 80066c8:	425b      	neglt	r3, r3
 80066ca:	f042 0202 	orrlt.w	r2, r2, #2
 80066ce:	9307      	strge	r3, [sp, #28]
 80066d0:	9307      	strlt	r3, [sp, #28]
 80066d2:	bfb8      	it	lt
 80066d4:	9204      	strlt	r2, [sp, #16]
 80066d6:	7823      	ldrb	r3, [r4, #0]
 80066d8:	2b2e      	cmp	r3, #46	; 0x2e
 80066da:	d10c      	bne.n	80066f6 <_vfiprintf_r+0x15a>
 80066dc:	7863      	ldrb	r3, [r4, #1]
 80066de:	2b2a      	cmp	r3, #42	; 0x2a
 80066e0:	d134      	bne.n	800674c <_vfiprintf_r+0x1b0>
 80066e2:	9b03      	ldr	r3, [sp, #12]
 80066e4:	1d1a      	adds	r2, r3, #4
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	9203      	str	r2, [sp, #12]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bfb8      	it	lt
 80066ee:	f04f 33ff 	movlt.w	r3, #4294967295
 80066f2:	3402      	adds	r4, #2
 80066f4:	9305      	str	r3, [sp, #20]
 80066f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80067cc <_vfiprintf_r+0x230>
 80066fa:	7821      	ldrb	r1, [r4, #0]
 80066fc:	2203      	movs	r2, #3
 80066fe:	4650      	mov	r0, sl
 8006700:	f7f9 fd6e 	bl	80001e0 <memchr>
 8006704:	b138      	cbz	r0, 8006716 <_vfiprintf_r+0x17a>
 8006706:	9b04      	ldr	r3, [sp, #16]
 8006708:	eba0 000a 	sub.w	r0, r0, sl
 800670c:	2240      	movs	r2, #64	; 0x40
 800670e:	4082      	lsls	r2, r0
 8006710:	4313      	orrs	r3, r2
 8006712:	3401      	adds	r4, #1
 8006714:	9304      	str	r3, [sp, #16]
 8006716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671a:	4829      	ldr	r0, [pc, #164]	; (80067c0 <_vfiprintf_r+0x224>)
 800671c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006720:	2206      	movs	r2, #6
 8006722:	f7f9 fd5d 	bl	80001e0 <memchr>
 8006726:	2800      	cmp	r0, #0
 8006728:	d03f      	beq.n	80067aa <_vfiprintf_r+0x20e>
 800672a:	4b26      	ldr	r3, [pc, #152]	; (80067c4 <_vfiprintf_r+0x228>)
 800672c:	bb1b      	cbnz	r3, 8006776 <_vfiprintf_r+0x1da>
 800672e:	9b03      	ldr	r3, [sp, #12]
 8006730:	3307      	adds	r3, #7
 8006732:	f023 0307 	bic.w	r3, r3, #7
 8006736:	3308      	adds	r3, #8
 8006738:	9303      	str	r3, [sp, #12]
 800673a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800673c:	443b      	add	r3, r7
 800673e:	9309      	str	r3, [sp, #36]	; 0x24
 8006740:	e768      	b.n	8006614 <_vfiprintf_r+0x78>
 8006742:	fb0c 3202 	mla	r2, ip, r2, r3
 8006746:	460c      	mov	r4, r1
 8006748:	2001      	movs	r0, #1
 800674a:	e7a6      	b.n	800669a <_vfiprintf_r+0xfe>
 800674c:	2300      	movs	r3, #0
 800674e:	3401      	adds	r4, #1
 8006750:	9305      	str	r3, [sp, #20]
 8006752:	4619      	mov	r1, r3
 8006754:	f04f 0c0a 	mov.w	ip, #10
 8006758:	4620      	mov	r0, r4
 800675a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800675e:	3a30      	subs	r2, #48	; 0x30
 8006760:	2a09      	cmp	r2, #9
 8006762:	d903      	bls.n	800676c <_vfiprintf_r+0x1d0>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0c6      	beq.n	80066f6 <_vfiprintf_r+0x15a>
 8006768:	9105      	str	r1, [sp, #20]
 800676a:	e7c4      	b.n	80066f6 <_vfiprintf_r+0x15a>
 800676c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006770:	4604      	mov	r4, r0
 8006772:	2301      	movs	r3, #1
 8006774:	e7f0      	b.n	8006758 <_vfiprintf_r+0x1bc>
 8006776:	ab03      	add	r3, sp, #12
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	462a      	mov	r2, r5
 800677c:	4b12      	ldr	r3, [pc, #72]	; (80067c8 <_vfiprintf_r+0x22c>)
 800677e:	a904      	add	r1, sp, #16
 8006780:	4630      	mov	r0, r6
 8006782:	f7fd fb9d 	bl	8003ec0 <_printf_float>
 8006786:	4607      	mov	r7, r0
 8006788:	1c78      	adds	r0, r7, #1
 800678a:	d1d6      	bne.n	800673a <_vfiprintf_r+0x19e>
 800678c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800678e:	07d9      	lsls	r1, r3, #31
 8006790:	d405      	bmi.n	800679e <_vfiprintf_r+0x202>
 8006792:	89ab      	ldrh	r3, [r5, #12]
 8006794:	059a      	lsls	r2, r3, #22
 8006796:	d402      	bmi.n	800679e <_vfiprintf_r+0x202>
 8006798:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679a:	f7fe f8fb 	bl	8004994 <__retarget_lock_release_recursive>
 800679e:	89ab      	ldrh	r3, [r5, #12]
 80067a0:	065b      	lsls	r3, r3, #25
 80067a2:	f53f af1d 	bmi.w	80065e0 <_vfiprintf_r+0x44>
 80067a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067a8:	e71c      	b.n	80065e4 <_vfiprintf_r+0x48>
 80067aa:	ab03      	add	r3, sp, #12
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	462a      	mov	r2, r5
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <_vfiprintf_r+0x22c>)
 80067b2:	a904      	add	r1, sp, #16
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7fd fe27 	bl	8004408 <_printf_i>
 80067ba:	e7e4      	b.n	8006786 <_vfiprintf_r+0x1ea>
 80067bc:	08019f2c 	.word	0x08019f2c
 80067c0:	08019f36 	.word	0x08019f36
 80067c4:	08003ec1 	.word	0x08003ec1
 80067c8:	08006579 	.word	0x08006579
 80067cc:	08019f32 	.word	0x08019f32

080067d0 <__swbuf_r>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	460e      	mov	r6, r1
 80067d4:	4614      	mov	r4, r2
 80067d6:	4605      	mov	r5, r0
 80067d8:	b118      	cbz	r0, 80067e2 <__swbuf_r+0x12>
 80067da:	6a03      	ldr	r3, [r0, #32]
 80067dc:	b90b      	cbnz	r3, 80067e2 <__swbuf_r+0x12>
 80067de:	f7fd ffc1 	bl	8004764 <__sinit>
 80067e2:	69a3      	ldr	r3, [r4, #24]
 80067e4:	60a3      	str	r3, [r4, #8]
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	071a      	lsls	r2, r3, #28
 80067ea:	d525      	bpl.n	8006838 <__swbuf_r+0x68>
 80067ec:	6923      	ldr	r3, [r4, #16]
 80067ee:	b31b      	cbz	r3, 8006838 <__swbuf_r+0x68>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	6922      	ldr	r2, [r4, #16]
 80067f4:	1a98      	subs	r0, r3, r2
 80067f6:	6963      	ldr	r3, [r4, #20]
 80067f8:	b2f6      	uxtb	r6, r6
 80067fa:	4283      	cmp	r3, r0
 80067fc:	4637      	mov	r7, r6
 80067fe:	dc04      	bgt.n	800680a <__swbuf_r+0x3a>
 8006800:	4621      	mov	r1, r4
 8006802:	4628      	mov	r0, r5
 8006804:	f7ff fdac 	bl	8006360 <_fflush_r>
 8006808:	b9e0      	cbnz	r0, 8006844 <__swbuf_r+0x74>
 800680a:	68a3      	ldr	r3, [r4, #8]
 800680c:	3b01      	subs	r3, #1
 800680e:	60a3      	str	r3, [r4, #8]
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	6022      	str	r2, [r4, #0]
 8006816:	701e      	strb	r6, [r3, #0]
 8006818:	6962      	ldr	r2, [r4, #20]
 800681a:	1c43      	adds	r3, r0, #1
 800681c:	429a      	cmp	r2, r3
 800681e:	d004      	beq.n	800682a <__swbuf_r+0x5a>
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	07db      	lsls	r3, r3, #31
 8006824:	d506      	bpl.n	8006834 <__swbuf_r+0x64>
 8006826:	2e0a      	cmp	r6, #10
 8006828:	d104      	bne.n	8006834 <__swbuf_r+0x64>
 800682a:	4621      	mov	r1, r4
 800682c:	4628      	mov	r0, r5
 800682e:	f7ff fd97 	bl	8006360 <_fflush_r>
 8006832:	b938      	cbnz	r0, 8006844 <__swbuf_r+0x74>
 8006834:	4638      	mov	r0, r7
 8006836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006838:	4621      	mov	r1, r4
 800683a:	4628      	mov	r0, r5
 800683c:	f000 f806 	bl	800684c <__swsetup_r>
 8006840:	2800      	cmp	r0, #0
 8006842:	d0d5      	beq.n	80067f0 <__swbuf_r+0x20>
 8006844:	f04f 37ff 	mov.w	r7, #4294967295
 8006848:	e7f4      	b.n	8006834 <__swbuf_r+0x64>
	...

0800684c <__swsetup_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4b2a      	ldr	r3, [pc, #168]	; (80068f8 <__swsetup_r+0xac>)
 8006850:	4605      	mov	r5, r0
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	460c      	mov	r4, r1
 8006856:	b118      	cbz	r0, 8006860 <__swsetup_r+0x14>
 8006858:	6a03      	ldr	r3, [r0, #32]
 800685a:	b90b      	cbnz	r3, 8006860 <__swsetup_r+0x14>
 800685c:	f7fd ff82 	bl	8004764 <__sinit>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006866:	0718      	lsls	r0, r3, #28
 8006868:	d422      	bmi.n	80068b0 <__swsetup_r+0x64>
 800686a:	06d9      	lsls	r1, r3, #27
 800686c:	d407      	bmi.n	800687e <__swsetup_r+0x32>
 800686e:	2309      	movs	r3, #9
 8006870:	602b      	str	r3, [r5, #0]
 8006872:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e034      	b.n	80068e8 <__swsetup_r+0x9c>
 800687e:	0758      	lsls	r0, r3, #29
 8006880:	d512      	bpl.n	80068a8 <__swsetup_r+0x5c>
 8006882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006884:	b141      	cbz	r1, 8006898 <__swsetup_r+0x4c>
 8006886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800688a:	4299      	cmp	r1, r3
 800688c:	d002      	beq.n	8006894 <__swsetup_r+0x48>
 800688e:	4628      	mov	r0, r5
 8006890:	f7fe ff0c 	bl	80056ac <_free_r>
 8006894:	2300      	movs	r3, #0
 8006896:	6363      	str	r3, [r4, #52]	; 0x34
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	2300      	movs	r3, #0
 80068a2:	6063      	str	r3, [r4, #4]
 80068a4:	6923      	ldr	r3, [r4, #16]
 80068a6:	6023      	str	r3, [r4, #0]
 80068a8:	89a3      	ldrh	r3, [r4, #12]
 80068aa:	f043 0308 	orr.w	r3, r3, #8
 80068ae:	81a3      	strh	r3, [r4, #12]
 80068b0:	6923      	ldr	r3, [r4, #16]
 80068b2:	b94b      	cbnz	r3, 80068c8 <__swsetup_r+0x7c>
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068be:	d003      	beq.n	80068c8 <__swsetup_r+0x7c>
 80068c0:	4621      	mov	r1, r4
 80068c2:	4628      	mov	r0, r5
 80068c4:	f000 f884 	bl	80069d0 <__smakebuf_r>
 80068c8:	89a0      	ldrh	r0, [r4, #12]
 80068ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068ce:	f010 0301 	ands.w	r3, r0, #1
 80068d2:	d00a      	beq.n	80068ea <__swsetup_r+0x9e>
 80068d4:	2300      	movs	r3, #0
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	6963      	ldr	r3, [r4, #20]
 80068da:	425b      	negs	r3, r3
 80068dc:	61a3      	str	r3, [r4, #24]
 80068de:	6923      	ldr	r3, [r4, #16]
 80068e0:	b943      	cbnz	r3, 80068f4 <__swsetup_r+0xa8>
 80068e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068e6:	d1c4      	bne.n	8006872 <__swsetup_r+0x26>
 80068e8:	bd38      	pop	{r3, r4, r5, pc}
 80068ea:	0781      	lsls	r1, r0, #30
 80068ec:	bf58      	it	pl
 80068ee:	6963      	ldrpl	r3, [r4, #20]
 80068f0:	60a3      	str	r3, [r4, #8]
 80068f2:	e7f4      	b.n	80068de <__swsetup_r+0x92>
 80068f4:	2000      	movs	r0, #0
 80068f6:	e7f7      	b.n	80068e8 <__swsetup_r+0x9c>
 80068f8:	20000068 	.word	0x20000068

080068fc <_raise_r>:
 80068fc:	291f      	cmp	r1, #31
 80068fe:	b538      	push	{r3, r4, r5, lr}
 8006900:	4604      	mov	r4, r0
 8006902:	460d      	mov	r5, r1
 8006904:	d904      	bls.n	8006910 <_raise_r+0x14>
 8006906:	2316      	movs	r3, #22
 8006908:	6003      	str	r3, [r0, #0]
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006912:	b112      	cbz	r2, 800691a <_raise_r+0x1e>
 8006914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006918:	b94b      	cbnz	r3, 800692e <_raise_r+0x32>
 800691a:	4620      	mov	r0, r4
 800691c:	f000 f830 	bl	8006980 <_getpid_r>
 8006920:	462a      	mov	r2, r5
 8006922:	4601      	mov	r1, r0
 8006924:	4620      	mov	r0, r4
 8006926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800692a:	f000 b817 	b.w	800695c <_kill_r>
 800692e:	2b01      	cmp	r3, #1
 8006930:	d00a      	beq.n	8006948 <_raise_r+0x4c>
 8006932:	1c59      	adds	r1, r3, #1
 8006934:	d103      	bne.n	800693e <_raise_r+0x42>
 8006936:	2316      	movs	r3, #22
 8006938:	6003      	str	r3, [r0, #0]
 800693a:	2001      	movs	r0, #1
 800693c:	e7e7      	b.n	800690e <_raise_r+0x12>
 800693e:	2400      	movs	r4, #0
 8006940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006944:	4628      	mov	r0, r5
 8006946:	4798      	blx	r3
 8006948:	2000      	movs	r0, #0
 800694a:	e7e0      	b.n	800690e <_raise_r+0x12>

0800694c <raise>:
 800694c:	4b02      	ldr	r3, [pc, #8]	; (8006958 <raise+0xc>)
 800694e:	4601      	mov	r1, r0
 8006950:	6818      	ldr	r0, [r3, #0]
 8006952:	f7ff bfd3 	b.w	80068fc <_raise_r>
 8006956:	bf00      	nop
 8006958:	20000068 	.word	0x20000068

0800695c <_kill_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d07      	ldr	r5, [pc, #28]	; (800697c <_kill_r+0x20>)
 8006960:	2300      	movs	r3, #0
 8006962:	4604      	mov	r4, r0
 8006964:	4608      	mov	r0, r1
 8006966:	4611      	mov	r1, r2
 8006968:	602b      	str	r3, [r5, #0]
 800696a:	f7fc f9d1 	bl	8002d10 <_kill>
 800696e:	1c43      	adds	r3, r0, #1
 8006970:	d102      	bne.n	8006978 <_kill_r+0x1c>
 8006972:	682b      	ldr	r3, [r5, #0]
 8006974:	b103      	cbz	r3, 8006978 <_kill_r+0x1c>
 8006976:	6023      	str	r3, [r4, #0]
 8006978:	bd38      	pop	{r3, r4, r5, pc}
 800697a:	bf00      	nop
 800697c:	20000344 	.word	0x20000344

08006980 <_getpid_r>:
 8006980:	f7fc b9be 	b.w	8002d00 <_getpid>

08006984 <__swhatbuf_r>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	460c      	mov	r4, r1
 8006988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800698c:	2900      	cmp	r1, #0
 800698e:	b096      	sub	sp, #88	; 0x58
 8006990:	4615      	mov	r5, r2
 8006992:	461e      	mov	r6, r3
 8006994:	da0d      	bge.n	80069b2 <__swhatbuf_r+0x2e>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f013 0f80 	tst.w	r3, #128	; 0x80
 800699c:	f04f 0100 	mov.w	r1, #0
 80069a0:	bf0c      	ite	eq
 80069a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80069a6:	2340      	movne	r3, #64	; 0x40
 80069a8:	2000      	movs	r0, #0
 80069aa:	6031      	str	r1, [r6, #0]
 80069ac:	602b      	str	r3, [r5, #0]
 80069ae:	b016      	add	sp, #88	; 0x58
 80069b0:	bd70      	pop	{r4, r5, r6, pc}
 80069b2:	466a      	mov	r2, sp
 80069b4:	f000 f848 	bl	8006a48 <_fstat_r>
 80069b8:	2800      	cmp	r0, #0
 80069ba:	dbec      	blt.n	8006996 <__swhatbuf_r+0x12>
 80069bc:	9901      	ldr	r1, [sp, #4]
 80069be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80069c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80069c6:	4259      	negs	r1, r3
 80069c8:	4159      	adcs	r1, r3
 80069ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069ce:	e7eb      	b.n	80069a8 <__swhatbuf_r+0x24>

080069d0 <__smakebuf_r>:
 80069d0:	898b      	ldrh	r3, [r1, #12]
 80069d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069d4:	079d      	lsls	r5, r3, #30
 80069d6:	4606      	mov	r6, r0
 80069d8:	460c      	mov	r4, r1
 80069da:	d507      	bpl.n	80069ec <__smakebuf_r+0x1c>
 80069dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	6123      	str	r3, [r4, #16]
 80069e4:	2301      	movs	r3, #1
 80069e6:	6163      	str	r3, [r4, #20]
 80069e8:	b002      	add	sp, #8
 80069ea:	bd70      	pop	{r4, r5, r6, pc}
 80069ec:	ab01      	add	r3, sp, #4
 80069ee:	466a      	mov	r2, sp
 80069f0:	f7ff ffc8 	bl	8006984 <__swhatbuf_r>
 80069f4:	9900      	ldr	r1, [sp, #0]
 80069f6:	4605      	mov	r5, r0
 80069f8:	4630      	mov	r0, r6
 80069fa:	f7fe fecb 	bl	8005794 <_malloc_r>
 80069fe:	b948      	cbnz	r0, 8006a14 <__smakebuf_r+0x44>
 8006a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d4ef      	bmi.n	80069e8 <__smakebuf_r+0x18>
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	f043 0302 	orr.w	r3, r3, #2
 8006a10:	81a3      	strh	r3, [r4, #12]
 8006a12:	e7e3      	b.n	80069dc <__smakebuf_r+0xc>
 8006a14:	89a3      	ldrh	r3, [r4, #12]
 8006a16:	6020      	str	r0, [r4, #0]
 8006a18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a1c:	81a3      	strh	r3, [r4, #12]
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	6163      	str	r3, [r4, #20]
 8006a22:	9b01      	ldr	r3, [sp, #4]
 8006a24:	6120      	str	r0, [r4, #16]
 8006a26:	b15b      	cbz	r3, 8006a40 <__smakebuf_r+0x70>
 8006a28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a2c:	4630      	mov	r0, r6
 8006a2e:	f000 f81d 	bl	8006a6c <_isatty_r>
 8006a32:	b128      	cbz	r0, 8006a40 <__smakebuf_r+0x70>
 8006a34:	89a3      	ldrh	r3, [r4, #12]
 8006a36:	f023 0303 	bic.w	r3, r3, #3
 8006a3a:	f043 0301 	orr.w	r3, r3, #1
 8006a3e:	81a3      	strh	r3, [r4, #12]
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	431d      	orrs	r5, r3
 8006a44:	81a5      	strh	r5, [r4, #12]
 8006a46:	e7cf      	b.n	80069e8 <__smakebuf_r+0x18>

08006a48 <_fstat_r>:
 8006a48:	b538      	push	{r3, r4, r5, lr}
 8006a4a:	4d07      	ldr	r5, [pc, #28]	; (8006a68 <_fstat_r+0x20>)
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4604      	mov	r4, r0
 8006a50:	4608      	mov	r0, r1
 8006a52:	4611      	mov	r1, r2
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	f7fc f9ba 	bl	8002dce <_fstat>
 8006a5a:	1c43      	adds	r3, r0, #1
 8006a5c:	d102      	bne.n	8006a64 <_fstat_r+0x1c>
 8006a5e:	682b      	ldr	r3, [r5, #0]
 8006a60:	b103      	cbz	r3, 8006a64 <_fstat_r+0x1c>
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	bd38      	pop	{r3, r4, r5, pc}
 8006a66:	bf00      	nop
 8006a68:	20000344 	.word	0x20000344

08006a6c <_isatty_r>:
 8006a6c:	b538      	push	{r3, r4, r5, lr}
 8006a6e:	4d06      	ldr	r5, [pc, #24]	; (8006a88 <_isatty_r+0x1c>)
 8006a70:	2300      	movs	r3, #0
 8006a72:	4604      	mov	r4, r0
 8006a74:	4608      	mov	r0, r1
 8006a76:	602b      	str	r3, [r5, #0]
 8006a78:	f7fc f9b9 	bl	8002dee <_isatty>
 8006a7c:	1c43      	adds	r3, r0, #1
 8006a7e:	d102      	bne.n	8006a86 <_isatty_r+0x1a>
 8006a80:	682b      	ldr	r3, [r5, #0]
 8006a82:	b103      	cbz	r3, 8006a86 <_isatty_r+0x1a>
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	bd38      	pop	{r3, r4, r5, pc}
 8006a88:	20000344 	.word	0x20000344
 8006a8c:	00000000 	.word	0x00000000

08006a90 <cos>:
 8006a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a92:	ec53 2b10 	vmov	r2, r3, d0
 8006a96:	4826      	ldr	r0, [pc, #152]	; (8006b30 <cos+0xa0>)
 8006a98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006a9c:	4281      	cmp	r1, r0
 8006a9e:	dc06      	bgt.n	8006aae <cos+0x1e>
 8006aa0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006b28 <cos+0x98>
 8006aa4:	b005      	add	sp, #20
 8006aa6:	f85d eb04 	ldr.w	lr, [sp], #4
 8006aaa:	f000 b89d 	b.w	8006be8 <__kernel_cos>
 8006aae:	4821      	ldr	r0, [pc, #132]	; (8006b34 <cos+0xa4>)
 8006ab0:	4281      	cmp	r1, r0
 8006ab2:	dd09      	ble.n	8006ac8 <cos+0x38>
 8006ab4:	ee10 0a10 	vmov	r0, s0
 8006ab8:	4619      	mov	r1, r3
 8006aba:	f7f9 fbed 	bl	8000298 <__aeabi_dsub>
 8006abe:	ec41 0b10 	vmov	d0, r0, r1
 8006ac2:	b005      	add	sp, #20
 8006ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ac8:	4668      	mov	r0, sp
 8006aca:	f000 fa15 	bl	8006ef8 <__ieee754_rem_pio2>
 8006ace:	f000 0003 	and.w	r0, r0, #3
 8006ad2:	2801      	cmp	r0, #1
 8006ad4:	d00b      	beq.n	8006aee <cos+0x5e>
 8006ad6:	2802      	cmp	r0, #2
 8006ad8:	d016      	beq.n	8006b08 <cos+0x78>
 8006ada:	b9e0      	cbnz	r0, 8006b16 <cos+0x86>
 8006adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ae0:	ed9d 0b00 	vldr	d0, [sp]
 8006ae4:	f000 f880 	bl	8006be8 <__kernel_cos>
 8006ae8:	ec51 0b10 	vmov	r0, r1, d0
 8006aec:	e7e7      	b.n	8006abe <cos+0x2e>
 8006aee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006af2:	ed9d 0b00 	vldr	d0, [sp]
 8006af6:	f000 f93f 	bl	8006d78 <__kernel_sin>
 8006afa:	ec53 2b10 	vmov	r2, r3, d0
 8006afe:	ee10 0a10 	vmov	r0, s0
 8006b02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006b06:	e7da      	b.n	8006abe <cos+0x2e>
 8006b08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b0c:	ed9d 0b00 	vldr	d0, [sp]
 8006b10:	f000 f86a 	bl	8006be8 <__kernel_cos>
 8006b14:	e7f1      	b.n	8006afa <cos+0x6a>
 8006b16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b1a:	ed9d 0b00 	vldr	d0, [sp]
 8006b1e:	2001      	movs	r0, #1
 8006b20:	f000 f92a 	bl	8006d78 <__kernel_sin>
 8006b24:	e7e0      	b.n	8006ae8 <cos+0x58>
 8006b26:	bf00      	nop
	...
 8006b30:	3fe921fb 	.word	0x3fe921fb
 8006b34:	7fefffff 	.word	0x7fefffff

08006b38 <sin>:
 8006b38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b3a:	ec53 2b10 	vmov	r2, r3, d0
 8006b3e:	4828      	ldr	r0, [pc, #160]	; (8006be0 <sin+0xa8>)
 8006b40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b44:	4281      	cmp	r1, r0
 8006b46:	dc07      	bgt.n	8006b58 <sin+0x20>
 8006b48:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006bd8 <sin+0xa0>
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	b005      	add	sp, #20
 8006b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b54:	f000 b910 	b.w	8006d78 <__kernel_sin>
 8006b58:	4822      	ldr	r0, [pc, #136]	; (8006be4 <sin+0xac>)
 8006b5a:	4281      	cmp	r1, r0
 8006b5c:	dd09      	ble.n	8006b72 <sin+0x3a>
 8006b5e:	ee10 0a10 	vmov	r0, s0
 8006b62:	4619      	mov	r1, r3
 8006b64:	f7f9 fb98 	bl	8000298 <__aeabi_dsub>
 8006b68:	ec41 0b10 	vmov	d0, r0, r1
 8006b6c:	b005      	add	sp, #20
 8006b6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b72:	4668      	mov	r0, sp
 8006b74:	f000 f9c0 	bl	8006ef8 <__ieee754_rem_pio2>
 8006b78:	f000 0003 	and.w	r0, r0, #3
 8006b7c:	2801      	cmp	r0, #1
 8006b7e:	d00c      	beq.n	8006b9a <sin+0x62>
 8006b80:	2802      	cmp	r0, #2
 8006b82:	d011      	beq.n	8006ba8 <sin+0x70>
 8006b84:	b9f0      	cbnz	r0, 8006bc4 <sin+0x8c>
 8006b86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b8a:	ed9d 0b00 	vldr	d0, [sp]
 8006b8e:	2001      	movs	r0, #1
 8006b90:	f000 f8f2 	bl	8006d78 <__kernel_sin>
 8006b94:	ec51 0b10 	vmov	r0, r1, d0
 8006b98:	e7e6      	b.n	8006b68 <sin+0x30>
 8006b9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006b9e:	ed9d 0b00 	vldr	d0, [sp]
 8006ba2:	f000 f821 	bl	8006be8 <__kernel_cos>
 8006ba6:	e7f5      	b.n	8006b94 <sin+0x5c>
 8006ba8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bac:	ed9d 0b00 	vldr	d0, [sp]
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	f000 f8e1 	bl	8006d78 <__kernel_sin>
 8006bb6:	ec53 2b10 	vmov	r2, r3, d0
 8006bba:	ee10 0a10 	vmov	r0, s0
 8006bbe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006bc2:	e7d1      	b.n	8006b68 <sin+0x30>
 8006bc4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006bc8:	ed9d 0b00 	vldr	d0, [sp]
 8006bcc:	f000 f80c 	bl	8006be8 <__kernel_cos>
 8006bd0:	e7f1      	b.n	8006bb6 <sin+0x7e>
 8006bd2:	bf00      	nop
 8006bd4:	f3af 8000 	nop.w
	...
 8006be0:	3fe921fb 	.word	0x3fe921fb
 8006be4:	7fefffff 	.word	0x7fefffff

08006be8 <__kernel_cos>:
 8006be8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	ec57 6b10 	vmov	r6, r7, d0
 8006bf0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006bf4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006bf8:	ed8d 1b00 	vstr	d1, [sp]
 8006bfc:	da07      	bge.n	8006c0e <__kernel_cos+0x26>
 8006bfe:	ee10 0a10 	vmov	r0, s0
 8006c02:	4639      	mov	r1, r7
 8006c04:	f7f9 ffb0 	bl	8000b68 <__aeabi_d2iz>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	f000 8088 	beq.w	8006d1e <__kernel_cos+0x136>
 8006c0e:	4632      	mov	r2, r6
 8006c10:	463b      	mov	r3, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	4639      	mov	r1, r7
 8006c16:	f7f9 fcf7 	bl	8000608 <__aeabi_dmul>
 8006c1a:	4b51      	ldr	r3, [pc, #324]	; (8006d60 <__kernel_cos+0x178>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	4604      	mov	r4, r0
 8006c20:	460d      	mov	r5, r1
 8006c22:	f7f9 fcf1 	bl	8000608 <__aeabi_dmul>
 8006c26:	a340      	add	r3, pc, #256	; (adr r3, 8006d28 <__kernel_cos+0x140>)
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	468b      	mov	fp, r1
 8006c30:	4620      	mov	r0, r4
 8006c32:	4629      	mov	r1, r5
 8006c34:	f7f9 fce8 	bl	8000608 <__aeabi_dmul>
 8006c38:	a33d      	add	r3, pc, #244	; (adr r3, 8006d30 <__kernel_cos+0x148>)
 8006c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3e:	f7f9 fb2d 	bl	800029c <__adddf3>
 8006c42:	4622      	mov	r2, r4
 8006c44:	462b      	mov	r3, r5
 8006c46:	f7f9 fcdf 	bl	8000608 <__aeabi_dmul>
 8006c4a:	a33b      	add	r3, pc, #236	; (adr r3, 8006d38 <__kernel_cos+0x150>)
 8006c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c50:	f7f9 fb22 	bl	8000298 <__aeabi_dsub>
 8006c54:	4622      	mov	r2, r4
 8006c56:	462b      	mov	r3, r5
 8006c58:	f7f9 fcd6 	bl	8000608 <__aeabi_dmul>
 8006c5c:	a338      	add	r3, pc, #224	; (adr r3, 8006d40 <__kernel_cos+0x158>)
 8006c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c62:	f7f9 fb1b 	bl	800029c <__adddf3>
 8006c66:	4622      	mov	r2, r4
 8006c68:	462b      	mov	r3, r5
 8006c6a:	f7f9 fccd 	bl	8000608 <__aeabi_dmul>
 8006c6e:	a336      	add	r3, pc, #216	; (adr r3, 8006d48 <__kernel_cos+0x160>)
 8006c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c74:	f7f9 fb10 	bl	8000298 <__aeabi_dsub>
 8006c78:	4622      	mov	r2, r4
 8006c7a:	462b      	mov	r3, r5
 8006c7c:	f7f9 fcc4 	bl	8000608 <__aeabi_dmul>
 8006c80:	a333      	add	r3, pc, #204	; (adr r3, 8006d50 <__kernel_cos+0x168>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 fb09 	bl	800029c <__adddf3>
 8006c8a:	4622      	mov	r2, r4
 8006c8c:	462b      	mov	r3, r5
 8006c8e:	f7f9 fcbb 	bl	8000608 <__aeabi_dmul>
 8006c92:	4622      	mov	r2, r4
 8006c94:	462b      	mov	r3, r5
 8006c96:	f7f9 fcb7 	bl	8000608 <__aeabi_dmul>
 8006c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	460d      	mov	r5, r1
 8006ca2:	4630      	mov	r0, r6
 8006ca4:	4639      	mov	r1, r7
 8006ca6:	f7f9 fcaf 	bl	8000608 <__aeabi_dmul>
 8006caa:	460b      	mov	r3, r1
 8006cac:	4602      	mov	r2, r0
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	f7f9 faf1 	bl	8000298 <__aeabi_dsub>
 8006cb6:	4b2b      	ldr	r3, [pc, #172]	; (8006d64 <__kernel_cos+0x17c>)
 8006cb8:	4598      	cmp	r8, r3
 8006cba:	4606      	mov	r6, r0
 8006cbc:	460f      	mov	r7, r1
 8006cbe:	dc10      	bgt.n	8006ce2 <__kernel_cos+0xfa>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4650      	mov	r0, sl
 8006cc6:	4659      	mov	r1, fp
 8006cc8:	f7f9 fae6 	bl	8000298 <__aeabi_dsub>
 8006ccc:	460b      	mov	r3, r1
 8006cce:	4926      	ldr	r1, [pc, #152]	; (8006d68 <__kernel_cos+0x180>)
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	f7f9 fae0 	bl	8000298 <__aeabi_dsub>
 8006cd8:	ec41 0b10 	vmov	d0, r0, r1
 8006cdc:	b003      	add	sp, #12
 8006cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce2:	4b22      	ldr	r3, [pc, #136]	; (8006d6c <__kernel_cos+0x184>)
 8006ce4:	4920      	ldr	r1, [pc, #128]	; (8006d68 <__kernel_cos+0x180>)
 8006ce6:	4598      	cmp	r8, r3
 8006ce8:	bfcc      	ite	gt
 8006cea:	4d21      	ldrgt	r5, [pc, #132]	; (8006d70 <__kernel_cos+0x188>)
 8006cec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8006cf0:	2400      	movs	r4, #0
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	f7f9 face 	bl	8000298 <__aeabi_dsub>
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4680      	mov	r8, r0
 8006d00:	4689      	mov	r9, r1
 8006d02:	462b      	mov	r3, r5
 8006d04:	4650      	mov	r0, sl
 8006d06:	4659      	mov	r1, fp
 8006d08:	f7f9 fac6 	bl	8000298 <__aeabi_dsub>
 8006d0c:	4632      	mov	r2, r6
 8006d0e:	463b      	mov	r3, r7
 8006d10:	f7f9 fac2 	bl	8000298 <__aeabi_dsub>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4640      	mov	r0, r8
 8006d1a:	4649      	mov	r1, r9
 8006d1c:	e7da      	b.n	8006cd4 <__kernel_cos+0xec>
 8006d1e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8006d58 <__kernel_cos+0x170>
 8006d22:	e7db      	b.n	8006cdc <__kernel_cos+0xf4>
 8006d24:	f3af 8000 	nop.w
 8006d28:	be8838d4 	.word	0xbe8838d4
 8006d2c:	bda8fae9 	.word	0xbda8fae9
 8006d30:	bdb4b1c4 	.word	0xbdb4b1c4
 8006d34:	3e21ee9e 	.word	0x3e21ee9e
 8006d38:	809c52ad 	.word	0x809c52ad
 8006d3c:	3e927e4f 	.word	0x3e927e4f
 8006d40:	19cb1590 	.word	0x19cb1590
 8006d44:	3efa01a0 	.word	0x3efa01a0
 8006d48:	16c15177 	.word	0x16c15177
 8006d4c:	3f56c16c 	.word	0x3f56c16c
 8006d50:	5555554c 	.word	0x5555554c
 8006d54:	3fa55555 	.word	0x3fa55555
 8006d58:	00000000 	.word	0x00000000
 8006d5c:	3ff00000 	.word	0x3ff00000
 8006d60:	3fe00000 	.word	0x3fe00000
 8006d64:	3fd33332 	.word	0x3fd33332
 8006d68:	3ff00000 	.word	0x3ff00000
 8006d6c:	3fe90000 	.word	0x3fe90000
 8006d70:	3fd20000 	.word	0x3fd20000
 8006d74:	00000000 	.word	0x00000000

08006d78 <__kernel_sin>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	ed2d 8b04 	vpush	{d8-d9}
 8006d80:	eeb0 8a41 	vmov.f32	s16, s2
 8006d84:	eef0 8a61 	vmov.f32	s17, s3
 8006d88:	ec55 4b10 	vmov	r4, r5, d0
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006d92:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006d96:	9001      	str	r0, [sp, #4]
 8006d98:	da06      	bge.n	8006da8 <__kernel_sin+0x30>
 8006d9a:	ee10 0a10 	vmov	r0, s0
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fee2 	bl	8000b68 <__aeabi_d2iz>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d051      	beq.n	8006e4c <__kernel_sin+0xd4>
 8006da8:	4622      	mov	r2, r4
 8006daa:	462b      	mov	r3, r5
 8006dac:	4620      	mov	r0, r4
 8006dae:	4629      	mov	r1, r5
 8006db0:	f7f9 fc2a 	bl	8000608 <__aeabi_dmul>
 8006db4:	4682      	mov	sl, r0
 8006db6:	468b      	mov	fp, r1
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	f7f9 fc22 	bl	8000608 <__aeabi_dmul>
 8006dc4:	a341      	add	r3, pc, #260	; (adr r3, 8006ecc <__kernel_sin+0x154>)
 8006dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dca:	4680      	mov	r8, r0
 8006dcc:	4689      	mov	r9, r1
 8006dce:	4650      	mov	r0, sl
 8006dd0:	4659      	mov	r1, fp
 8006dd2:	f7f9 fc19 	bl	8000608 <__aeabi_dmul>
 8006dd6:	a33f      	add	r3, pc, #252	; (adr r3, 8006ed4 <__kernel_sin+0x15c>)
 8006dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ddc:	f7f9 fa5c 	bl	8000298 <__aeabi_dsub>
 8006de0:	4652      	mov	r2, sl
 8006de2:	465b      	mov	r3, fp
 8006de4:	f7f9 fc10 	bl	8000608 <__aeabi_dmul>
 8006de8:	a33c      	add	r3, pc, #240	; (adr r3, 8006edc <__kernel_sin+0x164>)
 8006dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dee:	f7f9 fa55 	bl	800029c <__adddf3>
 8006df2:	4652      	mov	r2, sl
 8006df4:	465b      	mov	r3, fp
 8006df6:	f7f9 fc07 	bl	8000608 <__aeabi_dmul>
 8006dfa:	a33a      	add	r3, pc, #232	; (adr r3, 8006ee4 <__kernel_sin+0x16c>)
 8006dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e00:	f7f9 fa4a 	bl	8000298 <__aeabi_dsub>
 8006e04:	4652      	mov	r2, sl
 8006e06:	465b      	mov	r3, fp
 8006e08:	f7f9 fbfe 	bl	8000608 <__aeabi_dmul>
 8006e0c:	a337      	add	r3, pc, #220	; (adr r3, 8006eec <__kernel_sin+0x174>)
 8006e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e12:	f7f9 fa43 	bl	800029c <__adddf3>
 8006e16:	9b01      	ldr	r3, [sp, #4]
 8006e18:	4606      	mov	r6, r0
 8006e1a:	460f      	mov	r7, r1
 8006e1c:	b9eb      	cbnz	r3, 8006e5a <__kernel_sin+0xe2>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4650      	mov	r0, sl
 8006e24:	4659      	mov	r1, fp
 8006e26:	f7f9 fbef 	bl	8000608 <__aeabi_dmul>
 8006e2a:	a325      	add	r3, pc, #148	; (adr r3, 8006ec0 <__kernel_sin+0x148>)
 8006e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e30:	f7f9 fa32 	bl	8000298 <__aeabi_dsub>
 8006e34:	4642      	mov	r2, r8
 8006e36:	464b      	mov	r3, r9
 8006e38:	f7f9 fbe6 	bl	8000608 <__aeabi_dmul>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4620      	mov	r0, r4
 8006e42:	4629      	mov	r1, r5
 8006e44:	f7f9 fa2a 	bl	800029c <__adddf3>
 8006e48:	4604      	mov	r4, r0
 8006e4a:	460d      	mov	r5, r1
 8006e4c:	ec45 4b10 	vmov	d0, r4, r5
 8006e50:	b003      	add	sp, #12
 8006e52:	ecbd 8b04 	vpop	{d8-d9}
 8006e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5a:	4b1b      	ldr	r3, [pc, #108]	; (8006ec8 <__kernel_sin+0x150>)
 8006e5c:	ec51 0b18 	vmov	r0, r1, d8
 8006e60:	2200      	movs	r2, #0
 8006e62:	f7f9 fbd1 	bl	8000608 <__aeabi_dmul>
 8006e66:	4632      	mov	r2, r6
 8006e68:	ec41 0b19 	vmov	d9, r0, r1
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	4640      	mov	r0, r8
 8006e70:	4649      	mov	r1, r9
 8006e72:	f7f9 fbc9 	bl	8000608 <__aeabi_dmul>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	ec51 0b19 	vmov	r0, r1, d9
 8006e7e:	f7f9 fa0b 	bl	8000298 <__aeabi_dsub>
 8006e82:	4652      	mov	r2, sl
 8006e84:	465b      	mov	r3, fp
 8006e86:	f7f9 fbbf 	bl	8000608 <__aeabi_dmul>
 8006e8a:	ec53 2b18 	vmov	r2, r3, d8
 8006e8e:	f7f9 fa03 	bl	8000298 <__aeabi_dsub>
 8006e92:	a30b      	add	r3, pc, #44	; (adr r3, 8006ec0 <__kernel_sin+0x148>)
 8006e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e98:	4606      	mov	r6, r0
 8006e9a:	460f      	mov	r7, r1
 8006e9c:	4640      	mov	r0, r8
 8006e9e:	4649      	mov	r1, r9
 8006ea0:	f7f9 fbb2 	bl	8000608 <__aeabi_dmul>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	460b      	mov	r3, r1
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	4639      	mov	r1, r7
 8006eac:	f7f9 f9f6 	bl	800029c <__adddf3>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	4629      	mov	r1, r5
 8006eb8:	f7f9 f9ee 	bl	8000298 <__aeabi_dsub>
 8006ebc:	e7c4      	b.n	8006e48 <__kernel_sin+0xd0>
 8006ebe:	bf00      	nop
 8006ec0:	55555549 	.word	0x55555549
 8006ec4:	3fc55555 	.word	0x3fc55555
 8006ec8:	3fe00000 	.word	0x3fe00000
 8006ecc:	5acfd57c 	.word	0x5acfd57c
 8006ed0:	3de5d93a 	.word	0x3de5d93a
 8006ed4:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ed8:	3e5ae5e6 	.word	0x3e5ae5e6
 8006edc:	57b1fe7d 	.word	0x57b1fe7d
 8006ee0:	3ec71de3 	.word	0x3ec71de3
 8006ee4:	19c161d5 	.word	0x19c161d5
 8006ee8:	3f2a01a0 	.word	0x3f2a01a0
 8006eec:	1110f8a6 	.word	0x1110f8a6
 8006ef0:	3f811111 	.word	0x3f811111
 8006ef4:	00000000 	.word	0x00000000

08006ef8 <__ieee754_rem_pio2>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	ed2d 8b02 	vpush	{d8}
 8006f00:	ec55 4b10 	vmov	r4, r5, d0
 8006f04:	4bca      	ldr	r3, [pc, #808]	; (8007230 <__ieee754_rem_pio2+0x338>)
 8006f06:	b08b      	sub	sp, #44	; 0x2c
 8006f08:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006f0c:	4598      	cmp	r8, r3
 8006f0e:	4682      	mov	sl, r0
 8006f10:	9502      	str	r5, [sp, #8]
 8006f12:	dc08      	bgt.n	8006f26 <__ieee754_rem_pio2+0x2e>
 8006f14:	2200      	movs	r2, #0
 8006f16:	2300      	movs	r3, #0
 8006f18:	ed80 0b00 	vstr	d0, [r0]
 8006f1c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f20:	f04f 0b00 	mov.w	fp, #0
 8006f24:	e028      	b.n	8006f78 <__ieee754_rem_pio2+0x80>
 8006f26:	4bc3      	ldr	r3, [pc, #780]	; (8007234 <__ieee754_rem_pio2+0x33c>)
 8006f28:	4598      	cmp	r8, r3
 8006f2a:	dc78      	bgt.n	800701e <__ieee754_rem_pio2+0x126>
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	4ec2      	ldr	r6, [pc, #776]	; (8007238 <__ieee754_rem_pio2+0x340>)
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	ee10 0a10 	vmov	r0, s0
 8006f36:	a3b0      	add	r3, pc, #704	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x300>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	4629      	mov	r1, r5
 8006f3e:	dd39      	ble.n	8006fb4 <__ieee754_rem_pio2+0xbc>
 8006f40:	f7f9 f9aa 	bl	8000298 <__aeabi_dsub>
 8006f44:	45b0      	cmp	r8, r6
 8006f46:	4604      	mov	r4, r0
 8006f48:	460d      	mov	r5, r1
 8006f4a:	d01b      	beq.n	8006f84 <__ieee754_rem_pio2+0x8c>
 8006f4c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007200 <__ieee754_rem_pio2+0x308>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f7f9 f9a1 	bl	8000298 <__aeabi_dsub>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	e9ca 2300 	strd	r2, r3, [sl]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	4629      	mov	r1, r5
 8006f62:	f7f9 f999 	bl	8000298 <__aeabi_dsub>
 8006f66:	a3a6      	add	r3, pc, #664	; (adr r3, 8007200 <__ieee754_rem_pio2+0x308>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	f7f9 f994 	bl	8000298 <__aeabi_dsub>
 8006f70:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006f74:	f04f 0b01 	mov.w	fp, #1
 8006f78:	4658      	mov	r0, fp
 8006f7a:	b00b      	add	sp, #44	; 0x2c
 8006f7c:	ecbd 8b02 	vpop	{d8}
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	a3a0      	add	r3, pc, #640	; (adr r3, 8007208 <__ieee754_rem_pio2+0x310>)
 8006f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f8a:	f7f9 f985 	bl	8000298 <__aeabi_dsub>
 8006f8e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007210 <__ieee754_rem_pio2+0x318>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	4604      	mov	r4, r0
 8006f96:	460d      	mov	r5, r1
 8006f98:	f7f9 f97e 	bl	8000298 <__aeabi_dsub>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	e9ca 2300 	strd	r2, r3, [sl]
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f7f9 f976 	bl	8000298 <__aeabi_dsub>
 8006fac:	a398      	add	r3, pc, #608	; (adr r3, 8007210 <__ieee754_rem_pio2+0x318>)
 8006fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb2:	e7db      	b.n	8006f6c <__ieee754_rem_pio2+0x74>
 8006fb4:	f7f9 f972 	bl	800029c <__adddf3>
 8006fb8:	45b0      	cmp	r8, r6
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	d016      	beq.n	8006fee <__ieee754_rem_pio2+0xf6>
 8006fc0:	a38f      	add	r3, pc, #572	; (adr r3, 8007200 <__ieee754_rem_pio2+0x308>)
 8006fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc6:	f7f9 f969 	bl	800029c <__adddf3>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	e9ca 2300 	strd	r2, r3, [sl]
 8006fd2:	4620      	mov	r0, r4
 8006fd4:	4629      	mov	r1, r5
 8006fd6:	f7f9 f95f 	bl	8000298 <__aeabi_dsub>
 8006fda:	a389      	add	r3, pc, #548	; (adr r3, 8007200 <__ieee754_rem_pio2+0x308>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 f95c 	bl	800029c <__adddf3>
 8006fe4:	f04f 3bff 	mov.w	fp, #4294967295
 8006fe8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fec:	e7c4      	b.n	8006f78 <__ieee754_rem_pio2+0x80>
 8006fee:	a386      	add	r3, pc, #536	; (adr r3, 8007208 <__ieee754_rem_pio2+0x310>)
 8006ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff4:	f7f9 f952 	bl	800029c <__adddf3>
 8006ff8:	a385      	add	r3, pc, #532	; (adr r3, 8007210 <__ieee754_rem_pio2+0x318>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	4604      	mov	r4, r0
 8007000:	460d      	mov	r5, r1
 8007002:	f7f9 f94b 	bl	800029c <__adddf3>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	e9ca 2300 	strd	r2, r3, [sl]
 800700e:	4620      	mov	r0, r4
 8007010:	4629      	mov	r1, r5
 8007012:	f7f9 f941 	bl	8000298 <__aeabi_dsub>
 8007016:	a37e      	add	r3, pc, #504	; (adr r3, 8007210 <__ieee754_rem_pio2+0x318>)
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	e7e0      	b.n	8006fe0 <__ieee754_rem_pio2+0xe8>
 800701e:	4b87      	ldr	r3, [pc, #540]	; (800723c <__ieee754_rem_pio2+0x344>)
 8007020:	4598      	cmp	r8, r3
 8007022:	f300 80d8 	bgt.w	80071d6 <__ieee754_rem_pio2+0x2de>
 8007026:	f000 f96d 	bl	8007304 <fabs>
 800702a:	ec55 4b10 	vmov	r4, r5, d0
 800702e:	ee10 0a10 	vmov	r0, s0
 8007032:	a379      	add	r3, pc, #484	; (adr r3, 8007218 <__ieee754_rem_pio2+0x320>)
 8007034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007038:	4629      	mov	r1, r5
 800703a:	f7f9 fae5 	bl	8000608 <__aeabi_dmul>
 800703e:	4b80      	ldr	r3, [pc, #512]	; (8007240 <__ieee754_rem_pio2+0x348>)
 8007040:	2200      	movs	r2, #0
 8007042:	f7f9 f92b 	bl	800029c <__adddf3>
 8007046:	f7f9 fd8f 	bl	8000b68 <__aeabi_d2iz>
 800704a:	4683      	mov	fp, r0
 800704c:	f7f9 fa72 	bl	8000534 <__aeabi_i2d>
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	ec43 2b18 	vmov	d8, r2, r3
 8007058:	a367      	add	r3, pc, #412	; (adr r3, 80071f8 <__ieee754_rem_pio2+0x300>)
 800705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705e:	f7f9 fad3 	bl	8000608 <__aeabi_dmul>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4620      	mov	r0, r4
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 f915 	bl	8000298 <__aeabi_dsub>
 800706e:	a364      	add	r3, pc, #400	; (adr r3, 8007200 <__ieee754_rem_pio2+0x308>)
 8007070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007074:	4606      	mov	r6, r0
 8007076:	460f      	mov	r7, r1
 8007078:	ec51 0b18 	vmov	r0, r1, d8
 800707c:	f7f9 fac4 	bl	8000608 <__aeabi_dmul>
 8007080:	f1bb 0f1f 	cmp.w	fp, #31
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	dc0d      	bgt.n	80070a6 <__ieee754_rem_pio2+0x1ae>
 800708a:	4b6e      	ldr	r3, [pc, #440]	; (8007244 <__ieee754_rem_pio2+0x34c>)
 800708c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007094:	4543      	cmp	r3, r8
 8007096:	d006      	beq.n	80070a6 <__ieee754_rem_pio2+0x1ae>
 8007098:	4622      	mov	r2, r4
 800709a:	462b      	mov	r3, r5
 800709c:	4630      	mov	r0, r6
 800709e:	4639      	mov	r1, r7
 80070a0:	f7f9 f8fa 	bl	8000298 <__aeabi_dsub>
 80070a4:	e00e      	b.n	80070c4 <__ieee754_rem_pio2+0x1cc>
 80070a6:	462b      	mov	r3, r5
 80070a8:	4622      	mov	r2, r4
 80070aa:	4630      	mov	r0, r6
 80070ac:	4639      	mov	r1, r7
 80070ae:	f7f9 f8f3 	bl	8000298 <__aeabi_dsub>
 80070b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80070b6:	9303      	str	r3, [sp, #12]
 80070b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	dc02      	bgt.n	80070ca <__ieee754_rem_pio2+0x1d2>
 80070c4:	e9ca 0100 	strd	r0, r1, [sl]
 80070c8:	e039      	b.n	800713e <__ieee754_rem_pio2+0x246>
 80070ca:	a34f      	add	r3, pc, #316	; (adr r3, 8007208 <__ieee754_rem_pio2+0x310>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	ec51 0b18 	vmov	r0, r1, d8
 80070d4:	f7f9 fa98 	bl	8000608 <__aeabi_dmul>
 80070d8:	4604      	mov	r4, r0
 80070da:	460d      	mov	r5, r1
 80070dc:	4602      	mov	r2, r0
 80070de:	460b      	mov	r3, r1
 80070e0:	4630      	mov	r0, r6
 80070e2:	4639      	mov	r1, r7
 80070e4:	f7f9 f8d8 	bl	8000298 <__aeabi_dsub>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4680      	mov	r8, r0
 80070ee:	4689      	mov	r9, r1
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	f7f9 f8d0 	bl	8000298 <__aeabi_dsub>
 80070f8:	4622      	mov	r2, r4
 80070fa:	462b      	mov	r3, r5
 80070fc:	f7f9 f8cc 	bl	8000298 <__aeabi_dsub>
 8007100:	a343      	add	r3, pc, #268	; (adr r3, 8007210 <__ieee754_rem_pio2+0x318>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	4604      	mov	r4, r0
 8007108:	460d      	mov	r5, r1
 800710a:	ec51 0b18 	vmov	r0, r1, d8
 800710e:	f7f9 fa7b 	bl	8000608 <__aeabi_dmul>
 8007112:	4622      	mov	r2, r4
 8007114:	462b      	mov	r3, r5
 8007116:	f7f9 f8bf 	bl	8000298 <__aeabi_dsub>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4604      	mov	r4, r0
 8007120:	460d      	mov	r5, r1
 8007122:	4640      	mov	r0, r8
 8007124:	4649      	mov	r1, r9
 8007126:	f7f9 f8b7 	bl	8000298 <__aeabi_dsub>
 800712a:	9a03      	ldr	r2, [sp, #12]
 800712c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	2b31      	cmp	r3, #49	; 0x31
 8007134:	dc24      	bgt.n	8007180 <__ieee754_rem_pio2+0x288>
 8007136:	e9ca 0100 	strd	r0, r1, [sl]
 800713a:	4646      	mov	r6, r8
 800713c:	464f      	mov	r7, r9
 800713e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007142:	4630      	mov	r0, r6
 8007144:	4642      	mov	r2, r8
 8007146:	464b      	mov	r3, r9
 8007148:	4639      	mov	r1, r7
 800714a:	f7f9 f8a5 	bl	8000298 <__aeabi_dsub>
 800714e:	462b      	mov	r3, r5
 8007150:	4622      	mov	r2, r4
 8007152:	f7f9 f8a1 	bl	8000298 <__aeabi_dsub>
 8007156:	9b02      	ldr	r3, [sp, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800715e:	f6bf af0b 	bge.w	8006f78 <__ieee754_rem_pio2+0x80>
 8007162:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007166:	f8ca 3004 	str.w	r3, [sl, #4]
 800716a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800716e:	f8ca 8000 	str.w	r8, [sl]
 8007172:	f8ca 0008 	str.w	r0, [sl, #8]
 8007176:	f8ca 300c 	str.w	r3, [sl, #12]
 800717a:	f1cb 0b00 	rsb	fp, fp, #0
 800717e:	e6fb      	b.n	8006f78 <__ieee754_rem_pio2+0x80>
 8007180:	a327      	add	r3, pc, #156	; (adr r3, 8007220 <__ieee754_rem_pio2+0x328>)
 8007182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007186:	ec51 0b18 	vmov	r0, r1, d8
 800718a:	f7f9 fa3d 	bl	8000608 <__aeabi_dmul>
 800718e:	4604      	mov	r4, r0
 8007190:	460d      	mov	r5, r1
 8007192:	4602      	mov	r2, r0
 8007194:	460b      	mov	r3, r1
 8007196:	4640      	mov	r0, r8
 8007198:	4649      	mov	r1, r9
 800719a:	f7f9 f87d 	bl	8000298 <__aeabi_dsub>
 800719e:	4602      	mov	r2, r0
 80071a0:	460b      	mov	r3, r1
 80071a2:	4606      	mov	r6, r0
 80071a4:	460f      	mov	r7, r1
 80071a6:	4640      	mov	r0, r8
 80071a8:	4649      	mov	r1, r9
 80071aa:	f7f9 f875 	bl	8000298 <__aeabi_dsub>
 80071ae:	4622      	mov	r2, r4
 80071b0:	462b      	mov	r3, r5
 80071b2:	f7f9 f871 	bl	8000298 <__aeabi_dsub>
 80071b6:	a31c      	add	r3, pc, #112	; (adr r3, 8007228 <__ieee754_rem_pio2+0x330>)
 80071b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071bc:	4604      	mov	r4, r0
 80071be:	460d      	mov	r5, r1
 80071c0:	ec51 0b18 	vmov	r0, r1, d8
 80071c4:	f7f9 fa20 	bl	8000608 <__aeabi_dmul>
 80071c8:	4622      	mov	r2, r4
 80071ca:	462b      	mov	r3, r5
 80071cc:	f7f9 f864 	bl	8000298 <__aeabi_dsub>
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	e760      	b.n	8007098 <__ieee754_rem_pio2+0x1a0>
 80071d6:	4b1c      	ldr	r3, [pc, #112]	; (8007248 <__ieee754_rem_pio2+0x350>)
 80071d8:	4598      	cmp	r8, r3
 80071da:	dd37      	ble.n	800724c <__ieee754_rem_pio2+0x354>
 80071dc:	ee10 2a10 	vmov	r2, s0
 80071e0:	462b      	mov	r3, r5
 80071e2:	4620      	mov	r0, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	f7f9 f857 	bl	8000298 <__aeabi_dsub>
 80071ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071ee:	e9ca 0100 	strd	r0, r1, [sl]
 80071f2:	e695      	b.n	8006f20 <__ieee754_rem_pio2+0x28>
 80071f4:	f3af 8000 	nop.w
 80071f8:	54400000 	.word	0x54400000
 80071fc:	3ff921fb 	.word	0x3ff921fb
 8007200:	1a626331 	.word	0x1a626331
 8007204:	3dd0b461 	.word	0x3dd0b461
 8007208:	1a600000 	.word	0x1a600000
 800720c:	3dd0b461 	.word	0x3dd0b461
 8007210:	2e037073 	.word	0x2e037073
 8007214:	3ba3198a 	.word	0x3ba3198a
 8007218:	6dc9c883 	.word	0x6dc9c883
 800721c:	3fe45f30 	.word	0x3fe45f30
 8007220:	2e000000 	.word	0x2e000000
 8007224:	3ba3198a 	.word	0x3ba3198a
 8007228:	252049c1 	.word	0x252049c1
 800722c:	397b839a 	.word	0x397b839a
 8007230:	3fe921fb 	.word	0x3fe921fb
 8007234:	4002d97b 	.word	0x4002d97b
 8007238:	3ff921fb 	.word	0x3ff921fb
 800723c:	413921fb 	.word	0x413921fb
 8007240:	3fe00000 	.word	0x3fe00000
 8007244:	0801a084 	.word	0x0801a084
 8007248:	7fefffff 	.word	0x7fefffff
 800724c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007250:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007254:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007258:	4620      	mov	r0, r4
 800725a:	460d      	mov	r5, r1
 800725c:	f7f9 fc84 	bl	8000b68 <__aeabi_d2iz>
 8007260:	f7f9 f968 	bl	8000534 <__aeabi_i2d>
 8007264:	4602      	mov	r2, r0
 8007266:	460b      	mov	r3, r1
 8007268:	4620      	mov	r0, r4
 800726a:	4629      	mov	r1, r5
 800726c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007270:	f7f9 f812 	bl	8000298 <__aeabi_dsub>
 8007274:	4b21      	ldr	r3, [pc, #132]	; (80072fc <__ieee754_rem_pio2+0x404>)
 8007276:	2200      	movs	r2, #0
 8007278:	f7f9 f9c6 	bl	8000608 <__aeabi_dmul>
 800727c:	460d      	mov	r5, r1
 800727e:	4604      	mov	r4, r0
 8007280:	f7f9 fc72 	bl	8000b68 <__aeabi_d2iz>
 8007284:	f7f9 f956 	bl	8000534 <__aeabi_i2d>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4620      	mov	r0, r4
 800728e:	4629      	mov	r1, r5
 8007290:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007294:	f7f9 f800 	bl	8000298 <__aeabi_dsub>
 8007298:	4b18      	ldr	r3, [pc, #96]	; (80072fc <__ieee754_rem_pio2+0x404>)
 800729a:	2200      	movs	r2, #0
 800729c:	f7f9 f9b4 	bl	8000608 <__aeabi_dmul>
 80072a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80072a8:	2703      	movs	r7, #3
 80072aa:	2400      	movs	r4, #0
 80072ac:	2500      	movs	r5, #0
 80072ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 80072b2:	4622      	mov	r2, r4
 80072b4:	462b      	mov	r3, r5
 80072b6:	46b9      	mov	r9, r7
 80072b8:	3f01      	subs	r7, #1
 80072ba:	f7f9 fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d1f5      	bne.n	80072ae <__ieee754_rem_pio2+0x3b6>
 80072c2:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <__ieee754_rem_pio2+0x408>)
 80072c4:	9301      	str	r3, [sp, #4]
 80072c6:	2302      	movs	r3, #2
 80072c8:	9300      	str	r3, [sp, #0]
 80072ca:	4632      	mov	r2, r6
 80072cc:	464b      	mov	r3, r9
 80072ce:	4651      	mov	r1, sl
 80072d0:	a804      	add	r0, sp, #16
 80072d2:	f000 f821 	bl	8007318 <__kernel_rem_pio2>
 80072d6:	9b02      	ldr	r3, [sp, #8]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	4683      	mov	fp, r0
 80072dc:	f6bf ae4c 	bge.w	8006f78 <__ieee754_rem_pio2+0x80>
 80072e0:	e9da 2100 	ldrd	r2, r1, [sl]
 80072e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072e8:	e9ca 2300 	strd	r2, r3, [sl]
 80072ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80072f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80072f8:	e73f      	b.n	800717a <__ieee754_rem_pio2+0x282>
 80072fa:	bf00      	nop
 80072fc:	41700000 	.word	0x41700000
 8007300:	0801a104 	.word	0x0801a104

08007304 <fabs>:
 8007304:	ec51 0b10 	vmov	r0, r1, d0
 8007308:	ee10 2a10 	vmov	r2, s0
 800730c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007310:	ec43 2b10 	vmov	d0, r2, r3
 8007314:	4770      	bx	lr
	...

08007318 <__kernel_rem_pio2>:
 8007318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	ed2d 8b02 	vpush	{d8}
 8007320:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8007324:	f112 0f14 	cmn.w	r2, #20
 8007328:	9306      	str	r3, [sp, #24]
 800732a:	9104      	str	r1, [sp, #16]
 800732c:	4bc2      	ldr	r3, [pc, #776]	; (8007638 <__kernel_rem_pio2+0x320>)
 800732e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8007330:	9009      	str	r0, [sp, #36]	; 0x24
 8007332:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	9b06      	ldr	r3, [sp, #24]
 800733a:	f103 33ff 	add.w	r3, r3, #4294967295
 800733e:	bfa8      	it	ge
 8007340:	1ed4      	subge	r4, r2, #3
 8007342:	9305      	str	r3, [sp, #20]
 8007344:	bfb2      	itee	lt
 8007346:	2400      	movlt	r4, #0
 8007348:	2318      	movge	r3, #24
 800734a:	fb94 f4f3 	sdivge	r4, r4, r3
 800734e:	f06f 0317 	mvn.w	r3, #23
 8007352:	fb04 3303 	mla	r3, r4, r3, r3
 8007356:	eb03 0a02 	add.w	sl, r3, r2
 800735a:	9b00      	ldr	r3, [sp, #0]
 800735c:	9a05      	ldr	r2, [sp, #20]
 800735e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8007628 <__kernel_rem_pio2+0x310>
 8007362:	eb03 0802 	add.w	r8, r3, r2
 8007366:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007368:	1aa7      	subs	r7, r4, r2
 800736a:	ae20      	add	r6, sp, #128	; 0x80
 800736c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007370:	2500      	movs	r5, #0
 8007372:	4545      	cmp	r5, r8
 8007374:	dd13      	ble.n	800739e <__kernel_rem_pio2+0x86>
 8007376:	9b06      	ldr	r3, [sp, #24]
 8007378:	aa20      	add	r2, sp, #128	; 0x80
 800737a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800737e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007382:	f04f 0800 	mov.w	r8, #0
 8007386:	9b00      	ldr	r3, [sp, #0]
 8007388:	4598      	cmp	r8, r3
 800738a:	dc31      	bgt.n	80073f0 <__kernel_rem_pio2+0xd8>
 800738c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8007628 <__kernel_rem_pio2+0x310>
 8007390:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007394:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007398:	462f      	mov	r7, r5
 800739a:	2600      	movs	r6, #0
 800739c:	e01b      	b.n	80073d6 <__kernel_rem_pio2+0xbe>
 800739e:	42ef      	cmn	r7, r5
 80073a0:	d407      	bmi.n	80073b2 <__kernel_rem_pio2+0x9a>
 80073a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80073a6:	f7f9 f8c5 	bl	8000534 <__aeabi_i2d>
 80073aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80073ae:	3501      	adds	r5, #1
 80073b0:	e7df      	b.n	8007372 <__kernel_rem_pio2+0x5a>
 80073b2:	ec51 0b18 	vmov	r0, r1, d8
 80073b6:	e7f8      	b.n	80073aa <__kernel_rem_pio2+0x92>
 80073b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073bc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80073c0:	f7f9 f922 	bl	8000608 <__aeabi_dmul>
 80073c4:	4602      	mov	r2, r0
 80073c6:	460b      	mov	r3, r1
 80073c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073cc:	f7f8 ff66 	bl	800029c <__adddf3>
 80073d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d4:	3601      	adds	r6, #1
 80073d6:	9b05      	ldr	r3, [sp, #20]
 80073d8:	429e      	cmp	r6, r3
 80073da:	f1a7 0708 	sub.w	r7, r7, #8
 80073de:	ddeb      	ble.n	80073b8 <__kernel_rem_pio2+0xa0>
 80073e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80073e4:	f108 0801 	add.w	r8, r8, #1
 80073e8:	ecab 7b02 	vstmia	fp!, {d7}
 80073ec:	3508      	adds	r5, #8
 80073ee:	e7ca      	b.n	8007386 <__kernel_rem_pio2+0x6e>
 80073f0:	9b00      	ldr	r3, [sp, #0]
 80073f2:	aa0c      	add	r2, sp, #48	; 0x30
 80073f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073fa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80073fc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007400:	9c00      	ldr	r4, [sp, #0]
 8007402:	930a      	str	r3, [sp, #40]	; 0x28
 8007404:	00e3      	lsls	r3, r4, #3
 8007406:	9308      	str	r3, [sp, #32]
 8007408:	ab98      	add	r3, sp, #608	; 0x260
 800740a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800740e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007412:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8007416:	ab70      	add	r3, sp, #448	; 0x1c0
 8007418:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800741c:	46c3      	mov	fp, r8
 800741e:	46a1      	mov	r9, r4
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	f1a5 0508 	sub.w	r5, r5, #8
 8007428:	dc77      	bgt.n	800751a <__kernel_rem_pio2+0x202>
 800742a:	ec47 6b10 	vmov	d0, r6, r7
 800742e:	4650      	mov	r0, sl
 8007430:	f000 fac2 	bl	80079b8 <scalbn>
 8007434:	ec57 6b10 	vmov	r6, r7, d0
 8007438:	2200      	movs	r2, #0
 800743a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800743e:	ee10 0a10 	vmov	r0, s0
 8007442:	4639      	mov	r1, r7
 8007444:	f7f9 f8e0 	bl	8000608 <__aeabi_dmul>
 8007448:	ec41 0b10 	vmov	d0, r0, r1
 800744c:	f000 fb34 	bl	8007ab8 <floor>
 8007450:	4b7a      	ldr	r3, [pc, #488]	; (800763c <__kernel_rem_pio2+0x324>)
 8007452:	ec51 0b10 	vmov	r0, r1, d0
 8007456:	2200      	movs	r2, #0
 8007458:	f7f9 f8d6 	bl	8000608 <__aeabi_dmul>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4630      	mov	r0, r6
 8007462:	4639      	mov	r1, r7
 8007464:	f7f8 ff18 	bl	8000298 <__aeabi_dsub>
 8007468:	460f      	mov	r7, r1
 800746a:	4606      	mov	r6, r0
 800746c:	f7f9 fb7c 	bl	8000b68 <__aeabi_d2iz>
 8007470:	9002      	str	r0, [sp, #8]
 8007472:	f7f9 f85f 	bl	8000534 <__aeabi_i2d>
 8007476:	4602      	mov	r2, r0
 8007478:	460b      	mov	r3, r1
 800747a:	4630      	mov	r0, r6
 800747c:	4639      	mov	r1, r7
 800747e:	f7f8 ff0b 	bl	8000298 <__aeabi_dsub>
 8007482:	f1ba 0f00 	cmp.w	sl, #0
 8007486:	4606      	mov	r6, r0
 8007488:	460f      	mov	r7, r1
 800748a:	dd6d      	ble.n	8007568 <__kernel_rem_pio2+0x250>
 800748c:	1e61      	subs	r1, r4, #1
 800748e:	ab0c      	add	r3, sp, #48	; 0x30
 8007490:	9d02      	ldr	r5, [sp, #8]
 8007492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007496:	f1ca 0018 	rsb	r0, sl, #24
 800749a:	fa43 f200 	asr.w	r2, r3, r0
 800749e:	4415      	add	r5, r2
 80074a0:	4082      	lsls	r2, r0
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	aa0c      	add	r2, sp, #48	; 0x30
 80074a6:	9502      	str	r5, [sp, #8]
 80074a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80074ac:	f1ca 0217 	rsb	r2, sl, #23
 80074b0:	fa43 fb02 	asr.w	fp, r3, r2
 80074b4:	f1bb 0f00 	cmp.w	fp, #0
 80074b8:	dd65      	ble.n	8007586 <__kernel_rem_pio2+0x26e>
 80074ba:	9b02      	ldr	r3, [sp, #8]
 80074bc:	2200      	movs	r2, #0
 80074be:	3301      	adds	r3, #1
 80074c0:	9302      	str	r3, [sp, #8]
 80074c2:	4615      	mov	r5, r2
 80074c4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80074c8:	4294      	cmp	r4, r2
 80074ca:	f300 809f 	bgt.w	800760c <__kernel_rem_pio2+0x2f4>
 80074ce:	f1ba 0f00 	cmp.w	sl, #0
 80074d2:	dd07      	ble.n	80074e4 <__kernel_rem_pio2+0x1cc>
 80074d4:	f1ba 0f01 	cmp.w	sl, #1
 80074d8:	f000 80c1 	beq.w	800765e <__kernel_rem_pio2+0x346>
 80074dc:	f1ba 0f02 	cmp.w	sl, #2
 80074e0:	f000 80c7 	beq.w	8007672 <__kernel_rem_pio2+0x35a>
 80074e4:	f1bb 0f02 	cmp.w	fp, #2
 80074e8:	d14d      	bne.n	8007586 <__kernel_rem_pio2+0x26e>
 80074ea:	4632      	mov	r2, r6
 80074ec:	463b      	mov	r3, r7
 80074ee:	4954      	ldr	r1, [pc, #336]	; (8007640 <__kernel_rem_pio2+0x328>)
 80074f0:	2000      	movs	r0, #0
 80074f2:	f7f8 fed1 	bl	8000298 <__aeabi_dsub>
 80074f6:	4606      	mov	r6, r0
 80074f8:	460f      	mov	r7, r1
 80074fa:	2d00      	cmp	r5, #0
 80074fc:	d043      	beq.n	8007586 <__kernel_rem_pio2+0x26e>
 80074fe:	4650      	mov	r0, sl
 8007500:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8007630 <__kernel_rem_pio2+0x318>
 8007504:	f000 fa58 	bl	80079b8 <scalbn>
 8007508:	4630      	mov	r0, r6
 800750a:	4639      	mov	r1, r7
 800750c:	ec53 2b10 	vmov	r2, r3, d0
 8007510:	f7f8 fec2 	bl	8000298 <__aeabi_dsub>
 8007514:	4606      	mov	r6, r0
 8007516:	460f      	mov	r7, r1
 8007518:	e035      	b.n	8007586 <__kernel_rem_pio2+0x26e>
 800751a:	4b4a      	ldr	r3, [pc, #296]	; (8007644 <__kernel_rem_pio2+0x32c>)
 800751c:	2200      	movs	r2, #0
 800751e:	4630      	mov	r0, r6
 8007520:	4639      	mov	r1, r7
 8007522:	f7f9 f871 	bl	8000608 <__aeabi_dmul>
 8007526:	f7f9 fb1f 	bl	8000b68 <__aeabi_d2iz>
 800752a:	f7f9 f803 	bl	8000534 <__aeabi_i2d>
 800752e:	4602      	mov	r2, r0
 8007530:	460b      	mov	r3, r1
 8007532:	ec43 2b18 	vmov	d8, r2, r3
 8007536:	4b44      	ldr	r3, [pc, #272]	; (8007648 <__kernel_rem_pio2+0x330>)
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f865 	bl	8000608 <__aeabi_dmul>
 800753e:	4602      	mov	r2, r0
 8007540:	460b      	mov	r3, r1
 8007542:	4630      	mov	r0, r6
 8007544:	4639      	mov	r1, r7
 8007546:	f7f8 fea7 	bl	8000298 <__aeabi_dsub>
 800754a:	f7f9 fb0d 	bl	8000b68 <__aeabi_d2iz>
 800754e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007552:	f84b 0b04 	str.w	r0, [fp], #4
 8007556:	ec51 0b18 	vmov	r0, r1, d8
 800755a:	f7f8 fe9f 	bl	800029c <__adddf3>
 800755e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007562:	4606      	mov	r6, r0
 8007564:	460f      	mov	r7, r1
 8007566:	e75b      	b.n	8007420 <__kernel_rem_pio2+0x108>
 8007568:	d106      	bne.n	8007578 <__kernel_rem_pio2+0x260>
 800756a:	1e63      	subs	r3, r4, #1
 800756c:	aa0c      	add	r2, sp, #48	; 0x30
 800756e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007572:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007576:	e79d      	b.n	80074b4 <__kernel_rem_pio2+0x19c>
 8007578:	4b34      	ldr	r3, [pc, #208]	; (800764c <__kernel_rem_pio2+0x334>)
 800757a:	2200      	movs	r2, #0
 800757c:	f7f9 faca 	bl	8000b14 <__aeabi_dcmpge>
 8007580:	2800      	cmp	r0, #0
 8007582:	d140      	bne.n	8007606 <__kernel_rem_pio2+0x2ee>
 8007584:	4683      	mov	fp, r0
 8007586:	2200      	movs	r2, #0
 8007588:	2300      	movs	r3, #0
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 faa3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007592:	2800      	cmp	r0, #0
 8007594:	f000 80c1 	beq.w	800771a <__kernel_rem_pio2+0x402>
 8007598:	1e65      	subs	r5, r4, #1
 800759a:	462b      	mov	r3, r5
 800759c:	2200      	movs	r2, #0
 800759e:	9900      	ldr	r1, [sp, #0]
 80075a0:	428b      	cmp	r3, r1
 80075a2:	da6d      	bge.n	8007680 <__kernel_rem_pio2+0x368>
 80075a4:	2a00      	cmp	r2, #0
 80075a6:	f000 808a 	beq.w	80076be <__kernel_rem_pio2+0x3a6>
 80075aa:	ab0c      	add	r3, sp, #48	; 0x30
 80075ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80075b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f000 80ae 	beq.w	8007716 <__kernel_rem_pio2+0x3fe>
 80075ba:	4650      	mov	r0, sl
 80075bc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007630 <__kernel_rem_pio2+0x318>
 80075c0:	f000 f9fa 	bl	80079b8 <scalbn>
 80075c4:	1c6b      	adds	r3, r5, #1
 80075c6:	00da      	lsls	r2, r3, #3
 80075c8:	9205      	str	r2, [sp, #20]
 80075ca:	ec57 6b10 	vmov	r6, r7, d0
 80075ce:	aa70      	add	r2, sp, #448	; 0x1c0
 80075d0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007644 <__kernel_rem_pio2+0x32c>
 80075d4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 80075d8:	462c      	mov	r4, r5
 80075da:	f04f 0800 	mov.w	r8, #0
 80075de:	2c00      	cmp	r4, #0
 80075e0:	f280 80d4 	bge.w	800778c <__kernel_rem_pio2+0x474>
 80075e4:	462c      	mov	r4, r5
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	f2c0 8102 	blt.w	80077f0 <__kernel_rem_pio2+0x4d8>
 80075ec:	4b18      	ldr	r3, [pc, #96]	; (8007650 <__kernel_rem_pio2+0x338>)
 80075ee:	461e      	mov	r6, r3
 80075f0:	ab70      	add	r3, sp, #448	; 0x1c0
 80075f2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80075f6:	1b2b      	subs	r3, r5, r4
 80075f8:	f04f 0900 	mov.w	r9, #0
 80075fc:	f04f 0a00 	mov.w	sl, #0
 8007600:	2700      	movs	r7, #0
 8007602:	9306      	str	r3, [sp, #24]
 8007604:	e0e6      	b.n	80077d4 <__kernel_rem_pio2+0x4bc>
 8007606:	f04f 0b02 	mov.w	fp, #2
 800760a:	e756      	b.n	80074ba <__kernel_rem_pio2+0x1a2>
 800760c:	f8d8 3000 	ldr.w	r3, [r8]
 8007610:	bb05      	cbnz	r5, 8007654 <__kernel_rem_pio2+0x33c>
 8007612:	b123      	cbz	r3, 800761e <__kernel_rem_pio2+0x306>
 8007614:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007618:	f8c8 3000 	str.w	r3, [r8]
 800761c:	2301      	movs	r3, #1
 800761e:	3201      	adds	r2, #1
 8007620:	f108 0804 	add.w	r8, r8, #4
 8007624:	461d      	mov	r5, r3
 8007626:	e74f      	b.n	80074c8 <__kernel_rem_pio2+0x1b0>
	...
 8007634:	3ff00000 	.word	0x3ff00000
 8007638:	0801a250 	.word	0x0801a250
 800763c:	40200000 	.word	0x40200000
 8007640:	3ff00000 	.word	0x3ff00000
 8007644:	3e700000 	.word	0x3e700000
 8007648:	41700000 	.word	0x41700000
 800764c:	3fe00000 	.word	0x3fe00000
 8007650:	0801a210 	.word	0x0801a210
 8007654:	1acb      	subs	r3, r1, r3
 8007656:	f8c8 3000 	str.w	r3, [r8]
 800765a:	462b      	mov	r3, r5
 800765c:	e7df      	b.n	800761e <__kernel_rem_pio2+0x306>
 800765e:	1e62      	subs	r2, r4, #1
 8007660:	ab0c      	add	r3, sp, #48	; 0x30
 8007662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007666:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800766a:	a90c      	add	r1, sp, #48	; 0x30
 800766c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007670:	e738      	b.n	80074e4 <__kernel_rem_pio2+0x1cc>
 8007672:	1e62      	subs	r2, r4, #1
 8007674:	ab0c      	add	r3, sp, #48	; 0x30
 8007676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800767a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800767e:	e7f4      	b.n	800766a <__kernel_rem_pio2+0x352>
 8007680:	a90c      	add	r1, sp, #48	; 0x30
 8007682:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007686:	3b01      	subs	r3, #1
 8007688:	430a      	orrs	r2, r1
 800768a:	e788      	b.n	800759e <__kernel_rem_pio2+0x286>
 800768c:	3301      	adds	r3, #1
 800768e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007692:	2900      	cmp	r1, #0
 8007694:	d0fa      	beq.n	800768c <__kernel_rem_pio2+0x374>
 8007696:	9a08      	ldr	r2, [sp, #32]
 8007698:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800769c:	446a      	add	r2, sp
 800769e:	3a98      	subs	r2, #152	; 0x98
 80076a0:	9208      	str	r2, [sp, #32]
 80076a2:	9a06      	ldr	r2, [sp, #24]
 80076a4:	a920      	add	r1, sp, #128	; 0x80
 80076a6:	18a2      	adds	r2, r4, r2
 80076a8:	18e3      	adds	r3, r4, r3
 80076aa:	f104 0801 	add.w	r8, r4, #1
 80076ae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 80076b2:	9302      	str	r3, [sp, #8]
 80076b4:	9b02      	ldr	r3, [sp, #8]
 80076b6:	4543      	cmp	r3, r8
 80076b8:	da04      	bge.n	80076c4 <__kernel_rem_pio2+0x3ac>
 80076ba:	461c      	mov	r4, r3
 80076bc:	e6a2      	b.n	8007404 <__kernel_rem_pio2+0xec>
 80076be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7e4      	b.n	800768e <__kernel_rem_pio2+0x376>
 80076c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076c6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80076ca:	f7f8 ff33 	bl	8000534 <__aeabi_i2d>
 80076ce:	e8e5 0102 	strd	r0, r1, [r5], #8
 80076d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076d4:	46ab      	mov	fp, r5
 80076d6:	461c      	mov	r4, r3
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	2600      	movs	r6, #0
 80076de:	2700      	movs	r7, #0
 80076e0:	9b05      	ldr	r3, [sp, #20]
 80076e2:	4599      	cmp	r9, r3
 80076e4:	dd06      	ble.n	80076f4 <__kernel_rem_pio2+0x3dc>
 80076e6:	9b08      	ldr	r3, [sp, #32]
 80076e8:	e8e3 6702 	strd	r6, r7, [r3], #8
 80076ec:	f108 0801 	add.w	r8, r8, #1
 80076f0:	9308      	str	r3, [sp, #32]
 80076f2:	e7df      	b.n	80076b4 <__kernel_rem_pio2+0x39c>
 80076f4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80076f8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80076fc:	f7f8 ff84 	bl	8000608 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f8 fdc8 	bl	800029c <__adddf3>
 800770c:	f109 0901 	add.w	r9, r9, #1
 8007710:	4606      	mov	r6, r0
 8007712:	460f      	mov	r7, r1
 8007714:	e7e4      	b.n	80076e0 <__kernel_rem_pio2+0x3c8>
 8007716:	3d01      	subs	r5, #1
 8007718:	e747      	b.n	80075aa <__kernel_rem_pio2+0x292>
 800771a:	ec47 6b10 	vmov	d0, r6, r7
 800771e:	f1ca 0000 	rsb	r0, sl, #0
 8007722:	f000 f949 	bl	80079b8 <scalbn>
 8007726:	ec57 6b10 	vmov	r6, r7, d0
 800772a:	4ba0      	ldr	r3, [pc, #640]	; (80079ac <__kernel_rem_pio2+0x694>)
 800772c:	ee10 0a10 	vmov	r0, s0
 8007730:	2200      	movs	r2, #0
 8007732:	4639      	mov	r1, r7
 8007734:	f7f9 f9ee 	bl	8000b14 <__aeabi_dcmpge>
 8007738:	b1f8      	cbz	r0, 800777a <__kernel_rem_pio2+0x462>
 800773a:	4b9d      	ldr	r3, [pc, #628]	; (80079b0 <__kernel_rem_pio2+0x698>)
 800773c:	2200      	movs	r2, #0
 800773e:	4630      	mov	r0, r6
 8007740:	4639      	mov	r1, r7
 8007742:	f7f8 ff61 	bl	8000608 <__aeabi_dmul>
 8007746:	f7f9 fa0f 	bl	8000b68 <__aeabi_d2iz>
 800774a:	4680      	mov	r8, r0
 800774c:	f7f8 fef2 	bl	8000534 <__aeabi_i2d>
 8007750:	4b96      	ldr	r3, [pc, #600]	; (80079ac <__kernel_rem_pio2+0x694>)
 8007752:	2200      	movs	r2, #0
 8007754:	f7f8 ff58 	bl	8000608 <__aeabi_dmul>
 8007758:	460b      	mov	r3, r1
 800775a:	4602      	mov	r2, r0
 800775c:	4639      	mov	r1, r7
 800775e:	4630      	mov	r0, r6
 8007760:	f7f8 fd9a 	bl	8000298 <__aeabi_dsub>
 8007764:	f7f9 fa00 	bl	8000b68 <__aeabi_d2iz>
 8007768:	1c65      	adds	r5, r4, #1
 800776a:	ab0c      	add	r3, sp, #48	; 0x30
 800776c:	f10a 0a18 	add.w	sl, sl, #24
 8007770:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007774:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007778:	e71f      	b.n	80075ba <__kernel_rem_pio2+0x2a2>
 800777a:	4630      	mov	r0, r6
 800777c:	4639      	mov	r1, r7
 800777e:	f7f9 f9f3 	bl	8000b68 <__aeabi_d2iz>
 8007782:	ab0c      	add	r3, sp, #48	; 0x30
 8007784:	4625      	mov	r5, r4
 8007786:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800778a:	e716      	b.n	80075ba <__kernel_rem_pio2+0x2a2>
 800778c:	ab0c      	add	r3, sp, #48	; 0x30
 800778e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007792:	f7f8 fecf 	bl	8000534 <__aeabi_i2d>
 8007796:	4632      	mov	r2, r6
 8007798:	463b      	mov	r3, r7
 800779a:	f7f8 ff35 	bl	8000608 <__aeabi_dmul>
 800779e:	4642      	mov	r2, r8
 80077a0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80077a4:	464b      	mov	r3, r9
 80077a6:	4630      	mov	r0, r6
 80077a8:	4639      	mov	r1, r7
 80077aa:	f7f8 ff2d 	bl	8000608 <__aeabi_dmul>
 80077ae:	3c01      	subs	r4, #1
 80077b0:	4606      	mov	r6, r0
 80077b2:	460f      	mov	r7, r1
 80077b4:	e713      	b.n	80075de <__kernel_rem_pio2+0x2c6>
 80077b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80077ba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80077be:	f7f8 ff23 	bl	8000608 <__aeabi_dmul>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	4648      	mov	r0, r9
 80077c8:	4651      	mov	r1, sl
 80077ca:	f7f8 fd67 	bl	800029c <__adddf3>
 80077ce:	3701      	adds	r7, #1
 80077d0:	4681      	mov	r9, r0
 80077d2:	468a      	mov	sl, r1
 80077d4:	9b00      	ldr	r3, [sp, #0]
 80077d6:	429f      	cmp	r7, r3
 80077d8:	dc02      	bgt.n	80077e0 <__kernel_rem_pio2+0x4c8>
 80077da:	9b06      	ldr	r3, [sp, #24]
 80077dc:	429f      	cmp	r7, r3
 80077de:	ddea      	ble.n	80077b6 <__kernel_rem_pio2+0x49e>
 80077e0:	9a06      	ldr	r2, [sp, #24]
 80077e2:	ab48      	add	r3, sp, #288	; 0x120
 80077e4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 80077e8:	e9c6 9a00 	strd	r9, sl, [r6]
 80077ec:	3c01      	subs	r4, #1
 80077ee:	e6fa      	b.n	80075e6 <__kernel_rem_pio2+0x2ce>
 80077f0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	dc0b      	bgt.n	800780e <__kernel_rem_pio2+0x4f6>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dc39      	bgt.n	800786e <__kernel_rem_pio2+0x556>
 80077fa:	d05d      	beq.n	80078b8 <__kernel_rem_pio2+0x5a0>
 80077fc:	9b02      	ldr	r3, [sp, #8]
 80077fe:	f003 0007 	and.w	r0, r3, #7
 8007802:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007806:	ecbd 8b02 	vpop	{d8}
 800780a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800780e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007810:	2b03      	cmp	r3, #3
 8007812:	d1f3      	bne.n	80077fc <__kernel_rem_pio2+0x4e4>
 8007814:	9b05      	ldr	r3, [sp, #20]
 8007816:	9500      	str	r5, [sp, #0]
 8007818:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800781c:	eb0d 0403 	add.w	r4, sp, r3
 8007820:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007824:	46a2      	mov	sl, r4
 8007826:	9b00      	ldr	r3, [sp, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	f1aa 0a08 	sub.w	sl, sl, #8
 800782e:	dc69      	bgt.n	8007904 <__kernel_rem_pio2+0x5ec>
 8007830:	46aa      	mov	sl, r5
 8007832:	f1ba 0f01 	cmp.w	sl, #1
 8007836:	f1a4 0408 	sub.w	r4, r4, #8
 800783a:	f300 8083 	bgt.w	8007944 <__kernel_rem_pio2+0x62c>
 800783e:	9c05      	ldr	r4, [sp, #20]
 8007840:	ab48      	add	r3, sp, #288	; 0x120
 8007842:	441c      	add	r4, r3
 8007844:	2000      	movs	r0, #0
 8007846:	2100      	movs	r1, #0
 8007848:	2d01      	cmp	r5, #1
 800784a:	f300 809a 	bgt.w	8007982 <__kernel_rem_pio2+0x66a>
 800784e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007852:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007856:	f1bb 0f00 	cmp.w	fp, #0
 800785a:	f040 8098 	bne.w	800798e <__kernel_rem_pio2+0x676>
 800785e:	9b04      	ldr	r3, [sp, #16]
 8007860:	e9c3 7800 	strd	r7, r8, [r3]
 8007864:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007868:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800786c:	e7c6      	b.n	80077fc <__kernel_rem_pio2+0x4e4>
 800786e:	9e05      	ldr	r6, [sp, #20]
 8007870:	ab48      	add	r3, sp, #288	; 0x120
 8007872:	441e      	add	r6, r3
 8007874:	462c      	mov	r4, r5
 8007876:	2000      	movs	r0, #0
 8007878:	2100      	movs	r1, #0
 800787a:	2c00      	cmp	r4, #0
 800787c:	da33      	bge.n	80078e6 <__kernel_rem_pio2+0x5ce>
 800787e:	f1bb 0f00 	cmp.w	fp, #0
 8007882:	d036      	beq.n	80078f2 <__kernel_rem_pio2+0x5da>
 8007884:	4602      	mov	r2, r0
 8007886:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800788a:	9c04      	ldr	r4, [sp, #16]
 800788c:	e9c4 2300 	strd	r2, r3, [r4]
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007898:	f7f8 fcfe 	bl	8000298 <__aeabi_dsub>
 800789c:	ae4a      	add	r6, sp, #296	; 0x128
 800789e:	2401      	movs	r4, #1
 80078a0:	42a5      	cmp	r5, r4
 80078a2:	da29      	bge.n	80078f8 <__kernel_rem_pio2+0x5e0>
 80078a4:	f1bb 0f00 	cmp.w	fp, #0
 80078a8:	d002      	beq.n	80078b0 <__kernel_rem_pio2+0x598>
 80078aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078ae:	4619      	mov	r1, r3
 80078b0:	9b04      	ldr	r3, [sp, #16]
 80078b2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80078b6:	e7a1      	b.n	80077fc <__kernel_rem_pio2+0x4e4>
 80078b8:	9c05      	ldr	r4, [sp, #20]
 80078ba:	ab48      	add	r3, sp, #288	; 0x120
 80078bc:	441c      	add	r4, r3
 80078be:	2000      	movs	r0, #0
 80078c0:	2100      	movs	r1, #0
 80078c2:	2d00      	cmp	r5, #0
 80078c4:	da09      	bge.n	80078da <__kernel_rem_pio2+0x5c2>
 80078c6:	f1bb 0f00 	cmp.w	fp, #0
 80078ca:	d002      	beq.n	80078d2 <__kernel_rem_pio2+0x5ba>
 80078cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80078d0:	4619      	mov	r1, r3
 80078d2:	9b04      	ldr	r3, [sp, #16]
 80078d4:	e9c3 0100 	strd	r0, r1, [r3]
 80078d8:	e790      	b.n	80077fc <__kernel_rem_pio2+0x4e4>
 80078da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80078de:	f7f8 fcdd 	bl	800029c <__adddf3>
 80078e2:	3d01      	subs	r5, #1
 80078e4:	e7ed      	b.n	80078c2 <__kernel_rem_pio2+0x5aa>
 80078e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80078ea:	f7f8 fcd7 	bl	800029c <__adddf3>
 80078ee:	3c01      	subs	r4, #1
 80078f0:	e7c3      	b.n	800787a <__kernel_rem_pio2+0x562>
 80078f2:	4602      	mov	r2, r0
 80078f4:	460b      	mov	r3, r1
 80078f6:	e7c8      	b.n	800788a <__kernel_rem_pio2+0x572>
 80078f8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80078fc:	f7f8 fcce 	bl	800029c <__adddf3>
 8007900:	3401      	adds	r4, #1
 8007902:	e7cd      	b.n	80078a0 <__kernel_rem_pio2+0x588>
 8007904:	e9da 8900 	ldrd	r8, r9, [sl]
 8007908:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	3b01      	subs	r3, #1
 8007910:	9300      	str	r3, [sp, #0]
 8007912:	4632      	mov	r2, r6
 8007914:	463b      	mov	r3, r7
 8007916:	4640      	mov	r0, r8
 8007918:	4649      	mov	r1, r9
 800791a:	f7f8 fcbf 	bl	800029c <__adddf3>
 800791e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007922:	4602      	mov	r2, r0
 8007924:	460b      	mov	r3, r1
 8007926:	4640      	mov	r0, r8
 8007928:	4649      	mov	r1, r9
 800792a:	f7f8 fcb5 	bl	8000298 <__aeabi_dsub>
 800792e:	4632      	mov	r2, r6
 8007930:	463b      	mov	r3, r7
 8007932:	f7f8 fcb3 	bl	800029c <__adddf3>
 8007936:	ed9d 7b06 	vldr	d7, [sp, #24]
 800793a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800793e:	ed8a 7b00 	vstr	d7, [sl]
 8007942:	e770      	b.n	8007826 <__kernel_rem_pio2+0x50e>
 8007944:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007948:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800794c:	4640      	mov	r0, r8
 800794e:	4632      	mov	r2, r6
 8007950:	463b      	mov	r3, r7
 8007952:	4649      	mov	r1, r9
 8007954:	f7f8 fca2 	bl	800029c <__adddf3>
 8007958:	e9cd 0100 	strd	r0, r1, [sp]
 800795c:	4602      	mov	r2, r0
 800795e:	460b      	mov	r3, r1
 8007960:	4640      	mov	r0, r8
 8007962:	4649      	mov	r1, r9
 8007964:	f7f8 fc98 	bl	8000298 <__aeabi_dsub>
 8007968:	4632      	mov	r2, r6
 800796a:	463b      	mov	r3, r7
 800796c:	f7f8 fc96 	bl	800029c <__adddf3>
 8007970:	ed9d 7b00 	vldr	d7, [sp]
 8007974:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007978:	ed84 7b00 	vstr	d7, [r4]
 800797c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007980:	e757      	b.n	8007832 <__kernel_rem_pio2+0x51a>
 8007982:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007986:	f7f8 fc89 	bl	800029c <__adddf3>
 800798a:	3d01      	subs	r5, #1
 800798c:	e75c      	b.n	8007848 <__kernel_rem_pio2+0x530>
 800798e:	9b04      	ldr	r3, [sp, #16]
 8007990:	9a04      	ldr	r2, [sp, #16]
 8007992:	601f      	str	r7, [r3, #0]
 8007994:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007998:	605c      	str	r4, [r3, #4]
 800799a:	609d      	str	r5, [r3, #8]
 800799c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80079a0:	60d3      	str	r3, [r2, #12]
 80079a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079a6:	6110      	str	r0, [r2, #16]
 80079a8:	6153      	str	r3, [r2, #20]
 80079aa:	e727      	b.n	80077fc <__kernel_rem_pio2+0x4e4>
 80079ac:	41700000 	.word	0x41700000
 80079b0:	3e700000 	.word	0x3e700000
 80079b4:	00000000 	.word	0x00000000

080079b8 <scalbn>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	ec55 4b10 	vmov	r4, r5, d0
 80079be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80079c2:	4606      	mov	r6, r0
 80079c4:	462b      	mov	r3, r5
 80079c6:	b999      	cbnz	r1, 80079f0 <scalbn+0x38>
 80079c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80079cc:	4323      	orrs	r3, r4
 80079ce:	d03f      	beq.n	8007a50 <scalbn+0x98>
 80079d0:	4b35      	ldr	r3, [pc, #212]	; (8007aa8 <scalbn+0xf0>)
 80079d2:	4629      	mov	r1, r5
 80079d4:	ee10 0a10 	vmov	r0, s0
 80079d8:	2200      	movs	r2, #0
 80079da:	f7f8 fe15 	bl	8000608 <__aeabi_dmul>
 80079de:	4b33      	ldr	r3, [pc, #204]	; (8007aac <scalbn+0xf4>)
 80079e0:	429e      	cmp	r6, r3
 80079e2:	4604      	mov	r4, r0
 80079e4:	460d      	mov	r5, r1
 80079e6:	da10      	bge.n	8007a0a <scalbn+0x52>
 80079e8:	a327      	add	r3, pc, #156	; (adr r3, 8007a88 <scalbn+0xd0>)
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	e01f      	b.n	8007a30 <scalbn+0x78>
 80079f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80079f4:	4291      	cmp	r1, r2
 80079f6:	d10c      	bne.n	8007a12 <scalbn+0x5a>
 80079f8:	ee10 2a10 	vmov	r2, s0
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fc4c 	bl	800029c <__adddf3>
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	e022      	b.n	8007a50 <scalbn+0x98>
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007a10:	3936      	subs	r1, #54	; 0x36
 8007a12:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007a16:	4296      	cmp	r6, r2
 8007a18:	dd0d      	ble.n	8007a36 <scalbn+0x7e>
 8007a1a:	2d00      	cmp	r5, #0
 8007a1c:	a11c      	add	r1, pc, #112	; (adr r1, 8007a90 <scalbn+0xd8>)
 8007a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a22:	da02      	bge.n	8007a2a <scalbn+0x72>
 8007a24:	a11c      	add	r1, pc, #112	; (adr r1, 8007a98 <scalbn+0xe0>)
 8007a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a2a:	a319      	add	r3, pc, #100	; (adr r3, 8007a90 <scalbn+0xd8>)
 8007a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a30:	f7f8 fdea 	bl	8000608 <__aeabi_dmul>
 8007a34:	e7e6      	b.n	8007a04 <scalbn+0x4c>
 8007a36:	1872      	adds	r2, r6, r1
 8007a38:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007a3c:	428a      	cmp	r2, r1
 8007a3e:	dcec      	bgt.n	8007a1a <scalbn+0x62>
 8007a40:	2a00      	cmp	r2, #0
 8007a42:	dd08      	ble.n	8007a56 <scalbn+0x9e>
 8007a44:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a48:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a4c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007a50:	ec45 4b10 	vmov	d0, r4, r5
 8007a54:	bd70      	pop	{r4, r5, r6, pc}
 8007a56:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007a5a:	da08      	bge.n	8007a6e <scalbn+0xb6>
 8007a5c:	2d00      	cmp	r5, #0
 8007a5e:	a10a      	add	r1, pc, #40	; (adr r1, 8007a88 <scalbn+0xd0>)
 8007a60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a64:	dac0      	bge.n	80079e8 <scalbn+0x30>
 8007a66:	a10e      	add	r1, pc, #56	; (adr r1, 8007aa0 <scalbn+0xe8>)
 8007a68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a6c:	e7bc      	b.n	80079e8 <scalbn+0x30>
 8007a6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007a72:	3236      	adds	r2, #54	; 0x36
 8007a74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007a78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	4b0c      	ldr	r3, [pc, #48]	; (8007ab0 <scalbn+0xf8>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	e7d5      	b.n	8007a30 <scalbn+0x78>
 8007a84:	f3af 8000 	nop.w
 8007a88:	c2f8f359 	.word	0xc2f8f359
 8007a8c:	01a56e1f 	.word	0x01a56e1f
 8007a90:	8800759c 	.word	0x8800759c
 8007a94:	7e37e43c 	.word	0x7e37e43c
 8007a98:	8800759c 	.word	0x8800759c
 8007a9c:	fe37e43c 	.word	0xfe37e43c
 8007aa0:	c2f8f359 	.word	0xc2f8f359
 8007aa4:	81a56e1f 	.word	0x81a56e1f
 8007aa8:	43500000 	.word	0x43500000
 8007aac:	ffff3cb0 	.word	0xffff3cb0
 8007ab0:	3c900000 	.word	0x3c900000
 8007ab4:	00000000 	.word	0x00000000

08007ab8 <floor>:
 8007ab8:	ec51 0b10 	vmov	r0, r1, d0
 8007abc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007ac8:	2e13      	cmp	r6, #19
 8007aca:	ee10 5a10 	vmov	r5, s0
 8007ace:	ee10 8a10 	vmov	r8, s0
 8007ad2:	460c      	mov	r4, r1
 8007ad4:	dc31      	bgt.n	8007b3a <floor+0x82>
 8007ad6:	2e00      	cmp	r6, #0
 8007ad8:	da14      	bge.n	8007b04 <floor+0x4c>
 8007ada:	a333      	add	r3, pc, #204	; (adr r3, 8007ba8 <floor+0xf0>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 fbdc 	bl	800029c <__adddf3>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f7f9 f81e 	bl	8000b28 <__aeabi_dcmpgt>
 8007aec:	b138      	cbz	r0, 8007afe <floor+0x46>
 8007aee:	2c00      	cmp	r4, #0
 8007af0:	da53      	bge.n	8007b9a <floor+0xe2>
 8007af2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007af6:	4325      	orrs	r5, r4
 8007af8:	d052      	beq.n	8007ba0 <floor+0xe8>
 8007afa:	4c2d      	ldr	r4, [pc, #180]	; (8007bb0 <floor+0xf8>)
 8007afc:	2500      	movs	r5, #0
 8007afe:	4621      	mov	r1, r4
 8007b00:	4628      	mov	r0, r5
 8007b02:	e024      	b.n	8007b4e <floor+0x96>
 8007b04:	4f2b      	ldr	r7, [pc, #172]	; (8007bb4 <floor+0xfc>)
 8007b06:	4137      	asrs	r7, r6
 8007b08:	ea01 0307 	and.w	r3, r1, r7
 8007b0c:	4303      	orrs	r3, r0
 8007b0e:	d01e      	beq.n	8007b4e <floor+0x96>
 8007b10:	a325      	add	r3, pc, #148	; (adr r3, 8007ba8 <floor+0xf0>)
 8007b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b16:	f7f8 fbc1 	bl	800029c <__adddf3>
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f7f9 f803 	bl	8000b28 <__aeabi_dcmpgt>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	d0eb      	beq.n	8007afe <floor+0x46>
 8007b26:	2c00      	cmp	r4, #0
 8007b28:	bfbe      	ittt	lt
 8007b2a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007b2e:	4133      	asrlt	r3, r6
 8007b30:	18e4      	addlt	r4, r4, r3
 8007b32:	ea24 0407 	bic.w	r4, r4, r7
 8007b36:	2500      	movs	r5, #0
 8007b38:	e7e1      	b.n	8007afe <floor+0x46>
 8007b3a:	2e33      	cmp	r6, #51	; 0x33
 8007b3c:	dd0b      	ble.n	8007b56 <floor+0x9e>
 8007b3e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007b42:	d104      	bne.n	8007b4e <floor+0x96>
 8007b44:	ee10 2a10 	vmov	r2, s0
 8007b48:	460b      	mov	r3, r1
 8007b4a:	f7f8 fba7 	bl	800029c <__adddf3>
 8007b4e:	ec41 0b10 	vmov	d0, r0, r1
 8007b52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b56:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007b5e:	40df      	lsrs	r7, r3
 8007b60:	4238      	tst	r0, r7
 8007b62:	d0f4      	beq.n	8007b4e <floor+0x96>
 8007b64:	a310      	add	r3, pc, #64	; (adr r3, 8007ba8 <floor+0xf0>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fb97 	bl	800029c <__adddf3>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	2300      	movs	r3, #0
 8007b72:	f7f8 ffd9 	bl	8000b28 <__aeabi_dcmpgt>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	d0c1      	beq.n	8007afe <floor+0x46>
 8007b7a:	2c00      	cmp	r4, #0
 8007b7c:	da0a      	bge.n	8007b94 <floor+0xdc>
 8007b7e:	2e14      	cmp	r6, #20
 8007b80:	d101      	bne.n	8007b86 <floor+0xce>
 8007b82:	3401      	adds	r4, #1
 8007b84:	e006      	b.n	8007b94 <floor+0xdc>
 8007b86:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	40b3      	lsls	r3, r6
 8007b8e:	441d      	add	r5, r3
 8007b90:	45a8      	cmp	r8, r5
 8007b92:	d8f6      	bhi.n	8007b82 <floor+0xca>
 8007b94:	ea25 0507 	bic.w	r5, r5, r7
 8007b98:	e7b1      	b.n	8007afe <floor+0x46>
 8007b9a:	2500      	movs	r5, #0
 8007b9c:	462c      	mov	r4, r5
 8007b9e:	e7ae      	b.n	8007afe <floor+0x46>
 8007ba0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007ba4:	e7ab      	b.n	8007afe <floor+0x46>
 8007ba6:	bf00      	nop
 8007ba8:	8800759c 	.word	0x8800759c
 8007bac:	7e37e43c 	.word	0x7e37e43c
 8007bb0:	bff00000 	.word	0xbff00000
 8007bb4:	000fffff 	.word	0x000fffff

08007bb8 <_init>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr

08007bc4 <_fini>:
 8007bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bc6:	bf00      	nop
 8007bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bca:	bc08      	pop	{r3}
 8007bcc:	469e      	mov	lr, r3
 8007bce:	4770      	bx	lr
