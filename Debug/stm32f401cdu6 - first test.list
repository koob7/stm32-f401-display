
stm32f401cdu6 - first test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007de0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134e0  08007f80  08007f80  00017f80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b460  0801b460  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801b460  0801b460  0002b460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b468  0801b468  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b468  0801b468  0002b468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b46c  0801b46c  0002b46c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0801b470  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001d8  0801b648  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0801b648  00030354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005e60  00000000  00000000  0003024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015b1  00000000  00000000  000360ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000618  00000000  00000000  00037660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000470  00000000  00000000  00037c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000169c5  00000000  00000000  000380e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007b80  00000000  00000000  0004eaad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086310  00000000  00000000  0005662d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002aac  00000000  00000000  000dc940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000df3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007f68 	.word	0x08007f68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08007f68 	.word	0x08007f68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <tft_write_bus>:
GPIO_TypeDef* PORT_NAME_ARR[]={D0_PORT,D1_PORT,D2_PORT,D3_PORT,D4_PORT,D5_PORT,D6_PORT,D7_PORT,D8_PORT,D9_PORT,D10_PORT,D11_PORT,D12_PORT,D13_PORT,D14_PORT,D15_PORT};
uint16_t      PIN_NAME_ARR[]={D0_PIN,D1_PIN,D2_PIN,D3_PIN,D4_PIN,D5_PIN,D6_PIN,D7_PIN,D8_PIN,D9_PIN,D10_PIN,D11_PIN,D12_PIN,D13_PIN,D14_PIN,D15_PIN};


void tft_write_bus(uint8_t high_byte,uint8_t low_byte)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	71fb      	strb	r3, [r7, #7]
 8000f60:	4613      	mov	r3, r2
 8000f62:	71bb      	strb	r3, [r7, #6]
    else
    {
      pin_low(PORT_NAME_ARR[i],PIN_NAME_ARR[i]);
    }
  }*/
	PORTA->ODR = (PORTA->ODR & 0xffffff00) | low_byte;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <tft_write_bus+0x54>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000f6c:	79bb      	ldrb	r3, [r7, #6]
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <tft_write_bus+0x54>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	614b      	str	r3, [r1, #20]
	PORTB->ODR = (PORTB->ODR & 0xffffff00) | high_byte;
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <tft_write_bus+0x58>)
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	490b      	ldr	r1, [pc, #44]	; (8000fac <tft_write_bus+0x58>)
 8000f80:	4313      	orrs	r3, r2
 8000f82:	614b      	str	r3, [r1, #20]
	asm("nop");
 8000f84:	bf00      	nop
	pin_low(WR_PORT,WR_PIN);
 8000f86:	2200      	movs	r2, #0
 8000f88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <tft_write_bus+0x58>)
 8000f8e:	f002 fc93 	bl	80038b8 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 8000f92:	2201      	movs	r2, #1
 8000f94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <tft_write_bus+0x58>)
 8000f9a:	f002 fc8d 	bl	80038b8 <HAL_GPIO_WritePin>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40020000 	.word	0x40020000
 8000fac:	40020400 	.word	0x40020400

08000fb0 <Lcd_Write_Data>:



void Lcd_Write_Data(uint16_t data)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
  pin_high(RS_PORT,RS_PIN);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc0:	4808      	ldr	r0, [pc, #32]	; (8000fe4 <Lcd_Write_Data+0x34>)
 8000fc2:	f002 fc79 	bl	80038b8 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000fc6:	88fb      	ldrh	r3, [r7, #6]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	88fa      	ldrh	r2, [r7, #6]
 8000fd0:	b2d2      	uxtb	r2, r2
 8000fd2:	4611      	mov	r1, r2
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ffbd 	bl	8000f54 <tft_write_bus>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40020000 	.word	0x40020000

08000fe8 <Lcd_Write_Cmd>:

void Lcd_Write_Cmd(uint16_t data)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	80fb      	strh	r3, [r7, #6]
  pin_low(RS_PORT,RS_PIN);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff8:	4808      	ldr	r0, [pc, #32]	; (800101c <Lcd_Write_Cmd+0x34>)
 8000ffa:	f002 fc5d 	bl	80038b8 <HAL_GPIO_WritePin>
  tft_write_bus(data>>8,data&0x00ff);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	0a1b      	lsrs	r3, r3, #8
 8001002:	b29b      	uxth	r3, r3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	88fa      	ldrh	r2, [r7, #6]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ffa1 	bl	8000f54 <tft_write_bus>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40020000 	.word	0x40020000

08001020 <Lcd_SetArea>:


void Lcd_SetArea(uint16_t sx, uint16_t ex, uint16_t sy, uint16_t ey)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4604      	mov	r4, r0
 8001028:	4608      	mov	r0, r1
 800102a:	4611      	mov	r1, r2
 800102c:	461a      	mov	r2, r3
 800102e:	4623      	mov	r3, r4
 8001030:	80fb      	strh	r3, [r7, #6]
 8001032:	4603      	mov	r3, r0
 8001034:	80bb      	strh	r3, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
 800103a:	4613      	mov	r3, r2
 800103c:	803b      	strh	r3, [r7, #0]
Lcd_Write_Cmd(SSD1963_SET_COLUMN_ADDRESS);	
 800103e:	202a      	movs	r0, #42	; 0x2a
 8001040:	f7ff ffd2 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data((sx >> 8) & 0xFF);
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	0a1b      	lsrs	r3, r3, #8
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ffb0 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((sx >> 0) & 0xFF);
 8001050:	88fb      	ldrh	r3, [r7, #6]
 8001052:	b2db      	uxtb	r3, r3
 8001054:	b29b      	uxth	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffaa 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 8) & 0xFF);
 800105c:	88bb      	ldrh	r3, [r7, #4]
 800105e:	0a1b      	lsrs	r3, r3, #8
 8001060:	b29b      	uxth	r3, r3
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff ffa4 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ex >> 0) & 0xFF);
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	b29b      	uxth	r3, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff9e 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(SSD1963_SET_PAGE_ADDRESS);	
 8001074:	202b      	movs	r0, #43	; 0x2b
 8001076:	f7ff ffb7 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data((sy >> 8) & 0xFF);
 800107a:	887b      	ldrh	r3, [r7, #2]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	b29b      	uxth	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff95 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((sy >> 0) & 0xFF);
 8001086:	887b      	ldrh	r3, [r7, #2]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff ff8f 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 8) & 0xFF);
 8001092:	883b      	ldrh	r3, [r7, #0]
 8001094:	0a1b      	lsrs	r3, r3, #8
 8001096:	b29b      	uxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff89 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data((ey >> 0) & 0xFF);
 800109e:	883b      	ldrh	r3, [r7, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff ff83 	bl	8000fb0 <Lcd_Write_Data>
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}
	...

080010b4 <Init_SSD1963>:
}



void Init_SSD1963(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0

	pin_high(CS_PORT,CS_PIN);
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010be:	4875      	ldr	r0, [pc, #468]	; (8001294 <Init_SSD1963+0x1e0>)
 80010c0:	f002 fbfa 	bl	80038b8 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 80010c4:	2201      	movs	r2, #1
 80010c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010ca:	4873      	ldr	r0, [pc, #460]	; (8001298 <Init_SSD1963+0x1e4>)
 80010cc:	f002 fbf4 	bl	80038b8 <HAL_GPIO_WritePin>
	pin_high(WR_PORT,WR_PIN);
 80010d0:	2201      	movs	r2, #1
 80010d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d6:	4870      	ldr	r0, [pc, #448]	; (8001298 <Init_SSD1963+0x1e4>)
 80010d8:	f002 fbee 	bl	80038b8 <HAL_GPIO_WritePin>
	pin_low(REST_PORT,REST_PIN);
 80010dc:	2200      	movs	r2, #0
 80010de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e2:	486c      	ldr	r0, [pc, #432]	; (8001294 <Init_SSD1963+0x1e0>)
 80010e4:	f002 fbe8 	bl	80038b8 <HAL_GPIO_WritePin>

	HAL_Delay(20);
 80010e8:	2014      	movs	r0, #20
 80010ea:	f002 f957 	bl	800339c <HAL_Delay>
	pin_high(REST_PORT,REST_PIN);
 80010ee:	2201      	movs	r2, #1
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	4867      	ldr	r0, [pc, #412]	; (8001294 <Init_SSD1963+0x1e0>)
 80010f6:	f002 fbdf 	bl	80038b8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80010fa:	2014      	movs	r0, #20
 80010fc:	f002 f94e 	bl	800339c <HAL_Delay>
	pin_low(CS_PORT,CS_PIN);
 8001100:	2200      	movs	r2, #0
 8001102:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001106:	4863      	ldr	r0, [pc, #396]	; (8001294 <Init_SSD1963+0x1e0>)
 8001108:	f002 fbd6 	bl	80038b8 <HAL_GPIO_WritePin>


Lcd_Write_Cmd(0xE2);		//PLL multiplier, set PLL clock to 120M
 800110c:	20e2      	movs	r0, #226	; 0xe2
 800110e:	f7ff ff6b 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x23);	    //N=0x36 for 6.5M, 0x23 for 10M crystal
 8001112:	2023      	movs	r0, #35	; 0x23
 8001114:	f7ff ff4c 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x02);
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff ff49 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x04);
 800111e:	2004      	movs	r0, #4
 8001120:	f7ff ff46 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Cmd(0xE0);		// PLL enable
 8001124:	20e0      	movs	r0, #224	; 0xe0
 8001126:	f7ff ff5f 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);
 800112a:	2001      	movs	r0, #1
 800112c:	f7ff ff40 	bl	8000fb0 <Lcd_Write_Data>
HAL_Delay(10);
 8001130:	200a      	movs	r0, #10
 8001132:	f002 f933 	bl	800339c <HAL_Delay>
Lcd_Write_Cmd(0xE0);
 8001136:	20e0      	movs	r0, #224	; 0xe0
 8001138:	f7ff ff56 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 800113c:	2003      	movs	r0, #3
 800113e:	f7ff ff37 	bl	8000fb0 <Lcd_Write_Data>
HAL_Delay(10);
 8001142:	200a      	movs	r0, #10
 8001144:	f002 f92a 	bl	800339c <HAL_Delay>
Lcd_Write_Cmd(0x01);		// software reset
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff ff4d 	bl	8000fe8 <Lcd_Write_Cmd>
HAL_Delay(100);
 800114e:	2064      	movs	r0, #100	; 0x64
 8001150:	f002 f924 	bl	800339c <HAL_Delay>
Lcd_Write_Cmd(0xE6);		//PLL setting for PCLK, depends on resolution
 8001154:	20e6      	movs	r0, #230	; 0xe6
 8001156:	f7ff ff47 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x04);
 800115a:	2004      	movs	r0, #4
 800115c:	f7ff ff28 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x93);
 8001160:	2093      	movs	r0, #147	; 0x93
 8001162:	f7ff ff25 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xE0);
 8001166:	20e0      	movs	r0, #224	; 0xe0
 8001168:	f7ff ff22 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB0);		//LCD SPECIFICATION
 800116c:	20b0      	movs	r0, #176	; 0xb0
 800116e:	f7ff ff3b 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x00);		// 0x24
 8001172:	2000      	movs	r0, #0
 8001174:	f7ff ff1c 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001178:	2000      	movs	r0, #0
 800117a:	f7ff ff19 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x03);		//Set HDP	799
 800117e:	2003      	movs	r0, #3
 8001180:	f7ff ff16 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x1F);
 8001184:	201f      	movs	r0, #31
 8001186:	f7ff ff13 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//Set VDP	479
 800118a:	2001      	movs	r0, #1
 800118c:	f7ff ff10 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xDF);
 8001190:	20df      	movs	r0, #223	; 0xdf
 8001192:	f7ff ff0d 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001196:	2000      	movs	r0, #0
 8001198:	f7ff ff0a 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB4);		//HSYNC
 800119c:	20b4      	movs	r0, #180	; 0xb4
 800119e:	f7ff ff23 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);		//Set HT	928
 80011a2:	2003      	movs	r0, #3
 80011a4:	f7ff ff04 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xA0);
 80011a8:	20a0      	movs	r0, #160	; 0xa0
 80011aa:	f7ff ff01 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set HPS	46
 80011ae:	2000      	movs	r0, #0
 80011b0:	f7ff fefe 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x2E);
 80011b4:	202e      	movs	r0, #46	; 0x2e
 80011b6:	f7ff fefb 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x30);		//Set HPW	48
 80011ba:	2030      	movs	r0, #48	; 0x30
 80011bc:	f7ff fef8 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set LPS	15
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fef5 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x0F);
 80011c6:	200f      	movs	r0, #15
 80011c8:	f7ff fef2 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f7ff feef 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB6);		//VSYNC
 80011d2:	20b6      	movs	r0, #182	; 0xb6
 80011d4:	f7ff ff08 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x02);		//Set VT	525
 80011d8:	2002      	movs	r0, #2
 80011da:	f7ff fee9 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x0D);
 80011de:	200d      	movs	r0, #13
 80011e0:	f7ff fee6 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set VPS	16
 80011e4:	2000      	movs	r0, #0
 80011e6:	f7ff fee3 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x10);
 80011ea:	2010      	movs	r0, #16
 80011ec:	f7ff fee0 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x10);		//Set VPW	16
 80011f0:	2010      	movs	r0, #16
 80011f2:	f7ff fedd 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);		//Set FPS	8
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff feda 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x08);
 80011fc:	2008      	movs	r0, #8
 80011fe:	f7ff fed7 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xBA);
 8001202:	20ba      	movs	r0, #186	; 0xba
 8001204:	f7ff fef0 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x05);		//GPIO[3:0] out 1
 8001208:	2005      	movs	r0, #5
 800120a:	f7ff fed1 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xB8);
 800120e:	20b8      	movs	r0, #184	; 0xb8
 8001210:	f7ff feea 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x07);	    //GPIO3=input, GPIO[2:0]=output
 8001214:	2007      	movs	r0, #7
 8001216:	f7ff fecb 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x01);		//GPIO0 normal
 800121a:	2001      	movs	r0, #1
 800121c:	f7ff fec8 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xba);		//rotation
 8001220:	20ba      	movs	r0, #186	; 0xba
 8001222:	f7ff fee1 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x01);		// -- Set to 0x22 to rotate 180 degrees 0x21
 8001226:	2001      	movs	r0, #1
 8001228:	f7ff fec2 	bl	8000fb0 <Lcd_Write_Data>


Lcd_Write_Cmd(0xF0);		//pixel data interface
 800122c:	20f0      	movs	r0, #240	; 0xf0
 800122e:	f7ff fedb 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x03);
 8001232:	2003      	movs	r0, #3
 8001234:	f7ff febc 	bl	8000fb0 <Lcd_Write_Data>


HAL_Delay(10);
 8001238:	200a      	movs	r0, #10
 800123a:	f002 f8af 	bl	800339c <HAL_Delay>

Lcd_SetArea(0, 0, 799, 479);
 800123e:	f240 13df 	movw	r3, #479	; 0x1df
 8001242:	f240 321f 	movw	r2, #799	; 0x31f
 8001246:	2100      	movs	r1, #0
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff fee9 	bl	8001020 <Lcd_SetArea>
Lcd_Write_Cmd(0x29);		//display on
 800124e:	2029      	movs	r0, #41	; 0x29
 8001250:	f7ff feca 	bl	8000fe8 <Lcd_Write_Cmd>

Lcd_Write_Cmd(0xBE);		//set PWM for B/L
 8001254:	20be      	movs	r0, #190	; 0xbe
 8001256:	f7ff fec7 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x06);
 800125a:	2006      	movs	r0, #6
 800125c:	f7ff fea8 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 8001260:	20f0      	movs	r0, #240	; 0xf0
 8001262:	f7ff fea5 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x01);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fea2 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0xF0);
 800126c:	20f0      	movs	r0, #240	; 0xf0
 800126e:	f7ff fe9f 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001272:	2000      	movs	r0, #0
 8001274:	f7ff fe9c 	bl	8000fb0 <Lcd_Write_Data>
Lcd_Write_Data(0x00);
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fe99 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0xD0);
 800127e:	20d0      	movs	r0, #208	; 0xd0
 8001280:	f7ff feb2 	bl	8000fe8 <Lcd_Write_Cmd>
Lcd_Write_Data(0x0D);
 8001284:	200d      	movs	r0, #13
 8001286:	f7ff fe93 	bl	8000fb0 <Lcd_Write_Data>

Lcd_Write_Cmd(0x2C);
 800128a:	202c      	movs	r0, #44	; 0x2c
 800128c:	f7ff feac 	bl	8000fe8 <Lcd_Write_Cmd>

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400

0800129c <TFT_Set_X>:



void TFT_Set_X(uint16_t start_x,uint16_t end_x)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	80fb      	strh	r3, [r7, #6]
 80012a8:	4613      	mov	r3, r2
 80012aa:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002A);
 80012ac:	202a      	movs	r0, #42	; 0x2a
 80012ae:	f7ff fe9b 	bl	8000fe8 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_x>>8);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff fe79 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(start_x&0x00ff);
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fe73 	bl	8000fb0 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_x>>8);
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe6d 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(end_x&0x00ff);
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe67 	bl	8000fb0 <Lcd_Write_Data>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <TFT_Set_Y>:


void TFT_Set_Y(uint16_t start_y,uint16_t end_y)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	460a      	mov	r2, r1
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	4613      	mov	r3, r2
 80012f8:	80bb      	strh	r3, [r7, #4]
	Lcd_Write_Cmd(0x002B);
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f7ff fe74 	bl	8000fe8 <Lcd_Write_Cmd>
	Lcd_Write_Data(start_y>>8);
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	b29b      	uxth	r3, r3
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fe52 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(start_y&0x00ff);
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	b29b      	uxth	r3, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff fe4c 	bl	8000fb0 <Lcd_Write_Data>
	
	Lcd_Write_Data(end_y>>8);
 8001318:	88bb      	ldrh	r3, [r7, #4]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fe46 	bl	8000fb0 <Lcd_Write_Data>
	Lcd_Write_Data(end_y&0x00ff);
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	b2db      	uxtb	r3, r3
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fe40 	bl	8000fb0 <Lcd_Write_Data>
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <TFT_Set_Work_Area>:
}



void TFT_Set_Work_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4604      	mov	r4, r0
 8001340:	4608      	mov	r0, r1
 8001342:	4611      	mov	r1, r2
 8001344:	461a      	mov	r2, r3
 8001346:	4623      	mov	r3, r4
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	4603      	mov	r3, r0
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	807b      	strh	r3, [r7, #2]
 8001352:	4613      	mov	r3, r2
 8001354:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 8001356:	88fa      	ldrh	r2, [r7, #6]
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	4413      	add	r3, r2
 800135c:	b29b      	uxth	r3, r3
 800135e:	3b01      	subs	r3, #1
 8001360:	b29a      	uxth	r2, r3
 8001362:	88fb      	ldrh	r3, [r7, #6]
 8001364:	4611      	mov	r1, r2
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff98 	bl	800129c <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 800136c:	88ba      	ldrh	r2, [r7, #4]
 800136e:	883b      	ldrh	r3, [r7, #0]
 8001370:	4413      	add	r3, r2
 8001372:	b29b      	uxth	r3, r3
 8001374:	3b01      	subs	r3, #1
 8001376:	b29a      	uxth	r2, r3
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ffb4 	bl	80012ea <TFT_Set_Y>
	Lcd_Write_Cmd(0x2C);
 8001382:	202c      	movs	r0, #44	; 0x2c
 8001384:	f7ff fe30 	bl	8000fe8 <Lcd_Write_Cmd>
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}

08001390 <TFT_Clear_Screen>:




void TFT_Clear_Screen(uint16_t color)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
	uint32_t i=0;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(0,0,800,480);
 800139e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80013a2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80013a6:	2100      	movs	r1, #0
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffc5 	bl	8001338 <TFT_Set_Work_Area>
	pin_high(RS_PORT,RS_PIN);
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <TFT_Clear_Screen+0x5c>)
 80013b6:	f002 fa7f 	bl	80038b8 <HAL_GPIO_WritePin>
	for(i=0; i < 384000; i++)
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	e00c      	b.n	80013da <TFT_Clear_Screen+0x4a>
	{
		  tft_write_bus(color>>8,color&0x00ff);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	88fa      	ldrh	r2, [r7, #6]
 80013ca:	b2d2      	uxtb	r2, r2
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fdc0 	bl	8000f54 <tft_write_bus>
	for(i=0; i < 384000; i++)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <TFT_Clear_Screen+0x60>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d9ee      	bls.n	80013c0 <TFT_Clear_Screen+0x30>
	}
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40020000 	.word	0x40020000
 80013f0:	0005dbff 	.word	0x0005dbff

080013f4 <TFT_Draw_Line>:
	}
}


void TFT_Draw_Line (uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2, uint8_t size,uint16_t color)
{
 80013f4:	b590      	push	{r4, r7, lr}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af02      	add	r7, sp, #8
 80013fa:	4604      	mov	r4, r0
 80013fc:	4608      	mov	r0, r1
 80013fe:	4611      	mov	r1, r2
 8001400:	461a      	mov	r2, r3
 8001402:	4623      	mov	r3, r4
 8001404:	80fb      	strh	r3, [r7, #6]
 8001406:	4603      	mov	r3, r0
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]
 800140e:	4613      	mov	r3, r2
 8001410:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b00      	cmp	r3, #0
 800141a:	bfb8      	it	lt
 800141c:	425b      	neglt	r3, r3
 800141e:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 8001420:	883a      	ldrh	r2, [r7, #0]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	bfb8      	it	lt
 800142a:	425b      	neglt	r3, r3
 800142c:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 800142e:	88fa      	ldrh	r2, [r7, #6]
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	429a      	cmp	r2, r3
 8001434:	d201      	bcs.n	800143a <TFT_Draw_Line+0x46>
 8001436:	2301      	movs	r3, #1
 8001438:	e001      	b.n	800143e <TFT_Draw_Line+0x4a>
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001440:	88ba      	ldrh	r2, [r7, #4]
 8001442:	883b      	ldrh	r3, [r7, #0]
 8001444:	429a      	cmp	r2, r3
 8001446:	d201      	bcs.n	800144c <TFT_Draw_Line+0x58>
 8001448:	2301      	movs	r3, #1
 800144a:	e001      	b.n	8001450 <TFT_Draw_Line+0x5c>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
	
	for (;;)
	{
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 800145e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001462:	b29a      	uxth	r2, r3
 8001464:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001468:	b29c      	uxth	r4, r3
 800146a:	88b9      	ldrh	r1, [r7, #4]
 800146c:	88f8      	ldrh	r0, [r7, #6]
 800146e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4623      	mov	r3, r4
 8001474:	f000 f9c5 	bl	8001802 <TFT_Draw_Fill_Rectangle>
		
		if(x1 == x2 && y1 == y2)
 8001478:	88fa      	ldrh	r2, [r7, #6]
 800147a:	887b      	ldrh	r3, [r7, #2]
 800147c:	429a      	cmp	r2, r3
 800147e:	d103      	bne.n	8001488 <TFT_Draw_Line+0x94>
 8001480:	88ba      	ldrh	r2, [r7, #4]
 8001482:	883b      	ldrh	r3, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d01e      	beq.n	80014c6 <TFT_Draw_Line+0xd2>
		break;
		
		error2 = error * 2;
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	60bb      	str	r3, [r7, #8]
		
		if(error2 > -deltaY)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	425b      	negs	r3, r3
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	429a      	cmp	r2, r3
 8001496:	dd08      	ble.n	80014aa <TFT_Draw_Line+0xb6>
		{
			error -= deltaY;
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	1ad3      	subs	r3, r2, r3
 800149e:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	4413      	add	r3, r2
 80014a8:	80fb      	strh	r3, [r7, #6]
		}
		
		if(error2 < deltaX)
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	dad5      	bge.n	800145e <TFT_Draw_Line+0x6a>
		{
			error += deltaX;
 80014b2:	69fa      	ldr	r2, [r7, #28]
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	4413      	add	r3, r2
 80014b8:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	b29a      	uxth	r2, r3
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	80bb      	strh	r3, [r7, #4]
		TFT_Draw_Fill_Rectangle(x1,y1,size,size,color);
 80014c4:	e7cb      	b.n	800145e <TFT_Draw_Line+0x6a>
		break;
 80014c6:	bf00      	nop
		}
	}
}
 80014c8:	bf00      	nop
 80014ca:	3724      	adds	r7, #36	; 0x24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd90      	pop	{r4, r7, pc}

080014d0 <TFT_Draw_HLine>:


void TFT_Draw_HLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4604      	mov	r4, r0
 80014d8:	4608      	mov	r0, r1
 80014da:	4611      	mov	r1, r2
 80014dc:	461a      	mov	r2, r3
 80014de:	4623      	mov	r3, r4
 80014e0:	80fb      	strh	r3, [r7, #6]
 80014e2:	4603      	mov	r3, r0
 80014e4:	80bb      	strh	r3, [r7, #4]
 80014e6:	460b      	mov	r3, r1
 80014e8:	807b      	strh	r3, [r7, #2]
 80014ea:	4613      	mov	r3, r2
 80014ec:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,length,size);
 80014f2:	883b      	ldrh	r3, [r7, #0]
 80014f4:	887a      	ldrh	r2, [r7, #2]
 80014f6:	88b9      	ldrh	r1, [r7, #4]
 80014f8:	88f8      	ldrh	r0, [r7, #6]
 80014fa:	f7ff ff1d 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80014fe:	2300      	movs	r3, #0
 8001500:	81fb      	strh	r3, [r7, #14]
 8001502:	e006      	b.n	8001512 <TFT_Draw_HLine+0x42>
	Lcd_Write_Data(color);
 8001504:	8c3b      	ldrh	r3, [r7, #32]
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fd52 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 800150c:	89fb      	ldrh	r3, [r7, #14]
 800150e:	3301      	adds	r3, #1
 8001510:	81fb      	strh	r3, [r7, #14]
 8001512:	89fa      	ldrh	r2, [r7, #14]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	8839      	ldrh	r1, [r7, #0]
 8001518:	fb01 f303 	mul.w	r3, r1, r3
 800151c:	429a      	cmp	r2, r3
 800151e:	dbf1      	blt.n	8001504 <TFT_Draw_HLine+0x34>
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	bd90      	pop	{r4, r7, pc}

0800152a <TFT_Set_Read_Area>:

void TFT_Set_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width)
{
 800152a:	b590      	push	{r4, r7, lr}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	4604      	mov	r4, r0
 8001532:	4608      	mov	r0, r1
 8001534:	4611      	mov	r1, r2
 8001536:	461a      	mov	r2, r3
 8001538:	4623      	mov	r3, r4
 800153a:	80fb      	strh	r3, [r7, #6]
 800153c:	4603      	mov	r3, r0
 800153e:	80bb      	strh	r3, [r7, #4]
 8001540:	460b      	mov	r3, r1
 8001542:	807b      	strh	r3, [r7, #2]
 8001544:	4613      	mov	r3, r2
 8001546:	803b      	strh	r3, [r7, #0]
	TFT_Set_X(x, x+length-1);
 8001548:	88fa      	ldrh	r2, [r7, #6]
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
 8001550:	3b01      	subs	r3, #1
 8001552:	b29a      	uxth	r2, r3
 8001554:	88fb      	ldrh	r3, [r7, #6]
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fe9f 	bl	800129c <TFT_Set_X>
	TFT_Set_Y(y, y+width-1);
 800155e:	88ba      	ldrh	r2, [r7, #4]
 8001560:	883b      	ldrh	r3, [r7, #0]
 8001562:	4413      	add	r3, r2
 8001564:	b29b      	uxth	r3, r3
 8001566:	3b01      	subs	r3, #1
 8001568:	b29a      	uxth	r2, r3
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	4611      	mov	r1, r2
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff febb 	bl	80012ea <TFT_Set_Y>
	Lcd_Write_Cmd(0x2E);
 8001574:	202e      	movs	r0, #46	; 0x2e
 8001576:	f7ff fd37 	bl	8000fe8 <Lcd_Write_Cmd>
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bd90      	pop	{r4, r7, pc}
	...

08001584 <TFT_Draw_Alert>:

void TFT_Draw_Alert (uint16_t length, uint16_t width, char *text,  uint16_t *save, const GFXfont *p_font)
{
 8001584:	b590      	push	{r4, r7, lr}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af02      	add	r7, sp, #8
 800158a:	60ba      	str	r2, [r7, #8]
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4603      	mov	r3, r0
 8001590:	81fb      	strh	r3, [r7, #14]
 8001592:	460b      	mov	r3, r1
 8001594:	81bb      	strh	r3, [r7, #12]

	uint32_t i=0;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
	lcd_Read_Area(TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, width, save);
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	085b      	lsrs	r3, r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80015a4:	b298      	uxth	r0, r3
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	085b      	lsrs	r3, r3, #1
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80015b0:	b299      	uxth	r1, r3
 80015b2:	89bc      	ldrh	r4, [r7, #12]
 80015b4:	89fa      	ldrh	r2, [r7, #14]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4623      	mov	r3, r4
 80015bc:	f000 f876 	bl	80016ac <lcd_Read_Area>
    TFT_Draw_Fill_Round_Rect (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, width, 20,  0xd699);
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	085b      	lsrs	r3, r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80015ca:	b298      	uxth	r0, r3
 80015cc:	89bb      	ldrh	r3, [r7, #12]
 80015ce:	085b      	lsrs	r3, r3, #1
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80015d6:	b299      	uxth	r1, r3
 80015d8:	89bb      	ldrh	r3, [r7, #12]
 80015da:	89fa      	ldrh	r2, [r7, #14]
 80015dc:	f24d 6499 	movw	r4, #54937	; 0xd699
 80015e0:	9401      	str	r4, [sp, #4]
 80015e2:	2414      	movs	r4, #20
 80015e4:	9400      	str	r4, [sp, #0]
 80015e6:	f000 fb07 	bl	8001bf8 <TFT_Draw_Fill_Round_Rect>
    TFT_Draw_Fill_Round_Rect (TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, 60, 20,  0xe266);
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	085b      	lsrs	r3, r3, #1
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 80015f4:	b298      	uxth	r0, r3
 80015f6:	89bb      	ldrh	r3, [r7, #12]
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8001600:	b299      	uxth	r1, r3
 8001602:	89fa      	ldrh	r2, [r7, #14]
 8001604:	f24e 2366 	movw	r3, #57958	; 0xe266
 8001608:	9301      	str	r3, [sp, #4]
 800160a:	2314      	movs	r3, #20
 800160c:	9300      	str	r3, [sp, #0]
 800160e:	233c      	movs	r3, #60	; 0x3c
 8001610:	f000 faf2 	bl	8001bf8 <TFT_Draw_Fill_Round_Rect>
    LCD_Font(TFT_WIDTH/2-30, TFT_HEIGHT/2-(width/2)+40, "ALERT", p_font, 1, BLACK);
 8001614:	89bb      	ldrh	r3, [r7, #12]
 8001616:	085b      	lsrs	r3, r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	f5c3 738c 	rsb	r3, r3, #280	; 0x118
 800161e:	b299      	uxth	r1, r3
 8001620:	2300      	movs	r3, #0
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2301      	movs	r3, #1
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <TFT_Draw_Alert+0xb8>)
 800162c:	f44f 70b9 	mov.w	r0, #370	; 0x172
 8001630:	f000 fbfc 	bl	8001e2c <LCD_Font>

}
 8001634:	bf00      	nop
 8001636:	371c      	adds	r7, #28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd90      	pop	{r4, r7, pc}
 800163c:	08007f80 	.word	0x08007f80

08001640 <TFT_Restore_Alert>:

void TFT_Restore_Alert (uint16_t length, uint16_t width, uint16_t *save)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	603a      	str	r2, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
 800164c:	460b      	mov	r3, r1
 800164e:	80bb      	strh	r3, [r7, #4]
	uint32_t i=0;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
	TFT_Set_Work_Area(TFT_WIDTH/2-(length/2), TFT_HEIGHT/2-(width/2), length, width);
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	085b      	lsrs	r3, r3, #1
 8001658:	b29b      	uxth	r3, r3
 800165a:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800165e:	b298      	uxth	r0, r3
 8001660:	88bb      	ldrh	r3, [r7, #4]
 8001662:	085b      	lsrs	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800166a:	b299      	uxth	r1, r3
 800166c:	88bb      	ldrh	r3, [r7, #4]
 800166e:	88fa      	ldrh	r2, [r7, #6]
 8001670:	f7ff fe62 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	e00a      	b.n	8001690 <TFT_Restore_Alert+0x50>
	{
		Lcd_Write_Data(save[i]);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fc93 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3301      	adds	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	88ba      	ldrh	r2, [r7, #4]
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	4293      	cmp	r3, r2
 800169e:	d3ec      	bcc.n	800167a <TFT_Restore_Alert+0x3a>
	}
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <lcd_Read_Area>:

void lcd_Read_Area(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t *save)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	4604      	mov	r4, r0
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	80fb      	strh	r3, [r7, #6]
 80016be:	4603      	mov	r3, r0
 80016c0:	80bb      	strh	r3, [r7, #4]
 80016c2:	460b      	mov	r3, r1
 80016c4:	807b      	strh	r3, [r7, #2]
 80016c6:	4613      	mov	r3, r2
 80016c8:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
	TFT_Set_Read_Area(x, y, length, width);
 80016ce:	883b      	ldrh	r3, [r7, #0]
 80016d0:	887a      	ldrh	r2, [r7, #2]
 80016d2:	88b9      	ldrh	r1, [r7, #4]
 80016d4:	88f8      	ldrh	r0, [r7, #6]
 80016d6:	f7ff ff28 	bl	800152a <TFT_Set_Read_Area>
	PORTA->MODER = (PORTA->MODER & 0xffff0000);
 80016da:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <lcd_Read_Area+0xa8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <lcd_Read_Area+0xa8>)
 80016e0:	0c1b      	lsrs	r3, r3, #16
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	6013      	str	r3, [r2, #0]
	PORTB->MODER = (PORTB->MODER & 0xffff0000);
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <lcd_Read_Area+0xac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a1b      	ldr	r2, [pc, #108]	; (8001758 <lcd_Read_Area+0xac>)
 80016ec:	0c1b      	lsrs	r3, r3, #16
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	6013      	str	r3, [r2, #0]
	pin_high(RS_PORT,RS_PIN);
 80016f2:	2201      	movs	r2, #1
 80016f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f8:	4816      	ldr	r0, [pc, #88]	; (8001754 <lcd_Read_Area+0xa8>)
 80016fa:	f002 f8dd 	bl	80038b8 <HAL_GPIO_WritePin>

	for(i=0; i < length*width; i++)
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e00a      	b.n	800171a <lcd_Read_Area+0x6e>
	{
		save[i] = lcd_Read_bus();
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	6a3a      	ldr	r2, [r7, #32]
 800170a:	18d4      	adds	r4, r2, r3
 800170c:	f000 f826 	bl	800175c <lcd_Read_bus>
 8001710:	4603      	mov	r3, r0
 8001712:	8023      	strh	r3, [r4, #0]
	for(i=0; i < length*width; i++)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	3301      	adds	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	883a      	ldrh	r2, [r7, #0]
 800171e:	fb02 f303 	mul.w	r3, r2, r3
 8001722:	461a      	mov	r2, r3
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4293      	cmp	r3, r2
 8001728:	d3ec      	bcc.n	8001704 <lcd_Read_Area+0x58>
	}

	PORTA->MODER = (PORTA->MODER | 0x00005555);
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <lcd_Read_Area+0xa8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a09      	ldr	r2, [pc, #36]	; (8001754 <lcd_Read_Area+0xa8>)
 8001730:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001734:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001738:	6013      	str	r3, [r2, #0]
	PORTB->MODER = (PORTB->MODER | 0x00005555);
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <lcd_Read_Area+0xac>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a06      	ldr	r2, [pc, #24]	; (8001758 <lcd_Read_Area+0xac>)
 8001740:	f443 43aa 	orr.w	r3, r3, #21760	; 0x5500
 8001744:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001748:	6013      	str	r3, [r2, #0]
}
 800174a:	bf00      	nop
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	bd90      	pop	{r4, r7, pc}
 8001752:	bf00      	nop
 8001754:	40020000 	.word	0x40020000
 8001758:	40020400 	.word	0x40020400

0800175c <lcd_Read_bus>:

uint16_t lcd_Read_bus()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0

	pin_low(RD_PORT,RD_PIN);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <lcd_Read_bus+0x44>)
 800176a:	f002 f8a5 	bl	80038b8 <HAL_GPIO_WritePin>
	pin_high(RD_PORT,RD_PIN);
 800176e:	2201      	movs	r2, #1
 8001770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <lcd_Read_bus+0x44>)
 8001776:	f002 f89f 	bl	80038b8 <HAL_GPIO_WritePin>
	uint8_t high_byte =PORTB->IDR ;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <lcd_Read_bus+0x44>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	71fb      	strb	r3, [r7, #7]
	uint8_t low_byte =PORTA->IDR ;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <lcd_Read_bus+0x48>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	71bb      	strb	r3, [r7, #6]


/*	uint8_t low_byte =0 ;
	uint8_t high_byte =0 ;*/

	return ((high_byte<<8)|low_byte);
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b21a      	sxth	r2, r3
 800178c:	79bb      	ldrb	r3, [r7, #6]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	b29b      	uxth	r3, r3
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40020400 	.word	0x40020400
 80017a4:	40020000 	.word	0x40020000

080017a8 <TFT_Draw_VLine>:



void TFT_Draw_VLine(uint16_t x, uint16_t y, uint16_t length, uint16_t size, uint16_t color)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4623      	mov	r3, r4
 80017b8:	80fb      	strh	r3, [r7, #6]
 80017ba:	4603      	mov	r3, r0
 80017bc:	80bb      	strh	r3, [r7, #4]
 80017be:	460b      	mov	r3, r1
 80017c0:	807b      	strh	r3, [r7, #2]
 80017c2:	4613      	mov	r3, r2
 80017c4:	803b      	strh	r3, [r7, #0]
	uint16_t i=0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	81fb      	strh	r3, [r7, #14]
	
	TFT_Set_Work_Area(x,y,size,length);
 80017ca:	887b      	ldrh	r3, [r7, #2]
 80017cc:	883a      	ldrh	r2, [r7, #0]
 80017ce:	88b9      	ldrh	r1, [r7, #4]
 80017d0:	88f8      	ldrh	r0, [r7, #6]
 80017d2:	f7ff fdb1 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i<(length*size); i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	81fb      	strh	r3, [r7, #14]
 80017da:	e006      	b.n	80017ea <TFT_Draw_VLine+0x42>
	Lcd_Write_Data(color);
 80017dc:	8c3b      	ldrh	r3, [r7, #32]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fbe6 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i<(length*size); i++)
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	3301      	adds	r3, #1
 80017e8:	81fb      	strh	r3, [r7, #14]
 80017ea:	89fa      	ldrh	r2, [r7, #14]
 80017ec:	887b      	ldrh	r3, [r7, #2]
 80017ee:	8839      	ldrh	r1, [r7, #0]
 80017f0:	fb01 f303 	mul.w	r3, r1, r3
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <TFT_Draw_VLine+0x34>
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}

08001802 <TFT_Draw_Fill_Rectangle>:
	TFT_Draw_VLine(x + length - size, y, width, size, color);
}


void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
{
 8001802:	b590      	push	{r4, r7, lr}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	4604      	mov	r4, r0
 800180a:	4608      	mov	r0, r1
 800180c:	4611      	mov	r1, r2
 800180e:	461a      	mov	r2, r3
 8001810:	4623      	mov	r3, r4
 8001812:	80fb      	strh	r3, [r7, #6]
 8001814:	4603      	mov	r3, r0
 8001816:	80bb      	strh	r3, [r7, #4]
 8001818:	460b      	mov	r3, r1
 800181a:	807b      	strh	r3, [r7, #2]
 800181c:	4613      	mov	r3, r2
 800181e:	803b      	strh	r3, [r7, #0]
	uint32_t i=0;
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
	
	TFT_Set_Work_Area(x,y,length, width);
 8001824:	883b      	ldrh	r3, [r7, #0]
 8001826:	887a      	ldrh	r2, [r7, #2]
 8001828:	88b9      	ldrh	r1, [r7, #4]
 800182a:	88f8      	ldrh	r0, [r7, #6]
 800182c:	f7ff fd84 	bl	8001338 <TFT_Set_Work_Area>
	for(i=0; i < length*width; i++)
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	e006      	b.n	8001844 <TFT_Draw_Fill_Rectangle+0x42>
	{
		Lcd_Write_Data(color);
 8001836:	8c3b      	ldrh	r3, [r7, #32]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fbb9 	bl	8000fb0 <Lcd_Write_Data>
	for(i=0; i < length*width; i++)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	3301      	adds	r3, #1
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	887b      	ldrh	r3, [r7, #2]
 8001846:	883a      	ldrh	r2, [r7, #0]
 8001848:	fb02 f303 	mul.w	r3, r2, r3
 800184c:	461a      	mov	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4293      	cmp	r3, r2
 8001852:	d3f0      	bcc.n	8001836 <TFT_Draw_Fill_Rectangle+0x34>
	}
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bd90      	pop	{r4, r7, pc}

0800185e <TFT_Draw_Circle>:
	TFT_Draw_Line( x3, y3, x1, y1, color, size);
}


void TFT_Draw_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint16_t color)
{
 800185e:	b590      	push	{r4, r7, lr}
 8001860:	b089      	sub	sp, #36	; 0x24
 8001862:	af02      	add	r7, sp, #8
 8001864:	4604      	mov	r4, r0
 8001866:	4608      	mov	r0, r1
 8001868:	4611      	mov	r1, r2
 800186a:	461a      	mov	r2, r3
 800186c:	4623      	mov	r3, r4
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	4603      	mov	r3, r0
 8001872:	80bb      	strh	r3, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	70fb      	strb	r3, [r7, #3]
 8001878:	4613      	mov	r3, r2
 800187a:	70bb      	strb	r3, [r7, #2]
	int a_,b_,P;
	a_ = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
	b_ = radius;
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 8001884:	78fb      	ldrb	r3, [r7, #3]
 8001886:	f1c3 0301 	rsb	r3, r3, #1
 800188a:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 800188c:	e0fc      	b.n	8001a88 <TFT_Draw_Circle+0x22a>
	{
		if(fill == 1)
 800188e:	78bb      	ldrb	r3, [r7, #2]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d136      	bne.n	8001902 <TFT_Draw_Circle+0xa4>
		{
			TFT_Draw_Fill_Rectangle(x-a_,y-b_,2*a_+1,2*b_+1,color);
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	b29b      	uxth	r3, r3
 8001898:	88fa      	ldrh	r2, [r7, #6]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	b298      	uxth	r0, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	88ba      	ldrh	r2, [r7, #4]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b299      	uxth	r1, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	3301      	adds	r3, #1
 80018b2:	b29a      	uxth	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	3301      	adds	r3, #1
 80018be:	b29c      	uxth	r4, r3
 80018c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	4623      	mov	r3, r4
 80018c6:	f7ff ff9c 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_,y-a_,2*b_+1,2*a_+1,color);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	88fa      	ldrh	r2, [r7, #6]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	b298      	uxth	r0, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	88ba      	ldrh	r2, [r7, #4]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	b299      	uxth	r1, r3
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3301      	adds	r3, #1
 80018f4:	b29c      	uxth	r4, r3
 80018f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018f8:	9300      	str	r3, [sp, #0]
 80018fa:	4623      	mov	r3, r4
 80018fc:	f7ff ff81 	bl	8001802 <TFT_Draw_Fill_Rectangle>
 8001900:	e0a7      	b.n	8001a52 <TFT_Draw_Circle+0x1f4>
		}
		else
		{
			TFT_Draw_Fill_Rectangle(a_+x, b_+y, size, size, color);
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	b29a      	uxth	r2, r3
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	4413      	add	r3, r2
 800190a:	b298      	uxth	r0, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	b29a      	uxth	r2, r3
 8001910:	88bb      	ldrh	r3, [r7, #4]
 8001912:	4413      	add	r3, r2
 8001914:	b299      	uxth	r1, r3
 8001916:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800191a:	b29a      	uxth	r2, r3
 800191c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001920:	b29c      	uxth	r4, r3
 8001922:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	4623      	mov	r3, r4
 8001928:	f7ff ff6b 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, a_+y, size, size, color);
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	b29a      	uxth	r2, r3
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	4413      	add	r3, r2
 8001934:	b298      	uxth	r0, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	b29a      	uxth	r2, r3
 800193a:	88bb      	ldrh	r3, [r7, #4]
 800193c:	4413      	add	r3, r2
 800193e:	b299      	uxth	r1, r3
 8001940:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001944:	b29a      	uxth	r2, r3
 8001946:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800194a:	b29c      	uxth	r4, r3
 800194c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	4623      	mov	r3, r4
 8001952:	f7ff ff56 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, b_+y, size, size, color);
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	b29b      	uxth	r3, r3
 800195a:	88fa      	ldrh	r2, [r7, #6]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b298      	uxth	r0, r3
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	b29a      	uxth	r2, r3
 8001964:	88bb      	ldrh	r3, [r7, #4]
 8001966:	4413      	add	r3, r2
 8001968:	b299      	uxth	r1, r3
 800196a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800196e:	b29a      	uxth	r2, r3
 8001970:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001974:	b29c      	uxth	r4, r3
 8001976:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001978:	9300      	str	r3, [sp, #0]
 800197a:	4623      	mov	r3, r4
 800197c:	f7ff ff41 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, a_+y, size, size, color);
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	b29b      	uxth	r3, r3
 8001984:	88fa      	ldrh	r2, [r7, #6]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b298      	uxth	r0, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	b29a      	uxth	r2, r3
 800198e:	88bb      	ldrh	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	b299      	uxth	r1, r3
 8001994:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001998:	b29a      	uxth	r2, r3
 800199a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800199e:	b29c      	uxth	r4, r3
 80019a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4623      	mov	r3, r4
 80019a6:	f7ff ff2c 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(b_+x, y-a_, size, size, color);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	4413      	add	r3, r2
 80019b2:	b298      	uxth	r0, r3
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	88ba      	ldrh	r2, [r7, #4]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b299      	uxth	r1, r3
 80019be:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019c8:	b29c      	uxth	r4, r3
 80019ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4623      	mov	r3, r4
 80019d0:	f7ff ff17 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(a_+x, y-b_, size, size, color);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	4413      	add	r3, r2
 80019dc:	b298      	uxth	r0, r3
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	88ba      	ldrh	r2, [r7, #4]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	b299      	uxth	r1, r3
 80019e8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80019f2:	b29c      	uxth	r4, r3
 80019f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4623      	mov	r3, r4
 80019fa:	f7ff ff02 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-a_, y-b_, size, size, color);
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	b298      	uxth	r0, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	88ba      	ldrh	r2, [r7, #4]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	b299      	uxth	r1, r3
 8001a12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a1c:	b29c      	uxth	r4, r3
 8001a1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	4623      	mov	r3, r4
 8001a24:	f7ff feed 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			TFT_Draw_Fill_Rectangle(x-b_, y-a_, size, size, color);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	88fa      	ldrh	r2, [r7, #6]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b298      	uxth	r0, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	88ba      	ldrh	r2, [r7, #4]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	b299      	uxth	r1, r3
 8001a3c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a46:	b29c      	uxth	r4, r3
 8001a48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4623      	mov	r3, r4
 8001a4e:	f7ff fed8 	bl	8001802 <TFT_Draw_Fill_Rectangle>
		}
		if (P < 0 )
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da09      	bge.n	8001a6c <TFT_Draw_Circle+0x20e>
		{
			P = (P + 3) + (2* a_);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	1cda      	adds	r2, r3, #3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e00d      	b.n	8001a88 <TFT_Draw_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2* (a_ - b_));
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	1d5a      	adds	r2, r3, #5
 8001a70:	6979      	ldr	r1, [r7, #20]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1acb      	subs	r3, r1, r3
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
			a_ ++;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	617b      	str	r3, [r7, #20]
			b_ --;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f77f aefe 	ble.w	800188e <TFT_Draw_Circle+0x30>
		}
	}
}
 8001a92:	bf00      	nop
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd90      	pop	{r4, r7, pc}

08001a9c <TFT_Draw_Fill_Circle_Helper>:
  TFT_Draw_Circle_Helper(x+r    , y+width-r-1, r, 			8, size, color);
}


void TFT_Draw_Fill_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) 
{
 8001a9c:	b590      	push	{r4, r7, lr}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af02      	add	r7, sp, #8
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	4608      	mov	r0, r1
 8001aa6:	4611      	mov	r1, r2
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4623      	mov	r3, r4
 8001aac:	80fb      	strh	r3, [r7, #6]
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80bb      	strh	r3, [r7, #4]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	807b      	strh	r3, [r7, #2]
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	707b      	strb	r3, [r7, #1]

  int16_t f     = 1 - r;
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	f1c3 0301 	rsb	r3, r3, #1
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	82fb      	strh	r3, [r7, #22]
  int16_t ddF_x = 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	82bb      	strh	r3, [r7, #20]
  int16_t ddF_y = -2 * r;
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	461a      	mov	r2, r3
 8001acc:	03d2      	lsls	r2, r2, #15
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	827b      	strh	r3, [r7, #18]
  int16_t x     = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	823b      	strh	r3, [r7, #16]
  int16_t y     = r;
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	81fb      	strh	r3, [r7, #14]

  while (x<y) {
 8001ade:	e07f      	b.n	8001be0 <TFT_Draw_Fill_Circle_Helper+0x144>
    if (f >= 0) {
 8001ae0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	db0e      	blt.n	8001b06 <TFT_Draw_Fill_Circle_Helper+0x6a>
      y--;
 8001ae8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	81fb      	strh	r3, [r7, #14]
      ddF_y += 2;
 8001af4:	8a7b      	ldrh	r3, [r7, #18]
 8001af6:	3302      	adds	r3, #2
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	827b      	strh	r3, [r7, #18]
      f     += ddF_y;
 8001afc:	8afa      	ldrh	r2, [r7, #22]
 8001afe:	8a7b      	ldrh	r3, [r7, #18]
 8001b00:	4413      	add	r3, r2
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	82fb      	strh	r3, [r7, #22]
    }
    x++;
 8001b06:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	823b      	strh	r3, [r7, #16]
    ddF_x += 2;
 8001b12:	8abb      	ldrh	r3, [r7, #20]
 8001b14:	3302      	adds	r3, #2
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	82bb      	strh	r3, [r7, #20]
    f     += ddF_x;
 8001b1a:	8afa      	ldrh	r2, [r7, #22]
 8001b1c:	8abb      	ldrh	r3, [r7, #20]
 8001b1e:	4413      	add	r3, r2
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	82fb      	strh	r3, [r7, #22]

    if (cornername & 0x1) {
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d029      	beq.n	8001b82 <TFT_Draw_Fill_Circle_Helper+0xe6>
      TFT_Draw_VLine(x0+x, y0-y, 2*y+1+delta, 1, color);
 8001b2e:	88fa      	ldrh	r2, [r7, #6]
 8001b30:	8a3b      	ldrh	r3, [r7, #16]
 8001b32:	4413      	add	r3, r2
 8001b34:	b298      	uxth	r0, r3
 8001b36:	88ba      	ldrh	r2, [r7, #4]
 8001b38:	89fb      	ldrh	r3, [r7, #14]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	b29a      	uxth	r2, r3
 8001b44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b46:	4413      	add	r3, r2
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	2301      	movs	r3, #1
 8001b54:	f7ff fe28 	bl	80017a8 <TFT_Draw_VLine>
      TFT_Draw_VLine(x0+y, y0-x, 2*x+1+delta, 1, color);
 8001b58:	88fa      	ldrh	r2, [r7, #6]
 8001b5a:	89fb      	ldrh	r3, [r7, #14]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	b298      	uxth	r0, r3
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	8a3b      	ldrh	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	b299      	uxth	r1, r3
 8001b68:	8a3b      	ldrh	r3, [r7, #16]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b70:	4413      	add	r3, r2
 8001b72:	b29b      	uxth	r3, r3
 8001b74:	3301      	adds	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	f7ff fe13 	bl	80017a8 <TFT_Draw_VLine>
    }
    if (cornername & 0x2) {
 8001b82:	787b      	ldrb	r3, [r7, #1]
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d029      	beq.n	8001be0 <TFT_Draw_Fill_Circle_Helper+0x144>
     TFT_Draw_VLine(x0-x, y0-y, 2*y+1+delta, 1, color);
 8001b8c:	88fa      	ldrh	r2, [r7, #6]
 8001b8e:	8a3b      	ldrh	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	b298      	uxth	r0, r3
 8001b94:	88ba      	ldrh	r2, [r7, #4]
 8001b96:	89fb      	ldrh	r3, [r7, #14]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ba4:	4413      	add	r3, r2
 8001ba6:	b29b      	uxth	r3, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bae:	9300      	str	r3, [sp, #0]
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	f7ff fdf9 	bl	80017a8 <TFT_Draw_VLine>
     TFT_Draw_VLine(x0-y, y0-x, 2*x+1+delta, 1, color);
 8001bb6:	88fa      	ldrh	r2, [r7, #6]
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b298      	uxth	r0, r3
 8001bbe:	88ba      	ldrh	r2, [r7, #4]
 8001bc0:	8a3b      	ldrh	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	b299      	uxth	r1, r3
 8001bc6:	8a3b      	ldrh	r3, [r7, #16]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bce:	4413      	add	r3, r2
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2301      	movs	r3, #1
 8001bdc:	f7ff fde4 	bl	80017a8 <TFT_Draw_VLine>
  while (x<y) {
 8001be0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	f6ff af79 	blt.w	8001ae0 <TFT_Draw_Fill_Circle_Helper+0x44>
    }
  }
}
 8001bee:	bf00      	nop
 8001bf0:	bf00      	nop
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd90      	pop	{r4, r7, pc}

08001bf8 <TFT_Draw_Fill_Round_Rect>:


void TFT_Draw_Fill_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint16_t color)
{
 8001bf8:	b590      	push	{r4, r7, lr}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af02      	add	r7, sp, #8
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4608      	mov	r0, r1
 8001c02:	4611      	mov	r1, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4623      	mov	r3, r4
 8001c08:	80fb      	strh	r3, [r7, #6]
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80bb      	strh	r3, [r7, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	807b      	strh	r3, [r7, #2]
 8001c12:	4613      	mov	r3, r2
 8001c14:	803b      	strh	r3, [r7, #0]
  TFT_Draw_Fill_Rectangle(x+r, y, length-2*r, width, color);
 8001c16:	88fa      	ldrh	r2, [r7, #6]
 8001c18:	8b3b      	ldrh	r3, [r7, #24]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	b298      	uxth	r0, r3
 8001c1e:	8b3b      	ldrh	r3, [r7, #24]
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	887a      	ldrh	r2, [r7, #2]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	883c      	ldrh	r4, [r7, #0]
 8001c2c:	88b9      	ldrh	r1, [r7, #4]
 8001c2e:	8bbb      	ldrh	r3, [r7, #28]
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	4623      	mov	r3, r4
 8001c34:	f7ff fde5 	bl	8001802 <TFT_Draw_Fill_Rectangle>

  TFT_Draw_Fill_Circle_Helper(x+length-r-1, y+r, r, 1, width-2*r-1, color);
 8001c38:	88fa      	ldrh	r2, [r7, #6]
 8001c3a:	887b      	ldrh	r3, [r7, #2]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	8b3b      	ldrh	r3, [r7, #24]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	3b01      	subs	r3, #1
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b218      	sxth	r0, r3
 8001c4c:	88ba      	ldrh	r2, [r7, #4]
 8001c4e:	8b3b      	ldrh	r3, [r7, #24]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	b219      	sxth	r1, r3
 8001c56:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001c5a:	8b3b      	ldrh	r3, [r7, #24]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	883a      	ldrh	r2, [r7, #0]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	8bba      	ldrh	r2, [r7, #28]
 8001c6e:	9201      	str	r2, [sp, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	2301      	movs	r3, #1
 8001c74:	4622      	mov	r2, r4
 8001c76:	f7ff ff11 	bl	8001a9c <TFT_Draw_Fill_Circle_Helper>
  TFT_Draw_Fill_Circle_Helper(x+r    , y+r, r, 2, width-2*r-1, color);
 8001c7a:	88fa      	ldrh	r2, [r7, #6]
 8001c7c:	8b3b      	ldrh	r3, [r7, #24]
 8001c7e:	4413      	add	r3, r2
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b218      	sxth	r0, r3
 8001c84:	88ba      	ldrh	r2, [r7, #4]
 8001c86:	8b3b      	ldrh	r3, [r7, #24]
 8001c88:	4413      	add	r3, r2
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	b219      	sxth	r1, r3
 8001c8e:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8001c92:	8b3b      	ldrh	r3, [r7, #24]
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	883a      	ldrh	r2, [r7, #0]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21b      	sxth	r3, r3
 8001ca4:	8bba      	ldrh	r2, [r7, #28]
 8001ca6:	9201      	str	r2, [sp, #4]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2302      	movs	r3, #2
 8001cac:	4622      	mov	r2, r4
 8001cae:	f7ff fef5 	bl	8001a9c <TFT_Draw_Fill_Circle_Helper>
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd90      	pop	{r4, r7, pc}

08001cba <LCD_Char>:



static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8001cba:	b590      	push	{r4, r7, lr}
 8001cbc:	b08b      	sub	sp, #44	; 0x2c
 8001cbe:	af02      	add	r7, sp, #8
 8001cc0:	60ba      	str	r2, [r7, #8]
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	81fb      	strh	r3, [r7, #14]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	777b      	strb	r3, [r7, #29]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	763b      	strb	r3, [r7, #24]
 8001ce8:	e095      	b.n	8001e16 <LCD_Char+0x15c>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001cea:	2300      	movs	r3, #0
 8001cec:	767b      	strb	r3, [r7, #25]
 8001cee:	e053      	b.n	8001d98 <LCD_Char+0xde>
		{
			if(bit == 0)
 8001cf0:	7f3b      	ldrb	r3, [r7, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d109      	bne.n	8001d0a <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8001cf6:	8bfb      	ldrh	r3, [r7, #30]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	83fa      	strh	r2, [r7, #30]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8001d06:	2380      	movs	r3, #128	; 0x80
 8001d08:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8001d0a:	7f7a      	ldrb	r2, [r7, #29]
 8001d0c:	7f3b      	ldrb	r3, [r7, #28]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <LCD_Char+0x64>
			{
				set_pixels++;
 8001d16:	8b7b      	ldrh	r3, [r7, #26]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	837b      	strh	r3, [r7, #26]
 8001d1c:	e036      	b.n	8001d8c <LCD_Char+0xd2>
			}
			else if (set_pixels > 0)
 8001d1e:	8b7b      	ldrh	r3, [r7, #26]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d033      	beq.n	8001d8c <LCD_Char+0xd2>
			{
				TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	7e7b      	ldrb	r3, [r7, #25]
 8001d2e:	441a      	add	r2, r3
 8001d30:	8b7b      	ldrh	r3, [r7, #26]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	fb12 f303 	smulbb	r3, r2, r3
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	89fb      	ldrh	r3, [r7, #14]
 8001d44:	4413      	add	r3, r2
 8001d46:	b298      	uxth	r0, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	7e3b      	ldrb	r3, [r7, #24]
 8001d52:	4413      	add	r3, r2
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	fb12 f303 	smulbb	r3, r2, r3
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	89bb      	ldrh	r3, [r7, #12]
 8001d64:	4413      	add	r3, r2
 8001d66:	b299      	uxth	r1, r3
 8001d68:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	8b7a      	ldrh	r2, [r7, #26]
 8001d70:	fb12 f303 	smulbb	r3, r2, r3
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d7a:	b29c      	uxth	r4, r3
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	4623      	mov	r3, r4
 8001d84:	f7ff fd3d 	bl	8001802 <TFT_Draw_Fill_Rectangle>
				set_pixels = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8001d8c:	7f3b      	ldrb	r3, [r7, #28]
 8001d8e:	085b      	lsrs	r3, r3, #1
 8001d90:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8001d92:	7e7b      	ldrb	r3, [r7, #25]
 8001d94:	3301      	adds	r3, #1
 8001d96:	767b      	strb	r3, [r7, #25]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	789b      	ldrb	r3, [r3, #2]
 8001d9c:	7e7a      	ldrb	r2, [r7, #25]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d3a6      	bcc.n	8001cf0 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8001da2:	8b7b      	ldrh	r3, [r7, #26]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d033      	beq.n	8001e10 <LCD_Char+0x156>
		{
			TFT_Draw_Fill_Rectangle(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001dae:	461a      	mov	r2, r3
 8001db0:	7e7b      	ldrb	r3, [r7, #25]
 8001db2:	441a      	add	r2, r3
 8001db4:	8b7b      	ldrh	r3, [r7, #26]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	fb12 f303 	smulbb	r3, r2, r3
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	4413      	add	r3, r2
 8001dca:	b298      	uxth	r0, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	7e3b      	ldrb	r3, [r7, #24]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	fb12 f303 	smulbb	r3, r2, r3
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	89bb      	ldrh	r3, [r7, #12]
 8001de8:	4413      	add	r3, r2
 8001dea:	b299      	uxth	r1, r3
 8001dec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	8b7a      	ldrh	r2, [r7, #26]
 8001df4:	fb12 f303 	smulbb	r3, r2, r3
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dfe:	b29c      	uxth	r4, r3
 8001e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4623      	mov	r3, r4
 8001e08:	f7ff fcfb 	bl	8001802 <TFT_Draw_Fill_Rectangle>
			set_pixels = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8001e10:	7e3b      	ldrb	r3, [r7, #24]
 8001e12:	3301      	adds	r3, #1
 8001e14:	763b      	strb	r3, [r7, #24]
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	78db      	ldrb	r3, [r3, #3]
 8001e1a:	7e3a      	ldrb	r2, [r7, #24]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f4ff af64 	bcc.w	8001cea <LCD_Char+0x30>
		}
	}
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	3724      	adds	r7, #36	; 0x24
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <LCD_Font>:
void LCD_Font(uint16_t x, uint16_t y, char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b08f      	sub	sp, #60	; 0x3c
 8001e30:	af02      	add	r7, sp, #8
 8001e32:	60ba      	str	r2, [r7, #8]
 8001e34:	607b      	str	r3, [r7, #4]
 8001e36:	4603      	mov	r3, r0
 8001e38:	81fb      	strh	r3, [r7, #14]
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8001e3e:	89fb      	ldrh	r3, [r7, #14]
 8001e40:	85fb      	strh	r3, [r7, #46]	; 0x2e
	int16_t cursor_y = y;
 8001e42:	89bb      	ldrh	r3, [r7, #12]
 8001e44:	85bb      	strh	r3, [r7, #44]	; 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	6879      	ldr	r1, [r7, #4]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f003 f83f 	bl	8004ed2 <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001e58:	e056      	b.n	8001f08 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8001e5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e5c:	68ba      	ldr	r2, [r7, #8]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		if(c == '\n')
 8001e66:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001e6a:	2b0a      	cmp	r3, #10
 8001e6c:	d10f      	bne.n	8001e8e <LCD_Font+0x62>
		{
			cursor_x = x;
 8001e6e:	89fb      	ldrh	r3, [r7, #14]
 8001e70:	85fb      	strh	r3, [r7, #46]	; 0x2e
			cursor_y += font.yAdvance * size;
 8001e72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	fb12 f303 	smulbb	r3, r2, r3
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e86:	4413      	add	r3, r2
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001e8c:	e039      	b.n	8001f02 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8001e8e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001e92:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d333      	bcc.n	8001f02 <LCD_Font+0xd6>
 8001e9a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001e9e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d82d      	bhi.n	8001f02 <LCD_Font+0xd6>
 8001ea6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001eaa:	2b0d      	cmp	r3, #13
 8001eac:	d029      	beq.n	8001f02 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8001eae:	6a3a      	ldr	r2, [r7, #32]
 8001eb0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001eb4:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8001eb8:	1a5b      	subs	r3, r3, r1
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	18d1      	adds	r1, r2, r3
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	2208      	movs	r2, #8
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f003 f804 	bl	8004ed2 <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8001eca:	f107 041c 	add.w	r4, r7, #28
 8001ece:	f107 0214 	add.w	r2, r7, #20
 8001ed2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001ed6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	f7ff fee8 	bl	8001cba <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8001eea:	7e3b      	ldrb	r3, [r7, #24]
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	fb12 f303 	smulbb	r3, r2, r3
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001efc:	4413      	add	r3, r2
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8001f02:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f04:	3301      	adds	r3, #1
 8001f06:	857b      	strh	r3, [r7, #42]	; 0x2a
 8001f08:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8001f0a:	68b8      	ldr	r0, [r7, #8]
 8001f0c:	f7fe f9b8 	bl	8000280 <strlen>
 8001f10:	4603      	mov	r3, r0
 8001f12:	429c      	cmp	r4, r3
 8001f14:	d3a1      	bcc.n	8001e5a <LCD_Font+0x2e>
		}
	}
}
 8001f16:	bf00      	nop
 8001f18:	bf00      	nop
 8001f1a:	3734      	adds	r7, #52	; 0x34
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd90      	pop	{r4, r7, pc}

08001f20 <LCD_FillTriangle>:

void LCD_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, uint16_t color) {
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b091      	sub	sp, #68	; 0x44
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	4604      	mov	r4, r0
 8001f28:	4608      	mov	r0, r1
 8001f2a:	4611      	mov	r1, r2
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4623      	mov	r3, r4
 8001f30:	80fb      	strh	r3, [r7, #6]
 8001f32:	4603      	mov	r3, r0
 8001f34:	80bb      	strh	r3, [r7, #4]
 8001f36:	460b      	mov	r3, r1
 8001f38:	807b      	strh	r3, [r7, #2]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	803b      	strh	r3, [r7, #0]
	int16_t a, b, y, last;

	// Sort coordinates by Y order (y2 >= y1 >= y0)
	if (y0 > y1) {
 8001f3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f42:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	dd0b      	ble.n	8001f62 <LCD_FillTriangle+0x42>
		swap(y0, y1);
 8001f4a:	88bb      	ldrh	r3, [r7, #4]
 8001f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f4e:	883b      	ldrh	r3, [r7, #0]
 8001f50:	80bb      	strh	r3, [r7, #4]
 8001f52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f54:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f5a:	887b      	ldrh	r3, [r7, #2]
 8001f5c:	80fb      	strh	r3, [r7, #6]
 8001f5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f60:	807b      	strh	r3, [r7, #2]
	}
	if (y1 > y2) {
 8001f62:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001f66:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	dd0f      	ble.n	8001f8e <LCD_FillTriangle+0x6e>
		swap(y2, y1);
 8001f6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001f72:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f74:	883b      	ldrh	r3, [r7, #0]
 8001f76:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8001f7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f7c:	803b      	strh	r3, [r7, #0]
		swap(x2, x1);
 8001f7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f82:	843b      	strh	r3, [r7, #32]
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001f8a:	8c3b      	ldrh	r3, [r7, #32]
 8001f8c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8001f8e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	dd0b      	ble.n	8001fb2 <LCD_FillTriangle+0x92>
		swap(y0, y1);
 8001f9a:	88bb      	ldrh	r3, [r7, #4]
 8001f9c:	83fb      	strh	r3, [r7, #30]
 8001f9e:	883b      	ldrh	r3, [r7, #0]
 8001fa0:	80bb      	strh	r3, [r7, #4]
 8001fa2:	8bfb      	ldrh	r3, [r7, #30]
 8001fa4:	803b      	strh	r3, [r7, #0]
		swap(x0, x1);
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
 8001fa8:	83bb      	strh	r3, [r7, #28]
 8001faa:	887b      	ldrh	r3, [r7, #2]
 8001fac:	80fb      	strh	r3, [r7, #6]
 8001fae:	8bbb      	ldrh	r3, [r7, #28]
 8001fb0:	807b      	strh	r3, [r7, #2]
	}

	if(y0 == y2) { // Handle awkward all-on-same-line case as its own thing
 8001fb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001fb6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d136      	bne.n	800202c <LCD_FillTriangle+0x10c>
		a = b = x0;
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001fc2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001fc4:	86fb      	strh	r3, [r7, #54]	; 0x36
		if(x1 < a)      a = x1;
 8001fc6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001fca:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	da02      	bge.n	8001fd8 <LCD_FillTriangle+0xb8>
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fd6:	e007      	b.n	8001fe8 <LCD_FillTriangle+0xc8>
		else if(x1 > b) b = x1;
 8001fd8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001fdc:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	dd01      	ble.n	8001fe8 <LCD_FillTriangle+0xc8>
 8001fe4:	887b      	ldrh	r3, [r7, #2]
 8001fe6:	86bb      	strh	r3, [r7, #52]	; 0x34
		if(x2 < a)      a = x2;
 8001fe8:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8001fec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	da03      	bge.n	8001ffc <LCD_FillTriangle+0xdc>
 8001ff4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001ff8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001ffa:	e008      	b.n	800200e <LCD_FillTriangle+0xee>
		else if(x2 > b) b = x2;
 8001ffc:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8002000:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002004:	429a      	cmp	r2, r3
 8002006:	dd02      	ble.n	800200e <LCD_FillTriangle+0xee>
 8002008:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800200c:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y0, b - a + 1,1, color);
 800200e:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8002010:	88b9      	ldrh	r1, [r7, #4]
 8002012:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	b29b      	uxth	r3, r3
 800201a:	3301      	adds	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2301      	movs	r3, #1
 8002026:	f7ff fa53 	bl	80014d0 <TFT_Draw_HLine>
		return;
 800202a:	e0d2      	b.n	80021d2 <LCD_FillTriangle+0x2b2>
	}

	int16_t	dx01 = x1 - x0,
 800202c:	887a      	ldrh	r2, [r7, #2]
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	b29b      	uxth	r3, r3
 8002034:	837b      	strh	r3, [r7, #26]
			dy01 = y1 - y0,
 8002036:	883a      	ldrh	r2, [r7, #0]
 8002038:	88bb      	ldrh	r3, [r7, #4]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	b29b      	uxth	r3, r3
 800203e:	833b      	strh	r3, [r7, #24]
			dx02 = x2 - x0,
 8002040:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	b29b      	uxth	r3, r3
 800204a:	82fb      	strh	r3, [r7, #22]
			dy02 = y2 - y0,
 800204c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002050:	88bb      	ldrh	r3, [r7, #4]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	b29b      	uxth	r3, r3
 8002056:	82bb      	strh	r3, [r7, #20]
			dx12 = x2 - x1,
 8002058:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800205c:	887b      	ldrh	r3, [r7, #2]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	b29b      	uxth	r3, r3
 8002062:	827b      	strh	r3, [r7, #18]
			dy12 = y2 - y1;
 8002064:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002068:	883b      	ldrh	r3, [r7, #0]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	b29b      	uxth	r3, r3
 800206e:	823b      	strh	r3, [r7, #16]
	int32_t	sa   = 0,
 8002070:	2300      	movs	r3, #0
 8002072:	62fb      	str	r3, [r7, #44]	; 0x2c
			sb   = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	62bb      	str	r3, [r7, #40]	; 0x28
	// 0-1 and 0-2.  If y1=y2 (flat-bottomed triangle), the scanline y1
	// is included here (and second loop will be skipped, avoiding a /0
	// error there), otherwise scanline y1 is skipped here and handled
	// in the second loop...which also avoids a /0 error here if y0=y1
	// (flat-topped triangle).
	if (y1 == y2) last = y1;   // Include y1 scanline
 8002078:	f9b7 2000 	ldrsh.w	r2, [r7]
 800207c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002080:	429a      	cmp	r2, r3
 8002082:	d102      	bne.n	800208a <LCD_FillTriangle+0x16a>
 8002084:	883b      	ldrh	r3, [r7, #0]
 8002086:	863b      	strh	r3, [r7, #48]	; 0x30
 8002088:	e003      	b.n	8002092 <LCD_FillTriangle+0x172>
	else last = y1 - 1; // Skip it
 800208a:	883b      	ldrh	r3, [r7, #0]
 800208c:	3b01      	subs	r3, #1
 800208e:	b29b      	uxth	r3, r3
 8002090:	863b      	strh	r3, [r7, #48]	; 0x30

	for(y = y0; y <= last; y++) {
 8002092:	88bb      	ldrh	r3, [r7, #4]
 8002094:	867b      	strh	r3, [r7, #50]	; 0x32
 8002096:	e03d      	b.n	8002114 <LCD_FillTriangle+0x1f4>
		a = x0 + sa / dy01;
 8002098:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800209c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800209e:	fb92 f3f3 	sdiv	r3, r2, r3
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	4413      	add	r3, r2
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 80020ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020b2:	fb92 f3f3 	sdiv	r3, r2, r3
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	88fb      	ldrh	r3, [r7, #6]
 80020ba:	4413      	add	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx01;
 80020c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80020c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020c6:	4413      	add	r3, r2
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 80020ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80020ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80020d0:	4413      	add	r3, r2
 80020d2:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x0 + (x1 - x0) * (y - y0) / (y1 - y0);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 80020d4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80020d8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80020dc:	429a      	cmp	r2, r3
 80020de:	dd05      	ble.n	80020ec <LCD_FillTriangle+0x1cc>
 80020e0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020e2:	81bb      	strh	r3, [r7, #12]
 80020e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80020e6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80020e8:	89bb      	ldrh	r3, [r7, #12]
 80020ea:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b-a+1,1, color);
 80020ec:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80020ee:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80020f0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80020f2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	3301      	adds	r3, #1
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2301      	movs	r3, #1
 8002104:	f7ff f9e4 	bl	80014d0 <TFT_Draw_HLine>
	for(y = y0; y <= last; y++) {
 8002108:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800210c:	b29b      	uxth	r3, r3
 800210e:	3301      	adds	r3, #1
 8002110:	b29b      	uxth	r3, r3
 8002112:	867b      	strh	r3, [r7, #50]	; 0x32
 8002114:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002118:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800211c:	429a      	cmp	r2, r3
 800211e:	ddbb      	ble.n	8002098 <LCD_FillTriangle+0x178>
	}

	// For lower part of triangle, find scanline crossings for segments
	// 0-2 and 1-2.  This loop is skipped if y1=y2.
	sa = dx12 * (y - y1);
 8002120:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002124:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 8002128:	f9b7 2000 	ldrsh.w	r2, [r7]
 800212c:	1a8a      	subs	r2, r1, r2
 800212e:	fb02 f303 	mul.w	r3, r2, r3
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
	sb = dx02 * (y - y0);
 8002134:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002138:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800213c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002140:	1a8a      	subs	r2, r1, r2
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
	for(; y <= y2; y++) {
 8002148:	e03d      	b.n	80021c6 <LCD_FillTriangle+0x2a6>
		a = x1 + sa / dy12;
 800214a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800214e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002150:	fb92 f3f3 	sdiv	r3, r2, r3
 8002154:	b29a      	uxth	r2, r3
 8002156:	887b      	ldrh	r3, [r7, #2]
 8002158:	4413      	add	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	86fb      	strh	r3, [r7, #54]	; 0x36
		b = x0 + sb / dy02;
 800215e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002164:	fb92 f3f3 	sdiv	r3, r2, r3
 8002168:	b29a      	uxth	r2, r3
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	4413      	add	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	86bb      	strh	r3, [r7, #52]	; 0x34
		sa += dx12;
 8002172:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002178:	4413      	add	r3, r2
 800217a:	62fb      	str	r3, [r7, #44]	; 0x2c
		sb += dx02;
 800217c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002182:	4413      	add	r3, r2
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
		/* longhand:
		a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
		b = x0 + (x2 - x0) * (y - y0) / (y2 - y0);
		*/
		if(a > b) swap(a,b);
 8002186:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 800218a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800218e:	429a      	cmp	r2, r3
 8002190:	dd05      	ble.n	800219e <LCD_FillTriangle+0x27e>
 8002192:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002194:	81fb      	strh	r3, [r7, #14]
 8002196:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002198:	86fb      	strh	r3, [r7, #54]	; 0x36
 800219a:	89fb      	ldrh	r3, [r7, #14]
 800219c:	86bb      	strh	r3, [r7, #52]	; 0x34
		TFT_Draw_HLine(a, y, b - a + 1,1, color);
 800219e:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80021a0:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 80021a2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80021a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	3301      	adds	r3, #1
 80021ac:	b29a      	uxth	r2, r3
 80021ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2301      	movs	r3, #1
 80021b6:	f7ff f98b 	bl	80014d0 <TFT_Draw_HLine>
	for(; y <= y2; y++) {
 80021ba:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3301      	adds	r3, #1
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	867b      	strh	r3, [r7, #50]	; 0x32
 80021c6:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80021ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80021ce:	429a      	cmp	r2, r3
 80021d0:	ddbb      	ble.n	800214a <LCD_FillTriangle+0x22a>
	}
}
 80021d2:	373c      	adds	r7, #60	; 0x3c
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <rainbow>:


uint16_t rainbow(uint16_t value)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	4603      	mov	r3, r0
 80021e0:	80fb      	strh	r3, [r7, #6]
  // Value is expected to be in range 0-127
  // The value is converted to a spectrum colour from 0 = blue through to 127 = red

	uint16_t red = 0; // Red is the top 5 bits of a 16 bit colour value
 80021e2:	2300      	movs	r3, #0
 80021e4:	81fb      	strh	r3, [r7, #14]
	uint16_t green = 0;// Green is the middle 6 bits
 80021e6:	2300      	movs	r3, #0
 80021e8:	81bb      	strh	r3, [r7, #12]
	uint16_t blue = 0; // Blue is the bottom 5 bits
 80021ea:	2300      	movs	r3, #0
 80021ec:	817b      	strh	r3, [r7, #10]

	uint16_t quadrant = value / 32;
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	095b      	lsrs	r3, r3, #5
 80021f2:	813b      	strh	r3, [r7, #8]

  if (quadrant == 0) {
 80021f4:	893b      	ldrh	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <rainbow+0x36>
    blue = 31;
 80021fa:	231f      	movs	r3, #31
 80021fc:	817b      	strh	r3, [r7, #10]
    green = 2 * (value % 32);
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	f003 031f 	and.w	r3, r3, #31
 8002204:	b29b      	uxth	r3, r3
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	81bb      	strh	r3, [r7, #12]
    red = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 1) {
 800220e:	893b      	ldrh	r3, [r7, #8]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d109      	bne.n	8002228 <rainbow+0x50>
    blue = 31 - (value % 32);
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	43db      	mvns	r3, r3
 8002218:	b29b      	uxth	r3, r3
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	817b      	strh	r3, [r7, #10]
    green = 63;
 8002220:	233f      	movs	r3, #63	; 0x3f
 8002222:	81bb      	strh	r3, [r7, #12]
    red = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 2) {
 8002228:	893b      	ldrh	r3, [r7, #8]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d107      	bne.n	800223e <rainbow+0x66>
    blue = 0;
 800222e:	2300      	movs	r3, #0
 8002230:	817b      	strh	r3, [r7, #10]
    green = 63;
 8002232:	233f      	movs	r3, #63	; 0x3f
 8002234:	81bb      	strh	r3, [r7, #12]
    red = value % 32;
 8002236:	88fb      	ldrh	r3, [r7, #6]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	81fb      	strh	r3, [r7, #14]
  }
  if (quadrant == 3) {
 800223e:	893b      	ldrh	r3, [r7, #8]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d10c      	bne.n	800225e <rainbow+0x86>
    blue = 0;
 8002244:	2300      	movs	r3, #0
 8002246:	817b      	strh	r3, [r7, #10]
    green = 63 - 2 * (value % 32);
 8002248:	88fb      	ldrh	r3, [r7, #6]
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	b29b      	uxth	r3, r3
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8002258:	81bb      	strh	r3, [r7, #12]
    red = 31;
 800225a:	231f      	movs	r3, #31
 800225c:	81fb      	strh	r3, [r7, #14]
  }
  return (red << 11) + (green << 5) + blue;
 800225e:	89fb      	ldrh	r3, [r7, #14]
 8002260:	02db      	lsls	r3, r3, #11
 8002262:	b29a      	uxth	r2, r3
 8002264:	89bb      	ldrh	r3, [r7, #12]
 8002266:	015b      	lsls	r3, r3, #5
 8002268:	b29b      	uxth	r3, r3
 800226a:	4413      	add	r3, r2
 800226c:	b29a      	uxth	r2, r3
 800226e:	897b      	ldrh	r3, [r7, #10]
 8002270:	4413      	add	r3, r2
 8002272:	b29b      	uxth	r3, r3
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <map>:

long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	69b9      	ldr	r1, [r7, #24]
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	1a8a      	subs	r2, r1, r2
 800229a:	fb03 f202 	mul.w	r2, r3, r2
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	1acb      	subs	r3, r1, r3
 80022a4:	fb92 f2f3 	sdiv	r2, r2, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4413      	add	r3, r2
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <ringMeter>:

int ringMeter(int value, int vmin, int vmax, int x, int y, int r, uint16_t scheme){
 80022b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022ba:	b099      	sub	sp, #100	; 0x64
 80022bc:	af04      	add	r7, sp, #16
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  // Minimum value of r is about 52 before value text intrudes on ring
  // drawing the text first is an option
  x += r; y += r;   // Calculate coords of centre of ring
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022ca:	4413      	add	r3, r2
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80022d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d2:	4413      	add	r3, r2
 80022d4:	66bb      	str	r3, [r7, #104]	; 0x68
  int w = r / 6;    // Width of outer ring is 1/4 of radius
 80022d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80022d8:	4a36      	ldr	r2, [pc, #216]	; (80023b4 <ringMeter+0xfc>)
 80022da:	fb82 1203 	smull	r1, r2, r2, r3
 80022de:	17db      	asrs	r3, r3, #31
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	647b      	str	r3, [r7, #68]	; 0x44
  int angle = 180;  // Half the sweep angle of meter (300 degrees)
 80022e4:	23b4      	movs	r3, #180	; 0xb4
 80022e6:	643b      	str	r3, [r7, #64]	; 0x40
//  int text_colour = 0; // To hold the text colour
  int v = map(value, vmin, vmax, -angle, angle); // Map the value to an angle v
 80022e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ea:	425a      	negs	r2, r3
 80022ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	4613      	mov	r3, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff ffc2 	bl	8002280 <map>
 80022fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  uint16_t seg = 5; // Segments are 5 degrees wide = 60 segments for 300 degrees
 80022fe:	2305      	movs	r3, #5
 8002300:	877b      	strh	r3, [r7, #58]	; 0x3a
  uint16_t inc = 5; // Draw segments every 5 degrees, increase to 10 for segmented ring
 8002302:	2305      	movs	r3, #5
 8002304:	873b      	strh	r3, [r7, #56]	; 0x38

  // Draw colour blocks every inc degrees
  for (int i = -angle; i < angle; i += inc) {
 8002306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002308:	425b      	negs	r3, r3
 800230a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800230c:	e1d8      	b.n	80026c0 <ringMeter+0x408>
    // Choose colour from scheme
    int colour = 0;
 800230e:	2300      	movs	r3, #0
 8002310:	64bb      	str	r3, [r7, #72]	; 0x48
    switch (scheme) {
 8002312:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8002316:	2b05      	cmp	r3, #5
 8002318:	d84e      	bhi.n	80023b8 <ringMeter+0x100>
 800231a:	a201      	add	r2, pc, #4	; (adr r2, 8002320 <ringMeter+0x68>)
 800231c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002320:	08002339 	.word	0x08002339
 8002324:	08002341 	.word	0x08002341
 8002328:	08002349 	.word	0x08002349
 800232c:	0800234f 	.word	0x0800234f
 8002330:	08002371 	.word	0x08002371
 8002334:	08002393 	.word	0x08002393
      case 0: colour = RED; break; // Fixed colour
 8002338:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800233c:	64bb      	str	r3, [r7, #72]	; 0x48
 800233e:	e03e      	b.n	80023be <ringMeter+0x106>
      case 1: colour = GREEN; break; // Fixed colour
 8002340:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002344:	64bb      	str	r3, [r7, #72]	; 0x48
 8002346:	e03a      	b.n	80023be <ringMeter+0x106>
      case 2: colour = BLUE; break; // Fixed colour
 8002348:	231f      	movs	r3, #31
 800234a:	64bb      	str	r3, [r7, #72]	; 0x48
 800234c:	e037      	b.n	80023be <ringMeter+0x106>
      case 3: colour = rainbow(map(i, -angle, angle, 0, 127)); break; // Full spectrum blue to red
 800234e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002350:	4259      	negs	r1, r3
 8002352:	237f      	movs	r3, #127	; 0x7f
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800235a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800235c:	f7ff ff90 	bl	8002280 <map>
 8002360:	4603      	mov	r3, r0
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff37 	bl	80021d8 <rainbow>
 800236a:	4603      	mov	r3, r0
 800236c:	64bb      	str	r3, [r7, #72]	; 0x48
 800236e:	e026      	b.n	80023be <ringMeter+0x106>
      case 4: colour = rainbow(map(i, -angle, angle, 63, 127)); break; // Green to red (high temperature etc)
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	4259      	negs	r1, r3
 8002374:	237f      	movs	r3, #127	; 0x7f
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	233f      	movs	r3, #63	; 0x3f
 800237a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800237c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800237e:	f7ff ff7f 	bl	8002280 <map>
 8002382:	4603      	mov	r3, r0
 8002384:	b29b      	uxth	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff26 	bl	80021d8 <rainbow>
 800238c:	4603      	mov	r3, r0
 800238e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002390:	e015      	b.n	80023be <ringMeter+0x106>
      case 5: colour = rainbow(map(i, -angle, angle, 127, 63)); break; // Red to green (low battery etc)
 8002392:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002394:	4259      	negs	r1, r3
 8002396:	233f      	movs	r3, #63	; 0x3f
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	237f      	movs	r3, #127	; 0x7f
 800239c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800239e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80023a0:	f7ff ff6e 	bl	8002280 <map>
 80023a4:	4603      	mov	r3, r0
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff15 	bl	80021d8 <rainbow>
 80023ae:	4603      	mov	r3, r0
 80023b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80023b2:	e004      	b.n	80023be <ringMeter+0x106>
 80023b4:	2aaaaaab 	.word	0x2aaaaaab
      default: colour = BLUE; break; // Fixed colour
 80023b8:	231f      	movs	r3, #31
 80023ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80023bc:	bf00      	nop
    }

    // Calculate pair of coordinates for segment start
    float sx = cos((i - 90) * 0.0174532925);
 80023be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c0:	3b5a      	subs	r3, #90	; 0x5a
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f8b6 	bl	8000534 <__aeabi_i2d>
 80023c8:	a3c3      	add	r3, pc, #780	; (adr r3, 80026d8 <ringMeter+0x420>)
 80023ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ce:	f7fe f91b 	bl	8000608 <__aeabi_dmul>
 80023d2:	4602      	mov	r2, r0
 80023d4:	460b      	mov	r3, r1
 80023d6:	ec43 2b17 	vmov	d7, r2, r3
 80023da:	eeb0 0a47 	vmov.f32	s0, s14
 80023de:	eef0 0a67 	vmov.f32	s1, s15
 80023e2:	f004 fd2d 	bl	8006e40 <cos>
 80023e6:	ec53 2b10 	vmov	r2, r3, d0
 80023ea:	4610      	mov	r0, r2
 80023ec:	4619      	mov	r1, r3
 80023ee:	f7fe fbe3 	bl	8000bb8 <__aeabi_d2f>
 80023f2:	4603      	mov	r3, r0
 80023f4:	637b      	str	r3, [r7, #52]	; 0x34
    float sy = sin((i - 90) * 0.0174532925);
 80023f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023f8:	3b5a      	subs	r3, #90	; 0x5a
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f89a 	bl	8000534 <__aeabi_i2d>
 8002400:	a3b5      	add	r3, pc, #724	; (adr r3, 80026d8 <ringMeter+0x420>)
 8002402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002406:	f7fe f8ff 	bl	8000608 <__aeabi_dmul>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	ec43 2b17 	vmov	d7, r2, r3
 8002412:	eeb0 0a47 	vmov.f32	s0, s14
 8002416:	eef0 0a67 	vmov.f32	s1, s15
 800241a:	f004 fd65 	bl	8006ee8 <sin>
 800241e:	ec53 2b10 	vmov	r2, r3, d0
 8002422:	4610      	mov	r0, r2
 8002424:	4619      	mov	r1, r3
 8002426:	f7fe fbc7 	bl	8000bb8 <__aeabi_d2f>
 800242a:	4603      	mov	r3, r0
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t x0 = sx * (r - w) + x;
 800242e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	ee07 3a90 	vmov	s15, r3
 8002438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800243c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t y0 = sy * (r - w) + y;
 800245c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800245e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800246e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002472:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002474:	ee07 3a90 	vmov	s15, r3
 8002478:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002484:	ee17 3a90 	vmov	r3, s15
 8002488:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t x1 = sx * r + x;
 800248a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800248c:	ee07 3a90 	vmov	s15, r3
 8002490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002494:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002498:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	ee07 3a90 	vmov	s15, r3
 80024a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ae:	ee17 3a90 	vmov	r3, s15
 80024b2:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t y1 = sy * r + y;
 80024b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80024c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d8:	ee17 3a90 	vmov	r3, s15
 80024dc:	853b      	strh	r3, [r7, #40]	; 0x28

    // Calculate pair of coordinates for segment end
    float sx2 = cos((i + seg - 90) * 0.0174532925);
 80024de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80024e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e2:	4413      	add	r3, r2
 80024e4:	3b5a      	subs	r3, #90	; 0x5a
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f824 	bl	8000534 <__aeabi_i2d>
 80024ec:	a37a      	add	r3, pc, #488	; (adr r3, 80026d8 <ringMeter+0x420>)
 80024ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f2:	f7fe f889 	bl	8000608 <__aeabi_dmul>
 80024f6:	4602      	mov	r2, r0
 80024f8:	460b      	mov	r3, r1
 80024fa:	ec43 2b17 	vmov	d7, r2, r3
 80024fe:	eeb0 0a47 	vmov.f32	s0, s14
 8002502:	eef0 0a67 	vmov.f32	s1, s15
 8002506:	f004 fc9b 	bl	8006e40 <cos>
 800250a:	ec53 2b10 	vmov	r2, r3, d0
 800250e:	4610      	mov	r0, r2
 8002510:	4619      	mov	r1, r3
 8002512:	f7fe fb51 	bl	8000bb8 <__aeabi_d2f>
 8002516:	4603      	mov	r3, r0
 8002518:	627b      	str	r3, [r7, #36]	; 0x24
    float sy2 = sin((i + seg - 90) * 0.0174532925);
 800251a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	4413      	add	r3, r2
 8002520:	3b5a      	subs	r3, #90	; 0x5a
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe f806 	bl	8000534 <__aeabi_i2d>
 8002528:	a36b      	add	r3, pc, #428	; (adr r3, 80026d8 <ringMeter+0x420>)
 800252a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252e:	f7fe f86b 	bl	8000608 <__aeabi_dmul>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	ec43 2b17 	vmov	d7, r2, r3
 800253a:	eeb0 0a47 	vmov.f32	s0, s14
 800253e:	eef0 0a67 	vmov.f32	s1, s15
 8002542:	f004 fcd1 	bl	8006ee8 <sin>
 8002546:	ec53 2b10 	vmov	r2, r3, d0
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	f7fe fb33 	bl	8000bb8 <__aeabi_d2f>
 8002552:	4603      	mov	r3, r0
 8002554:	623b      	str	r3, [r7, #32]
    int x2 = sx2 * (r - w) + x;
 8002556:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002558:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	ee07 3a90 	vmov	s15, r3
 8002560:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002564:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002568:	ee27 7a27 	vmul.f32	s14, s14, s15
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800257e:	ee17 3a90 	vmov	r3, s15
 8002582:	61fb      	str	r3, [r7, #28]
    int y2 = sy2 * (r - w) + y;
 8002584:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002592:	edd7 7a08 	vldr	s15, [r7, #32]
 8002596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800259a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800259c:	ee07 3a90 	vmov	s15, r3
 80025a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ac:	ee17 3a90 	vmov	r3, s15
 80025b0:	61bb      	str	r3, [r7, #24]
    int x3 = sx2 * r + x;
 80025b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b4:	ee07 3a90 	vmov	s15, r3
 80025b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	ee07 3a90 	vmov	s15, r3
 80025ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d6:	ee17 3a90 	vmov	r3, s15
 80025da:	617b      	str	r3, [r7, #20]
    int y3 = sy2 * r + y;
 80025dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80025ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025f0:	ee07 3a90 	vmov	s15, r3
 80025f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002600:	ee17 3a90 	vmov	r3, s15
 8002604:	613b      	str	r3, [r7, #16]

    if (i < v) { // Fill in coloured segments with 2 triangles
 8002606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	429a      	cmp	r2, r3
 800260c:	da2c      	bge.n	8002668 <ringMeter+0x3b0>

    	LCD_FillTriangle(x0, y0, x1, y1, x2, y2, colour);
 800260e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8002612:	f9b7 402c 	ldrsh.w	r4, [r7, #44]	; 0x2c
 8002616:	f9b7 502a 	ldrsh.w	r5, [r7, #42]	; 0x2a
 800261a:	f9b7 6028 	ldrsh.w	r6, [r7, #40]	; 0x28
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	b21b      	sxth	r3, r3
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	b212      	sxth	r2, r2
 8002626:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002628:	b289      	uxth	r1, r1
 800262a:	9102      	str	r1, [sp, #8]
 800262c:	9201      	str	r2, [sp, #4]
 800262e:	9300      	str	r3, [sp, #0]
 8002630:	4633      	mov	r3, r6
 8002632:	462a      	mov	r2, r5
 8002634:	4621      	mov	r1, r4
 8002636:	f7ff fc73 	bl	8001f20 <LCD_FillTriangle>
    	LCD_FillTriangle(x1, y1, x2, y2, x3, y3, colour);
 800263a:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 800263e:	f9b7 4028 	ldrsh.w	r4, [r7, #40]	; 0x28
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	b21d      	sxth	r5, r3
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	b21e      	sxth	r6, r3
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	b21b      	sxth	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	b212      	sxth	r2, r2
 8002652:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002654:	b289      	uxth	r1, r1
 8002656:	9102      	str	r1, [sp, #8]
 8002658:	9201      	str	r2, [sp, #4]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4633      	mov	r3, r6
 800265e:	462a      	mov	r2, r5
 8002660:	4621      	mov	r1, r4
 8002662:	f7ff fc5d 	bl	8001f20 <LCD_FillTriangle>
 8002666:	e027      	b.n	80026b8 <ringMeter+0x400>

    }
    else // Fill in blank segments
    {

    	LCD_FillTriangle(x0, y0, x1, y1, x2, y2, BLUE);
 8002668:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800266c:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8002670:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8002674:	f9b7 5028 	ldrsh.w	r5, [r7, #40]	; 0x28
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	b21b      	sxth	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	b212      	sxth	r2, r2
 8002680:	261f      	movs	r6, #31
 8002682:	9602      	str	r6, [sp, #8]
 8002684:	9201      	str	r2, [sp, #4]
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	462b      	mov	r3, r5
 800268a:	4622      	mov	r2, r4
 800268c:	f7ff fc48 	bl	8001f20 <LCD_FillTriangle>
    	LCD_FillTriangle(x1, y1, x2, y2, x3, y3, BLUE);
 8002690:	f9b7 002a 	ldrsh.w	r0, [r7, #42]	; 0x2a
 8002694:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	b21c      	sxth	r4, r3
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	b21d      	sxth	r5, r3
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	b212      	sxth	r2, r2
 80026a8:	261f      	movs	r6, #31
 80026aa:	9602      	str	r6, [sp, #8]
 80026ac:	9201      	str	r2, [sp, #4]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	462b      	mov	r3, r5
 80026b2:	4622      	mov	r2, r4
 80026b4:	f7ff fc34 	bl	8001f20 <LCD_FillTriangle>
  for (int i = -angle; i < angle; i += inc) {
 80026b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026bc:	4413      	add	r3, r2
 80026be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026c0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c4:	429a      	cmp	r2, r3
 80026c6:	f6ff ae22 	blt.w	800230e <ringMeter+0x56>
    }


  }

  return x + r;
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026ce:	4413      	add	r3, r2
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3754      	adds	r7, #84	; 0x54
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026d8:	a1fae711 	.word	0xa1fae711
 80026dc:	3f91df46 	.word	0x3f91df46

080026e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <MX_GPIO_Init+0xc8>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a2a      	ldr	r2, [pc, #168]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b28      	ldr	r3, [pc, #160]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	60bb      	str	r3, [r7, #8]
 8002710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <MX_GPIO_Init+0xc8>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b21      	ldr	r3, [pc, #132]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4b1d      	ldr	r3, [pc, #116]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a1c      	ldr	r2, [pc, #112]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b1a      	ldr	r3, [pc, #104]	; (80027a8 <MX_GPIO_Init+0xc8>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D0_Pin|D1_Pin|D2_Pin|D3_Pin
 800274a:	2200      	movs	r2, #0
 800274c:	f248 31ff 	movw	r1, #33791	; 0x83ff
 8002750:	4816      	ldr	r0, [pc, #88]	; (80027ac <MX_GPIO_Init+0xcc>)
 8002752:	f001 f8b1 	bl	80038b8 <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002756:	2200      	movs	r2, #0
 8002758:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800275c:	4814      	ldr	r0, [pc, #80]	; (80027b0 <MX_GPIO_Init+0xd0>)
 800275e:	f001 f8ab 	bl	80038b8 <HAL_GPIO_WritePin>
                          |WR_Pin|RD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8002762:	f248 33ff 	movw	r3, #33791	; 0x83ff
 8002766:	60fb      	str	r3, [r7, #12]
                          |D4_Pin|D5_Pin|D6_Pin|D7_Pin
                          |REST_Pin|CS_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002768:	2301      	movs	r3, #1
 800276a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002770:	2303      	movs	r3, #3
 8002772:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002774:	f107 030c 	add.w	r3, r7, #12
 8002778:	4619      	mov	r1, r3
 800277a:	480c      	ldr	r0, [pc, #48]	; (80027ac <MX_GPIO_Init+0xcc>)
 800277c:	f000 ff18 	bl	80035b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = D8_Pin|D9_Pin|D10_Pin|D11_Pin
 8002780:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8002784:	60fb      	str	r3, [r7, #12]
                          |D12_Pin|D13_Pin|D14_Pin|D15_Pin
                          |WR_Pin|RD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002786:	2301      	movs	r3, #1
 8002788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002792:	f107 030c 	add.w	r3, r7, #12
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_GPIO_Init+0xd0>)
 800279a:	f000 ff09 	bl	80035b0 <HAL_GPIO_Init>

}
 800279e:	bf00      	nop
 80027a0:	3720      	adds	r7, #32
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40020000 	.word	0x40020000
 80027b0:	40020400 	.word	0x40020400
 80027b4:	00000000 	.word	0x00000000

080027b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027b8:	b590      	push	{r4, r7, lr}
 80027ba:	b09b      	sub	sp, #108	; 0x6c
 80027bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027be:	f000 fd7b 	bl	80032b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027c2:	f000 fbb5 	bl	8002f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027c6:	f7ff ff8b 	bl	80026e0 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Init_SSD1963();
 80027ca:	f7fe fc73 	bl	80010b4 <Init_SSD1963>


  //  XPT2046_Init();
    TFT_Clear_Screen(RED);
 80027ce:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80027d2:	f7fe fddd 	bl	8001390 <TFT_Clear_Screen>
    LCD_Font(120, 450, "SSD1963", _Open_Sans_Bold_128, 1, RED);
 80027d6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2301      	movs	r3, #1
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4ba3      	ldr	r3, [pc, #652]	; (8002a70 <main+0x2b8>)
 80027e2:	4aa4      	ldr	r2, [pc, #656]	; (8002a74 <main+0x2bc>)
 80027e4:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80027e8:	2078      	movs	r0, #120	; 0x78
 80027ea:	f7ff fb1f 	bl	8001e2c <LCD_Font>
  	for(int i = 0; i<360; i+= 30) {
 80027ee:	2300      	movs	r3, #0
 80027f0:	657b      	str	r3, [r7, #84]	; 0x54
 80027f2:	e0a8      	b.n	8002946 <main+0x18e>

  	    sx = cos((i-90)*0.0174532925);
 80027f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027f6:	3b5a      	subs	r3, #90	; 0x5a
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fd fe9b 	bl	8000534 <__aeabi_i2d>
 80027fe:	a39a      	add	r3, pc, #616	; (adr r3, 8002a68 <main+0x2b0>)
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	f7fd ff00 	bl	8000608 <__aeabi_dmul>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	ec43 2b17 	vmov	d7, r2, r3
 8002810:	eeb0 0a47 	vmov.f32	s0, s14
 8002814:	eef0 0a67 	vmov.f32	s1, s15
 8002818:	f004 fb12 	bl	8006e40 <cos>
 800281c:	ec53 2b10 	vmov	r2, r3, d0
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f9c8 	bl	8000bb8 <__aeabi_d2f>
 8002828:	4603      	mov	r3, r0
 800282a:	4a93      	ldr	r2, [pc, #588]	; (8002a78 <main+0x2c0>)
 800282c:	6013      	str	r3, [r2, #0]
  	    sy = sin((i-90)*0.0174532925);
 800282e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002830:	3b5a      	subs	r3, #90	; 0x5a
 8002832:	4618      	mov	r0, r3
 8002834:	f7fd fe7e 	bl	8000534 <__aeabi_i2d>
 8002838:	a38b      	add	r3, pc, #556	; (adr r3, 8002a68 <main+0x2b0>)
 800283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283e:	f7fd fee3 	bl	8000608 <__aeabi_dmul>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	ec43 2b17 	vmov	d7, r2, r3
 800284a:	eeb0 0a47 	vmov.f32	s0, s14
 800284e:	eef0 0a67 	vmov.f32	s1, s15
 8002852:	f004 fb49 	bl	8006ee8 <sin>
 8002856:	ec53 2b10 	vmov	r2, r3, d0
 800285a:	4610      	mov	r0, r2
 800285c:	4619      	mov	r1, r3
 800285e:	f7fe f9ab 	bl	8000bb8 <__aeabi_d2f>
 8002862:	4603      	mov	r3, r0
 8002864:	4a85      	ldr	r2, [pc, #532]	; (8002a7c <main+0x2c4>)
 8002866:	6013      	str	r3, [r2, #0]
  	    x00 = sx*114+240;
 8002868:	4b83      	ldr	r3, [pc, #524]	; (8002a78 <main+0x2c0>)
 800286a:	edd3 7a00 	vldr	s15, [r3]
 800286e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002a80 <main+0x2c8>
 8002872:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002876:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8002a84 <main+0x2cc>
 800287a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800287e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002882:	ee17 3a90 	vmov	r3, s15
 8002886:	b29a      	uxth	r2, r3
 8002888:	4b7f      	ldr	r3, [pc, #508]	; (8002a88 <main+0x2d0>)
 800288a:	801a      	strh	r2, [r3, #0]
  	    y00 = sy*114+160;
 800288c:	4b7b      	ldr	r3, [pc, #492]	; (8002a7c <main+0x2c4>)
 800288e:	edd3 7a00 	vldr	s15, [r3]
 8002892:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002a80 <main+0x2c8>
 8002896:	ee67 7a87 	vmul.f32	s15, s15, s14
 800289a:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002a8c <main+0x2d4>
 800289e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a6:	ee17 3a90 	vmov	r3, s15
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	4b78      	ldr	r3, [pc, #480]	; (8002a90 <main+0x2d8>)
 80028ae:	801a      	strh	r2, [r3, #0]
  	    x11 = sx*100+240;
 80028b0:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <main+0x2c0>)
 80028b2:	edd3 7a00 	vldr	s15, [r3]
 80028b6:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8002a94 <main+0x2dc>
 80028ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028be:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002a84 <main+0x2cc>
 80028c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ca:	ee17 3a90 	vmov	r3, s15
 80028ce:	b29a      	uxth	r2, r3
 80028d0:	4b71      	ldr	r3, [pc, #452]	; (8002a98 <main+0x2e0>)
 80028d2:	801a      	strh	r2, [r3, #0]
  	    y11 = sy*100+160;
 80028d4:	4b69      	ldr	r3, [pc, #420]	; (8002a7c <main+0x2c4>)
 80028d6:	edd3 7a00 	vldr	s15, [r3]
 80028da:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8002a94 <main+0x2dc>
 80028de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028e2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002a8c <main+0x2d4>
 80028e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028ee:	ee17 3a90 	vmov	r3, s15
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	4b69      	ldr	r3, [pc, #420]	; (8002a9c <main+0x2e4>)
 80028f6:	801a      	strh	r2, [r3, #0]

  	    TFT_Draw_Line(x00-1, y00-1, x11, y11,1,WHITE);
 80028f8:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <main+0x2d0>)
 80028fa:	881b      	ldrh	r3, [r3, #0]
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b298      	uxth	r0, r3
 8002900:	4b63      	ldr	r3, [pc, #396]	; (8002a90 <main+0x2d8>)
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	3b01      	subs	r3, #1
 8002906:	b299      	uxth	r1, r3
 8002908:	4b63      	ldr	r3, [pc, #396]	; (8002a98 <main+0x2e0>)
 800290a:	881a      	ldrh	r2, [r3, #0]
 800290c:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <main+0x2e4>)
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002914:	9401      	str	r4, [sp, #4]
 8002916:	2401      	movs	r4, #1
 8002918:	9400      	str	r4, [sp, #0]
 800291a:	f7fe fd6b 	bl	80013f4 <TFT_Draw_Line>
  	    if (i == 150) {
 800291e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002920:	2b96      	cmp	r3, #150	; 0x96
 8002922:	d10d      	bne.n	8002940 <main+0x188>
  	    	TFT_Draw_Line(x00, y00, x11, y11,1,BLACK);
 8002924:	4b58      	ldr	r3, [pc, #352]	; (8002a88 <main+0x2d0>)
 8002926:	8818      	ldrh	r0, [r3, #0]
 8002928:	4b59      	ldr	r3, [pc, #356]	; (8002a90 <main+0x2d8>)
 800292a:	8819      	ldrh	r1, [r3, #0]
 800292c:	4b5a      	ldr	r3, [pc, #360]	; (8002a98 <main+0x2e0>)
 800292e:	881a      	ldrh	r2, [r3, #0]
 8002930:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <main+0x2e4>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	2400      	movs	r4, #0
 8002936:	9401      	str	r4, [sp, #4]
 8002938:	2401      	movs	r4, #1
 800293a:	9400      	str	r4, [sp, #0]
 800293c:	f7fe fd5a 	bl	80013f4 <TFT_Draw_Line>
  	for(int i = 0; i<360; i+= 30) {
 8002940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002942:	331e      	adds	r3, #30
 8002944:	657b      	str	r3, [r7, #84]	; 0x54
 8002946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002948:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800294c:	f6ff af52 	blt.w	80027f4 <main+0x3c>
  	    }
  	  }

  	LCD_Font(235, 254, "0", _Open_Sans_Bold_18, 1, WHITE);
 8002950:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002954:	9301      	str	r3, [sp, #4]
 8002956:	2301      	movs	r3, #1
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	4b51      	ldr	r3, [pc, #324]	; (8002aa0 <main+0x2e8>)
 800295c:	4a51      	ldr	r2, [pc, #324]	; (8002aa4 <main+0x2ec>)
 800295e:	21fe      	movs	r1, #254	; 0xfe
 8002960:	20eb      	movs	r0, #235	; 0xeb
 8002962:	f7ff fa63 	bl	8001e2c <LCD_Font>
  	LCD_Font(193, 240, "10", _Open_Sans_Bold_18, 1, WHITE);
 8002966:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296a:	9301      	str	r3, [sp, #4]
 800296c:	2301      	movs	r3, #1
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <main+0x2e8>)
 8002972:	4a4d      	ldr	r2, [pc, #308]	; (8002aa8 <main+0x2f0>)
 8002974:	21f0      	movs	r1, #240	; 0xf0
 8002976:	20c1      	movs	r0, #193	; 0xc1
 8002978:	f7ff fa58 	bl	8001e2c <LCD_Font>
  	LCD_Font(158, 210, "20", _Open_Sans_Bold_18, 1, WHITE);
 800297c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2301      	movs	r3, #1
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	4b46      	ldr	r3, [pc, #280]	; (8002aa0 <main+0x2e8>)
 8002988:	4a48      	ldr	r2, [pc, #288]	; (8002aac <main+0x2f4>)
 800298a:	21d2      	movs	r1, #210	; 0xd2
 800298c:	209e      	movs	r0, #158	; 0x9e
 800298e:	f7ff fa4d 	bl	8001e2c <LCD_Font>
  	LCD_Font(142, 165, "30", _Open_Sans_Bold_18, 1, WHITE);
 8002992:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	2301      	movs	r3, #1
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4b40      	ldr	r3, [pc, #256]	; (8002aa0 <main+0x2e8>)
 800299e:	4a44      	ldr	r2, [pc, #272]	; (8002ab0 <main+0x2f8>)
 80029a0:	21a5      	movs	r1, #165	; 0xa5
 80029a2:	208e      	movs	r0, #142	; 0x8e
 80029a4:	f7ff fa42 	bl	8001e2c <LCD_Font>
  	LCD_Font(155, 120, "40", _Open_Sans_Bold_18, 1, WHITE);
 80029a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ac:	9301      	str	r3, [sp, #4]
 80029ae:	2301      	movs	r3, #1
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <main+0x2e8>)
 80029b4:	4a3f      	ldr	r2, [pc, #252]	; (8002ab4 <main+0x2fc>)
 80029b6:	2178      	movs	r1, #120	; 0x78
 80029b8:	209b      	movs	r0, #155	; 0x9b
 80029ba:	f7ff fa37 	bl	8001e2c <LCD_Font>
  	LCD_Font(185, 91, "50", _Open_Sans_Bold_18, 1, WHITE);
 80029be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	2301      	movs	r3, #1
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	4b35      	ldr	r3, [pc, #212]	; (8002aa0 <main+0x2e8>)
 80029ca:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <main+0x300>)
 80029cc:	215b      	movs	r1, #91	; 0x5b
 80029ce:	20b9      	movs	r0, #185	; 0xb9
 80029d0:	f7ff fa2c 	bl	8001e2c <LCD_Font>
  	LCD_Font(230, 76, "60", _Open_Sans_Bold_18, 1, WHITE);
 80029d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2301      	movs	r3, #1
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <main+0x2e8>)
 80029e0:	4a36      	ldr	r2, [pc, #216]	; (8002abc <main+0x304>)
 80029e2:	214c      	movs	r1, #76	; 0x4c
 80029e4:	20e6      	movs	r0, #230	; 0xe6
 80029e6:	f7ff fa21 	bl	8001e2c <LCD_Font>
  	LCD_Font(275, 91, "70", _Open_Sans_Bold_18, 1, WHITE);
 80029ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029ee:	9301      	str	r3, [sp, #4]
 80029f0:	2301      	movs	r3, #1
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <main+0x2e8>)
 80029f6:	4a32      	ldr	r2, [pc, #200]	; (8002ac0 <main+0x308>)
 80029f8:	215b      	movs	r1, #91	; 0x5b
 80029fa:	f240 1013 	movw	r0, #275	; 0x113
 80029fe:	f7ff fa15 	bl	8001e2c <LCD_Font>
  	LCD_Font(300, 120, "80", _Open_Sans_Bold_18, 1, WHITE);
 8002a02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a06:	9301      	str	r3, [sp, #4]
 8002a08:	2301      	movs	r3, #1
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <main+0x2e8>)
 8002a0e:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <main+0x30c>)
 8002a10:	2178      	movs	r1, #120	; 0x78
 8002a12:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002a16:	f7ff fa09 	bl	8001e2c <LCD_Font>
  	LCD_Font(315, 165, "90", _Open_Sans_Bold_18, 1, WHITE);
 8002a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	2301      	movs	r3, #1
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <main+0x2e8>)
 8002a26:	4a28      	ldr	r2, [pc, #160]	; (8002ac8 <main+0x310>)
 8002a28:	21a5      	movs	r1, #165	; 0xa5
 8002a2a:	f240 103b 	movw	r0, #315	; 0x13b
 8002a2e:	f7ff f9fd 	bl	8001e2c <LCD_Font>
  	LCD_Font(290, 215, "100", _Open_Sans_Bold_18, 1, WHITE);
 8002a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	2301      	movs	r3, #1
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <main+0x2e8>)
 8002a3e:	4a23      	ldr	r2, [pc, #140]	; (8002acc <main+0x314>)
 8002a40:	21d7      	movs	r1, #215	; 0xd7
 8002a42:	f44f 7091 	mov.w	r0, #290	; 0x122
 8002a46:	f7ff f9f1 	bl	8001e2c <LCD_Font>
  	LCD_Font(228, 210, "C", _Open_Sans_Bold_48, 1, WHITE);
 8002a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	2301      	movs	r3, #1
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4b1e      	ldr	r3, [pc, #120]	; (8002ad0 <main+0x318>)
 8002a56:	4a1f      	ldr	r2, [pc, #124]	; (8002ad4 <main+0x31c>)
 8002a58:	21d2      	movs	r1, #210	; 0xd2
 8002a5a:	20e4      	movs	r0, #228	; 0xe4
 8002a5c:	f7ff f9e6 	bl	8001e2c <LCD_Font>




  	for(int i = 0; i<360; i+= 30) {
 8002a60:	2300      	movs	r3, #0
 8002a62:	653b      	str	r3, [r7, #80]	; 0x50
 8002a64:	e0e1      	b.n	8002c2a <main+0x472>
 8002a66:	bf00      	nop
 8002a68:	a1fae711 	.word	0xa1fae711
 8002a6c:	3f91df46 	.word	0x3f91df46
 8002a70:	0801aef4 	.word	0x0801aef4
 8002a74:	08007f88 	.word	0x08007f88
 8002a78:	200001fc 	.word	0x200001fc
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	42e40000 	.word	0x42e40000
 8002a84:	43700000 	.word	0x43700000
 8002a88:	200001f4 	.word	0x200001f4
 8002a8c:	43200000 	.word	0x43200000
 8002a90:	200001f8 	.word	0x200001f8
 8002a94:	42c80000 	.word	0x42c80000
 8002a98:	200001f6 	.word	0x200001f6
 8002a9c:	200001fa 	.word	0x200001fa
 8002aa0:	08008cfc 	.word	0x08008cfc
 8002aa4:	08007f90 	.word	0x08007f90
 8002aa8:	08007f94 	.word	0x08007f94
 8002aac:	08007f98 	.word	0x08007f98
 8002ab0:	08007f9c 	.word	0x08007f9c
 8002ab4:	08007fa0 	.word	0x08007fa0
 8002ab8:	08007fa4 	.word	0x08007fa4
 8002abc:	08007fa8 	.word	0x08007fa8
 8002ac0:	08007fac 	.word	0x08007fac
 8002ac4:	08007fb0 	.word	0x08007fb0
 8002ac8:	08007fb4 	.word	0x08007fb4
 8002acc:	08007fb8 	.word	0x08007fb8
 8002ad0:	0800bbac 	.word	0x0800bbac
 8002ad4:	08007fbc 	.word	0x08007fbc

  	    sx = cos((i-90)*0.0174532925);
 8002ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ada:	3b5a      	subs	r3, #90	; 0x5a
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd29 	bl	8000534 <__aeabi_i2d>
 8002ae2:	a3c9      	add	r3, pc, #804	; (adr r3, 8002e08 <main+0x650>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fd8e 	bl	8000608 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	ec43 2b17 	vmov	d7, r2, r3
 8002af4:	eeb0 0a47 	vmov.f32	s0, s14
 8002af8:	eef0 0a67 	vmov.f32	s1, s15
 8002afc:	f004 f9a0 	bl	8006e40 <cos>
 8002b00:	ec53 2b10 	vmov	r2, r3, d0
 8002b04:	4610      	mov	r0, r2
 8002b06:	4619      	mov	r1, r3
 8002b08:	f7fe f856 	bl	8000bb8 <__aeabi_d2f>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	4ac0      	ldr	r2, [pc, #768]	; (8002e10 <main+0x658>)
 8002b10:	6013      	str	r3, [r2, #0]
  	    sy = sin((i-90)*0.0174532925);
 8002b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b14:	3b5a      	subs	r3, #90	; 0x5a
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd0c 	bl	8000534 <__aeabi_i2d>
 8002b1c:	a3ba      	add	r3, pc, #744	; (adr r3, 8002e08 <main+0x650>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd71 	bl	8000608 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	ec43 2b17 	vmov	d7, r2, r3
 8002b2e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b32:	eef0 0a67 	vmov.f32	s1, s15
 8002b36:	f004 f9d7 	bl	8006ee8 <sin>
 8002b3a:	ec53 2b10 	vmov	r2, r3, d0
 8002b3e:	4610      	mov	r0, r2
 8002b40:	4619      	mov	r1, r3
 8002b42:	f7fe f839 	bl	8000bb8 <__aeabi_d2f>
 8002b46:	4603      	mov	r3, r0
 8002b48:	4ab2      	ldr	r2, [pc, #712]	; (8002e14 <main+0x65c>)
 8002b4a:	6013      	str	r3, [r2, #0]
  	    x00 = sx*114+540;  //240
 8002b4c:	4bb0      	ldr	r3, [pc, #704]	; (8002e10 <main+0x658>)
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8002e18 <main+0x660>
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	ed9f 7ab0 	vldr	s14, [pc, #704]	; 8002e1c <main+0x664>
 8002b5e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b66:	ee17 3a90 	vmov	r3, s15
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4bac      	ldr	r3, [pc, #688]	; (8002e20 <main+0x668>)
 8002b6e:	801a      	strh	r2, [r3, #0]
  	    y00 = sy*114+160;
 8002b70:	4ba8      	ldr	r3, [pc, #672]	; (8002e14 <main+0x65c>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002e18 <main+0x660>
 8002b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7e:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8002e24 <main+0x66c>
 8002b82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b8a:	ee17 3a90 	vmov	r3, s15
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4ba5      	ldr	r3, [pc, #660]	; (8002e28 <main+0x670>)
 8002b92:	801a      	strh	r2, [r3, #0]
  	    x11 = sx*100+540;   //240
 8002b94:	4b9e      	ldr	r3, [pc, #632]	; (8002e10 <main+0x658>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002e2c <main+0x674>
 8002b9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8002e1c <main+0x664>
 8002ba6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bae:	ee17 3a90 	vmov	r3, s15
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b9e      	ldr	r3, [pc, #632]	; (8002e30 <main+0x678>)
 8002bb6:	801a      	strh	r2, [r3, #0]
  	    y11 = sy*100+160;
 8002bb8:	4b96      	ldr	r3, [pc, #600]	; (8002e14 <main+0x65c>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002e2c <main+0x674>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002e24 <main+0x66c>
 8002bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bd2:	ee17 3a90 	vmov	r3, s15
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b96      	ldr	r3, [pc, #600]	; (8002e34 <main+0x67c>)
 8002bda:	801a      	strh	r2, [r3, #0]

  	    TFT_Draw_Line(x00-1, y00-1, x11, y11,1,WHITE);
 8002bdc:	4b90      	ldr	r3, [pc, #576]	; (8002e20 <main+0x668>)
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b298      	uxth	r0, r3
 8002be4:	4b90      	ldr	r3, [pc, #576]	; (8002e28 <main+0x670>)
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b299      	uxth	r1, r3
 8002bec:	4b90      	ldr	r3, [pc, #576]	; (8002e30 <main+0x678>)
 8002bee:	881a      	ldrh	r2, [r3, #0]
 8002bf0:	4b90      	ldr	r3, [pc, #576]	; (8002e34 <main+0x67c>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8002bf8:	9401      	str	r4, [sp, #4]
 8002bfa:	2401      	movs	r4, #1
 8002bfc:	9400      	str	r4, [sp, #0]
 8002bfe:	f7fe fbf9 	bl	80013f4 <TFT_Draw_Line>
  	    if (i == 150) {
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	2b96      	cmp	r3, #150	; 0x96
 8002c06:	d10d      	bne.n	8002c24 <main+0x46c>
  	    	TFT_Draw_Line(x00, y00, x11, y11,1,BLACK);
 8002c08:	4b85      	ldr	r3, [pc, #532]	; (8002e20 <main+0x668>)
 8002c0a:	8818      	ldrh	r0, [r3, #0]
 8002c0c:	4b86      	ldr	r3, [pc, #536]	; (8002e28 <main+0x670>)
 8002c0e:	8819      	ldrh	r1, [r3, #0]
 8002c10:	4b87      	ldr	r3, [pc, #540]	; (8002e30 <main+0x678>)
 8002c12:	881a      	ldrh	r2, [r3, #0]
 8002c14:	4b87      	ldr	r3, [pc, #540]	; (8002e34 <main+0x67c>)
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2400      	movs	r4, #0
 8002c1a:	9401      	str	r4, [sp, #4]
 8002c1c:	2401      	movs	r4, #1
 8002c1e:	9400      	str	r4, [sp, #0]
 8002c20:	f7fe fbe8 	bl	80013f4 <TFT_Draw_Line>
  	for(int i = 0; i<360; i+= 30) {
 8002c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c26:	331e      	adds	r3, #30
 8002c28:	653b      	str	r3, [r7, #80]	; 0x50
 8002c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002c30:	f6ff af52 	blt.w	8002ad8 <main+0x320>
  	    }
  	  }

  	LCD_Font(535, 254, "0", _Open_Sans_Bold_18, 1, WHITE);
 8002c34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c38:	9301      	str	r3, [sp, #4]
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	4b7e      	ldr	r3, [pc, #504]	; (8002e38 <main+0x680>)
 8002c40:	4a7e      	ldr	r2, [pc, #504]	; (8002e3c <main+0x684>)
 8002c42:	21fe      	movs	r1, #254	; 0xfe
 8002c44:	f240 2017 	movw	r0, #535	; 0x217
 8002c48:	f7ff f8f0 	bl	8001e2c <LCD_Font>
  	LCD_Font(493, 240, "10", _Open_Sans_Bold_18, 1, WHITE);
 8002c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c50:	9301      	str	r3, [sp, #4]
 8002c52:	2301      	movs	r3, #1
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	4b78      	ldr	r3, [pc, #480]	; (8002e38 <main+0x680>)
 8002c58:	4a79      	ldr	r2, [pc, #484]	; (8002e40 <main+0x688>)
 8002c5a:	21f0      	movs	r1, #240	; 0xf0
 8002c5c:	f240 10ed 	movw	r0, #493	; 0x1ed
 8002c60:	f7ff f8e4 	bl	8001e2c <LCD_Font>
  	LCD_Font(458, 210, "20", _Open_Sans_Bold_18, 1, WHITE);
 8002c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c68:	9301      	str	r3, [sp, #4]
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	4b72      	ldr	r3, [pc, #456]	; (8002e38 <main+0x680>)
 8002c70:	4a74      	ldr	r2, [pc, #464]	; (8002e44 <main+0x68c>)
 8002c72:	21d2      	movs	r1, #210	; 0xd2
 8002c74:	f44f 70e5 	mov.w	r0, #458	; 0x1ca
 8002c78:	f7ff f8d8 	bl	8001e2c <LCD_Font>
  	LCD_Font(442, 165, "30", _Open_Sans_Bold_18, 1, WHITE);
 8002c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c80:	9301      	str	r3, [sp, #4]
 8002c82:	2301      	movs	r3, #1
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	4b6c      	ldr	r3, [pc, #432]	; (8002e38 <main+0x680>)
 8002c88:	4a6f      	ldr	r2, [pc, #444]	; (8002e48 <main+0x690>)
 8002c8a:	21a5      	movs	r1, #165	; 0xa5
 8002c8c:	f44f 70dd 	mov.w	r0, #442	; 0x1ba
 8002c90:	f7ff f8cc 	bl	8001e2c <LCD_Font>
  	LCD_Font(455, 120, "40", _Open_Sans_Bold_18, 1, WHITE);
 8002c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c98:	9301      	str	r3, [sp, #4]
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	9300      	str	r3, [sp, #0]
 8002c9e:	4b66      	ldr	r3, [pc, #408]	; (8002e38 <main+0x680>)
 8002ca0:	4a6a      	ldr	r2, [pc, #424]	; (8002e4c <main+0x694>)
 8002ca2:	2178      	movs	r1, #120	; 0x78
 8002ca4:	f240 10c7 	movw	r0, #455	; 0x1c7
 8002ca8:	f7ff f8c0 	bl	8001e2c <LCD_Font>
  	LCD_Font(485, 91, "50", _Open_Sans_Bold_18, 1, WHITE);
 8002cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	4b60      	ldr	r3, [pc, #384]	; (8002e38 <main+0x680>)
 8002cb8:	4a65      	ldr	r2, [pc, #404]	; (8002e50 <main+0x698>)
 8002cba:	215b      	movs	r1, #91	; 0x5b
 8002cbc:	f240 10e5 	movw	r0, #485	; 0x1e5
 8002cc0:	f7ff f8b4 	bl	8001e2c <LCD_Font>
  	LCD_Font(530, 76, "60", _Open_Sans_Bold_18, 1, WHITE);
 8002cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc8:	9301      	str	r3, [sp, #4]
 8002cca:	2301      	movs	r3, #1
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b5a      	ldr	r3, [pc, #360]	; (8002e38 <main+0x680>)
 8002cd0:	4a60      	ldr	r2, [pc, #384]	; (8002e54 <main+0x69c>)
 8002cd2:	214c      	movs	r1, #76	; 0x4c
 8002cd4:	f240 2012 	movw	r0, #530	; 0x212
 8002cd8:	f7ff f8a8 	bl	8001e2c <LCD_Font>
  	LCD_Font(575, 91, "70", _Open_Sans_Bold_18, 1, WHITE);
 8002cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <main+0x680>)
 8002ce8:	4a5b      	ldr	r2, [pc, #364]	; (8002e58 <main+0x6a0>)
 8002cea:	215b      	movs	r1, #91	; 0x5b
 8002cec:	f240 203f 	movw	r0, #575	; 0x23f
 8002cf0:	f7ff f89c 	bl	8001e2c <LCD_Font>
  	LCD_Font(600, 120, "80", _Open_Sans_Bold_18, 1, WHITE);
 8002cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cf8:	9301      	str	r3, [sp, #4]
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	4b4e      	ldr	r3, [pc, #312]	; (8002e38 <main+0x680>)
 8002d00:	4a56      	ldr	r2, [pc, #344]	; (8002e5c <main+0x6a4>)
 8002d02:	2178      	movs	r1, #120	; 0x78
 8002d04:	f44f 7016 	mov.w	r0, #600	; 0x258
 8002d08:	f7ff f890 	bl	8001e2c <LCD_Font>
  	LCD_Font(615, 165, "90", _Open_Sans_Bold_18, 1, WHITE);
 8002d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d10:	9301      	str	r3, [sp, #4]
 8002d12:	2301      	movs	r3, #1
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	4b48      	ldr	r3, [pc, #288]	; (8002e38 <main+0x680>)
 8002d18:	4a51      	ldr	r2, [pc, #324]	; (8002e60 <main+0x6a8>)
 8002d1a:	21a5      	movs	r1, #165	; 0xa5
 8002d1c:	f240 2067 	movw	r0, #615	; 0x267
 8002d20:	f7ff f884 	bl	8001e2c <LCD_Font>
  	LCD_Font(590, 215, "100", _Open_Sans_Bold_18, 1, WHITE);
 8002d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <main+0x680>)
 8002d30:	4a4c      	ldr	r2, [pc, #304]	; (8002e64 <main+0x6ac>)
 8002d32:	21d7      	movs	r1, #215	; 0xd7
 8002d34:	f240 204e 	movw	r0, #590	; 0x24e
 8002d38:	f7ff f878 	bl	8001e2c <LCD_Font>
  	LCD_Font(528, 210, "C", _Open_Sans_Bold_48, 1, WHITE);
 8002d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d40:	9301      	str	r3, [sp, #4]
 8002d42:	2301      	movs	r3, #1
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	4b48      	ldr	r3, [pc, #288]	; (8002e68 <main+0x6b0>)
 8002d48:	4a48      	ldr	r2, [pc, #288]	; (8002e6c <main+0x6b4>)
 8002d4a:	21d2      	movs	r1, #210	; 0xd2
 8002d4c:	f44f 7004 	mov.w	r0, #528	; 0x210
 8002d50:	f7ff f86c 	bl	8001e2c <LCD_Font>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    //void TFT_Draw_Round_Rect(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint16_t color)
    //void TFT_Draw_Fill_Rectangle(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t color)
    TFT_Draw_Fill_Rectangle (300, 300, 80, 80, BLUE);
 8002d54:	231f      	movs	r3, #31
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	2350      	movs	r3, #80	; 0x50
 8002d5a:	2250      	movs	r2, #80	; 0x50
 8002d5c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002d64:	f7fe fd4d 	bl	8001802 <TFT_Draw_Fill_Rectangle>
    TFT_Draw_Fill_Rectangle (50, 300, 80, 80, BLUE);
 8002d68:	231f      	movs	r3, #31
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	2350      	movs	r3, #80	; 0x50
 8002d6e:	2250      	movs	r2, #80	; 0x50
 8002d70:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d74:	2032      	movs	r0, #50	; 0x32
 8002d76:	f7fe fd44 	bl	8001802 <TFT_Draw_Fill_Rectangle>
    LCD_Font(50, 300, "hej", _Open_Sans_Bold_10, 1, WHITE);
 8002d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d7e:	9301      	str	r3, [sp, #4]
 8002d80:	2301      	movs	r3, #1
 8002d82:	9300      	str	r3, [sp, #0]
 8002d84:	4b3a      	ldr	r3, [pc, #232]	; (8002e70 <main+0x6b8>)
 8002d86:	4a3b      	ldr	r2, [pc, #236]	; (8002e74 <main+0x6bc>)
 8002d88:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002d8c:	2032      	movs	r0, #50	; 0x32
 8002d8e:	f7ff f84d 	bl	8001e2c <LCD_Font>
    TFT_Draw_Fill_Round_Rect (700, 300, 80, 80, 10,  BLUE);
 8002d92:	231f      	movs	r3, #31
 8002d94:	9301      	str	r3, [sp, #4]
 8002d96:	230a      	movs	r3, #10
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	2350      	movs	r3, #80	; 0x50
 8002d9c:	2250      	movs	r2, #80	; 0x50
 8002d9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8002da2:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002da6:	f7fe ff27 	bl	8001bf8 <TFT_Draw_Fill_Round_Rect>
    LCD_Font(700, 350, "nArA", _Open_Sans_Bold_10, 2, WHITE);
 8002daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dae:	9301      	str	r3, [sp, #4]
 8002db0:	2302      	movs	r3, #2
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	4b2e      	ldr	r3, [pc, #184]	; (8002e70 <main+0x6b8>)
 8002db6:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <main+0x6c0>)
 8002db8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002dbc:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002dc0:	f7ff f834 	bl	8001e2c <LCD_Font>
    TFT_Draw_Circle(300, 340, 40, 1, 10, WHITE);
 8002dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	230a      	movs	r3, #10
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2301      	movs	r3, #1
 8002dd0:	2228      	movs	r2, #40	; 0x28
 8002dd2:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8002dd6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002dda:	f7fe fd40 	bl	800185e <TFT_Draw_Circle>

    int allertX = 300;	//MAX size is 220x200 - with bigger tabs malloc has problem
 8002dde:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002de2:	64bb      	str	r3, [r7, #72]	; 0x48
    int allertY = 200;
 8002de4:	23c8      	movs	r3, #200	; 0xc8
 8002de6:	647b      	str	r3, [r7, #68]	; 0x44
    uint16_t *save = (uint16_t *)malloc(allertX* allertY * sizeof(uint16_t));
 8002de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002dec:	fb02 f303 	mul.w	r3, r2, r3
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4618      	mov	r0, r3
 8002df4:	f001 f99e 	bl	8004134 <malloc>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	643b      	str	r3, [r7, #64]	; 0x40
	  	  //	  TFT_Clear_Screen(RED);




	  	  					 	for(int j = 0; j<850; j+= 30) {
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e00:	e06f      	b.n	8002ee2 <main+0x72a>
 8002e02:	bf00      	nop
 8002e04:	f3af 8000 	nop.w
 8002e08:	a1fae711 	.word	0xa1fae711
 8002e0c:	3f91df46 	.word	0x3f91df46
 8002e10:	200001fc 	.word	0x200001fc
 8002e14:	20000000 	.word	0x20000000
 8002e18:	42e40000 	.word	0x42e40000
 8002e1c:	44070000 	.word	0x44070000
 8002e20:	200001f4 	.word	0x200001f4
 8002e24:	43200000 	.word	0x43200000
 8002e28:	200001f8 	.word	0x200001f8
 8002e2c:	42c80000 	.word	0x42c80000
 8002e30:	200001f6 	.word	0x200001f6
 8002e34:	200001fa 	.word	0x200001fa
 8002e38:	08008cfc 	.word	0x08008cfc
 8002e3c:	08007f90 	.word	0x08007f90
 8002e40:	08007f94 	.word	0x08007f94
 8002e44:	08007f98 	.word	0x08007f98
 8002e48:	08007f9c 	.word	0x08007f9c
 8002e4c:	08007fa0 	.word	0x08007fa0
 8002e50:	08007fa4 	.word	0x08007fa4
 8002e54:	08007fa8 	.word	0x08007fa8
 8002e58:	08007fac 	.word	0x08007fac
 8002e5c:	08007fb0 	.word	0x08007fb0
 8002e60:	08007fb4 	.word	0x08007fb4
 8002e64:	08007fb8 	.word	0x08007fb8
 8002e68:	0800bbac 	.word	0x0800bbac
 8002e6c:	08007fbc 	.word	0x08007fbc
 8002e70:	080084c0 	.word	0x080084c0
 8002e74:	08007fc0 	.word	0x08007fc0
 8002e78:	08007fc4 	.word	0x08007fc4
	  	  					 		ringMeter(j, 0, 1020, 100, 20, 140, RED2GREEN);
 8002e7c:	2305      	movs	r3, #5
 8002e7e:	9302      	str	r3, [sp, #8]
 8002e80:	238c      	movs	r3, #140	; 0x8c
 8002e82:	9301      	str	r3, [sp, #4]
 8002e84:	2314      	movs	r3, #20
 8002e86:	9300      	str	r3, [sp, #0]
 8002e88:	2364      	movs	r3, #100	; 0x64
 8002e8a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8002e8e:	2100      	movs	r1, #0
 8002e90:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e92:	f7ff fa11 	bl	80022b8 <ringMeter>
	  	  					 		sprintf(string, "%.1f", j/8.5);
 8002e96:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002e98:	f7fd fb4c 	bl	8000534 <__aeabi_i2d>
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <main+0x764>)
 8002ea2:	f7fd fcdb 	bl	800085c <__aeabi_ddiv>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	f107 0020 	add.w	r0, r7, #32
 8002eae:	491c      	ldr	r1, [pc, #112]	; (8002f20 <main+0x768>)
 8002eb0:	f001 ff1c 	bl	8004cec <siprintf>
	  	  					 		TFT_Draw_Fill_Rectangle(190,115, 100, 50,BLACK);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2332      	movs	r3, #50	; 0x32
 8002eba:	2264      	movs	r2, #100	; 0x64
 8002ebc:	2173      	movs	r1, #115	; 0x73
 8002ebe:	20be      	movs	r0, #190	; 0xbe
 8002ec0:	f7fe fc9f 	bl	8001802 <TFT_Draw_Fill_Rectangle>
	  	  					 		  LCD_Font(190, 165, string, _Open_Sans_Bold_48, 1, WHITE);
 8002ec4:	f107 0220 	add.w	r2, r7, #32
 8002ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	4b14      	ldr	r3, [pc, #80]	; (8002f24 <main+0x76c>)
 8002ed4:	21a5      	movs	r1, #165	; 0xa5
 8002ed6:	20be      	movs	r0, #190	; 0xbe
 8002ed8:	f7fe ffa8 	bl	8001e2c <LCD_Font>
	  	  					 	for(int j = 0; j<850; j+= 30) {
 8002edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ede:	331e      	adds	r3, #30
 8002ee0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee4:	f240 3251 	movw	r2, #849	; 0x351
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	ddc7      	ble.n	8002e7c <main+0x6c4>
	  	  						 		sprintf(string, "%.1f", j/8.5);
	  	  						 		TFT_Draw_Fill_Rectangle(490,115, 100, 50,BLACK);
	  	  						 		  LCD_Font(490, 165, string, _Open_Sans_Bold_48, 1, WHITE);*/
	  	  					 	  }

	  	  					TFT_Draw_Alert (allertX, allertY, "nowy allert",  save, _Open_Sans_Bold_20);
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	b298      	uxth	r0, r3
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef2:	b299      	uxth	r1, r3
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <main+0x770>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <main+0x774>)
 8002efc:	f7fe fb42 	bl	8001584 <TFT_Draw_Alert>
	  	  					HAL_Delay(3000);
 8002f00:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002f04:	f000 fa4a 	bl	800339c <HAL_Delay>
	  	  					TFT_Restore_Alert(allertX, allertY, save);
 8002f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f0e:	b291      	uxth	r1, r2
 8002f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fe fb94 	bl	8001640 <TFT_Restore_Alert>
	  	  					 	for(int j = 0; j<850; j+= 30) {
 8002f18:	e770      	b.n	8002dfc <main+0x644>
 8002f1a:	bf00      	nop
 8002f1c:	40210000 	.word	0x40210000
 8002f20:	08007fcc 	.word	0x08007fcc
 8002f24:	0800bbac 	.word	0x0800bbac
 8002f28:	08009640 	.word	0x08009640
 8002f2c:	08007fd4 	.word	0x08007fd4

08002f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b094      	sub	sp, #80	; 0x50
 8002f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f36:	f107 0320 	add.w	r3, r7, #32
 8002f3a:	2230      	movs	r2, #48	; 0x30
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f001 ff37 	bl	8004db2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f44:	f107 030c 	add.w	r3, r7, #12
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	609a      	str	r2, [r3, #8]
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f54:	2300      	movs	r3, #0
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <SystemClock_Config+0xcc>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <SystemClock_Config+0xcc>)
 8002f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	; 0x40
 8002f64:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <SystemClock_Config+0xcc>)
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	60bb      	str	r3, [r7, #8]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f70:	2300      	movs	r3, #0
 8002f72:	607b      	str	r3, [r7, #4]
 8002f74:	4b22      	ldr	r3, [pc, #136]	; (8003000 <SystemClock_Config+0xd0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002f7c:	4a20      	ldr	r2, [pc, #128]	; (8003000 <SystemClock_Config+0xd0>)
 8002f7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b1e      	ldr	r3, [pc, #120]	; (8003000 <SystemClock_Config+0xd0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002f8c:	607b      	str	r3, [r7, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f90:	2302      	movs	r3, #2
 8002f92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f94:	2301      	movs	r3, #1
 8002f96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f98:	2310      	movs	r3, #16
 8002f9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002fa4:	2308      	movs	r3, #8
 8002fa6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002fa8:	2354      	movs	r3, #84	; 0x54
 8002faa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fac:	2302      	movs	r3, #2
 8002fae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fb4:	f107 0320 	add.w	r3, r7, #32
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fc97 	bl	80038ec <HAL_RCC_OscConfig>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002fc4:	f000 f81e 	bl	8003004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fc8:	230f      	movs	r3, #15
 8002fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002fde:	f107 030c 	add.w	r3, r7, #12
 8002fe2:	2102      	movs	r1, #2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fef9 	bl	8003ddc <HAL_RCC_ClockConfig>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d001      	beq.n	8002ff4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002ff0:	f000 f808 	bl	8003004 <Error_Handler>
  }
}
 8002ff4:	bf00      	nop
 8002ff6:	3750      	adds	r7, #80	; 0x50
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800
 8003000:	40007000 	.word	0x40007000

08003004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003008:	b672      	cpsid	i
}
 800300a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800300c:	e7fe      	b.n	800300c <Error_Handler+0x8>
	...

08003010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	4b10      	ldr	r3, [pc, #64]	; (800305c <HAL_MspInit+0x4c>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800301e:	4a0f      	ldr	r2, [pc, #60]	; (800305c <HAL_MspInit+0x4c>)
 8003020:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003024:	6453      	str	r3, [r2, #68]	; 0x44
 8003026:	4b0d      	ldr	r3, [pc, #52]	; (800305c <HAL_MspInit+0x4c>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	603b      	str	r3, [r7, #0]
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <HAL_MspInit+0x4c>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a08      	ldr	r2, [pc, #32]	; (800305c <HAL_MspInit+0x4c>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <HAL_MspInit+0x4c>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800

08003060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003060:	b480      	push	{r7}
 8003062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003064:	e7fe      	b.n	8003064 <NMI_Handler+0x4>

08003066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003066:	b480      	push	{r7}
 8003068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800306a:	e7fe      	b.n	800306a <HardFault_Handler+0x4>

0800306c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003070:	e7fe      	b.n	8003070 <MemManage_Handler+0x4>

08003072 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003072:	b480      	push	{r7}
 8003074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003076:	e7fe      	b.n	8003076 <BusFault_Handler+0x4>

08003078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800307c:	e7fe      	b.n	800307c <UsageFault_Handler+0x4>

0800307e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003090:	bf00      	nop
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800309a:	b480      	push	{r7}
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800309e:	bf00      	nop
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ac:	f000 f956 	bl	800335c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030b0:	bf00      	nop
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return 1;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_kill>:

int _kill(int pid, int sig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ce:	f001 fed3 	bl	8004e78 <__errno>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2216      	movs	r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
  return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_exit>:

void _exit (int status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffe7 	bl	80030c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030f6:	e7fe      	b.n	80030f6 <_exit+0x12>

080030f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e00a      	b.n	8003120 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800310a:	f3af 8000 	nop.w
 800310e:	4601      	mov	r1, r0
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	60ba      	str	r2, [r7, #8]
 8003116:	b2ca      	uxtb	r2, r1
 8003118:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	3301      	adds	r3, #1
 800311e:	617b      	str	r3, [r7, #20]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	429a      	cmp	r2, r3
 8003126:	dbf0      	blt.n	800310a <_read+0x12>
  }

  return len;
 8003128:	687b      	ldr	r3, [r7, #4]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
 8003142:	e009      	b.n	8003158 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	60ba      	str	r2, [r7, #8]
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	3301      	adds	r3, #1
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	429a      	cmp	r2, r3
 800315e:	dbf1      	blt.n	8003144 <_write+0x12>
  }
  return len;
 8003160:	687b      	ldr	r3, [r7, #4]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <_close>:

int _close(int file)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003172:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003176:	4618      	mov	r0, r3
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003192:	605a      	str	r2, [r3, #4]
  return 0;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <_isatty>:

int _isatty(int file)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
	...

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	; (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	; (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	; (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f001 fe38 	bl	8004e78 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	; (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	; (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20018000 	.word	0x20018000
 8003234:	00000400 	.word	0x00000400
 8003238:	20000200 	.word	0x20000200
 800323c:	20000358 	.word	0x20000358

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <SystemInit+0x20>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <SystemInit+0x20>)
 800324c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003254:	bf00      	nop
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000ed00 	.word	0xe000ed00

08003264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800329c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003268:	480d      	ldr	r0, [pc, #52]	; (80032a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800326a:	490e      	ldr	r1, [pc, #56]	; (80032a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800326c:	4a0e      	ldr	r2, [pc, #56]	; (80032a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800326e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003270:	e002      	b.n	8003278 <LoopCopyDataInit>

08003272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003276:	3304      	adds	r3, #4

08003278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800327a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800327c:	d3f9      	bcc.n	8003272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327e:	4a0b      	ldr	r2, [pc, #44]	; (80032ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003280:	4c0b      	ldr	r4, [pc, #44]	; (80032b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003284:	e001      	b.n	800328a <LoopFillZerobss>

08003286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003288:	3204      	adds	r2, #4

0800328a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800328a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800328c:	d3fb      	bcc.n	8003286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800328e:	f7ff ffd7 	bl	8003240 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003292:	f001 fdf7 	bl	8004e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003296:	f7ff fa8f 	bl	80027b8 <main>
  bx  lr    
 800329a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800329c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80032a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032a4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80032a8:	0801b470 	.word	0x0801b470
  ldr r2, =_sbss
 80032ac:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80032b0:	20000354 	.word	0x20000354

080032b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032b4:	e7fe      	b.n	80032b4 <ADC_IRQHandler>
	...

080032b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032bc:	4b0e      	ldr	r3, [pc, #56]	; (80032f8 <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0d      	ldr	r2, [pc, #52]	; (80032f8 <HAL_Init+0x40>)
 80032c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c8:	4b0b      	ldr	r3, [pc, #44]	; (80032f8 <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0a      	ldr	r2, [pc, #40]	; (80032f8 <HAL_Init+0x40>)
 80032ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032d4:	4b08      	ldr	r3, [pc, #32]	; (80032f8 <HAL_Init+0x40>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <HAL_Init+0x40>)
 80032da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e0:	2003      	movs	r0, #3
 80032e2:	f000 f931 	bl	8003548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032e6:	200f      	movs	r0, #15
 80032e8:	f000 f808 	bl	80032fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032ec:	f7ff fe90 	bl	8003010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	40023c00 	.word	0x40023c00

080032fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003304:	4b12      	ldr	r3, [pc, #72]	; (8003350 <HAL_InitTick+0x54>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b12      	ldr	r3, [pc, #72]	; (8003354 <HAL_InitTick+0x58>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	4619      	mov	r1, r3
 800330e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003312:	fbb3 f3f1 	udiv	r3, r3, r1
 8003316:	fbb2 f3f3 	udiv	r3, r2, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f000 f93b 	bl	8003596 <HAL_SYSTICK_Config>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e00e      	b.n	8003348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b0f      	cmp	r3, #15
 800332e:	d80a      	bhi.n	8003346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003330:	2200      	movs	r2, #0
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	f04f 30ff 	mov.w	r0, #4294967295
 8003338:	f000 f911 	bl	800355e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800333c:	4a06      	ldr	r2, [pc, #24]	; (8003358 <HAL_InitTick+0x5c>)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
}
 8003348:	4618      	mov	r0, r3
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	20000004 	.word	0x20000004
 8003354:	2000000c 	.word	0x2000000c
 8003358:	20000008 	.word	0x20000008

0800335c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x20>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <HAL_IncTick+0x24>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_IncTick+0x24>)
 800336e:	6013      	str	r3, [r2, #0]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	2000000c 	.word	0x2000000c
 8003380:	20000204 	.word	0x20000204

08003384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return uwTick;
 8003388:	4b03      	ldr	r3, [pc, #12]	; (8003398 <HAL_GetTick+0x14>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000204 	.word	0x20000204

0800339c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a4:	f7ff ffee 	bl	8003384 <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b4:	d005      	beq.n	80033c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b6:	4b0a      	ldr	r3, [pc, #40]	; (80033e0 <HAL_Delay+0x44>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033c2:	bf00      	nop
 80033c4:	f7ff ffde 	bl	8003384 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d8f7      	bhi.n	80033c4 <HAL_Delay+0x28>
  {
  }
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	2000000c 	.word	0x2000000c

080033e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0307 	and.w	r3, r3, #7
 80033f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003400:	4013      	ands	r3, r2
 8003402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800340c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003416:	4a04      	ldr	r2, [pc, #16]	; (8003428 <__NVIC_SetPriorityGrouping+0x44>)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	60d3      	str	r3, [r2, #12]
}
 800341c:	bf00      	nop
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000ed00 	.word	0xe000ed00

0800342c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003430:	4b04      	ldr	r3, [pc, #16]	; (8003444 <__NVIC_GetPriorityGrouping+0x18>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 0307 	and.w	r3, r3, #7
}
 800343a:	4618      	mov	r0, r3
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	e000ed00 	.word	0xe000ed00

08003448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	4603      	mov	r3, r0
 8003450:	6039      	str	r1, [r7, #0]
 8003452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	db0a      	blt.n	8003472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	b2da      	uxtb	r2, r3
 8003460:	490c      	ldr	r1, [pc, #48]	; (8003494 <__NVIC_SetPriority+0x4c>)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	0112      	lsls	r2, r2, #4
 8003468:	b2d2      	uxtb	r2, r2
 800346a:	440b      	add	r3, r1
 800346c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003470:	e00a      	b.n	8003488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	4908      	ldr	r1, [pc, #32]	; (8003498 <__NVIC_SetPriority+0x50>)
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	3b04      	subs	r3, #4
 8003480:	0112      	lsls	r2, r2, #4
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	440b      	add	r3, r1
 8003486:	761a      	strb	r2, [r3, #24]
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000e100 	.word	0xe000e100
 8003498:	e000ed00 	.word	0xe000ed00

0800349c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800349c:	b480      	push	{r7}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f1c3 0307 	rsb	r3, r3, #7
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	bf28      	it	cs
 80034ba:	2304      	movcs	r3, #4
 80034bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3304      	adds	r3, #4
 80034c2:	2b06      	cmp	r3, #6
 80034c4:	d902      	bls.n	80034cc <NVIC_EncodePriority+0x30>
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	3b03      	subs	r3, #3
 80034ca:	e000      	b.n	80034ce <NVIC_EncodePriority+0x32>
 80034cc:	2300      	movs	r3, #0
 80034ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d0:	f04f 32ff 	mov.w	r2, #4294967295
 80034d4:	69bb      	ldr	r3, [r7, #24]
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	43da      	mvns	r2, r3
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	401a      	ands	r2, r3
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e4:	f04f 31ff 	mov.w	r1, #4294967295
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43d9      	mvns	r1, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f4:	4313      	orrs	r3, r2
         );
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3724      	adds	r7, #36	; 0x24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003514:	d301      	bcc.n	800351a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003516:	2301      	movs	r3, #1
 8003518:	e00f      	b.n	800353a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351a:	4a0a      	ldr	r2, [pc, #40]	; (8003544 <SysTick_Config+0x40>)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003522:	210f      	movs	r1, #15
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	f7ff ff8e 	bl	8003448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <SysTick_Config+0x40>)
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <SysTick_Config+0x40>)
 8003534:	2207      	movs	r2, #7
 8003536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	e000e010 	.word	0xe000e010

08003548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ff47 	bl	80033e4 <__NVIC_SetPriorityGrouping>
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	4603      	mov	r3, r0
 8003566:	60b9      	str	r1, [r7, #8]
 8003568:	607a      	str	r2, [r7, #4]
 800356a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800356c:	2300      	movs	r3, #0
 800356e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003570:	f7ff ff5c 	bl	800342c <__NVIC_GetPriorityGrouping>
 8003574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	68b9      	ldr	r1, [r7, #8]
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7ff ff8e 	bl	800349c <NVIC_EncodePriority>
 8003580:	4602      	mov	r2, r0
 8003582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003586:	4611      	mov	r1, r2
 8003588:	4618      	mov	r0, r3
 800358a:	f7ff ff5d 	bl	8003448 <__NVIC_SetPriority>
}
 800358e:	bf00      	nop
 8003590:	3718      	adds	r7, #24
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ffb0 	bl	8003504 <SysTick_Config>
 80035a4:	4603      	mov	r3, r0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
	...

080035b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c6:	2300      	movs	r3, #0
 80035c8:	61fb      	str	r3, [r7, #28]
 80035ca:	e159      	b.n	8003880 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035cc:	2201      	movs	r2, #1
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035e0:	693a      	ldr	r2, [r7, #16]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	f040 8148 	bne.w	800387a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d005      	beq.n	8003602 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d130      	bne.n	8003664 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	005b      	lsls	r3, r3, #1
 800360c:	2203      	movs	r2, #3
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003638:	2201      	movs	r2, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	4013      	ands	r3, r2
 8003646:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	091b      	lsrs	r3, r3, #4
 800364e:	f003 0201 	and.w	r2, r3, #1
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	4313      	orrs	r3, r2
 800365c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0303 	and.w	r3, r3, #3
 800366c:	2b03      	cmp	r3, #3
 800366e:	d017      	beq.n	80036a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	2203      	movs	r2, #3
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	43db      	mvns	r3, r3
 8003682:	69ba      	ldr	r2, [r7, #24]
 8003684:	4013      	ands	r3, r2
 8003686:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	fa02 f303 	lsl.w	r3, r2, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4313      	orrs	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f003 0303 	and.w	r3, r3, #3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d123      	bne.n	80036f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	08da      	lsrs	r2, r3, #3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	3208      	adds	r2, #8
 80036b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	220f      	movs	r2, #15
 80036c4:	fa02 f303 	lsl.w	r3, r2, r3
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	691a      	ldr	r2, [r3, #16]
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	08da      	lsrs	r2, r3, #3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3208      	adds	r2, #8
 80036ee:	69b9      	ldr	r1, [r7, #24]
 80036f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	2203      	movs	r2, #3
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4013      	ands	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0203 	and.w	r2, r3, #3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4313      	orrs	r3, r2
 8003720:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a2 	beq.w	800387a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b57      	ldr	r3, [pc, #348]	; (8003898 <HAL_GPIO_Init+0x2e8>)
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	4a56      	ldr	r2, [pc, #344]	; (8003898 <HAL_GPIO_Init+0x2e8>)
 8003740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003744:	6453      	str	r3, [r2, #68]	; 0x44
 8003746:	4b54      	ldr	r3, [pc, #336]	; (8003898 <HAL_GPIO_Init+0x2e8>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003752:	4a52      	ldr	r2, [pc, #328]	; (800389c <HAL_GPIO_Init+0x2ec>)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	089b      	lsrs	r3, r3, #2
 8003758:	3302      	adds	r3, #2
 800375a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	220f      	movs	r2, #15
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a49      	ldr	r2, [pc, #292]	; (80038a0 <HAL_GPIO_Init+0x2f0>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d019      	beq.n	80037b2 <HAL_GPIO_Init+0x202>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a48      	ldr	r2, [pc, #288]	; (80038a4 <HAL_GPIO_Init+0x2f4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <HAL_GPIO_Init+0x1fe>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a47      	ldr	r2, [pc, #284]	; (80038a8 <HAL_GPIO_Init+0x2f8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00d      	beq.n	80037aa <HAL_GPIO_Init+0x1fa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a46      	ldr	r2, [pc, #280]	; (80038ac <HAL_GPIO_Init+0x2fc>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d007      	beq.n	80037a6 <HAL_GPIO_Init+0x1f6>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a45      	ldr	r2, [pc, #276]	; (80038b0 <HAL_GPIO_Init+0x300>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d101      	bne.n	80037a2 <HAL_GPIO_Init+0x1f2>
 800379e:	2304      	movs	r3, #4
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037a2:	2307      	movs	r3, #7
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x204>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	; (800389c <HAL_GPIO_Init+0x2ec>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d2:	4b38      	ldr	r3, [pc, #224]	; (80038b4 <HAL_GPIO_Init+0x304>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f6:	4a2f      	ldr	r2, [pc, #188]	; (80038b4 <HAL_GPIO_Init+0x304>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037fc:	4b2d      	ldr	r3, [pc, #180]	; (80038b4 <HAL_GPIO_Init+0x304>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <HAL_GPIO_Init+0x304>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003826:	4b23      	ldr	r3, [pc, #140]	; (80038b4 <HAL_GPIO_Init+0x304>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800384a:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_GPIO_Init+0x304>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003850:	4b18      	ldr	r3, [pc, #96]	; (80038b4 <HAL_GPIO_Init+0x304>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003874:	4a0f      	ldr	r2, [pc, #60]	; (80038b4 <HAL_GPIO_Init+0x304>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f aea2 	bls.w	80035cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	; 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40013c00 	.word	0x40013c00

080038b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	807b      	strh	r3, [r7, #2]
 80038c4:	4613      	mov	r3, r2
 80038c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038c8:	787b      	ldrb	r3, [r7, #1]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038ce:	887a      	ldrh	r2, [r7, #2]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80038d4:	e003      	b.n	80038de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038d6:	887b      	ldrh	r3, [r7, #2]
 80038d8:	041a      	lsls	r2, r3, #16
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	619a      	str	r2, [r3, #24]
}
 80038de:	bf00      	nop
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e267      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d075      	beq.n	80039f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800390a:	4b88      	ldr	r3, [pc, #544]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00c      	beq.n	8003930 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003916:	4b85      	ldr	r3, [pc, #532]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800391e:	2b08      	cmp	r3, #8
 8003920:	d112      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003922:	4b82      	ldr	r3, [pc, #520]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800392a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392e:	d10b      	bne.n	8003948 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003930:	4b7e      	ldr	r3, [pc, #504]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d05b      	beq.n	80039f4 <HAL_RCC_OscConfig+0x108>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d157      	bne.n	80039f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e242      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003950:	d106      	bne.n	8003960 <HAL_RCC_OscConfig+0x74>
 8003952:	4b76      	ldr	r3, [pc, #472]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a75      	ldr	r2, [pc, #468]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395c:	6013      	str	r3, [r2, #0]
 800395e:	e01d      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003968:	d10c      	bne.n	8003984 <HAL_RCC_OscConfig+0x98>
 800396a:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6f      	ldr	r2, [pc, #444]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003970:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003974:	6013      	str	r3, [r2, #0]
 8003976:	4b6d      	ldr	r3, [pc, #436]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a6c      	ldr	r2, [pc, #432]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	e00b      	b.n	800399c <HAL_RCC_OscConfig+0xb0>
 8003984:	4b69      	ldr	r3, [pc, #420]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a68      	ldr	r2, [pc, #416]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 800398a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800398e:	6013      	str	r3, [r2, #0]
 8003990:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a65      	ldr	r2, [pc, #404]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003996:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800399a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d013      	beq.n	80039cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7ff fcee 	bl	8003384 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039ac:	f7ff fcea 	bl	8003384 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	; 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e207      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b5b      	ldr	r3, [pc, #364]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0xc0>
 80039ca:	e014      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039cc:	f7ff fcda 	bl	8003384 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039d4:	f7ff fcd6 	bl	8003384 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b64      	cmp	r3, #100	; 0x64
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e1f3      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0xe8>
 80039f2:	e000      	b.n	80039f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d063      	beq.n	8003aca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a02:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 030c 	and.w	r3, r3, #12
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a0e:	4b47      	ldr	r3, [pc, #284]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d11c      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a1a:	4b44      	ldr	r3, [pc, #272]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d116      	bne.n	8003a54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a26:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d001      	beq.n	8003a3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e1c7      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3e:	4b3b      	ldr	r3, [pc, #236]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	4937      	ldr	r1, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a52:	e03a      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d020      	beq.n	8003a9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5c:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7ff fc8f 	bl	8003384 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a6a:	f7ff fc8b 	bl	8003384 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e1a8      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7c:	4b2b      	ldr	r3, [pc, #172]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a88:	4b28      	ldr	r3, [pc, #160]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	4925      	ldr	r1, [pc, #148]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	600b      	str	r3, [r1, #0]
 8003a9c:	e015      	b.n	8003aca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a9e:	4b24      	ldr	r3, [pc, #144]	; (8003b30 <HAL_RCC_OscConfig+0x244>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa4:	f7ff fc6e 	bl	8003384 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aaa:	e008      	b.n	8003abe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aac:	f7ff fc6a 	bl	8003384 <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e187      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f0      	bne.n	8003aac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d036      	beq.n	8003b44 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d016      	beq.n	8003b0c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ade:	4b15      	ldr	r3, [pc, #84]	; (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae4:	f7ff fc4e 	bl	8003384 <HAL_GetTick>
 8003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aea:	e008      	b.n	8003afe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003aec:	f7ff fc4a 	bl	8003384 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e167      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x240>)
 8003b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x200>
 8003b0a:	e01b      	b.n	8003b44 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b0c:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <HAL_RCC_OscConfig+0x248>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7ff fc37 	bl	8003384 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b18:	e00e      	b.n	8003b38 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b1a:	f7ff fc33 	bl	8003384 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d907      	bls.n	8003b38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e150      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	42470000 	.word	0x42470000
 8003b34:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	4b88      	ldr	r3, [pc, #544]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1ea      	bne.n	8003b1a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0304 	and.w	r3, r3, #4
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f000 8097 	beq.w	8003c80 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b56:	4b81      	ldr	r3, [pc, #516]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10f      	bne.n	8003b82 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b62:	2300      	movs	r3, #0
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	4b7d      	ldr	r3, [pc, #500]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	4a7c      	ldr	r2, [pc, #496]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b70:	6413      	str	r3, [r2, #64]	; 0x40
 8003b72:	4b7a      	ldr	r3, [pc, #488]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b82:	4b77      	ldr	r3, [pc, #476]	; (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b8e:	4b74      	ldr	r3, [pc, #464]	; (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a73      	ldr	r2, [pc, #460]	; (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003b94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b9a:	f7ff fbf3 	bl	8003384 <HAL_GetTick>
 8003b9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba0:	e008      	b.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ba2:	f7ff fbef 	bl	8003384 <HAL_GetTick>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d901      	bls.n	8003bb4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e10c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	; (8003d60 <HAL_RCC_OscConfig+0x474>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d0f0      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d106      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x2ea>
 8003bc8:	4b64      	ldr	r3, [pc, #400]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bcc:	4a63      	ldr	r2, [pc, #396]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bce:	f043 0301 	orr.w	r3, r3, #1
 8003bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b05      	cmp	r3, #5
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x30c>
 8003bde:	4b5f      	ldr	r3, [pc, #380]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be2:	4a5e      	ldr	r2, [pc, #376]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003be4:	f043 0304 	orr.w	r3, r3, #4
 8003be8:	6713      	str	r3, [r2, #112]	; 0x70
 8003bea:	4b5c      	ldr	r3, [pc, #368]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bee:	4a5b      	ldr	r2, [pc, #364]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf6:	e00b      	b.n	8003c10 <HAL_RCC_OscConfig+0x324>
 8003bf8:	4b58      	ldr	r3, [pc, #352]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bfc:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6713      	str	r3, [r2, #112]	; 0x70
 8003c04:	4b55      	ldr	r3, [pc, #340]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c08:	4a54      	ldr	r2, [pc, #336]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c0a:	f023 0304 	bic.w	r3, r3, #4
 8003c0e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c18:	f7ff fbb4 	bl	8003384 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c1e:	e00a      	b.n	8003c36 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c20:	f7ff fbb0 	bl	8003384 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e0cb      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c36:	4b49      	ldr	r3, [pc, #292]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0ee      	beq.n	8003c20 <HAL_RCC_OscConfig+0x334>
 8003c42:	e014      	b.n	8003c6e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c44:	f7ff fb9e 	bl	8003384 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c4a:	e00a      	b.n	8003c62 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c4c:	f7ff fb9a 	bl	8003384 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e0b5      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c62:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ee      	bne.n	8003c4c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c6e:	7dfb      	ldrb	r3, [r7, #23]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d105      	bne.n	8003c80 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c74:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	4a38      	ldr	r2, [pc, #224]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c7e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 80a1 	beq.w	8003dcc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c8a:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d05c      	beq.n	8003d50 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d141      	bne.n	8003d22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9e:	4b31      	ldr	r3, [pc, #196]	; (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca4:	f7ff fb6e 	bl	8003384 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cac:	f7ff fb6a 	bl	8003384 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e087      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cbe:	4b27      	ldr	r3, [pc, #156]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1f0      	bne.n	8003cac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	69da      	ldr	r2, [r3, #28]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	019b      	lsls	r3, r3, #6
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce0:	085b      	lsrs	r3, r3, #1
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	041b      	lsls	r3, r3, #16
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cec:	061b      	lsls	r3, r3, #24
 8003cee:	491b      	ldr	r1, [pc, #108]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfa:	f7ff fb43 	bl	8003384 <HAL_GetTick>
 8003cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d02:	f7ff fb3f 	bl	8003384 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e05c      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d14:	4b11      	ldr	r3, [pc, #68]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d0f0      	beq.n	8003d02 <HAL_RCC_OscConfig+0x416>
 8003d20:	e054      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCC_OscConfig+0x478>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7ff fb2c 	bl	8003384 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d30:	f7ff fb28 	bl	8003384 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e045      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d42:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <HAL_RCC_OscConfig+0x470>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x444>
 8003d4e:	e03d      	b.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d107      	bne.n	8003d68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e038      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40007000 	.word	0x40007000
 8003d64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x4ec>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d028      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d121      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d11a      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d98:	4013      	ands	r3, r2
 8003d9a:	687a      	ldr	r2, [r7, #4]
 8003d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d111      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dae:	085b      	lsrs	r3, r3, #1
 8003db0:	3b01      	subs	r3, #1
 8003db2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d107      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d001      	beq.n	8003dcc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40023800 	.word	0x40023800

08003ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0cc      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003df0:	4b68      	ldr	r3, [pc, #416]	; (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0307 	and.w	r3, r3, #7
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d90c      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfe:	4b65      	ldr	r3, [pc, #404]	; (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b63      	ldr	r3, [pc, #396]	; (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0307 	and.w	r3, r3, #7
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0b8      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e30:	4b59      	ldr	r3, [pc, #356]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d005      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	4a52      	ldr	r2, [pc, #328]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	494d      	ldr	r1, [pc, #308]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d044      	beq.n	8003efc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d107      	bne.n	8003e8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7a:	4b47      	ldr	r3, [pc, #284]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d119      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e07f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d003      	beq.n	8003e9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	4b3f      	ldr	r3, [pc, #252]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e067      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eba:	4b37      	ldr	r3, [pc, #220]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 0203 	bic.w	r2, r3, #3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	4934      	ldr	r1, [pc, #208]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ecc:	f7ff fa5a 	bl	8003384 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ed4:	f7ff fa56 	bl	8003384 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e04f      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eea:	4b2b      	ldr	r3, [pc, #172]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f003 020c 	and.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1eb      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003efc:	4b25      	ldr	r3, [pc, #148]	; (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0307 	and.w	r3, r3, #7
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d20c      	bcs.n	8003f24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f0a:	4b22      	ldr	r3, [pc, #136]	; (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f0c:	683a      	ldr	r2, [r7, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f12:	4b20      	ldr	r3, [pc, #128]	; (8003f94 <HAL_RCC_ClockConfig+0x1b8>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0307 	and.w	r3, r3, #7
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e032      	b.n	8003f8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d008      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f30:	4b19      	ldr	r3, [pc, #100]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4916      	ldr	r1, [pc, #88]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d009      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_ClockConfig+0x1bc>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x1c0>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x1c8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff f9ba 	bl	80032fc <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	40023c00 	.word	0x40023c00
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0801af00 	.word	0x0801af00
 8003fa0:	20000004 	.word	0x20000004
 8003fa4:	20000008 	.word	0x20000008

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b090      	sub	sp, #64	; 0x40
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc0:	4b59      	ldr	r3, [pc, #356]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	f200 80a1 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fda:	e09b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003fe0:	e09b      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fe6:	e098      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe8:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	627a      	str	r2, [r7, #36]	; 0x24
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004010:	2100      	movs	r1, #0
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004014:	fb03 f201 	mul.w	r2, r3, r1
 8004018:	2300      	movs	r3, #0
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	4413      	add	r3, r2
 8004020:	4a43      	ldr	r2, [pc, #268]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004022:	fba0 1202 	umull	r1, r2, r0, r2
 8004026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004028:	460a      	mov	r2, r1
 800402a:	62ba      	str	r2, [r7, #40]	; 0x28
 800402c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402e:	4413      	add	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	2200      	movs	r2, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004042:	f7fc fe09 	bl	8000c58 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404e:	e053      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b35      	ldr	r3, [pc, #212]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	617a      	str	r2, [r7, #20]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	4652      	mov	r2, sl
 8004068:	465b      	mov	r3, fp
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	ebb2 080a 	subs.w	r8, r2, sl
 8004082:	eb63 090b 	sbc.w	r9, r3, fp
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004092:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004096:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409a:	ebb2 0408 	subs.w	r4, r2, r8
 800409e:	eb63 0509 	sbc.w	r5, r3, r9
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	00eb      	lsls	r3, r5, #3
 80040ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b0:	00e2      	lsls	r2, r4, #3
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	eb14 030a 	adds.w	r3, r4, sl
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	eb45 030b 	adc.w	r3, r5, fp
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ce:	4629      	mov	r1, r5
 80040d0:	028b      	lsls	r3, r1, #10
 80040d2:	4621      	mov	r1, r4
 80040d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d8:	4621      	mov	r1, r4
 80040da:	028a      	lsls	r2, r1, #10
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	f7fc fdb4 	bl	8000c58 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8004116:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800411c:	4618      	mov	r0, r3
 800411e:	3740      	adds	r7, #64	; 0x40
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	00f42400 	.word	0x00f42400
 8004130:	017d7840 	.word	0x017d7840

08004134 <malloc>:
 8004134:	4b02      	ldr	r3, [pc, #8]	; (8004140 <malloc+0xc>)
 8004136:	4601      	mov	r1, r0
 8004138:	6818      	ldr	r0, [r3, #0]
 800413a:	f000 b823 	b.w	8004184 <_malloc_r>
 800413e:	bf00      	nop
 8004140:	20000068 	.word	0x20000068

08004144 <sbrk_aligned>:
 8004144:	b570      	push	{r4, r5, r6, lr}
 8004146:	4e0e      	ldr	r6, [pc, #56]	; (8004180 <sbrk_aligned+0x3c>)
 8004148:	460c      	mov	r4, r1
 800414a:	6831      	ldr	r1, [r6, #0]
 800414c:	4605      	mov	r5, r0
 800414e:	b911      	cbnz	r1, 8004156 <sbrk_aligned+0x12>
 8004150:	f000 fe70 	bl	8004e34 <_sbrk_r>
 8004154:	6030      	str	r0, [r6, #0]
 8004156:	4621      	mov	r1, r4
 8004158:	4628      	mov	r0, r5
 800415a:	f000 fe6b 	bl	8004e34 <_sbrk_r>
 800415e:	1c43      	adds	r3, r0, #1
 8004160:	d00a      	beq.n	8004178 <sbrk_aligned+0x34>
 8004162:	1cc4      	adds	r4, r0, #3
 8004164:	f024 0403 	bic.w	r4, r4, #3
 8004168:	42a0      	cmp	r0, r4
 800416a:	d007      	beq.n	800417c <sbrk_aligned+0x38>
 800416c:	1a21      	subs	r1, r4, r0
 800416e:	4628      	mov	r0, r5
 8004170:	f000 fe60 	bl	8004e34 <_sbrk_r>
 8004174:	3001      	adds	r0, #1
 8004176:	d101      	bne.n	800417c <sbrk_aligned+0x38>
 8004178:	f04f 34ff 	mov.w	r4, #4294967295
 800417c:	4620      	mov	r0, r4
 800417e:	bd70      	pop	{r4, r5, r6, pc}
 8004180:	2000020c 	.word	0x2000020c

08004184 <_malloc_r>:
 8004184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004188:	1ccd      	adds	r5, r1, #3
 800418a:	f025 0503 	bic.w	r5, r5, #3
 800418e:	3508      	adds	r5, #8
 8004190:	2d0c      	cmp	r5, #12
 8004192:	bf38      	it	cc
 8004194:	250c      	movcc	r5, #12
 8004196:	2d00      	cmp	r5, #0
 8004198:	4607      	mov	r7, r0
 800419a:	db01      	blt.n	80041a0 <_malloc_r+0x1c>
 800419c:	42a9      	cmp	r1, r5
 800419e:	d905      	bls.n	80041ac <_malloc_r+0x28>
 80041a0:	230c      	movs	r3, #12
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	2600      	movs	r6, #0
 80041a6:	4630      	mov	r0, r6
 80041a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004280 <_malloc_r+0xfc>
 80041b0:	f000 f868 	bl	8004284 <__malloc_lock>
 80041b4:	f8d8 3000 	ldr.w	r3, [r8]
 80041b8:	461c      	mov	r4, r3
 80041ba:	bb5c      	cbnz	r4, 8004214 <_malloc_r+0x90>
 80041bc:	4629      	mov	r1, r5
 80041be:	4638      	mov	r0, r7
 80041c0:	f7ff ffc0 	bl	8004144 <sbrk_aligned>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	4604      	mov	r4, r0
 80041c8:	d155      	bne.n	8004276 <_malloc_r+0xf2>
 80041ca:	f8d8 4000 	ldr.w	r4, [r8]
 80041ce:	4626      	mov	r6, r4
 80041d0:	2e00      	cmp	r6, #0
 80041d2:	d145      	bne.n	8004260 <_malloc_r+0xdc>
 80041d4:	2c00      	cmp	r4, #0
 80041d6:	d048      	beq.n	800426a <_malloc_r+0xe6>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	4631      	mov	r1, r6
 80041dc:	4638      	mov	r0, r7
 80041de:	eb04 0903 	add.w	r9, r4, r3
 80041e2:	f000 fe27 	bl	8004e34 <_sbrk_r>
 80041e6:	4581      	cmp	r9, r0
 80041e8:	d13f      	bne.n	800426a <_malloc_r+0xe6>
 80041ea:	6821      	ldr	r1, [r4, #0]
 80041ec:	1a6d      	subs	r5, r5, r1
 80041ee:	4629      	mov	r1, r5
 80041f0:	4638      	mov	r0, r7
 80041f2:	f7ff ffa7 	bl	8004144 <sbrk_aligned>
 80041f6:	3001      	adds	r0, #1
 80041f8:	d037      	beq.n	800426a <_malloc_r+0xe6>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	442b      	add	r3, r5
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	f8d8 3000 	ldr.w	r3, [r8]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d038      	beq.n	800427a <_malloc_r+0xf6>
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	42a2      	cmp	r2, r4
 800420c:	d12b      	bne.n	8004266 <_malloc_r+0xe2>
 800420e:	2200      	movs	r2, #0
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	e00f      	b.n	8004234 <_malloc_r+0xb0>
 8004214:	6822      	ldr	r2, [r4, #0]
 8004216:	1b52      	subs	r2, r2, r5
 8004218:	d41f      	bmi.n	800425a <_malloc_r+0xd6>
 800421a:	2a0b      	cmp	r2, #11
 800421c:	d917      	bls.n	800424e <_malloc_r+0xca>
 800421e:	1961      	adds	r1, r4, r5
 8004220:	42a3      	cmp	r3, r4
 8004222:	6025      	str	r5, [r4, #0]
 8004224:	bf18      	it	ne
 8004226:	6059      	strne	r1, [r3, #4]
 8004228:	6863      	ldr	r3, [r4, #4]
 800422a:	bf08      	it	eq
 800422c:	f8c8 1000 	streq.w	r1, [r8]
 8004230:	5162      	str	r2, [r4, r5]
 8004232:	604b      	str	r3, [r1, #4]
 8004234:	4638      	mov	r0, r7
 8004236:	f104 060b 	add.w	r6, r4, #11
 800423a:	f000 f829 	bl	8004290 <__malloc_unlock>
 800423e:	f026 0607 	bic.w	r6, r6, #7
 8004242:	1d23      	adds	r3, r4, #4
 8004244:	1af2      	subs	r2, r6, r3
 8004246:	d0ae      	beq.n	80041a6 <_malloc_r+0x22>
 8004248:	1b9b      	subs	r3, r3, r6
 800424a:	50a3      	str	r3, [r4, r2]
 800424c:	e7ab      	b.n	80041a6 <_malloc_r+0x22>
 800424e:	42a3      	cmp	r3, r4
 8004250:	6862      	ldr	r2, [r4, #4]
 8004252:	d1dd      	bne.n	8004210 <_malloc_r+0x8c>
 8004254:	f8c8 2000 	str.w	r2, [r8]
 8004258:	e7ec      	b.n	8004234 <_malloc_r+0xb0>
 800425a:	4623      	mov	r3, r4
 800425c:	6864      	ldr	r4, [r4, #4]
 800425e:	e7ac      	b.n	80041ba <_malloc_r+0x36>
 8004260:	4634      	mov	r4, r6
 8004262:	6876      	ldr	r6, [r6, #4]
 8004264:	e7b4      	b.n	80041d0 <_malloc_r+0x4c>
 8004266:	4613      	mov	r3, r2
 8004268:	e7cc      	b.n	8004204 <_malloc_r+0x80>
 800426a:	230c      	movs	r3, #12
 800426c:	603b      	str	r3, [r7, #0]
 800426e:	4638      	mov	r0, r7
 8004270:	f000 f80e 	bl	8004290 <__malloc_unlock>
 8004274:	e797      	b.n	80041a6 <_malloc_r+0x22>
 8004276:	6025      	str	r5, [r4, #0]
 8004278:	e7dc      	b.n	8004234 <_malloc_r+0xb0>
 800427a:	605b      	str	r3, [r3, #4]
 800427c:	deff      	udf	#255	; 0xff
 800427e:	bf00      	nop
 8004280:	20000208 	.word	0x20000208

08004284 <__malloc_lock>:
 8004284:	4801      	ldr	r0, [pc, #4]	; (800428c <__malloc_lock+0x8>)
 8004286:	f000 be22 	b.w	8004ece <__retarget_lock_acquire_recursive>
 800428a:	bf00      	nop
 800428c:	20000350 	.word	0x20000350

08004290 <__malloc_unlock>:
 8004290:	4801      	ldr	r0, [pc, #4]	; (8004298 <__malloc_unlock+0x8>)
 8004292:	f000 be1d 	b.w	8004ed0 <__retarget_lock_release_recursive>
 8004296:	bf00      	nop
 8004298:	20000350 	.word	0x20000350

0800429c <__cvt>:
 800429c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042a0:	ec55 4b10 	vmov	r4, r5, d0
 80042a4:	2d00      	cmp	r5, #0
 80042a6:	460e      	mov	r6, r1
 80042a8:	4619      	mov	r1, r3
 80042aa:	462b      	mov	r3, r5
 80042ac:	bfbb      	ittet	lt
 80042ae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80042b2:	461d      	movlt	r5, r3
 80042b4:	2300      	movge	r3, #0
 80042b6:	232d      	movlt	r3, #45	; 0x2d
 80042b8:	700b      	strb	r3, [r1, #0]
 80042ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80042bc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80042c0:	4691      	mov	r9, r2
 80042c2:	f023 0820 	bic.w	r8, r3, #32
 80042c6:	bfbc      	itt	lt
 80042c8:	4622      	movlt	r2, r4
 80042ca:	4614      	movlt	r4, r2
 80042cc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042d0:	d005      	beq.n	80042de <__cvt+0x42>
 80042d2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042d6:	d100      	bne.n	80042da <__cvt+0x3e>
 80042d8:	3601      	adds	r6, #1
 80042da:	2102      	movs	r1, #2
 80042dc:	e000      	b.n	80042e0 <__cvt+0x44>
 80042de:	2103      	movs	r1, #3
 80042e0:	ab03      	add	r3, sp, #12
 80042e2:	9301      	str	r3, [sp, #4]
 80042e4:	ab02      	add	r3, sp, #8
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	ec45 4b10 	vmov	d0, r4, r5
 80042ec:	4653      	mov	r3, sl
 80042ee:	4632      	mov	r2, r6
 80042f0:	f000 fe86 	bl	8005000 <_dtoa_r>
 80042f4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042f8:	4607      	mov	r7, r0
 80042fa:	d102      	bne.n	8004302 <__cvt+0x66>
 80042fc:	f019 0f01 	tst.w	r9, #1
 8004300:	d022      	beq.n	8004348 <__cvt+0xac>
 8004302:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004306:	eb07 0906 	add.w	r9, r7, r6
 800430a:	d110      	bne.n	800432e <__cvt+0x92>
 800430c:	783b      	ldrb	r3, [r7, #0]
 800430e:	2b30      	cmp	r3, #48	; 0x30
 8004310:	d10a      	bne.n	8004328 <__cvt+0x8c>
 8004312:	2200      	movs	r2, #0
 8004314:	2300      	movs	r3, #0
 8004316:	4620      	mov	r0, r4
 8004318:	4629      	mov	r1, r5
 800431a:	f7fc fbdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800431e:	b918      	cbnz	r0, 8004328 <__cvt+0x8c>
 8004320:	f1c6 0601 	rsb	r6, r6, #1
 8004324:	f8ca 6000 	str.w	r6, [sl]
 8004328:	f8da 3000 	ldr.w	r3, [sl]
 800432c:	4499      	add	r9, r3
 800432e:	2200      	movs	r2, #0
 8004330:	2300      	movs	r3, #0
 8004332:	4620      	mov	r0, r4
 8004334:	4629      	mov	r1, r5
 8004336:	f7fc fbcf 	bl	8000ad8 <__aeabi_dcmpeq>
 800433a:	b108      	cbz	r0, 8004340 <__cvt+0xa4>
 800433c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004340:	2230      	movs	r2, #48	; 0x30
 8004342:	9b03      	ldr	r3, [sp, #12]
 8004344:	454b      	cmp	r3, r9
 8004346:	d307      	bcc.n	8004358 <__cvt+0xbc>
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800434c:	1bdb      	subs	r3, r3, r7
 800434e:	4638      	mov	r0, r7
 8004350:	6013      	str	r3, [r2, #0]
 8004352:	b004      	add	sp, #16
 8004354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004358:	1c59      	adds	r1, r3, #1
 800435a:	9103      	str	r1, [sp, #12]
 800435c:	701a      	strb	r2, [r3, #0]
 800435e:	e7f0      	b.n	8004342 <__cvt+0xa6>

08004360 <__exponent>:
 8004360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004362:	4603      	mov	r3, r0
 8004364:	2900      	cmp	r1, #0
 8004366:	bfb8      	it	lt
 8004368:	4249      	neglt	r1, r1
 800436a:	f803 2b02 	strb.w	r2, [r3], #2
 800436e:	bfb4      	ite	lt
 8004370:	222d      	movlt	r2, #45	; 0x2d
 8004372:	222b      	movge	r2, #43	; 0x2b
 8004374:	2909      	cmp	r1, #9
 8004376:	7042      	strb	r2, [r0, #1]
 8004378:	dd2a      	ble.n	80043d0 <__exponent+0x70>
 800437a:	f10d 0207 	add.w	r2, sp, #7
 800437e:	4617      	mov	r7, r2
 8004380:	260a      	movs	r6, #10
 8004382:	4694      	mov	ip, r2
 8004384:	fb91 f5f6 	sdiv	r5, r1, r6
 8004388:	fb06 1415 	mls	r4, r6, r5, r1
 800438c:	3430      	adds	r4, #48	; 0x30
 800438e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004392:	460c      	mov	r4, r1
 8004394:	2c63      	cmp	r4, #99	; 0x63
 8004396:	f102 32ff 	add.w	r2, r2, #4294967295
 800439a:	4629      	mov	r1, r5
 800439c:	dcf1      	bgt.n	8004382 <__exponent+0x22>
 800439e:	3130      	adds	r1, #48	; 0x30
 80043a0:	f1ac 0402 	sub.w	r4, ip, #2
 80043a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80043a8:	1c41      	adds	r1, r0, #1
 80043aa:	4622      	mov	r2, r4
 80043ac:	42ba      	cmp	r2, r7
 80043ae:	d30a      	bcc.n	80043c6 <__exponent+0x66>
 80043b0:	f10d 0209 	add.w	r2, sp, #9
 80043b4:	eba2 020c 	sub.w	r2, r2, ip
 80043b8:	42bc      	cmp	r4, r7
 80043ba:	bf88      	it	hi
 80043bc:	2200      	movhi	r2, #0
 80043be:	4413      	add	r3, r2
 80043c0:	1a18      	subs	r0, r3, r0
 80043c2:	b003      	add	sp, #12
 80043c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80043ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 80043ce:	e7ed      	b.n	80043ac <__exponent+0x4c>
 80043d0:	2330      	movs	r3, #48	; 0x30
 80043d2:	3130      	adds	r1, #48	; 0x30
 80043d4:	7083      	strb	r3, [r0, #2]
 80043d6:	70c1      	strb	r1, [r0, #3]
 80043d8:	1d03      	adds	r3, r0, #4
 80043da:	e7f1      	b.n	80043c0 <__exponent+0x60>

080043dc <_printf_float>:
 80043dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043e0:	ed2d 8b02 	vpush	{d8}
 80043e4:	b08d      	sub	sp, #52	; 0x34
 80043e6:	460c      	mov	r4, r1
 80043e8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80043ec:	4616      	mov	r6, r2
 80043ee:	461f      	mov	r7, r3
 80043f0:	4605      	mov	r5, r0
 80043f2:	f000 fce7 	bl	8004dc4 <_localeconv_r>
 80043f6:	f8d0 a000 	ldr.w	sl, [r0]
 80043fa:	4650      	mov	r0, sl
 80043fc:	f7fb ff40 	bl	8000280 <strlen>
 8004400:	2300      	movs	r3, #0
 8004402:	930a      	str	r3, [sp, #40]	; 0x28
 8004404:	6823      	ldr	r3, [r4, #0]
 8004406:	9305      	str	r3, [sp, #20]
 8004408:	f8d8 3000 	ldr.w	r3, [r8]
 800440c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004410:	3307      	adds	r3, #7
 8004412:	f023 0307 	bic.w	r3, r3, #7
 8004416:	f103 0208 	add.w	r2, r3, #8
 800441a:	f8c8 2000 	str.w	r2, [r8]
 800441e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004422:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004426:	9307      	str	r3, [sp, #28]
 8004428:	f8cd 8018 	str.w	r8, [sp, #24]
 800442c:	ee08 0a10 	vmov	s16, r0
 8004430:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004434:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004438:	4b9e      	ldr	r3, [pc, #632]	; (80046b4 <_printf_float+0x2d8>)
 800443a:	f04f 32ff 	mov.w	r2, #4294967295
 800443e:	f7fc fb7d 	bl	8000b3c <__aeabi_dcmpun>
 8004442:	bb88      	cbnz	r0, 80044a8 <_printf_float+0xcc>
 8004444:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004448:	4b9a      	ldr	r3, [pc, #616]	; (80046b4 <_printf_float+0x2d8>)
 800444a:	f04f 32ff 	mov.w	r2, #4294967295
 800444e:	f7fc fb57 	bl	8000b00 <__aeabi_dcmple>
 8004452:	bb48      	cbnz	r0, 80044a8 <_printf_float+0xcc>
 8004454:	2200      	movs	r2, #0
 8004456:	2300      	movs	r3, #0
 8004458:	4640      	mov	r0, r8
 800445a:	4649      	mov	r1, r9
 800445c:	f7fc fb46 	bl	8000aec <__aeabi_dcmplt>
 8004460:	b110      	cbz	r0, 8004468 <_printf_float+0x8c>
 8004462:	232d      	movs	r3, #45	; 0x2d
 8004464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004468:	4a93      	ldr	r2, [pc, #588]	; (80046b8 <_printf_float+0x2dc>)
 800446a:	4b94      	ldr	r3, [pc, #592]	; (80046bc <_printf_float+0x2e0>)
 800446c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004470:	bf94      	ite	ls
 8004472:	4690      	movls	r8, r2
 8004474:	4698      	movhi	r8, r3
 8004476:	2303      	movs	r3, #3
 8004478:	6123      	str	r3, [r4, #16]
 800447a:	9b05      	ldr	r3, [sp, #20]
 800447c:	f023 0304 	bic.w	r3, r3, #4
 8004480:	6023      	str	r3, [r4, #0]
 8004482:	f04f 0900 	mov.w	r9, #0
 8004486:	9700      	str	r7, [sp, #0]
 8004488:	4633      	mov	r3, r6
 800448a:	aa0b      	add	r2, sp, #44	; 0x2c
 800448c:	4621      	mov	r1, r4
 800448e:	4628      	mov	r0, r5
 8004490:	f000 f9da 	bl	8004848 <_printf_common>
 8004494:	3001      	adds	r0, #1
 8004496:	f040 8090 	bne.w	80045ba <_printf_float+0x1de>
 800449a:	f04f 30ff 	mov.w	r0, #4294967295
 800449e:	b00d      	add	sp, #52	; 0x34
 80044a0:	ecbd 8b02 	vpop	{d8}
 80044a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	4640      	mov	r0, r8
 80044ae:	4649      	mov	r1, r9
 80044b0:	f7fc fb44 	bl	8000b3c <__aeabi_dcmpun>
 80044b4:	b140      	cbz	r0, 80044c8 <_printf_float+0xec>
 80044b6:	464b      	mov	r3, r9
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bfbc      	itt	lt
 80044bc:	232d      	movlt	r3, #45	; 0x2d
 80044be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80044c2:	4a7f      	ldr	r2, [pc, #508]	; (80046c0 <_printf_float+0x2e4>)
 80044c4:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <_printf_float+0x2e8>)
 80044c6:	e7d1      	b.n	800446c <_printf_float+0x90>
 80044c8:	6863      	ldr	r3, [r4, #4]
 80044ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80044ce:	9206      	str	r2, [sp, #24]
 80044d0:	1c5a      	adds	r2, r3, #1
 80044d2:	d13f      	bne.n	8004554 <_printf_float+0x178>
 80044d4:	2306      	movs	r3, #6
 80044d6:	6063      	str	r3, [r4, #4]
 80044d8:	9b05      	ldr	r3, [sp, #20]
 80044da:	6861      	ldr	r1, [r4, #4]
 80044dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80044e0:	2300      	movs	r3, #0
 80044e2:	9303      	str	r3, [sp, #12]
 80044e4:	ab0a      	add	r3, sp, #40	; 0x28
 80044e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80044ea:	ab09      	add	r3, sp, #36	; 0x24
 80044ec:	ec49 8b10 	vmov	d0, r8, r9
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	6022      	str	r2, [r4, #0]
 80044f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80044f8:	4628      	mov	r0, r5
 80044fa:	f7ff fecf 	bl	800429c <__cvt>
 80044fe:	9b06      	ldr	r3, [sp, #24]
 8004500:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004502:	2b47      	cmp	r3, #71	; 0x47
 8004504:	4680      	mov	r8, r0
 8004506:	d108      	bne.n	800451a <_printf_float+0x13e>
 8004508:	1cc8      	adds	r0, r1, #3
 800450a:	db02      	blt.n	8004512 <_printf_float+0x136>
 800450c:	6863      	ldr	r3, [r4, #4]
 800450e:	4299      	cmp	r1, r3
 8004510:	dd41      	ble.n	8004596 <_printf_float+0x1ba>
 8004512:	f1ab 0302 	sub.w	r3, fp, #2
 8004516:	fa5f fb83 	uxtb.w	fp, r3
 800451a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800451e:	d820      	bhi.n	8004562 <_printf_float+0x186>
 8004520:	3901      	subs	r1, #1
 8004522:	465a      	mov	r2, fp
 8004524:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004528:	9109      	str	r1, [sp, #36]	; 0x24
 800452a:	f7ff ff19 	bl	8004360 <__exponent>
 800452e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004530:	1813      	adds	r3, r2, r0
 8004532:	2a01      	cmp	r2, #1
 8004534:	4681      	mov	r9, r0
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	dc02      	bgt.n	8004540 <_printf_float+0x164>
 800453a:	6822      	ldr	r2, [r4, #0]
 800453c:	07d2      	lsls	r2, r2, #31
 800453e:	d501      	bpl.n	8004544 <_printf_float+0x168>
 8004540:	3301      	adds	r3, #1
 8004542:	6123      	str	r3, [r4, #16]
 8004544:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004548:	2b00      	cmp	r3, #0
 800454a:	d09c      	beq.n	8004486 <_printf_float+0xaa>
 800454c:	232d      	movs	r3, #45	; 0x2d
 800454e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004552:	e798      	b.n	8004486 <_printf_float+0xaa>
 8004554:	9a06      	ldr	r2, [sp, #24]
 8004556:	2a47      	cmp	r2, #71	; 0x47
 8004558:	d1be      	bne.n	80044d8 <_printf_float+0xfc>
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1bc      	bne.n	80044d8 <_printf_float+0xfc>
 800455e:	2301      	movs	r3, #1
 8004560:	e7b9      	b.n	80044d6 <_printf_float+0xfa>
 8004562:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004566:	d118      	bne.n	800459a <_printf_float+0x1be>
 8004568:	2900      	cmp	r1, #0
 800456a:	6863      	ldr	r3, [r4, #4]
 800456c:	dd0b      	ble.n	8004586 <_printf_float+0x1aa>
 800456e:	6121      	str	r1, [r4, #16]
 8004570:	b913      	cbnz	r3, 8004578 <_printf_float+0x19c>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	07d0      	lsls	r0, r2, #31
 8004576:	d502      	bpl.n	800457e <_printf_float+0x1a2>
 8004578:	3301      	adds	r3, #1
 800457a:	440b      	add	r3, r1
 800457c:	6123      	str	r3, [r4, #16]
 800457e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004580:	f04f 0900 	mov.w	r9, #0
 8004584:	e7de      	b.n	8004544 <_printf_float+0x168>
 8004586:	b913      	cbnz	r3, 800458e <_printf_float+0x1b2>
 8004588:	6822      	ldr	r2, [r4, #0]
 800458a:	07d2      	lsls	r2, r2, #31
 800458c:	d501      	bpl.n	8004592 <_printf_float+0x1b6>
 800458e:	3302      	adds	r3, #2
 8004590:	e7f4      	b.n	800457c <_printf_float+0x1a0>
 8004592:	2301      	movs	r3, #1
 8004594:	e7f2      	b.n	800457c <_printf_float+0x1a0>
 8004596:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800459a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800459c:	4299      	cmp	r1, r3
 800459e:	db05      	blt.n	80045ac <_printf_float+0x1d0>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	6121      	str	r1, [r4, #16]
 80045a4:	07d8      	lsls	r0, r3, #31
 80045a6:	d5ea      	bpl.n	800457e <_printf_float+0x1a2>
 80045a8:	1c4b      	adds	r3, r1, #1
 80045aa:	e7e7      	b.n	800457c <_printf_float+0x1a0>
 80045ac:	2900      	cmp	r1, #0
 80045ae:	bfd4      	ite	le
 80045b0:	f1c1 0202 	rsble	r2, r1, #2
 80045b4:	2201      	movgt	r2, #1
 80045b6:	4413      	add	r3, r2
 80045b8:	e7e0      	b.n	800457c <_printf_float+0x1a0>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	055a      	lsls	r2, r3, #21
 80045be:	d407      	bmi.n	80045d0 <_printf_float+0x1f4>
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	4642      	mov	r2, r8
 80045c4:	4631      	mov	r1, r6
 80045c6:	4628      	mov	r0, r5
 80045c8:	47b8      	blx	r7
 80045ca:	3001      	adds	r0, #1
 80045cc:	d12c      	bne.n	8004628 <_printf_float+0x24c>
 80045ce:	e764      	b.n	800449a <_printf_float+0xbe>
 80045d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80045d4:	f240 80e0 	bls.w	8004798 <_printf_float+0x3bc>
 80045d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045dc:	2200      	movs	r2, #0
 80045de:	2300      	movs	r3, #0
 80045e0:	f7fc fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d034      	beq.n	8004652 <_printf_float+0x276>
 80045e8:	4a37      	ldr	r2, [pc, #220]	; (80046c8 <_printf_float+0x2ec>)
 80045ea:	2301      	movs	r3, #1
 80045ec:	4631      	mov	r1, r6
 80045ee:	4628      	mov	r0, r5
 80045f0:	47b8      	blx	r7
 80045f2:	3001      	adds	r0, #1
 80045f4:	f43f af51 	beq.w	800449a <_printf_float+0xbe>
 80045f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045fc:	429a      	cmp	r2, r3
 80045fe:	db02      	blt.n	8004606 <_printf_float+0x22a>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	07d8      	lsls	r0, r3, #31
 8004604:	d510      	bpl.n	8004628 <_printf_float+0x24c>
 8004606:	ee18 3a10 	vmov	r3, s16
 800460a:	4652      	mov	r2, sl
 800460c:	4631      	mov	r1, r6
 800460e:	4628      	mov	r0, r5
 8004610:	47b8      	blx	r7
 8004612:	3001      	adds	r0, #1
 8004614:	f43f af41 	beq.w	800449a <_printf_float+0xbe>
 8004618:	f04f 0800 	mov.w	r8, #0
 800461c:	f104 091a 	add.w	r9, r4, #26
 8004620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	4543      	cmp	r3, r8
 8004626:	dc09      	bgt.n	800463c <_printf_float+0x260>
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	079b      	lsls	r3, r3, #30
 800462c:	f100 8107 	bmi.w	800483e <_printf_float+0x462>
 8004630:	68e0      	ldr	r0, [r4, #12]
 8004632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004634:	4298      	cmp	r0, r3
 8004636:	bfb8      	it	lt
 8004638:	4618      	movlt	r0, r3
 800463a:	e730      	b.n	800449e <_printf_float+0xc2>
 800463c:	2301      	movs	r3, #1
 800463e:	464a      	mov	r2, r9
 8004640:	4631      	mov	r1, r6
 8004642:	4628      	mov	r0, r5
 8004644:	47b8      	blx	r7
 8004646:	3001      	adds	r0, #1
 8004648:	f43f af27 	beq.w	800449a <_printf_float+0xbe>
 800464c:	f108 0801 	add.w	r8, r8, #1
 8004650:	e7e6      	b.n	8004620 <_printf_float+0x244>
 8004652:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004654:	2b00      	cmp	r3, #0
 8004656:	dc39      	bgt.n	80046cc <_printf_float+0x2f0>
 8004658:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <_printf_float+0x2ec>)
 800465a:	2301      	movs	r3, #1
 800465c:	4631      	mov	r1, r6
 800465e:	4628      	mov	r0, r5
 8004660:	47b8      	blx	r7
 8004662:	3001      	adds	r0, #1
 8004664:	f43f af19 	beq.w	800449a <_printf_float+0xbe>
 8004668:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800466c:	4313      	orrs	r3, r2
 800466e:	d102      	bne.n	8004676 <_printf_float+0x29a>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	07d9      	lsls	r1, r3, #31
 8004674:	d5d8      	bpl.n	8004628 <_printf_float+0x24c>
 8004676:	ee18 3a10 	vmov	r3, s16
 800467a:	4652      	mov	r2, sl
 800467c:	4631      	mov	r1, r6
 800467e:	4628      	mov	r0, r5
 8004680:	47b8      	blx	r7
 8004682:	3001      	adds	r0, #1
 8004684:	f43f af09 	beq.w	800449a <_printf_float+0xbe>
 8004688:	f04f 0900 	mov.w	r9, #0
 800468c:	f104 0a1a 	add.w	sl, r4, #26
 8004690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004692:	425b      	negs	r3, r3
 8004694:	454b      	cmp	r3, r9
 8004696:	dc01      	bgt.n	800469c <_printf_float+0x2c0>
 8004698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800469a:	e792      	b.n	80045c2 <_printf_float+0x1e6>
 800469c:	2301      	movs	r3, #1
 800469e:	4652      	mov	r2, sl
 80046a0:	4631      	mov	r1, r6
 80046a2:	4628      	mov	r0, r5
 80046a4:	47b8      	blx	r7
 80046a6:	3001      	adds	r0, #1
 80046a8:	f43f aef7 	beq.w	800449a <_printf_float+0xbe>
 80046ac:	f109 0901 	add.w	r9, r9, #1
 80046b0:	e7ee      	b.n	8004690 <_printf_float+0x2b4>
 80046b2:	bf00      	nop
 80046b4:	7fefffff 	.word	0x7fefffff
 80046b8:	0801af10 	.word	0x0801af10
 80046bc:	0801af14 	.word	0x0801af14
 80046c0:	0801af18 	.word	0x0801af18
 80046c4:	0801af1c 	.word	0x0801af1c
 80046c8:	0801af20 	.word	0x0801af20
 80046cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046d0:	429a      	cmp	r2, r3
 80046d2:	bfa8      	it	ge
 80046d4:	461a      	movge	r2, r3
 80046d6:	2a00      	cmp	r2, #0
 80046d8:	4691      	mov	r9, r2
 80046da:	dc37      	bgt.n	800474c <_printf_float+0x370>
 80046dc:	f04f 0b00 	mov.w	fp, #0
 80046e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046e4:	f104 021a 	add.w	r2, r4, #26
 80046e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046ea:	9305      	str	r3, [sp, #20]
 80046ec:	eba3 0309 	sub.w	r3, r3, r9
 80046f0:	455b      	cmp	r3, fp
 80046f2:	dc33      	bgt.n	800475c <_printf_float+0x380>
 80046f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046f8:	429a      	cmp	r2, r3
 80046fa:	db3b      	blt.n	8004774 <_printf_float+0x398>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	07da      	lsls	r2, r3, #31
 8004700:	d438      	bmi.n	8004774 <_printf_float+0x398>
 8004702:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004706:	eba2 0903 	sub.w	r9, r2, r3
 800470a:	9b05      	ldr	r3, [sp, #20]
 800470c:	1ad2      	subs	r2, r2, r3
 800470e:	4591      	cmp	r9, r2
 8004710:	bfa8      	it	ge
 8004712:	4691      	movge	r9, r2
 8004714:	f1b9 0f00 	cmp.w	r9, #0
 8004718:	dc35      	bgt.n	8004786 <_printf_float+0x3aa>
 800471a:	f04f 0800 	mov.w	r8, #0
 800471e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004722:	f104 0a1a 	add.w	sl, r4, #26
 8004726:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	eba3 0309 	sub.w	r3, r3, r9
 8004730:	4543      	cmp	r3, r8
 8004732:	f77f af79 	ble.w	8004628 <_printf_float+0x24c>
 8004736:	2301      	movs	r3, #1
 8004738:	4652      	mov	r2, sl
 800473a:	4631      	mov	r1, r6
 800473c:	4628      	mov	r0, r5
 800473e:	47b8      	blx	r7
 8004740:	3001      	adds	r0, #1
 8004742:	f43f aeaa 	beq.w	800449a <_printf_float+0xbe>
 8004746:	f108 0801 	add.w	r8, r8, #1
 800474a:	e7ec      	b.n	8004726 <_printf_float+0x34a>
 800474c:	4613      	mov	r3, r2
 800474e:	4631      	mov	r1, r6
 8004750:	4642      	mov	r2, r8
 8004752:	4628      	mov	r0, r5
 8004754:	47b8      	blx	r7
 8004756:	3001      	adds	r0, #1
 8004758:	d1c0      	bne.n	80046dc <_printf_float+0x300>
 800475a:	e69e      	b.n	800449a <_printf_float+0xbe>
 800475c:	2301      	movs	r3, #1
 800475e:	4631      	mov	r1, r6
 8004760:	4628      	mov	r0, r5
 8004762:	9205      	str	r2, [sp, #20]
 8004764:	47b8      	blx	r7
 8004766:	3001      	adds	r0, #1
 8004768:	f43f ae97 	beq.w	800449a <_printf_float+0xbe>
 800476c:	9a05      	ldr	r2, [sp, #20]
 800476e:	f10b 0b01 	add.w	fp, fp, #1
 8004772:	e7b9      	b.n	80046e8 <_printf_float+0x30c>
 8004774:	ee18 3a10 	vmov	r3, s16
 8004778:	4652      	mov	r2, sl
 800477a:	4631      	mov	r1, r6
 800477c:	4628      	mov	r0, r5
 800477e:	47b8      	blx	r7
 8004780:	3001      	adds	r0, #1
 8004782:	d1be      	bne.n	8004702 <_printf_float+0x326>
 8004784:	e689      	b.n	800449a <_printf_float+0xbe>
 8004786:	9a05      	ldr	r2, [sp, #20]
 8004788:	464b      	mov	r3, r9
 800478a:	4442      	add	r2, r8
 800478c:	4631      	mov	r1, r6
 800478e:	4628      	mov	r0, r5
 8004790:	47b8      	blx	r7
 8004792:	3001      	adds	r0, #1
 8004794:	d1c1      	bne.n	800471a <_printf_float+0x33e>
 8004796:	e680      	b.n	800449a <_printf_float+0xbe>
 8004798:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800479a:	2a01      	cmp	r2, #1
 800479c:	dc01      	bgt.n	80047a2 <_printf_float+0x3c6>
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d53a      	bpl.n	8004818 <_printf_float+0x43c>
 80047a2:	2301      	movs	r3, #1
 80047a4:	4642      	mov	r2, r8
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	f43f ae74 	beq.w	800449a <_printf_float+0xbe>
 80047b2:	ee18 3a10 	vmov	r3, s16
 80047b6:	4652      	mov	r2, sl
 80047b8:	4631      	mov	r1, r6
 80047ba:	4628      	mov	r0, r5
 80047bc:	47b8      	blx	r7
 80047be:	3001      	adds	r0, #1
 80047c0:	f43f ae6b 	beq.w	800449a <_printf_float+0xbe>
 80047c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047c8:	2200      	movs	r2, #0
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80047d0:	f7fc f982 	bl	8000ad8 <__aeabi_dcmpeq>
 80047d4:	b9d8      	cbnz	r0, 800480e <_printf_float+0x432>
 80047d6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80047da:	f108 0201 	add.w	r2, r8, #1
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	47b8      	blx	r7
 80047e4:	3001      	adds	r0, #1
 80047e6:	d10e      	bne.n	8004806 <_printf_float+0x42a>
 80047e8:	e657      	b.n	800449a <_printf_float+0xbe>
 80047ea:	2301      	movs	r3, #1
 80047ec:	4652      	mov	r2, sl
 80047ee:	4631      	mov	r1, r6
 80047f0:	4628      	mov	r0, r5
 80047f2:	47b8      	blx	r7
 80047f4:	3001      	adds	r0, #1
 80047f6:	f43f ae50 	beq.w	800449a <_printf_float+0xbe>
 80047fa:	f108 0801 	add.w	r8, r8, #1
 80047fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004800:	3b01      	subs	r3, #1
 8004802:	4543      	cmp	r3, r8
 8004804:	dcf1      	bgt.n	80047ea <_printf_float+0x40e>
 8004806:	464b      	mov	r3, r9
 8004808:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800480c:	e6da      	b.n	80045c4 <_printf_float+0x1e8>
 800480e:	f04f 0800 	mov.w	r8, #0
 8004812:	f104 0a1a 	add.w	sl, r4, #26
 8004816:	e7f2      	b.n	80047fe <_printf_float+0x422>
 8004818:	2301      	movs	r3, #1
 800481a:	4642      	mov	r2, r8
 800481c:	e7df      	b.n	80047de <_printf_float+0x402>
 800481e:	2301      	movs	r3, #1
 8004820:	464a      	mov	r2, r9
 8004822:	4631      	mov	r1, r6
 8004824:	4628      	mov	r0, r5
 8004826:	47b8      	blx	r7
 8004828:	3001      	adds	r0, #1
 800482a:	f43f ae36 	beq.w	800449a <_printf_float+0xbe>
 800482e:	f108 0801 	add.w	r8, r8, #1
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004836:	1a5b      	subs	r3, r3, r1
 8004838:	4543      	cmp	r3, r8
 800483a:	dcf0      	bgt.n	800481e <_printf_float+0x442>
 800483c:	e6f8      	b.n	8004630 <_printf_float+0x254>
 800483e:	f04f 0800 	mov.w	r8, #0
 8004842:	f104 0919 	add.w	r9, r4, #25
 8004846:	e7f4      	b.n	8004832 <_printf_float+0x456>

08004848 <_printf_common>:
 8004848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800484c:	4616      	mov	r6, r2
 800484e:	4699      	mov	r9, r3
 8004850:	688a      	ldr	r2, [r1, #8]
 8004852:	690b      	ldr	r3, [r1, #16]
 8004854:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004858:	4293      	cmp	r3, r2
 800485a:	bfb8      	it	lt
 800485c:	4613      	movlt	r3, r2
 800485e:	6033      	str	r3, [r6, #0]
 8004860:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004864:	4607      	mov	r7, r0
 8004866:	460c      	mov	r4, r1
 8004868:	b10a      	cbz	r2, 800486e <_printf_common+0x26>
 800486a:	3301      	adds	r3, #1
 800486c:	6033      	str	r3, [r6, #0]
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	0699      	lsls	r1, r3, #26
 8004872:	bf42      	ittt	mi
 8004874:	6833      	ldrmi	r3, [r6, #0]
 8004876:	3302      	addmi	r3, #2
 8004878:	6033      	strmi	r3, [r6, #0]
 800487a:	6825      	ldr	r5, [r4, #0]
 800487c:	f015 0506 	ands.w	r5, r5, #6
 8004880:	d106      	bne.n	8004890 <_printf_common+0x48>
 8004882:	f104 0a19 	add.w	sl, r4, #25
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	6832      	ldr	r2, [r6, #0]
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	42ab      	cmp	r3, r5
 800488e:	dc26      	bgt.n	80048de <_printf_common+0x96>
 8004890:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004894:	1e13      	subs	r3, r2, #0
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	bf18      	it	ne
 800489a:	2301      	movne	r3, #1
 800489c:	0692      	lsls	r2, r2, #26
 800489e:	d42b      	bmi.n	80048f8 <_printf_common+0xb0>
 80048a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048a4:	4649      	mov	r1, r9
 80048a6:	4638      	mov	r0, r7
 80048a8:	47c0      	blx	r8
 80048aa:	3001      	adds	r0, #1
 80048ac:	d01e      	beq.n	80048ec <_printf_common+0xa4>
 80048ae:	6823      	ldr	r3, [r4, #0]
 80048b0:	6922      	ldr	r2, [r4, #16]
 80048b2:	f003 0306 	and.w	r3, r3, #6
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	bf02      	ittt	eq
 80048ba:	68e5      	ldreq	r5, [r4, #12]
 80048bc:	6833      	ldreq	r3, [r6, #0]
 80048be:	1aed      	subeq	r5, r5, r3
 80048c0:	68a3      	ldr	r3, [r4, #8]
 80048c2:	bf0c      	ite	eq
 80048c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048c8:	2500      	movne	r5, #0
 80048ca:	4293      	cmp	r3, r2
 80048cc:	bfc4      	itt	gt
 80048ce:	1a9b      	subgt	r3, r3, r2
 80048d0:	18ed      	addgt	r5, r5, r3
 80048d2:	2600      	movs	r6, #0
 80048d4:	341a      	adds	r4, #26
 80048d6:	42b5      	cmp	r5, r6
 80048d8:	d11a      	bne.n	8004910 <_printf_common+0xc8>
 80048da:	2000      	movs	r0, #0
 80048dc:	e008      	b.n	80048f0 <_printf_common+0xa8>
 80048de:	2301      	movs	r3, #1
 80048e0:	4652      	mov	r2, sl
 80048e2:	4649      	mov	r1, r9
 80048e4:	4638      	mov	r0, r7
 80048e6:	47c0      	blx	r8
 80048e8:	3001      	adds	r0, #1
 80048ea:	d103      	bne.n	80048f4 <_printf_common+0xac>
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048f4:	3501      	adds	r5, #1
 80048f6:	e7c6      	b.n	8004886 <_printf_common+0x3e>
 80048f8:	18e1      	adds	r1, r4, r3
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	2030      	movs	r0, #48	; 0x30
 80048fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004902:	4422      	add	r2, r4
 8004904:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004908:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800490c:	3302      	adds	r3, #2
 800490e:	e7c7      	b.n	80048a0 <_printf_common+0x58>
 8004910:	2301      	movs	r3, #1
 8004912:	4622      	mov	r2, r4
 8004914:	4649      	mov	r1, r9
 8004916:	4638      	mov	r0, r7
 8004918:	47c0      	blx	r8
 800491a:	3001      	adds	r0, #1
 800491c:	d0e6      	beq.n	80048ec <_printf_common+0xa4>
 800491e:	3601      	adds	r6, #1
 8004920:	e7d9      	b.n	80048d6 <_printf_common+0x8e>
	...

08004924 <_printf_i>:
 8004924:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004928:	7e0f      	ldrb	r7, [r1, #24]
 800492a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800492c:	2f78      	cmp	r7, #120	; 0x78
 800492e:	4691      	mov	r9, r2
 8004930:	4680      	mov	r8, r0
 8004932:	460c      	mov	r4, r1
 8004934:	469a      	mov	sl, r3
 8004936:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800493a:	d807      	bhi.n	800494c <_printf_i+0x28>
 800493c:	2f62      	cmp	r7, #98	; 0x62
 800493e:	d80a      	bhi.n	8004956 <_printf_i+0x32>
 8004940:	2f00      	cmp	r7, #0
 8004942:	f000 80d4 	beq.w	8004aee <_printf_i+0x1ca>
 8004946:	2f58      	cmp	r7, #88	; 0x58
 8004948:	f000 80c0 	beq.w	8004acc <_printf_i+0x1a8>
 800494c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004950:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004954:	e03a      	b.n	80049cc <_printf_i+0xa8>
 8004956:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800495a:	2b15      	cmp	r3, #21
 800495c:	d8f6      	bhi.n	800494c <_printf_i+0x28>
 800495e:	a101      	add	r1, pc, #4	; (adr r1, 8004964 <_printf_i+0x40>)
 8004960:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004964:	080049bd 	.word	0x080049bd
 8004968:	080049d1 	.word	0x080049d1
 800496c:	0800494d 	.word	0x0800494d
 8004970:	0800494d 	.word	0x0800494d
 8004974:	0800494d 	.word	0x0800494d
 8004978:	0800494d 	.word	0x0800494d
 800497c:	080049d1 	.word	0x080049d1
 8004980:	0800494d 	.word	0x0800494d
 8004984:	0800494d 	.word	0x0800494d
 8004988:	0800494d 	.word	0x0800494d
 800498c:	0800494d 	.word	0x0800494d
 8004990:	08004ad5 	.word	0x08004ad5
 8004994:	080049fd 	.word	0x080049fd
 8004998:	08004a8f 	.word	0x08004a8f
 800499c:	0800494d 	.word	0x0800494d
 80049a0:	0800494d 	.word	0x0800494d
 80049a4:	08004af7 	.word	0x08004af7
 80049a8:	0800494d 	.word	0x0800494d
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	0800494d 	.word	0x0800494d
 80049b4:	0800494d 	.word	0x0800494d
 80049b8:	08004a97 	.word	0x08004a97
 80049bc:	682b      	ldr	r3, [r5, #0]
 80049be:	1d1a      	adds	r2, r3, #4
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	602a      	str	r2, [r5, #0]
 80049c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049cc:	2301      	movs	r3, #1
 80049ce:	e09f      	b.n	8004b10 <_printf_i+0x1ec>
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	682b      	ldr	r3, [r5, #0]
 80049d4:	0607      	lsls	r7, r0, #24
 80049d6:	f103 0104 	add.w	r1, r3, #4
 80049da:	6029      	str	r1, [r5, #0]
 80049dc:	d501      	bpl.n	80049e2 <_printf_i+0xbe>
 80049de:	681e      	ldr	r6, [r3, #0]
 80049e0:	e003      	b.n	80049ea <_printf_i+0xc6>
 80049e2:	0646      	lsls	r6, r0, #25
 80049e4:	d5fb      	bpl.n	80049de <_printf_i+0xba>
 80049e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80049ea:	2e00      	cmp	r6, #0
 80049ec:	da03      	bge.n	80049f6 <_printf_i+0xd2>
 80049ee:	232d      	movs	r3, #45	; 0x2d
 80049f0:	4276      	negs	r6, r6
 80049f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049f6:	485a      	ldr	r0, [pc, #360]	; (8004b60 <_printf_i+0x23c>)
 80049f8:	230a      	movs	r3, #10
 80049fa:	e012      	b.n	8004a22 <_printf_i+0xfe>
 80049fc:	682b      	ldr	r3, [r5, #0]
 80049fe:	6820      	ldr	r0, [r4, #0]
 8004a00:	1d19      	adds	r1, r3, #4
 8004a02:	6029      	str	r1, [r5, #0]
 8004a04:	0605      	lsls	r5, r0, #24
 8004a06:	d501      	bpl.n	8004a0c <_printf_i+0xe8>
 8004a08:	681e      	ldr	r6, [r3, #0]
 8004a0a:	e002      	b.n	8004a12 <_printf_i+0xee>
 8004a0c:	0641      	lsls	r1, r0, #25
 8004a0e:	d5fb      	bpl.n	8004a08 <_printf_i+0xe4>
 8004a10:	881e      	ldrh	r6, [r3, #0]
 8004a12:	4853      	ldr	r0, [pc, #332]	; (8004b60 <_printf_i+0x23c>)
 8004a14:	2f6f      	cmp	r7, #111	; 0x6f
 8004a16:	bf0c      	ite	eq
 8004a18:	2308      	moveq	r3, #8
 8004a1a:	230a      	movne	r3, #10
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a22:	6865      	ldr	r5, [r4, #4]
 8004a24:	60a5      	str	r5, [r4, #8]
 8004a26:	2d00      	cmp	r5, #0
 8004a28:	bfa2      	ittt	ge
 8004a2a:	6821      	ldrge	r1, [r4, #0]
 8004a2c:	f021 0104 	bicge.w	r1, r1, #4
 8004a30:	6021      	strge	r1, [r4, #0]
 8004a32:	b90e      	cbnz	r6, 8004a38 <_printf_i+0x114>
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	d04b      	beq.n	8004ad0 <_printf_i+0x1ac>
 8004a38:	4615      	mov	r5, r2
 8004a3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a3e:	fb03 6711 	mls	r7, r3, r1, r6
 8004a42:	5dc7      	ldrb	r7, [r0, r7]
 8004a44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a48:	4637      	mov	r7, r6
 8004a4a:	42bb      	cmp	r3, r7
 8004a4c:	460e      	mov	r6, r1
 8004a4e:	d9f4      	bls.n	8004a3a <_printf_i+0x116>
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d10b      	bne.n	8004a6c <_printf_i+0x148>
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	07de      	lsls	r6, r3, #31
 8004a58:	d508      	bpl.n	8004a6c <_printf_i+0x148>
 8004a5a:	6923      	ldr	r3, [r4, #16]
 8004a5c:	6861      	ldr	r1, [r4, #4]
 8004a5e:	4299      	cmp	r1, r3
 8004a60:	bfde      	ittt	le
 8004a62:	2330      	movle	r3, #48	; 0x30
 8004a64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a6c:	1b52      	subs	r2, r2, r5
 8004a6e:	6122      	str	r2, [r4, #16]
 8004a70:	f8cd a000 	str.w	sl, [sp]
 8004a74:	464b      	mov	r3, r9
 8004a76:	aa03      	add	r2, sp, #12
 8004a78:	4621      	mov	r1, r4
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f7ff fee4 	bl	8004848 <_printf_common>
 8004a80:	3001      	adds	r0, #1
 8004a82:	d14a      	bne.n	8004b1a <_printf_i+0x1f6>
 8004a84:	f04f 30ff 	mov.w	r0, #4294967295
 8004a88:	b004      	add	sp, #16
 8004a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	f043 0320 	orr.w	r3, r3, #32
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	4833      	ldr	r0, [pc, #204]	; (8004b64 <_printf_i+0x240>)
 8004a98:	2778      	movs	r7, #120	; 0x78
 8004a9a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004a9e:	6823      	ldr	r3, [r4, #0]
 8004aa0:	6829      	ldr	r1, [r5, #0]
 8004aa2:	061f      	lsls	r7, r3, #24
 8004aa4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004aa8:	d402      	bmi.n	8004ab0 <_printf_i+0x18c>
 8004aaa:	065f      	lsls	r7, r3, #25
 8004aac:	bf48      	it	mi
 8004aae:	b2b6      	uxthmi	r6, r6
 8004ab0:	07df      	lsls	r7, r3, #31
 8004ab2:	bf48      	it	mi
 8004ab4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ab8:	6029      	str	r1, [r5, #0]
 8004aba:	bf48      	it	mi
 8004abc:	6023      	strmi	r3, [r4, #0]
 8004abe:	b91e      	cbnz	r6, 8004ac8 <_printf_i+0x1a4>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	f023 0320 	bic.w	r3, r3, #32
 8004ac6:	6023      	str	r3, [r4, #0]
 8004ac8:	2310      	movs	r3, #16
 8004aca:	e7a7      	b.n	8004a1c <_printf_i+0xf8>
 8004acc:	4824      	ldr	r0, [pc, #144]	; (8004b60 <_printf_i+0x23c>)
 8004ace:	e7e4      	b.n	8004a9a <_printf_i+0x176>
 8004ad0:	4615      	mov	r5, r2
 8004ad2:	e7bd      	b.n	8004a50 <_printf_i+0x12c>
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	6826      	ldr	r6, [r4, #0]
 8004ad8:	6961      	ldr	r1, [r4, #20]
 8004ada:	1d18      	adds	r0, r3, #4
 8004adc:	6028      	str	r0, [r5, #0]
 8004ade:	0635      	lsls	r5, r6, #24
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	d501      	bpl.n	8004ae8 <_printf_i+0x1c4>
 8004ae4:	6019      	str	r1, [r3, #0]
 8004ae6:	e002      	b.n	8004aee <_printf_i+0x1ca>
 8004ae8:	0670      	lsls	r0, r6, #25
 8004aea:	d5fb      	bpl.n	8004ae4 <_printf_i+0x1c0>
 8004aec:	8019      	strh	r1, [r3, #0]
 8004aee:	2300      	movs	r3, #0
 8004af0:	6123      	str	r3, [r4, #16]
 8004af2:	4615      	mov	r5, r2
 8004af4:	e7bc      	b.n	8004a70 <_printf_i+0x14c>
 8004af6:	682b      	ldr	r3, [r5, #0]
 8004af8:	1d1a      	adds	r2, r3, #4
 8004afa:	602a      	str	r2, [r5, #0]
 8004afc:	681d      	ldr	r5, [r3, #0]
 8004afe:	6862      	ldr	r2, [r4, #4]
 8004b00:	2100      	movs	r1, #0
 8004b02:	4628      	mov	r0, r5
 8004b04:	f7fb fb6c 	bl	80001e0 <memchr>
 8004b08:	b108      	cbz	r0, 8004b0e <_printf_i+0x1ea>
 8004b0a:	1b40      	subs	r0, r0, r5
 8004b0c:	6060      	str	r0, [r4, #4]
 8004b0e:	6863      	ldr	r3, [r4, #4]
 8004b10:	6123      	str	r3, [r4, #16]
 8004b12:	2300      	movs	r3, #0
 8004b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b18:	e7aa      	b.n	8004a70 <_printf_i+0x14c>
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	462a      	mov	r2, r5
 8004b1e:	4649      	mov	r1, r9
 8004b20:	4640      	mov	r0, r8
 8004b22:	47d0      	blx	sl
 8004b24:	3001      	adds	r0, #1
 8004b26:	d0ad      	beq.n	8004a84 <_printf_i+0x160>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	079b      	lsls	r3, r3, #30
 8004b2c:	d413      	bmi.n	8004b56 <_printf_i+0x232>
 8004b2e:	68e0      	ldr	r0, [r4, #12]
 8004b30:	9b03      	ldr	r3, [sp, #12]
 8004b32:	4298      	cmp	r0, r3
 8004b34:	bfb8      	it	lt
 8004b36:	4618      	movlt	r0, r3
 8004b38:	e7a6      	b.n	8004a88 <_printf_i+0x164>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	4632      	mov	r2, r6
 8004b3e:	4649      	mov	r1, r9
 8004b40:	4640      	mov	r0, r8
 8004b42:	47d0      	blx	sl
 8004b44:	3001      	adds	r0, #1
 8004b46:	d09d      	beq.n	8004a84 <_printf_i+0x160>
 8004b48:	3501      	adds	r5, #1
 8004b4a:	68e3      	ldr	r3, [r4, #12]
 8004b4c:	9903      	ldr	r1, [sp, #12]
 8004b4e:	1a5b      	subs	r3, r3, r1
 8004b50:	42ab      	cmp	r3, r5
 8004b52:	dcf2      	bgt.n	8004b3a <_printf_i+0x216>
 8004b54:	e7eb      	b.n	8004b2e <_printf_i+0x20a>
 8004b56:	2500      	movs	r5, #0
 8004b58:	f104 0619 	add.w	r6, r4, #25
 8004b5c:	e7f5      	b.n	8004b4a <_printf_i+0x226>
 8004b5e:	bf00      	nop
 8004b60:	0801af22 	.word	0x0801af22
 8004b64:	0801af33 	.word	0x0801af33

08004b68 <std>:
 8004b68:	2300      	movs	r3, #0
 8004b6a:	b510      	push	{r4, lr}
 8004b6c:	4604      	mov	r4, r0
 8004b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8004b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b76:	6083      	str	r3, [r0, #8]
 8004b78:	8181      	strh	r1, [r0, #12]
 8004b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8004b7c:	81c2      	strh	r2, [r0, #14]
 8004b7e:	6183      	str	r3, [r0, #24]
 8004b80:	4619      	mov	r1, r3
 8004b82:	2208      	movs	r2, #8
 8004b84:	305c      	adds	r0, #92	; 0x5c
 8004b86:	f000 f914 	bl	8004db2 <memset>
 8004b8a:	4b0d      	ldr	r3, [pc, #52]	; (8004bc0 <std+0x58>)
 8004b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <std+0x5c>)
 8004b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b92:	4b0d      	ldr	r3, [pc, #52]	; (8004bc8 <std+0x60>)
 8004b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <std+0x64>)
 8004b98:	6323      	str	r3, [r4, #48]	; 0x30
 8004b9a:	4b0d      	ldr	r3, [pc, #52]	; (8004bd0 <std+0x68>)
 8004b9c:	6224      	str	r4, [r4, #32]
 8004b9e:	429c      	cmp	r4, r3
 8004ba0:	d006      	beq.n	8004bb0 <std+0x48>
 8004ba2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004ba6:	4294      	cmp	r4, r2
 8004ba8:	d002      	beq.n	8004bb0 <std+0x48>
 8004baa:	33d0      	adds	r3, #208	; 0xd0
 8004bac:	429c      	cmp	r4, r3
 8004bae:	d105      	bne.n	8004bbc <std+0x54>
 8004bb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bb8:	f000 b988 	b.w	8004ecc <__retarget_lock_init_recursive>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	bf00      	nop
 8004bc0:	08004d2d 	.word	0x08004d2d
 8004bc4:	08004d4f 	.word	0x08004d4f
 8004bc8:	08004d87 	.word	0x08004d87
 8004bcc:	08004dab 	.word	0x08004dab
 8004bd0:	20000210 	.word	0x20000210

08004bd4 <stdio_exit_handler>:
 8004bd4:	4a02      	ldr	r2, [pc, #8]	; (8004be0 <stdio_exit_handler+0xc>)
 8004bd6:	4903      	ldr	r1, [pc, #12]	; (8004be4 <stdio_exit_handler+0x10>)
 8004bd8:	4803      	ldr	r0, [pc, #12]	; (8004be8 <stdio_exit_handler+0x14>)
 8004bda:	f000 b869 	b.w	8004cb0 <_fwalk_sglue>
 8004bde:	bf00      	nop
 8004be0:	20000010 	.word	0x20000010
 8004be4:	08006731 	.word	0x08006731
 8004be8:	2000001c 	.word	0x2000001c

08004bec <cleanup_stdio>:
 8004bec:	6841      	ldr	r1, [r0, #4]
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <cleanup_stdio+0x34>)
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	b510      	push	{r4, lr}
 8004bf4:	4604      	mov	r4, r0
 8004bf6:	d001      	beq.n	8004bfc <cleanup_stdio+0x10>
 8004bf8:	f001 fd9a 	bl	8006730 <_fflush_r>
 8004bfc:	68a1      	ldr	r1, [r4, #8]
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <cleanup_stdio+0x38>)
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d002      	beq.n	8004c0a <cleanup_stdio+0x1e>
 8004c04:	4620      	mov	r0, r4
 8004c06:	f001 fd93 	bl	8006730 <_fflush_r>
 8004c0a:	68e1      	ldr	r1, [r4, #12]
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <cleanup_stdio+0x3c>)
 8004c0e:	4299      	cmp	r1, r3
 8004c10:	d004      	beq.n	8004c1c <cleanup_stdio+0x30>
 8004c12:	4620      	mov	r0, r4
 8004c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c18:	f001 bd8a 	b.w	8006730 <_fflush_r>
 8004c1c:	bd10      	pop	{r4, pc}
 8004c1e:	bf00      	nop
 8004c20:	20000210 	.word	0x20000210
 8004c24:	20000278 	.word	0x20000278
 8004c28:	200002e0 	.word	0x200002e0

08004c2c <global_stdio_init.part.0>:
 8004c2c:	b510      	push	{r4, lr}
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	; (8004c5c <global_stdio_init.part.0+0x30>)
 8004c30:	4c0b      	ldr	r4, [pc, #44]	; (8004c60 <global_stdio_init.part.0+0x34>)
 8004c32:	4a0c      	ldr	r2, [pc, #48]	; (8004c64 <global_stdio_init.part.0+0x38>)
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	4620      	mov	r0, r4
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	f7ff ff94 	bl	8004b68 <std>
 8004c40:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004c44:	2201      	movs	r2, #1
 8004c46:	2109      	movs	r1, #9
 8004c48:	f7ff ff8e 	bl	8004b68 <std>
 8004c4c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004c50:	2202      	movs	r2, #2
 8004c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c56:	2112      	movs	r1, #18
 8004c58:	f7ff bf86 	b.w	8004b68 <std>
 8004c5c:	20000348 	.word	0x20000348
 8004c60:	20000210 	.word	0x20000210
 8004c64:	08004bd5 	.word	0x08004bd5

08004c68 <__sfp_lock_acquire>:
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <__sfp_lock_acquire+0x8>)
 8004c6a:	f000 b930 	b.w	8004ece <__retarget_lock_acquire_recursive>
 8004c6e:	bf00      	nop
 8004c70:	20000351 	.word	0x20000351

08004c74 <__sfp_lock_release>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__sfp_lock_release+0x8>)
 8004c76:	f000 b92b 	b.w	8004ed0 <__retarget_lock_release_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	20000351 	.word	0x20000351

08004c80 <__sinit>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	4604      	mov	r4, r0
 8004c84:	f7ff fff0 	bl	8004c68 <__sfp_lock_acquire>
 8004c88:	6a23      	ldr	r3, [r4, #32]
 8004c8a:	b11b      	cbz	r3, 8004c94 <__sinit+0x14>
 8004c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c90:	f7ff bff0 	b.w	8004c74 <__sfp_lock_release>
 8004c94:	4b04      	ldr	r3, [pc, #16]	; (8004ca8 <__sinit+0x28>)
 8004c96:	6223      	str	r3, [r4, #32]
 8004c98:	4b04      	ldr	r3, [pc, #16]	; (8004cac <__sinit+0x2c>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f5      	bne.n	8004c8c <__sinit+0xc>
 8004ca0:	f7ff ffc4 	bl	8004c2c <global_stdio_init.part.0>
 8004ca4:	e7f2      	b.n	8004c8c <__sinit+0xc>
 8004ca6:	bf00      	nop
 8004ca8:	08004bed 	.word	0x08004bed
 8004cac:	20000348 	.word	0x20000348

08004cb0 <_fwalk_sglue>:
 8004cb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cb4:	4607      	mov	r7, r0
 8004cb6:	4688      	mov	r8, r1
 8004cb8:	4614      	mov	r4, r2
 8004cba:	2600      	movs	r6, #0
 8004cbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cc0:	f1b9 0901 	subs.w	r9, r9, #1
 8004cc4:	d505      	bpl.n	8004cd2 <_fwalk_sglue+0x22>
 8004cc6:	6824      	ldr	r4, [r4, #0]
 8004cc8:	2c00      	cmp	r4, #0
 8004cca:	d1f7      	bne.n	8004cbc <_fwalk_sglue+0xc>
 8004ccc:	4630      	mov	r0, r6
 8004cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cd2:	89ab      	ldrh	r3, [r5, #12]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d907      	bls.n	8004ce8 <_fwalk_sglue+0x38>
 8004cd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cdc:	3301      	adds	r3, #1
 8004cde:	d003      	beq.n	8004ce8 <_fwalk_sglue+0x38>
 8004ce0:	4629      	mov	r1, r5
 8004ce2:	4638      	mov	r0, r7
 8004ce4:	47c0      	blx	r8
 8004ce6:	4306      	orrs	r6, r0
 8004ce8:	3568      	adds	r5, #104	; 0x68
 8004cea:	e7e9      	b.n	8004cc0 <_fwalk_sglue+0x10>

08004cec <siprintf>:
 8004cec:	b40e      	push	{r1, r2, r3}
 8004cee:	b500      	push	{lr}
 8004cf0:	b09c      	sub	sp, #112	; 0x70
 8004cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cf4:	9002      	str	r0, [sp, #8]
 8004cf6:	9006      	str	r0, [sp, #24]
 8004cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cfc:	4809      	ldr	r0, [pc, #36]	; (8004d24 <siprintf+0x38>)
 8004cfe:	9107      	str	r1, [sp, #28]
 8004d00:	9104      	str	r1, [sp, #16]
 8004d02:	4909      	ldr	r1, [pc, #36]	; (8004d28 <siprintf+0x3c>)
 8004d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d08:	9105      	str	r1, [sp, #20]
 8004d0a:	6800      	ldr	r0, [r0, #0]
 8004d0c:	9301      	str	r3, [sp, #4]
 8004d0e:	a902      	add	r1, sp, #8
 8004d10:	f001 fb8a 	bl	8006428 <_svfiprintf_r>
 8004d14:	9b02      	ldr	r3, [sp, #8]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
 8004d1a:	b01c      	add	sp, #112	; 0x70
 8004d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d20:	b003      	add	sp, #12
 8004d22:	4770      	bx	lr
 8004d24:	20000068 	.word	0x20000068
 8004d28:	ffff0208 	.word	0xffff0208

08004d2c <__sread>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	460c      	mov	r4, r1
 8004d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d34:	f000 f86c 	bl	8004e10 <_read_r>
 8004d38:	2800      	cmp	r0, #0
 8004d3a:	bfab      	itete	ge
 8004d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d40:	181b      	addge	r3, r3, r0
 8004d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d46:	bfac      	ite	ge
 8004d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d4a:	81a3      	strhlt	r3, [r4, #12]
 8004d4c:	bd10      	pop	{r4, pc}

08004d4e <__swrite>:
 8004d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d52:	461f      	mov	r7, r3
 8004d54:	898b      	ldrh	r3, [r1, #12]
 8004d56:	05db      	lsls	r3, r3, #23
 8004d58:	4605      	mov	r5, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4616      	mov	r6, r2
 8004d5e:	d505      	bpl.n	8004d6c <__swrite+0x1e>
 8004d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d64:	2302      	movs	r3, #2
 8004d66:	2200      	movs	r2, #0
 8004d68:	f000 f840 	bl	8004dec <_lseek_r>
 8004d6c:	89a3      	ldrh	r3, [r4, #12]
 8004d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d76:	81a3      	strh	r3, [r4, #12]
 8004d78:	4632      	mov	r2, r6
 8004d7a:	463b      	mov	r3, r7
 8004d7c:	4628      	mov	r0, r5
 8004d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d82:	f000 b867 	b.w	8004e54 <_write_r>

08004d86 <__sseek>:
 8004d86:	b510      	push	{r4, lr}
 8004d88:	460c      	mov	r4, r1
 8004d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d8e:	f000 f82d 	bl	8004dec <_lseek_r>
 8004d92:	1c43      	adds	r3, r0, #1
 8004d94:	89a3      	ldrh	r3, [r4, #12]
 8004d96:	bf15      	itete	ne
 8004d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004da2:	81a3      	strheq	r3, [r4, #12]
 8004da4:	bf18      	it	ne
 8004da6:	81a3      	strhne	r3, [r4, #12]
 8004da8:	bd10      	pop	{r4, pc}

08004daa <__sclose>:
 8004daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dae:	f000 b80d 	b.w	8004dcc <_close_r>

08004db2 <memset>:
 8004db2:	4402      	add	r2, r0
 8004db4:	4603      	mov	r3, r0
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d100      	bne.n	8004dbc <memset+0xa>
 8004dba:	4770      	bx	lr
 8004dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8004dc0:	e7f9      	b.n	8004db6 <memset+0x4>
	...

08004dc4 <_localeconv_r>:
 8004dc4:	4800      	ldr	r0, [pc, #0]	; (8004dc8 <_localeconv_r+0x4>)
 8004dc6:	4770      	bx	lr
 8004dc8:	2000015c 	.word	0x2000015c

08004dcc <_close_r>:
 8004dcc:	b538      	push	{r3, r4, r5, lr}
 8004dce:	4d06      	ldr	r5, [pc, #24]	; (8004de8 <_close_r+0x1c>)
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	4608      	mov	r0, r1
 8004dd6:	602b      	str	r3, [r5, #0]
 8004dd8:	f7fe f9c7 	bl	800316a <_close>
 8004ddc:	1c43      	adds	r3, r0, #1
 8004dde:	d102      	bne.n	8004de6 <_close_r+0x1a>
 8004de0:	682b      	ldr	r3, [r5, #0]
 8004de2:	b103      	cbz	r3, 8004de6 <_close_r+0x1a>
 8004de4:	6023      	str	r3, [r4, #0]
 8004de6:	bd38      	pop	{r3, r4, r5, pc}
 8004de8:	2000034c 	.word	0x2000034c

08004dec <_lseek_r>:
 8004dec:	b538      	push	{r3, r4, r5, lr}
 8004dee:	4d07      	ldr	r5, [pc, #28]	; (8004e0c <_lseek_r+0x20>)
 8004df0:	4604      	mov	r4, r0
 8004df2:	4608      	mov	r0, r1
 8004df4:	4611      	mov	r1, r2
 8004df6:	2200      	movs	r2, #0
 8004df8:	602a      	str	r2, [r5, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f7fe f9dc 	bl	80031b8 <_lseek>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d102      	bne.n	8004e0a <_lseek_r+0x1e>
 8004e04:	682b      	ldr	r3, [r5, #0]
 8004e06:	b103      	cbz	r3, 8004e0a <_lseek_r+0x1e>
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
 8004e0c:	2000034c 	.word	0x2000034c

08004e10 <_read_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	4d07      	ldr	r5, [pc, #28]	; (8004e30 <_read_r+0x20>)
 8004e14:	4604      	mov	r4, r0
 8004e16:	4608      	mov	r0, r1
 8004e18:	4611      	mov	r1, r2
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	602a      	str	r2, [r5, #0]
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f7fe f96a 	bl	80030f8 <_read>
 8004e24:	1c43      	adds	r3, r0, #1
 8004e26:	d102      	bne.n	8004e2e <_read_r+0x1e>
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	b103      	cbz	r3, 8004e2e <_read_r+0x1e>
 8004e2c:	6023      	str	r3, [r4, #0]
 8004e2e:	bd38      	pop	{r3, r4, r5, pc}
 8004e30:	2000034c 	.word	0x2000034c

08004e34 <_sbrk_r>:
 8004e34:	b538      	push	{r3, r4, r5, lr}
 8004e36:	4d06      	ldr	r5, [pc, #24]	; (8004e50 <_sbrk_r+0x1c>)
 8004e38:	2300      	movs	r3, #0
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	4608      	mov	r0, r1
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f7fe f9c8 	bl	80031d4 <_sbrk>
 8004e44:	1c43      	adds	r3, r0, #1
 8004e46:	d102      	bne.n	8004e4e <_sbrk_r+0x1a>
 8004e48:	682b      	ldr	r3, [r5, #0]
 8004e4a:	b103      	cbz	r3, 8004e4e <_sbrk_r+0x1a>
 8004e4c:	6023      	str	r3, [r4, #0]
 8004e4e:	bd38      	pop	{r3, r4, r5, pc}
 8004e50:	2000034c 	.word	0x2000034c

08004e54 <_write_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d07      	ldr	r5, [pc, #28]	; (8004e74 <_write_r+0x20>)
 8004e58:	4604      	mov	r4, r0
 8004e5a:	4608      	mov	r0, r1
 8004e5c:	4611      	mov	r1, r2
 8004e5e:	2200      	movs	r2, #0
 8004e60:	602a      	str	r2, [r5, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	f7fe f965 	bl	8003132 <_write>
 8004e68:	1c43      	adds	r3, r0, #1
 8004e6a:	d102      	bne.n	8004e72 <_write_r+0x1e>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	b103      	cbz	r3, 8004e72 <_write_r+0x1e>
 8004e70:	6023      	str	r3, [r4, #0]
 8004e72:	bd38      	pop	{r3, r4, r5, pc}
 8004e74:	2000034c 	.word	0x2000034c

08004e78 <__errno>:
 8004e78:	4b01      	ldr	r3, [pc, #4]	; (8004e80 <__errno+0x8>)
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000068 	.word	0x20000068

08004e84 <__libc_init_array>:
 8004e84:	b570      	push	{r4, r5, r6, lr}
 8004e86:	4d0d      	ldr	r5, [pc, #52]	; (8004ebc <__libc_init_array+0x38>)
 8004e88:	4c0d      	ldr	r4, [pc, #52]	; (8004ec0 <__libc_init_array+0x3c>)
 8004e8a:	1b64      	subs	r4, r4, r5
 8004e8c:	10a4      	asrs	r4, r4, #2
 8004e8e:	2600      	movs	r6, #0
 8004e90:	42a6      	cmp	r6, r4
 8004e92:	d109      	bne.n	8004ea8 <__libc_init_array+0x24>
 8004e94:	4d0b      	ldr	r5, [pc, #44]	; (8004ec4 <__libc_init_array+0x40>)
 8004e96:	4c0c      	ldr	r4, [pc, #48]	; (8004ec8 <__libc_init_array+0x44>)
 8004e98:	f003 f866 	bl	8007f68 <_init>
 8004e9c:	1b64      	subs	r4, r4, r5
 8004e9e:	10a4      	asrs	r4, r4, #2
 8004ea0:	2600      	movs	r6, #0
 8004ea2:	42a6      	cmp	r6, r4
 8004ea4:	d105      	bne.n	8004eb2 <__libc_init_array+0x2e>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eac:	4798      	blx	r3
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7ee      	b.n	8004e90 <__libc_init_array+0xc>
 8004eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb6:	4798      	blx	r3
 8004eb8:	3601      	adds	r6, #1
 8004eba:	e7f2      	b.n	8004ea2 <__libc_init_array+0x1e>
 8004ebc:	0801b468 	.word	0x0801b468
 8004ec0:	0801b468 	.word	0x0801b468
 8004ec4:	0801b468 	.word	0x0801b468
 8004ec8:	0801b46c 	.word	0x0801b46c

08004ecc <__retarget_lock_init_recursive>:
 8004ecc:	4770      	bx	lr

08004ece <__retarget_lock_acquire_recursive>:
 8004ece:	4770      	bx	lr

08004ed0 <__retarget_lock_release_recursive>:
 8004ed0:	4770      	bx	lr

08004ed2 <memcpy>:
 8004ed2:	440a      	add	r2, r1
 8004ed4:	4291      	cmp	r1, r2
 8004ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8004eda:	d100      	bne.n	8004ede <memcpy+0xc>
 8004edc:	4770      	bx	lr
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee8:	4291      	cmp	r1, r2
 8004eea:	d1f9      	bne.n	8004ee0 <memcpy+0xe>
 8004eec:	bd10      	pop	{r4, pc}

08004eee <quorem>:
 8004eee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef2:	6903      	ldr	r3, [r0, #16]
 8004ef4:	690c      	ldr	r4, [r1, #16]
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	4607      	mov	r7, r0
 8004efa:	db7e      	blt.n	8004ffa <quorem+0x10c>
 8004efc:	3c01      	subs	r4, #1
 8004efe:	f101 0814 	add.w	r8, r1, #20
 8004f02:	f100 0514 	add.w	r5, r0, #20
 8004f06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f14:	3301      	adds	r3, #1
 8004f16:	429a      	cmp	r2, r3
 8004f18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f20:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f24:	d331      	bcc.n	8004f8a <quorem+0x9c>
 8004f26:	f04f 0e00 	mov.w	lr, #0
 8004f2a:	4640      	mov	r0, r8
 8004f2c:	46ac      	mov	ip, r5
 8004f2e:	46f2      	mov	sl, lr
 8004f30:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f34:	b293      	uxth	r3, r2
 8004f36:	fb06 e303 	mla	r3, r6, r3, lr
 8004f3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f3e:	0c1a      	lsrs	r2, r3, #16
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	ebaa 0303 	sub.w	r3, sl, r3
 8004f46:	f8dc a000 	ldr.w	sl, [ip]
 8004f4a:	fa13 f38a 	uxtah	r3, r3, sl
 8004f4e:	fb06 220e 	mla	r2, r6, lr, r2
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	9b00      	ldr	r3, [sp, #0]
 8004f56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f5a:	b292      	uxth	r2, r2
 8004f5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f64:	f8bd 3000 	ldrh.w	r3, [sp]
 8004f68:	4581      	cmp	r9, r0
 8004f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f6e:	f84c 3b04 	str.w	r3, [ip], #4
 8004f72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f76:	d2db      	bcs.n	8004f30 <quorem+0x42>
 8004f78:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f7c:	b92b      	cbnz	r3, 8004f8a <quorem+0x9c>
 8004f7e:	9b01      	ldr	r3, [sp, #4]
 8004f80:	3b04      	subs	r3, #4
 8004f82:	429d      	cmp	r5, r3
 8004f84:	461a      	mov	r2, r3
 8004f86:	d32c      	bcc.n	8004fe2 <quorem+0xf4>
 8004f88:	613c      	str	r4, [r7, #16]
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	f001 f8f2 	bl	8006174 <__mcmp>
 8004f90:	2800      	cmp	r0, #0
 8004f92:	db22      	blt.n	8004fda <quorem+0xec>
 8004f94:	3601      	adds	r6, #1
 8004f96:	4629      	mov	r1, r5
 8004f98:	2000      	movs	r0, #0
 8004f9a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004f9e:	f8d1 c000 	ldr.w	ip, [r1]
 8004fa2:	b293      	uxth	r3, r2
 8004fa4:	1ac3      	subs	r3, r0, r3
 8004fa6:	0c12      	lsrs	r2, r2, #16
 8004fa8:	fa13 f38c 	uxtah	r3, r3, ip
 8004fac:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004fb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fba:	45c1      	cmp	r9, r8
 8004fbc:	f841 3b04 	str.w	r3, [r1], #4
 8004fc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fc4:	d2e9      	bcs.n	8004f9a <quorem+0xac>
 8004fc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fce:	b922      	cbnz	r2, 8004fda <quorem+0xec>
 8004fd0:	3b04      	subs	r3, #4
 8004fd2:	429d      	cmp	r5, r3
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	d30a      	bcc.n	8004fee <quorem+0x100>
 8004fd8:	613c      	str	r4, [r7, #16]
 8004fda:	4630      	mov	r0, r6
 8004fdc:	b003      	add	sp, #12
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	3b04      	subs	r3, #4
 8004fe6:	2a00      	cmp	r2, #0
 8004fe8:	d1ce      	bne.n	8004f88 <quorem+0x9a>
 8004fea:	3c01      	subs	r4, #1
 8004fec:	e7c9      	b.n	8004f82 <quorem+0x94>
 8004fee:	6812      	ldr	r2, [r2, #0]
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	2a00      	cmp	r2, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <quorem+0xea>
 8004ff6:	3c01      	subs	r4, #1
 8004ff8:	e7eb      	b.n	8004fd2 <quorem+0xe4>
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	e7ee      	b.n	8004fdc <quorem+0xee>
	...

08005000 <_dtoa_r>:
 8005000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005004:	ed2d 8b04 	vpush	{d8-d9}
 8005008:	69c5      	ldr	r5, [r0, #28]
 800500a:	b093      	sub	sp, #76	; 0x4c
 800500c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005010:	ec57 6b10 	vmov	r6, r7, d0
 8005014:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005018:	9107      	str	r1, [sp, #28]
 800501a:	4604      	mov	r4, r0
 800501c:	920a      	str	r2, [sp, #40]	; 0x28
 800501e:	930d      	str	r3, [sp, #52]	; 0x34
 8005020:	b975      	cbnz	r5, 8005040 <_dtoa_r+0x40>
 8005022:	2010      	movs	r0, #16
 8005024:	f7ff f886 	bl	8004134 <malloc>
 8005028:	4602      	mov	r2, r0
 800502a:	61e0      	str	r0, [r4, #28]
 800502c:	b920      	cbnz	r0, 8005038 <_dtoa_r+0x38>
 800502e:	4bae      	ldr	r3, [pc, #696]	; (80052e8 <_dtoa_r+0x2e8>)
 8005030:	21ef      	movs	r1, #239	; 0xef
 8005032:	48ae      	ldr	r0, [pc, #696]	; (80052ec <_dtoa_r+0x2ec>)
 8005034:	f001 fbbe 	bl	80067b4 <__assert_func>
 8005038:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800503c:	6005      	str	r5, [r0, #0]
 800503e:	60c5      	str	r5, [r0, #12]
 8005040:	69e3      	ldr	r3, [r4, #28]
 8005042:	6819      	ldr	r1, [r3, #0]
 8005044:	b151      	cbz	r1, 800505c <_dtoa_r+0x5c>
 8005046:	685a      	ldr	r2, [r3, #4]
 8005048:	604a      	str	r2, [r1, #4]
 800504a:	2301      	movs	r3, #1
 800504c:	4093      	lsls	r3, r2
 800504e:	608b      	str	r3, [r1, #8]
 8005050:	4620      	mov	r0, r4
 8005052:	f000 fe53 	bl	8005cfc <_Bfree>
 8005056:	69e3      	ldr	r3, [r4, #28]
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	1e3b      	subs	r3, r7, #0
 800505e:	bfbb      	ittet	lt
 8005060:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005064:	9303      	strlt	r3, [sp, #12]
 8005066:	2300      	movge	r3, #0
 8005068:	2201      	movlt	r2, #1
 800506a:	bfac      	ite	ge
 800506c:	f8c8 3000 	strge.w	r3, [r8]
 8005070:	f8c8 2000 	strlt.w	r2, [r8]
 8005074:	4b9e      	ldr	r3, [pc, #632]	; (80052f0 <_dtoa_r+0x2f0>)
 8005076:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800507a:	ea33 0308 	bics.w	r3, r3, r8
 800507e:	d11b      	bne.n	80050b8 <_dtoa_r+0xb8>
 8005080:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005082:	f242 730f 	movw	r3, #9999	; 0x270f
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800508c:	4333      	orrs	r3, r6
 800508e:	f000 8593 	beq.w	8005bb8 <_dtoa_r+0xbb8>
 8005092:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005094:	b963      	cbnz	r3, 80050b0 <_dtoa_r+0xb0>
 8005096:	4b97      	ldr	r3, [pc, #604]	; (80052f4 <_dtoa_r+0x2f4>)
 8005098:	e027      	b.n	80050ea <_dtoa_r+0xea>
 800509a:	4b97      	ldr	r3, [pc, #604]	; (80052f8 <_dtoa_r+0x2f8>)
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	3308      	adds	r3, #8
 80050a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	9800      	ldr	r0, [sp, #0]
 80050a6:	b013      	add	sp, #76	; 0x4c
 80050a8:	ecbd 8b04 	vpop	{d8-d9}
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050b0:	4b90      	ldr	r3, [pc, #576]	; (80052f4 <_dtoa_r+0x2f4>)
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	3303      	adds	r3, #3
 80050b6:	e7f3      	b.n	80050a0 <_dtoa_r+0xa0>
 80050b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80050bc:	2200      	movs	r2, #0
 80050be:	ec51 0b17 	vmov	r0, r1, d7
 80050c2:	eeb0 8a47 	vmov.f32	s16, s14
 80050c6:	eef0 8a67 	vmov.f32	s17, s15
 80050ca:	2300      	movs	r3, #0
 80050cc:	f7fb fd04 	bl	8000ad8 <__aeabi_dcmpeq>
 80050d0:	4681      	mov	r9, r0
 80050d2:	b160      	cbz	r0, 80050ee <_dtoa_r+0xee>
 80050d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050d6:	2301      	movs	r3, #1
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8568 	beq.w	8005bb2 <_dtoa_r+0xbb2>
 80050e2:	4b86      	ldr	r3, [pc, #536]	; (80052fc <_dtoa_r+0x2fc>)
 80050e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	3b01      	subs	r3, #1
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	e7da      	b.n	80050a4 <_dtoa_r+0xa4>
 80050ee:	aa10      	add	r2, sp, #64	; 0x40
 80050f0:	a911      	add	r1, sp, #68	; 0x44
 80050f2:	4620      	mov	r0, r4
 80050f4:	eeb0 0a48 	vmov.f32	s0, s16
 80050f8:	eef0 0a68 	vmov.f32	s1, s17
 80050fc:	f001 f8e0 	bl	80062c0 <__d2b>
 8005100:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005104:	4682      	mov	sl, r0
 8005106:	2d00      	cmp	r5, #0
 8005108:	d07f      	beq.n	800520a <_dtoa_r+0x20a>
 800510a:	ee18 3a90 	vmov	r3, s17
 800510e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005112:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005116:	ec51 0b18 	vmov	r0, r1, d8
 800511a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800511e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005122:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005126:	4619      	mov	r1, r3
 8005128:	2200      	movs	r2, #0
 800512a:	4b75      	ldr	r3, [pc, #468]	; (8005300 <_dtoa_r+0x300>)
 800512c:	f7fb f8b4 	bl	8000298 <__aeabi_dsub>
 8005130:	a367      	add	r3, pc, #412	; (adr r3, 80052d0 <_dtoa_r+0x2d0>)
 8005132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005136:	f7fb fa67 	bl	8000608 <__aeabi_dmul>
 800513a:	a367      	add	r3, pc, #412	; (adr r3, 80052d8 <_dtoa_r+0x2d8>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb f8ac 	bl	800029c <__adddf3>
 8005144:	4606      	mov	r6, r0
 8005146:	4628      	mov	r0, r5
 8005148:	460f      	mov	r7, r1
 800514a:	f7fb f9f3 	bl	8000534 <__aeabi_i2d>
 800514e:	a364      	add	r3, pc, #400	; (adr r3, 80052e0 <_dtoa_r+0x2e0>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb fa58 	bl	8000608 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f7fb f89c 	bl	800029c <__adddf3>
 8005164:	4606      	mov	r6, r0
 8005166:	460f      	mov	r7, r1
 8005168:	f7fb fcfe 	bl	8000b68 <__aeabi_d2iz>
 800516c:	2200      	movs	r2, #0
 800516e:	4683      	mov	fp, r0
 8005170:	2300      	movs	r3, #0
 8005172:	4630      	mov	r0, r6
 8005174:	4639      	mov	r1, r7
 8005176:	f7fb fcb9 	bl	8000aec <__aeabi_dcmplt>
 800517a:	b148      	cbz	r0, 8005190 <_dtoa_r+0x190>
 800517c:	4658      	mov	r0, fp
 800517e:	f7fb f9d9 	bl	8000534 <__aeabi_i2d>
 8005182:	4632      	mov	r2, r6
 8005184:	463b      	mov	r3, r7
 8005186:	f7fb fca7 	bl	8000ad8 <__aeabi_dcmpeq>
 800518a:	b908      	cbnz	r0, 8005190 <_dtoa_r+0x190>
 800518c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005190:	f1bb 0f16 	cmp.w	fp, #22
 8005194:	d857      	bhi.n	8005246 <_dtoa_r+0x246>
 8005196:	4b5b      	ldr	r3, [pc, #364]	; (8005304 <_dtoa_r+0x304>)
 8005198:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	ec51 0b18 	vmov	r0, r1, d8
 80051a4:	f7fb fca2 	bl	8000aec <__aeabi_dcmplt>
 80051a8:	2800      	cmp	r0, #0
 80051aa:	d04e      	beq.n	800524a <_dtoa_r+0x24a>
 80051ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80051b0:	2300      	movs	r3, #0
 80051b2:	930c      	str	r3, [sp, #48]	; 0x30
 80051b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051b6:	1b5b      	subs	r3, r3, r5
 80051b8:	1e5a      	subs	r2, r3, #1
 80051ba:	bf45      	ittet	mi
 80051bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80051c0:	9305      	strmi	r3, [sp, #20]
 80051c2:	2300      	movpl	r3, #0
 80051c4:	2300      	movmi	r3, #0
 80051c6:	9206      	str	r2, [sp, #24]
 80051c8:	bf54      	ite	pl
 80051ca:	9305      	strpl	r3, [sp, #20]
 80051cc:	9306      	strmi	r3, [sp, #24]
 80051ce:	f1bb 0f00 	cmp.w	fp, #0
 80051d2:	db3c      	blt.n	800524e <_dtoa_r+0x24e>
 80051d4:	9b06      	ldr	r3, [sp, #24]
 80051d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80051da:	445b      	add	r3, fp
 80051dc:	9306      	str	r3, [sp, #24]
 80051de:	2300      	movs	r3, #0
 80051e0:	9308      	str	r3, [sp, #32]
 80051e2:	9b07      	ldr	r3, [sp, #28]
 80051e4:	2b09      	cmp	r3, #9
 80051e6:	d868      	bhi.n	80052ba <_dtoa_r+0x2ba>
 80051e8:	2b05      	cmp	r3, #5
 80051ea:	bfc4      	itt	gt
 80051ec:	3b04      	subgt	r3, #4
 80051ee:	9307      	strgt	r3, [sp, #28]
 80051f0:	9b07      	ldr	r3, [sp, #28]
 80051f2:	f1a3 0302 	sub.w	r3, r3, #2
 80051f6:	bfcc      	ite	gt
 80051f8:	2500      	movgt	r5, #0
 80051fa:	2501      	movle	r5, #1
 80051fc:	2b03      	cmp	r3, #3
 80051fe:	f200 8085 	bhi.w	800530c <_dtoa_r+0x30c>
 8005202:	e8df f003 	tbb	[pc, r3]
 8005206:	3b2e      	.short	0x3b2e
 8005208:	5839      	.short	0x5839
 800520a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800520e:	441d      	add	r5, r3
 8005210:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005214:	2b20      	cmp	r3, #32
 8005216:	bfc1      	itttt	gt
 8005218:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800521c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005220:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005224:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005228:	bfd6      	itet	le
 800522a:	f1c3 0320 	rsble	r3, r3, #32
 800522e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005232:	fa06 f003 	lslle.w	r0, r6, r3
 8005236:	f7fb f96d 	bl	8000514 <__aeabi_ui2d>
 800523a:	2201      	movs	r2, #1
 800523c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005240:	3d01      	subs	r5, #1
 8005242:	920e      	str	r2, [sp, #56]	; 0x38
 8005244:	e76f      	b.n	8005126 <_dtoa_r+0x126>
 8005246:	2301      	movs	r3, #1
 8005248:	e7b3      	b.n	80051b2 <_dtoa_r+0x1b2>
 800524a:	900c      	str	r0, [sp, #48]	; 0x30
 800524c:	e7b2      	b.n	80051b4 <_dtoa_r+0x1b4>
 800524e:	9b05      	ldr	r3, [sp, #20]
 8005250:	eba3 030b 	sub.w	r3, r3, fp
 8005254:	9305      	str	r3, [sp, #20]
 8005256:	f1cb 0300 	rsb	r3, fp, #0
 800525a:	9308      	str	r3, [sp, #32]
 800525c:	2300      	movs	r3, #0
 800525e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005260:	e7bf      	b.n	80051e2 <_dtoa_r+0x1e2>
 8005262:	2300      	movs	r3, #0
 8005264:	9309      	str	r3, [sp, #36]	; 0x24
 8005266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005268:	2b00      	cmp	r3, #0
 800526a:	dc52      	bgt.n	8005312 <_dtoa_r+0x312>
 800526c:	2301      	movs	r3, #1
 800526e:	9301      	str	r3, [sp, #4]
 8005270:	9304      	str	r3, [sp, #16]
 8005272:	461a      	mov	r2, r3
 8005274:	920a      	str	r2, [sp, #40]	; 0x28
 8005276:	e00b      	b.n	8005290 <_dtoa_r+0x290>
 8005278:	2301      	movs	r3, #1
 800527a:	e7f3      	b.n	8005264 <_dtoa_r+0x264>
 800527c:	2300      	movs	r3, #0
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005282:	445b      	add	r3, fp
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	3301      	adds	r3, #1
 8005288:	2b01      	cmp	r3, #1
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	bfb8      	it	lt
 800528e:	2301      	movlt	r3, #1
 8005290:	69e0      	ldr	r0, [r4, #28]
 8005292:	2100      	movs	r1, #0
 8005294:	2204      	movs	r2, #4
 8005296:	f102 0614 	add.w	r6, r2, #20
 800529a:	429e      	cmp	r6, r3
 800529c:	d93d      	bls.n	800531a <_dtoa_r+0x31a>
 800529e:	6041      	str	r1, [r0, #4]
 80052a0:	4620      	mov	r0, r4
 80052a2:	f000 fceb 	bl	8005c7c <_Balloc>
 80052a6:	9000      	str	r0, [sp, #0]
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d139      	bne.n	8005320 <_dtoa_r+0x320>
 80052ac:	4b16      	ldr	r3, [pc, #88]	; (8005308 <_dtoa_r+0x308>)
 80052ae:	4602      	mov	r2, r0
 80052b0:	f240 11af 	movw	r1, #431	; 0x1af
 80052b4:	e6bd      	b.n	8005032 <_dtoa_r+0x32>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e7e1      	b.n	800527e <_dtoa_r+0x27e>
 80052ba:	2501      	movs	r5, #1
 80052bc:	2300      	movs	r3, #0
 80052be:	9307      	str	r3, [sp, #28]
 80052c0:	9509      	str	r5, [sp, #36]	; 0x24
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	9304      	str	r3, [sp, #16]
 80052ca:	2200      	movs	r2, #0
 80052cc:	2312      	movs	r3, #18
 80052ce:	e7d1      	b.n	8005274 <_dtoa_r+0x274>
 80052d0:	636f4361 	.word	0x636f4361
 80052d4:	3fd287a7 	.word	0x3fd287a7
 80052d8:	8b60c8b3 	.word	0x8b60c8b3
 80052dc:	3fc68a28 	.word	0x3fc68a28
 80052e0:	509f79fb 	.word	0x509f79fb
 80052e4:	3fd34413 	.word	0x3fd34413
 80052e8:	0801af51 	.word	0x0801af51
 80052ec:	0801af68 	.word	0x0801af68
 80052f0:	7ff00000 	.word	0x7ff00000
 80052f4:	0801af4d 	.word	0x0801af4d
 80052f8:	0801af44 	.word	0x0801af44
 80052fc:	0801af21 	.word	0x0801af21
 8005300:	3ff80000 	.word	0x3ff80000
 8005304:	0801b058 	.word	0x0801b058
 8005308:	0801afc0 	.word	0x0801afc0
 800530c:	2301      	movs	r3, #1
 800530e:	9309      	str	r3, [sp, #36]	; 0x24
 8005310:	e7d7      	b.n	80052c2 <_dtoa_r+0x2c2>
 8005312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005314:	9301      	str	r3, [sp, #4]
 8005316:	9304      	str	r3, [sp, #16]
 8005318:	e7ba      	b.n	8005290 <_dtoa_r+0x290>
 800531a:	3101      	adds	r1, #1
 800531c:	0052      	lsls	r2, r2, #1
 800531e:	e7ba      	b.n	8005296 <_dtoa_r+0x296>
 8005320:	69e3      	ldr	r3, [r4, #28]
 8005322:	9a00      	ldr	r2, [sp, #0]
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	9b04      	ldr	r3, [sp, #16]
 8005328:	2b0e      	cmp	r3, #14
 800532a:	f200 80a8 	bhi.w	800547e <_dtoa_r+0x47e>
 800532e:	2d00      	cmp	r5, #0
 8005330:	f000 80a5 	beq.w	800547e <_dtoa_r+0x47e>
 8005334:	f1bb 0f00 	cmp.w	fp, #0
 8005338:	dd38      	ble.n	80053ac <_dtoa_r+0x3ac>
 800533a:	4bc0      	ldr	r3, [pc, #768]	; (800563c <_dtoa_r+0x63c>)
 800533c:	f00b 020f 	and.w	r2, fp, #15
 8005340:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005344:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005348:	e9d3 6700 	ldrd	r6, r7, [r3]
 800534c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005350:	d019      	beq.n	8005386 <_dtoa_r+0x386>
 8005352:	4bbb      	ldr	r3, [pc, #748]	; (8005640 <_dtoa_r+0x640>)
 8005354:	ec51 0b18 	vmov	r0, r1, d8
 8005358:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800535c:	f7fb fa7e 	bl	800085c <__aeabi_ddiv>
 8005360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005364:	f008 080f 	and.w	r8, r8, #15
 8005368:	2503      	movs	r5, #3
 800536a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005640 <_dtoa_r+0x640>
 800536e:	f1b8 0f00 	cmp.w	r8, #0
 8005372:	d10a      	bne.n	800538a <_dtoa_r+0x38a>
 8005374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005378:	4632      	mov	r2, r6
 800537a:	463b      	mov	r3, r7
 800537c:	f7fb fa6e 	bl	800085c <__aeabi_ddiv>
 8005380:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005384:	e02b      	b.n	80053de <_dtoa_r+0x3de>
 8005386:	2502      	movs	r5, #2
 8005388:	e7ef      	b.n	800536a <_dtoa_r+0x36a>
 800538a:	f018 0f01 	tst.w	r8, #1
 800538e:	d008      	beq.n	80053a2 <_dtoa_r+0x3a2>
 8005390:	4630      	mov	r0, r6
 8005392:	4639      	mov	r1, r7
 8005394:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005398:	f7fb f936 	bl	8000608 <__aeabi_dmul>
 800539c:	3501      	adds	r5, #1
 800539e:	4606      	mov	r6, r0
 80053a0:	460f      	mov	r7, r1
 80053a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80053a6:	f109 0908 	add.w	r9, r9, #8
 80053aa:	e7e0      	b.n	800536e <_dtoa_r+0x36e>
 80053ac:	f000 809f 	beq.w	80054ee <_dtoa_r+0x4ee>
 80053b0:	f1cb 0600 	rsb	r6, fp, #0
 80053b4:	4ba1      	ldr	r3, [pc, #644]	; (800563c <_dtoa_r+0x63c>)
 80053b6:	4fa2      	ldr	r7, [pc, #648]	; (8005640 <_dtoa_r+0x640>)
 80053b8:	f006 020f 	and.w	r2, r6, #15
 80053bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	ec51 0b18 	vmov	r0, r1, d8
 80053c8:	f7fb f91e 	bl	8000608 <__aeabi_dmul>
 80053cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053d0:	1136      	asrs	r6, r6, #4
 80053d2:	2300      	movs	r3, #0
 80053d4:	2502      	movs	r5, #2
 80053d6:	2e00      	cmp	r6, #0
 80053d8:	d17e      	bne.n	80054d8 <_dtoa_r+0x4d8>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1d0      	bne.n	8005380 <_dtoa_r+0x380>
 80053de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80053e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 8084 	beq.w	80054f2 <_dtoa_r+0x4f2>
 80053ea:	4b96      	ldr	r3, [pc, #600]	; (8005644 <_dtoa_r+0x644>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	4640      	mov	r0, r8
 80053f0:	4649      	mov	r1, r9
 80053f2:	f7fb fb7b 	bl	8000aec <__aeabi_dcmplt>
 80053f6:	2800      	cmp	r0, #0
 80053f8:	d07b      	beq.n	80054f2 <_dtoa_r+0x4f2>
 80053fa:	9b04      	ldr	r3, [sp, #16]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d078      	beq.n	80054f2 <_dtoa_r+0x4f2>
 8005400:	9b01      	ldr	r3, [sp, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	dd39      	ble.n	800547a <_dtoa_r+0x47a>
 8005406:	4b90      	ldr	r3, [pc, #576]	; (8005648 <_dtoa_r+0x648>)
 8005408:	2200      	movs	r2, #0
 800540a:	4640      	mov	r0, r8
 800540c:	4649      	mov	r1, r9
 800540e:	f7fb f8fb 	bl	8000608 <__aeabi_dmul>
 8005412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005416:	9e01      	ldr	r6, [sp, #4]
 8005418:	f10b 37ff 	add.w	r7, fp, #4294967295
 800541c:	3501      	adds	r5, #1
 800541e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005422:	4628      	mov	r0, r5
 8005424:	f7fb f886 	bl	8000534 <__aeabi_i2d>
 8005428:	4642      	mov	r2, r8
 800542a:	464b      	mov	r3, r9
 800542c:	f7fb f8ec 	bl	8000608 <__aeabi_dmul>
 8005430:	4b86      	ldr	r3, [pc, #536]	; (800564c <_dtoa_r+0x64c>)
 8005432:	2200      	movs	r2, #0
 8005434:	f7fa ff32 	bl	800029c <__adddf3>
 8005438:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800543c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005440:	9303      	str	r3, [sp, #12]
 8005442:	2e00      	cmp	r6, #0
 8005444:	d158      	bne.n	80054f8 <_dtoa_r+0x4f8>
 8005446:	4b82      	ldr	r3, [pc, #520]	; (8005650 <_dtoa_r+0x650>)
 8005448:	2200      	movs	r2, #0
 800544a:	4640      	mov	r0, r8
 800544c:	4649      	mov	r1, r9
 800544e:	f7fa ff23 	bl	8000298 <__aeabi_dsub>
 8005452:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005456:	4680      	mov	r8, r0
 8005458:	4689      	mov	r9, r1
 800545a:	f7fb fb65 	bl	8000b28 <__aeabi_dcmpgt>
 800545e:	2800      	cmp	r0, #0
 8005460:	f040 8296 	bne.w	8005990 <_dtoa_r+0x990>
 8005464:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005468:	4640      	mov	r0, r8
 800546a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800546e:	4649      	mov	r1, r9
 8005470:	f7fb fb3c 	bl	8000aec <__aeabi_dcmplt>
 8005474:	2800      	cmp	r0, #0
 8005476:	f040 8289 	bne.w	800598c <_dtoa_r+0x98c>
 800547a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800547e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005480:	2b00      	cmp	r3, #0
 8005482:	f2c0 814e 	blt.w	8005722 <_dtoa_r+0x722>
 8005486:	f1bb 0f0e 	cmp.w	fp, #14
 800548a:	f300 814a 	bgt.w	8005722 <_dtoa_r+0x722>
 800548e:	4b6b      	ldr	r3, [pc, #428]	; (800563c <_dtoa_r+0x63c>)
 8005490:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005494:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005498:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	f280 80dc 	bge.w	8005658 <_dtoa_r+0x658>
 80054a0:	9b04      	ldr	r3, [sp, #16]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f300 80d8 	bgt.w	8005658 <_dtoa_r+0x658>
 80054a8:	f040 826f 	bne.w	800598a <_dtoa_r+0x98a>
 80054ac:	4b68      	ldr	r3, [pc, #416]	; (8005650 <_dtoa_r+0x650>)
 80054ae:	2200      	movs	r2, #0
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fb f8a8 	bl	8000608 <__aeabi_dmul>
 80054b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80054bc:	f7fb fb2a 	bl	8000b14 <__aeabi_dcmpge>
 80054c0:	9e04      	ldr	r6, [sp, #16]
 80054c2:	4637      	mov	r7, r6
 80054c4:	2800      	cmp	r0, #0
 80054c6:	f040 8245 	bne.w	8005954 <_dtoa_r+0x954>
 80054ca:	9d00      	ldr	r5, [sp, #0]
 80054cc:	2331      	movs	r3, #49	; 0x31
 80054ce:	f805 3b01 	strb.w	r3, [r5], #1
 80054d2:	f10b 0b01 	add.w	fp, fp, #1
 80054d6:	e241      	b.n	800595c <_dtoa_r+0x95c>
 80054d8:	07f2      	lsls	r2, r6, #31
 80054da:	d505      	bpl.n	80054e8 <_dtoa_r+0x4e8>
 80054dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e0:	f7fb f892 	bl	8000608 <__aeabi_dmul>
 80054e4:	3501      	adds	r5, #1
 80054e6:	2301      	movs	r3, #1
 80054e8:	1076      	asrs	r6, r6, #1
 80054ea:	3708      	adds	r7, #8
 80054ec:	e773      	b.n	80053d6 <_dtoa_r+0x3d6>
 80054ee:	2502      	movs	r5, #2
 80054f0:	e775      	b.n	80053de <_dtoa_r+0x3de>
 80054f2:	9e04      	ldr	r6, [sp, #16]
 80054f4:	465f      	mov	r7, fp
 80054f6:	e792      	b.n	800541e <_dtoa_r+0x41e>
 80054f8:	9900      	ldr	r1, [sp, #0]
 80054fa:	4b50      	ldr	r3, [pc, #320]	; (800563c <_dtoa_r+0x63c>)
 80054fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005500:	4431      	add	r1, r6
 8005502:	9102      	str	r1, [sp, #8]
 8005504:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005506:	eeb0 9a47 	vmov.f32	s18, s14
 800550a:	eef0 9a67 	vmov.f32	s19, s15
 800550e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005516:	2900      	cmp	r1, #0
 8005518:	d044      	beq.n	80055a4 <_dtoa_r+0x5a4>
 800551a:	494e      	ldr	r1, [pc, #312]	; (8005654 <_dtoa_r+0x654>)
 800551c:	2000      	movs	r0, #0
 800551e:	f7fb f99d 	bl	800085c <__aeabi_ddiv>
 8005522:	ec53 2b19 	vmov	r2, r3, d9
 8005526:	f7fa feb7 	bl	8000298 <__aeabi_dsub>
 800552a:	9d00      	ldr	r5, [sp, #0]
 800552c:	ec41 0b19 	vmov	d9, r0, r1
 8005530:	4649      	mov	r1, r9
 8005532:	4640      	mov	r0, r8
 8005534:	f7fb fb18 	bl	8000b68 <__aeabi_d2iz>
 8005538:	4606      	mov	r6, r0
 800553a:	f7fa fffb 	bl	8000534 <__aeabi_i2d>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4640      	mov	r0, r8
 8005544:	4649      	mov	r1, r9
 8005546:	f7fa fea7 	bl	8000298 <__aeabi_dsub>
 800554a:	3630      	adds	r6, #48	; 0x30
 800554c:	f805 6b01 	strb.w	r6, [r5], #1
 8005550:	ec53 2b19 	vmov	r2, r3, d9
 8005554:	4680      	mov	r8, r0
 8005556:	4689      	mov	r9, r1
 8005558:	f7fb fac8 	bl	8000aec <__aeabi_dcmplt>
 800555c:	2800      	cmp	r0, #0
 800555e:	d164      	bne.n	800562a <_dtoa_r+0x62a>
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	4937      	ldr	r1, [pc, #220]	; (8005644 <_dtoa_r+0x644>)
 8005566:	2000      	movs	r0, #0
 8005568:	f7fa fe96 	bl	8000298 <__aeabi_dsub>
 800556c:	ec53 2b19 	vmov	r2, r3, d9
 8005570:	f7fb fabc 	bl	8000aec <__aeabi_dcmplt>
 8005574:	2800      	cmp	r0, #0
 8005576:	f040 80b6 	bne.w	80056e6 <_dtoa_r+0x6e6>
 800557a:	9b02      	ldr	r3, [sp, #8]
 800557c:	429d      	cmp	r5, r3
 800557e:	f43f af7c 	beq.w	800547a <_dtoa_r+0x47a>
 8005582:	4b31      	ldr	r3, [pc, #196]	; (8005648 <_dtoa_r+0x648>)
 8005584:	ec51 0b19 	vmov	r0, r1, d9
 8005588:	2200      	movs	r2, #0
 800558a:	f7fb f83d 	bl	8000608 <__aeabi_dmul>
 800558e:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <_dtoa_r+0x648>)
 8005590:	ec41 0b19 	vmov	d9, r0, r1
 8005594:	2200      	movs	r2, #0
 8005596:	4640      	mov	r0, r8
 8005598:	4649      	mov	r1, r9
 800559a:	f7fb f835 	bl	8000608 <__aeabi_dmul>
 800559e:	4680      	mov	r8, r0
 80055a0:	4689      	mov	r9, r1
 80055a2:	e7c5      	b.n	8005530 <_dtoa_r+0x530>
 80055a4:	ec51 0b17 	vmov	r0, r1, d7
 80055a8:	f7fb f82e 	bl	8000608 <__aeabi_dmul>
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	9d00      	ldr	r5, [sp, #0]
 80055b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80055b2:	ec41 0b19 	vmov	d9, r0, r1
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	f7fb fad5 	bl	8000b68 <__aeabi_d2iz>
 80055be:	4606      	mov	r6, r0
 80055c0:	f7fa ffb8 	bl	8000534 <__aeabi_i2d>
 80055c4:	3630      	adds	r6, #48	; 0x30
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fa fe63 	bl	8000298 <__aeabi_dsub>
 80055d2:	f805 6b01 	strb.w	r6, [r5], #1
 80055d6:	9b02      	ldr	r3, [sp, #8]
 80055d8:	429d      	cmp	r5, r3
 80055da:	4680      	mov	r8, r0
 80055dc:	4689      	mov	r9, r1
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	d124      	bne.n	800562e <_dtoa_r+0x62e>
 80055e4:	4b1b      	ldr	r3, [pc, #108]	; (8005654 <_dtoa_r+0x654>)
 80055e6:	ec51 0b19 	vmov	r0, r1, d9
 80055ea:	f7fa fe57 	bl	800029c <__adddf3>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4640      	mov	r0, r8
 80055f4:	4649      	mov	r1, r9
 80055f6:	f7fb fa97 	bl	8000b28 <__aeabi_dcmpgt>
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d173      	bne.n	80056e6 <_dtoa_r+0x6e6>
 80055fe:	ec53 2b19 	vmov	r2, r3, d9
 8005602:	4914      	ldr	r1, [pc, #80]	; (8005654 <_dtoa_r+0x654>)
 8005604:	2000      	movs	r0, #0
 8005606:	f7fa fe47 	bl	8000298 <__aeabi_dsub>
 800560a:	4602      	mov	r2, r0
 800560c:	460b      	mov	r3, r1
 800560e:	4640      	mov	r0, r8
 8005610:	4649      	mov	r1, r9
 8005612:	f7fb fa6b 	bl	8000aec <__aeabi_dcmplt>
 8005616:	2800      	cmp	r0, #0
 8005618:	f43f af2f 	beq.w	800547a <_dtoa_r+0x47a>
 800561c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800561e:	1e6b      	subs	r3, r5, #1
 8005620:	930f      	str	r3, [sp, #60]	; 0x3c
 8005622:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005626:	2b30      	cmp	r3, #48	; 0x30
 8005628:	d0f8      	beq.n	800561c <_dtoa_r+0x61c>
 800562a:	46bb      	mov	fp, r7
 800562c:	e04a      	b.n	80056c4 <_dtoa_r+0x6c4>
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <_dtoa_r+0x648>)
 8005630:	f7fa ffea 	bl	8000608 <__aeabi_dmul>
 8005634:	4680      	mov	r8, r0
 8005636:	4689      	mov	r9, r1
 8005638:	e7bd      	b.n	80055b6 <_dtoa_r+0x5b6>
 800563a:	bf00      	nop
 800563c:	0801b058 	.word	0x0801b058
 8005640:	0801b030 	.word	0x0801b030
 8005644:	3ff00000 	.word	0x3ff00000
 8005648:	40240000 	.word	0x40240000
 800564c:	401c0000 	.word	0x401c0000
 8005650:	40140000 	.word	0x40140000
 8005654:	3fe00000 	.word	0x3fe00000
 8005658:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800565c:	9d00      	ldr	r5, [sp, #0]
 800565e:	4642      	mov	r2, r8
 8005660:	464b      	mov	r3, r9
 8005662:	4630      	mov	r0, r6
 8005664:	4639      	mov	r1, r7
 8005666:	f7fb f8f9 	bl	800085c <__aeabi_ddiv>
 800566a:	f7fb fa7d 	bl	8000b68 <__aeabi_d2iz>
 800566e:	9001      	str	r0, [sp, #4]
 8005670:	f7fa ff60 	bl	8000534 <__aeabi_i2d>
 8005674:	4642      	mov	r2, r8
 8005676:	464b      	mov	r3, r9
 8005678:	f7fa ffc6 	bl	8000608 <__aeabi_dmul>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4630      	mov	r0, r6
 8005682:	4639      	mov	r1, r7
 8005684:	f7fa fe08 	bl	8000298 <__aeabi_dsub>
 8005688:	9e01      	ldr	r6, [sp, #4]
 800568a:	9f04      	ldr	r7, [sp, #16]
 800568c:	3630      	adds	r6, #48	; 0x30
 800568e:	f805 6b01 	strb.w	r6, [r5], #1
 8005692:	9e00      	ldr	r6, [sp, #0]
 8005694:	1bae      	subs	r6, r5, r6
 8005696:	42b7      	cmp	r7, r6
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	d134      	bne.n	8005708 <_dtoa_r+0x708>
 800569e:	f7fa fdfd 	bl	800029c <__adddf3>
 80056a2:	4642      	mov	r2, r8
 80056a4:	464b      	mov	r3, r9
 80056a6:	4606      	mov	r6, r0
 80056a8:	460f      	mov	r7, r1
 80056aa:	f7fb fa3d 	bl	8000b28 <__aeabi_dcmpgt>
 80056ae:	b9c8      	cbnz	r0, 80056e4 <_dtoa_r+0x6e4>
 80056b0:	4642      	mov	r2, r8
 80056b2:	464b      	mov	r3, r9
 80056b4:	4630      	mov	r0, r6
 80056b6:	4639      	mov	r1, r7
 80056b8:	f7fb fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80056bc:	b110      	cbz	r0, 80056c4 <_dtoa_r+0x6c4>
 80056be:	9b01      	ldr	r3, [sp, #4]
 80056c0:	07db      	lsls	r3, r3, #31
 80056c2:	d40f      	bmi.n	80056e4 <_dtoa_r+0x6e4>
 80056c4:	4651      	mov	r1, sl
 80056c6:	4620      	mov	r0, r4
 80056c8:	f000 fb18 	bl	8005cfc <_Bfree>
 80056cc:	2300      	movs	r3, #0
 80056ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056d0:	702b      	strb	r3, [r5, #0]
 80056d2:	f10b 0301 	add.w	r3, fp, #1
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f43f ace2 	beq.w	80050a4 <_dtoa_r+0xa4>
 80056e0:	601d      	str	r5, [r3, #0]
 80056e2:	e4df      	b.n	80050a4 <_dtoa_r+0xa4>
 80056e4:	465f      	mov	r7, fp
 80056e6:	462b      	mov	r3, r5
 80056e8:	461d      	mov	r5, r3
 80056ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056ee:	2a39      	cmp	r2, #57	; 0x39
 80056f0:	d106      	bne.n	8005700 <_dtoa_r+0x700>
 80056f2:	9a00      	ldr	r2, [sp, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d1f7      	bne.n	80056e8 <_dtoa_r+0x6e8>
 80056f8:	9900      	ldr	r1, [sp, #0]
 80056fa:	2230      	movs	r2, #48	; 0x30
 80056fc:	3701      	adds	r7, #1
 80056fe:	700a      	strb	r2, [r1, #0]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	3201      	adds	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e790      	b.n	800562a <_dtoa_r+0x62a>
 8005708:	4ba3      	ldr	r3, [pc, #652]	; (8005998 <_dtoa_r+0x998>)
 800570a:	2200      	movs	r2, #0
 800570c:	f7fa ff7c 	bl	8000608 <__aeabi_dmul>
 8005710:	2200      	movs	r2, #0
 8005712:	2300      	movs	r3, #0
 8005714:	4606      	mov	r6, r0
 8005716:	460f      	mov	r7, r1
 8005718:	f7fb f9de 	bl	8000ad8 <__aeabi_dcmpeq>
 800571c:	2800      	cmp	r0, #0
 800571e:	d09e      	beq.n	800565e <_dtoa_r+0x65e>
 8005720:	e7d0      	b.n	80056c4 <_dtoa_r+0x6c4>
 8005722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005724:	2a00      	cmp	r2, #0
 8005726:	f000 80ca 	beq.w	80058be <_dtoa_r+0x8be>
 800572a:	9a07      	ldr	r2, [sp, #28]
 800572c:	2a01      	cmp	r2, #1
 800572e:	f300 80ad 	bgt.w	800588c <_dtoa_r+0x88c>
 8005732:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005734:	2a00      	cmp	r2, #0
 8005736:	f000 80a5 	beq.w	8005884 <_dtoa_r+0x884>
 800573a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800573e:	9e08      	ldr	r6, [sp, #32]
 8005740:	9d05      	ldr	r5, [sp, #20]
 8005742:	9a05      	ldr	r2, [sp, #20]
 8005744:	441a      	add	r2, r3
 8005746:	9205      	str	r2, [sp, #20]
 8005748:	9a06      	ldr	r2, [sp, #24]
 800574a:	2101      	movs	r1, #1
 800574c:	441a      	add	r2, r3
 800574e:	4620      	mov	r0, r4
 8005750:	9206      	str	r2, [sp, #24]
 8005752:	f000 fb89 	bl	8005e68 <__i2b>
 8005756:	4607      	mov	r7, r0
 8005758:	b165      	cbz	r5, 8005774 <_dtoa_r+0x774>
 800575a:	9b06      	ldr	r3, [sp, #24]
 800575c:	2b00      	cmp	r3, #0
 800575e:	dd09      	ble.n	8005774 <_dtoa_r+0x774>
 8005760:	42ab      	cmp	r3, r5
 8005762:	9a05      	ldr	r2, [sp, #20]
 8005764:	bfa8      	it	ge
 8005766:	462b      	movge	r3, r5
 8005768:	1ad2      	subs	r2, r2, r3
 800576a:	9205      	str	r2, [sp, #20]
 800576c:	9a06      	ldr	r2, [sp, #24]
 800576e:	1aed      	subs	r5, r5, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	9306      	str	r3, [sp, #24]
 8005774:	9b08      	ldr	r3, [sp, #32]
 8005776:	b1f3      	cbz	r3, 80057b6 <_dtoa_r+0x7b6>
 8005778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80a3 	beq.w	80058c6 <_dtoa_r+0x8c6>
 8005780:	2e00      	cmp	r6, #0
 8005782:	dd10      	ble.n	80057a6 <_dtoa_r+0x7a6>
 8005784:	4639      	mov	r1, r7
 8005786:	4632      	mov	r2, r6
 8005788:	4620      	mov	r0, r4
 800578a:	f000 fc2d 	bl	8005fe8 <__pow5mult>
 800578e:	4652      	mov	r2, sl
 8005790:	4601      	mov	r1, r0
 8005792:	4607      	mov	r7, r0
 8005794:	4620      	mov	r0, r4
 8005796:	f000 fb7d 	bl	8005e94 <__multiply>
 800579a:	4651      	mov	r1, sl
 800579c:	4680      	mov	r8, r0
 800579e:	4620      	mov	r0, r4
 80057a0:	f000 faac 	bl	8005cfc <_Bfree>
 80057a4:	46c2      	mov	sl, r8
 80057a6:	9b08      	ldr	r3, [sp, #32]
 80057a8:	1b9a      	subs	r2, r3, r6
 80057aa:	d004      	beq.n	80057b6 <_dtoa_r+0x7b6>
 80057ac:	4651      	mov	r1, sl
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 fc1a 	bl	8005fe8 <__pow5mult>
 80057b4:	4682      	mov	sl, r0
 80057b6:	2101      	movs	r1, #1
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fb55 	bl	8005e68 <__i2b>
 80057be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	4606      	mov	r6, r0
 80057c4:	f340 8081 	ble.w	80058ca <_dtoa_r+0x8ca>
 80057c8:	461a      	mov	r2, r3
 80057ca:	4601      	mov	r1, r0
 80057cc:	4620      	mov	r0, r4
 80057ce:	f000 fc0b 	bl	8005fe8 <__pow5mult>
 80057d2:	9b07      	ldr	r3, [sp, #28]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	4606      	mov	r6, r0
 80057d8:	dd7a      	ble.n	80058d0 <_dtoa_r+0x8d0>
 80057da:	f04f 0800 	mov.w	r8, #0
 80057de:	6933      	ldr	r3, [r6, #16]
 80057e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057e4:	6918      	ldr	r0, [r3, #16]
 80057e6:	f000 faf1 	bl	8005dcc <__hi0bits>
 80057ea:	f1c0 0020 	rsb	r0, r0, #32
 80057ee:	9b06      	ldr	r3, [sp, #24]
 80057f0:	4418      	add	r0, r3
 80057f2:	f010 001f 	ands.w	r0, r0, #31
 80057f6:	f000 8094 	beq.w	8005922 <_dtoa_r+0x922>
 80057fa:	f1c0 0320 	rsb	r3, r0, #32
 80057fe:	2b04      	cmp	r3, #4
 8005800:	f340 8085 	ble.w	800590e <_dtoa_r+0x90e>
 8005804:	9b05      	ldr	r3, [sp, #20]
 8005806:	f1c0 001c 	rsb	r0, r0, #28
 800580a:	4403      	add	r3, r0
 800580c:	9305      	str	r3, [sp, #20]
 800580e:	9b06      	ldr	r3, [sp, #24]
 8005810:	4403      	add	r3, r0
 8005812:	4405      	add	r5, r0
 8005814:	9306      	str	r3, [sp, #24]
 8005816:	9b05      	ldr	r3, [sp, #20]
 8005818:	2b00      	cmp	r3, #0
 800581a:	dd05      	ble.n	8005828 <_dtoa_r+0x828>
 800581c:	4651      	mov	r1, sl
 800581e:	461a      	mov	r2, r3
 8005820:	4620      	mov	r0, r4
 8005822:	f000 fc3b 	bl	800609c <__lshift>
 8005826:	4682      	mov	sl, r0
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	dd05      	ble.n	800583a <_dtoa_r+0x83a>
 800582e:	4631      	mov	r1, r6
 8005830:	461a      	mov	r2, r3
 8005832:	4620      	mov	r0, r4
 8005834:	f000 fc32 	bl	800609c <__lshift>
 8005838:	4606      	mov	r6, r0
 800583a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800583c:	2b00      	cmp	r3, #0
 800583e:	d072      	beq.n	8005926 <_dtoa_r+0x926>
 8005840:	4631      	mov	r1, r6
 8005842:	4650      	mov	r0, sl
 8005844:	f000 fc96 	bl	8006174 <__mcmp>
 8005848:	2800      	cmp	r0, #0
 800584a:	da6c      	bge.n	8005926 <_dtoa_r+0x926>
 800584c:	2300      	movs	r3, #0
 800584e:	4651      	mov	r1, sl
 8005850:	220a      	movs	r2, #10
 8005852:	4620      	mov	r0, r4
 8005854:	f000 fa74 	bl	8005d40 <__multadd>
 8005858:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800585a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800585e:	4682      	mov	sl, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 81b0 	beq.w	8005bc6 <_dtoa_r+0xbc6>
 8005866:	2300      	movs	r3, #0
 8005868:	4639      	mov	r1, r7
 800586a:	220a      	movs	r2, #10
 800586c:	4620      	mov	r0, r4
 800586e:	f000 fa67 	bl	8005d40 <__multadd>
 8005872:	9b01      	ldr	r3, [sp, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	4607      	mov	r7, r0
 8005878:	f300 8096 	bgt.w	80059a8 <_dtoa_r+0x9a8>
 800587c:	9b07      	ldr	r3, [sp, #28]
 800587e:	2b02      	cmp	r3, #2
 8005880:	dc59      	bgt.n	8005936 <_dtoa_r+0x936>
 8005882:	e091      	b.n	80059a8 <_dtoa_r+0x9a8>
 8005884:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005886:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800588a:	e758      	b.n	800573e <_dtoa_r+0x73e>
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	1e5e      	subs	r6, r3, #1
 8005890:	9b08      	ldr	r3, [sp, #32]
 8005892:	42b3      	cmp	r3, r6
 8005894:	bfbf      	itttt	lt
 8005896:	9b08      	ldrlt	r3, [sp, #32]
 8005898:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800589a:	9608      	strlt	r6, [sp, #32]
 800589c:	1af3      	sublt	r3, r6, r3
 800589e:	bfb4      	ite	lt
 80058a0:	18d2      	addlt	r2, r2, r3
 80058a2:	1b9e      	subge	r6, r3, r6
 80058a4:	9b04      	ldr	r3, [sp, #16]
 80058a6:	bfbc      	itt	lt
 80058a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80058aa:	2600      	movlt	r6, #0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	bfb7      	itett	lt
 80058b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80058b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80058b8:	1a9d      	sublt	r5, r3, r2
 80058ba:	2300      	movlt	r3, #0
 80058bc:	e741      	b.n	8005742 <_dtoa_r+0x742>
 80058be:	9e08      	ldr	r6, [sp, #32]
 80058c0:	9d05      	ldr	r5, [sp, #20]
 80058c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80058c4:	e748      	b.n	8005758 <_dtoa_r+0x758>
 80058c6:	9a08      	ldr	r2, [sp, #32]
 80058c8:	e770      	b.n	80057ac <_dtoa_r+0x7ac>
 80058ca:	9b07      	ldr	r3, [sp, #28]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	dc19      	bgt.n	8005904 <_dtoa_r+0x904>
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	b9bb      	cbnz	r3, 8005904 <_dtoa_r+0x904>
 80058d4:	9b03      	ldr	r3, [sp, #12]
 80058d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058da:	b99b      	cbnz	r3, 8005904 <_dtoa_r+0x904>
 80058dc:	9b03      	ldr	r3, [sp, #12]
 80058de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058e2:	0d1b      	lsrs	r3, r3, #20
 80058e4:	051b      	lsls	r3, r3, #20
 80058e6:	b183      	cbz	r3, 800590a <_dtoa_r+0x90a>
 80058e8:	9b05      	ldr	r3, [sp, #20]
 80058ea:	3301      	adds	r3, #1
 80058ec:	9305      	str	r3, [sp, #20]
 80058ee:	9b06      	ldr	r3, [sp, #24]
 80058f0:	3301      	adds	r3, #1
 80058f2:	9306      	str	r3, [sp, #24]
 80058f4:	f04f 0801 	mov.w	r8, #1
 80058f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f47f af6f 	bne.w	80057de <_dtoa_r+0x7de>
 8005900:	2001      	movs	r0, #1
 8005902:	e774      	b.n	80057ee <_dtoa_r+0x7ee>
 8005904:	f04f 0800 	mov.w	r8, #0
 8005908:	e7f6      	b.n	80058f8 <_dtoa_r+0x8f8>
 800590a:	4698      	mov	r8, r3
 800590c:	e7f4      	b.n	80058f8 <_dtoa_r+0x8f8>
 800590e:	d082      	beq.n	8005816 <_dtoa_r+0x816>
 8005910:	9a05      	ldr	r2, [sp, #20]
 8005912:	331c      	adds	r3, #28
 8005914:	441a      	add	r2, r3
 8005916:	9205      	str	r2, [sp, #20]
 8005918:	9a06      	ldr	r2, [sp, #24]
 800591a:	441a      	add	r2, r3
 800591c:	441d      	add	r5, r3
 800591e:	9206      	str	r2, [sp, #24]
 8005920:	e779      	b.n	8005816 <_dtoa_r+0x816>
 8005922:	4603      	mov	r3, r0
 8005924:	e7f4      	b.n	8005910 <_dtoa_r+0x910>
 8005926:	9b04      	ldr	r3, [sp, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	dc37      	bgt.n	800599c <_dtoa_r+0x99c>
 800592c:	9b07      	ldr	r3, [sp, #28]
 800592e:	2b02      	cmp	r3, #2
 8005930:	dd34      	ble.n	800599c <_dtoa_r+0x99c>
 8005932:	9b04      	ldr	r3, [sp, #16]
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	9b01      	ldr	r3, [sp, #4]
 8005938:	b963      	cbnz	r3, 8005954 <_dtoa_r+0x954>
 800593a:	4631      	mov	r1, r6
 800593c:	2205      	movs	r2, #5
 800593e:	4620      	mov	r0, r4
 8005940:	f000 f9fe 	bl	8005d40 <__multadd>
 8005944:	4601      	mov	r1, r0
 8005946:	4606      	mov	r6, r0
 8005948:	4650      	mov	r0, sl
 800594a:	f000 fc13 	bl	8006174 <__mcmp>
 800594e:	2800      	cmp	r0, #0
 8005950:	f73f adbb 	bgt.w	80054ca <_dtoa_r+0x4ca>
 8005954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005956:	9d00      	ldr	r5, [sp, #0]
 8005958:	ea6f 0b03 	mvn.w	fp, r3
 800595c:	f04f 0800 	mov.w	r8, #0
 8005960:	4631      	mov	r1, r6
 8005962:	4620      	mov	r0, r4
 8005964:	f000 f9ca 	bl	8005cfc <_Bfree>
 8005968:	2f00      	cmp	r7, #0
 800596a:	f43f aeab 	beq.w	80056c4 <_dtoa_r+0x6c4>
 800596e:	f1b8 0f00 	cmp.w	r8, #0
 8005972:	d005      	beq.n	8005980 <_dtoa_r+0x980>
 8005974:	45b8      	cmp	r8, r7
 8005976:	d003      	beq.n	8005980 <_dtoa_r+0x980>
 8005978:	4641      	mov	r1, r8
 800597a:	4620      	mov	r0, r4
 800597c:	f000 f9be 	bl	8005cfc <_Bfree>
 8005980:	4639      	mov	r1, r7
 8005982:	4620      	mov	r0, r4
 8005984:	f000 f9ba 	bl	8005cfc <_Bfree>
 8005988:	e69c      	b.n	80056c4 <_dtoa_r+0x6c4>
 800598a:	2600      	movs	r6, #0
 800598c:	4637      	mov	r7, r6
 800598e:	e7e1      	b.n	8005954 <_dtoa_r+0x954>
 8005990:	46bb      	mov	fp, r7
 8005992:	4637      	mov	r7, r6
 8005994:	e599      	b.n	80054ca <_dtoa_r+0x4ca>
 8005996:	bf00      	nop
 8005998:	40240000 	.word	0x40240000
 800599c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 80c8 	beq.w	8005b34 <_dtoa_r+0xb34>
 80059a4:	9b04      	ldr	r3, [sp, #16]
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	2d00      	cmp	r5, #0
 80059aa:	dd05      	ble.n	80059b8 <_dtoa_r+0x9b8>
 80059ac:	4639      	mov	r1, r7
 80059ae:	462a      	mov	r2, r5
 80059b0:	4620      	mov	r0, r4
 80059b2:	f000 fb73 	bl	800609c <__lshift>
 80059b6:	4607      	mov	r7, r0
 80059b8:	f1b8 0f00 	cmp.w	r8, #0
 80059bc:	d05b      	beq.n	8005a76 <_dtoa_r+0xa76>
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4620      	mov	r0, r4
 80059c2:	f000 f95b 	bl	8005c7c <_Balloc>
 80059c6:	4605      	mov	r5, r0
 80059c8:	b928      	cbnz	r0, 80059d6 <_dtoa_r+0x9d6>
 80059ca:	4b83      	ldr	r3, [pc, #524]	; (8005bd8 <_dtoa_r+0xbd8>)
 80059cc:	4602      	mov	r2, r0
 80059ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80059d2:	f7ff bb2e 	b.w	8005032 <_dtoa_r+0x32>
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	3202      	adds	r2, #2
 80059da:	0092      	lsls	r2, r2, #2
 80059dc:	f107 010c 	add.w	r1, r7, #12
 80059e0:	300c      	adds	r0, #12
 80059e2:	f7ff fa76 	bl	8004ed2 <memcpy>
 80059e6:	2201      	movs	r2, #1
 80059e8:	4629      	mov	r1, r5
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 fb56 	bl	800609c <__lshift>
 80059f0:	9b00      	ldr	r3, [sp, #0]
 80059f2:	3301      	adds	r3, #1
 80059f4:	9304      	str	r3, [sp, #16]
 80059f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059fa:	4413      	add	r3, r2
 80059fc:	9308      	str	r3, [sp, #32]
 80059fe:	9b02      	ldr	r3, [sp, #8]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	46b8      	mov	r8, r7
 8005a06:	9306      	str	r3, [sp, #24]
 8005a08:	4607      	mov	r7, r0
 8005a0a:	9b04      	ldr	r3, [sp, #16]
 8005a0c:	4631      	mov	r1, r6
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	4650      	mov	r0, sl
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	f7ff fa6b 	bl	8004eee <quorem>
 8005a18:	4641      	mov	r1, r8
 8005a1a:	9002      	str	r0, [sp, #8]
 8005a1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a20:	4650      	mov	r0, sl
 8005a22:	f000 fba7 	bl	8006174 <__mcmp>
 8005a26:	463a      	mov	r2, r7
 8005a28:	9005      	str	r0, [sp, #20]
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4620      	mov	r0, r4
 8005a2e:	f000 fbbd 	bl	80061ac <__mdiff>
 8005a32:	68c2      	ldr	r2, [r0, #12]
 8005a34:	4605      	mov	r5, r0
 8005a36:	bb02      	cbnz	r2, 8005a7a <_dtoa_r+0xa7a>
 8005a38:	4601      	mov	r1, r0
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f000 fb9a 	bl	8006174 <__mcmp>
 8005a40:	4602      	mov	r2, r0
 8005a42:	4629      	mov	r1, r5
 8005a44:	4620      	mov	r0, r4
 8005a46:	9209      	str	r2, [sp, #36]	; 0x24
 8005a48:	f000 f958 	bl	8005cfc <_Bfree>
 8005a4c:	9b07      	ldr	r3, [sp, #28]
 8005a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a50:	9d04      	ldr	r5, [sp, #16]
 8005a52:	ea43 0102 	orr.w	r1, r3, r2
 8005a56:	9b06      	ldr	r3, [sp, #24]
 8005a58:	4319      	orrs	r1, r3
 8005a5a:	d110      	bne.n	8005a7e <_dtoa_r+0xa7e>
 8005a5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005a60:	d029      	beq.n	8005ab6 <_dtoa_r+0xab6>
 8005a62:	9b05      	ldr	r3, [sp, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	dd02      	ble.n	8005a6e <_dtoa_r+0xa6e>
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	f883 9000 	strb.w	r9, [r3]
 8005a74:	e774      	b.n	8005960 <_dtoa_r+0x960>
 8005a76:	4638      	mov	r0, r7
 8005a78:	e7ba      	b.n	80059f0 <_dtoa_r+0x9f0>
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	e7e1      	b.n	8005a42 <_dtoa_r+0xa42>
 8005a7e:	9b05      	ldr	r3, [sp, #20]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	db04      	blt.n	8005a8e <_dtoa_r+0xa8e>
 8005a84:	9907      	ldr	r1, [sp, #28]
 8005a86:	430b      	orrs	r3, r1
 8005a88:	9906      	ldr	r1, [sp, #24]
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	d120      	bne.n	8005ad0 <_dtoa_r+0xad0>
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	dded      	ble.n	8005a6e <_dtoa_r+0xa6e>
 8005a92:	4651      	mov	r1, sl
 8005a94:	2201      	movs	r2, #1
 8005a96:	4620      	mov	r0, r4
 8005a98:	f000 fb00 	bl	800609c <__lshift>
 8005a9c:	4631      	mov	r1, r6
 8005a9e:	4682      	mov	sl, r0
 8005aa0:	f000 fb68 	bl	8006174 <__mcmp>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	dc03      	bgt.n	8005ab0 <_dtoa_r+0xab0>
 8005aa8:	d1e1      	bne.n	8005a6e <_dtoa_r+0xa6e>
 8005aaa:	f019 0f01 	tst.w	r9, #1
 8005aae:	d0de      	beq.n	8005a6e <_dtoa_r+0xa6e>
 8005ab0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ab4:	d1d8      	bne.n	8005a68 <_dtoa_r+0xa68>
 8005ab6:	9a01      	ldr	r2, [sp, #4]
 8005ab8:	2339      	movs	r3, #57	; 0x39
 8005aba:	7013      	strb	r3, [r2, #0]
 8005abc:	462b      	mov	r3, r5
 8005abe:	461d      	mov	r5, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005ac6:	2a39      	cmp	r2, #57	; 0x39
 8005ac8:	d06c      	beq.n	8005ba4 <_dtoa_r+0xba4>
 8005aca:	3201      	adds	r2, #1
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e747      	b.n	8005960 <_dtoa_r+0x960>
 8005ad0:	2a00      	cmp	r2, #0
 8005ad2:	dd07      	ble.n	8005ae4 <_dtoa_r+0xae4>
 8005ad4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ad8:	d0ed      	beq.n	8005ab6 <_dtoa_r+0xab6>
 8005ada:	9a01      	ldr	r2, [sp, #4]
 8005adc:	f109 0301 	add.w	r3, r9, #1
 8005ae0:	7013      	strb	r3, [r2, #0]
 8005ae2:	e73d      	b.n	8005960 <_dtoa_r+0x960>
 8005ae4:	9b04      	ldr	r3, [sp, #16]
 8005ae6:	9a08      	ldr	r2, [sp, #32]
 8005ae8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d043      	beq.n	8005b78 <_dtoa_r+0xb78>
 8005af0:	4651      	mov	r1, sl
 8005af2:	2300      	movs	r3, #0
 8005af4:	220a      	movs	r2, #10
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 f922 	bl	8005d40 <__multadd>
 8005afc:	45b8      	cmp	r8, r7
 8005afe:	4682      	mov	sl, r0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	f04f 020a 	mov.w	r2, #10
 8005b08:	4641      	mov	r1, r8
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	d107      	bne.n	8005b1e <_dtoa_r+0xb1e>
 8005b0e:	f000 f917 	bl	8005d40 <__multadd>
 8005b12:	4680      	mov	r8, r0
 8005b14:	4607      	mov	r7, r0
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	3301      	adds	r3, #1
 8005b1a:	9304      	str	r3, [sp, #16]
 8005b1c:	e775      	b.n	8005a0a <_dtoa_r+0xa0a>
 8005b1e:	f000 f90f 	bl	8005d40 <__multadd>
 8005b22:	4639      	mov	r1, r7
 8005b24:	4680      	mov	r8, r0
 8005b26:	2300      	movs	r3, #0
 8005b28:	220a      	movs	r2, #10
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 f908 	bl	8005d40 <__multadd>
 8005b30:	4607      	mov	r7, r0
 8005b32:	e7f0      	b.n	8005b16 <_dtoa_r+0xb16>
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	9301      	str	r3, [sp, #4]
 8005b38:	9d00      	ldr	r5, [sp, #0]
 8005b3a:	4631      	mov	r1, r6
 8005b3c:	4650      	mov	r0, sl
 8005b3e:	f7ff f9d6 	bl	8004eee <quorem>
 8005b42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005b46:	9b00      	ldr	r3, [sp, #0]
 8005b48:	f805 9b01 	strb.w	r9, [r5], #1
 8005b4c:	1aea      	subs	r2, r5, r3
 8005b4e:	9b01      	ldr	r3, [sp, #4]
 8005b50:	4293      	cmp	r3, r2
 8005b52:	dd07      	ble.n	8005b64 <_dtoa_r+0xb64>
 8005b54:	4651      	mov	r1, sl
 8005b56:	2300      	movs	r3, #0
 8005b58:	220a      	movs	r2, #10
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 f8f0 	bl	8005d40 <__multadd>
 8005b60:	4682      	mov	sl, r0
 8005b62:	e7ea      	b.n	8005b3a <_dtoa_r+0xb3a>
 8005b64:	9b01      	ldr	r3, [sp, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfc8      	it	gt
 8005b6a:	461d      	movgt	r5, r3
 8005b6c:	9b00      	ldr	r3, [sp, #0]
 8005b6e:	bfd8      	it	le
 8005b70:	2501      	movle	r5, #1
 8005b72:	441d      	add	r5, r3
 8005b74:	f04f 0800 	mov.w	r8, #0
 8005b78:	4651      	mov	r1, sl
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	f000 fa8d 	bl	800609c <__lshift>
 8005b82:	4631      	mov	r1, r6
 8005b84:	4682      	mov	sl, r0
 8005b86:	f000 faf5 	bl	8006174 <__mcmp>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	dc96      	bgt.n	8005abc <_dtoa_r+0xabc>
 8005b8e:	d102      	bne.n	8005b96 <_dtoa_r+0xb96>
 8005b90:	f019 0f01 	tst.w	r9, #1
 8005b94:	d192      	bne.n	8005abc <_dtoa_r+0xabc>
 8005b96:	462b      	mov	r3, r5
 8005b98:	461d      	mov	r5, r3
 8005b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b9e:	2a30      	cmp	r2, #48	; 0x30
 8005ba0:	d0fa      	beq.n	8005b98 <_dtoa_r+0xb98>
 8005ba2:	e6dd      	b.n	8005960 <_dtoa_r+0x960>
 8005ba4:	9a00      	ldr	r2, [sp, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d189      	bne.n	8005abe <_dtoa_r+0xabe>
 8005baa:	f10b 0b01 	add.w	fp, fp, #1
 8005bae:	2331      	movs	r3, #49	; 0x31
 8005bb0:	e796      	b.n	8005ae0 <_dtoa_r+0xae0>
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <_dtoa_r+0xbdc>)
 8005bb4:	f7ff ba99 	b.w	80050ea <_dtoa_r+0xea>
 8005bb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f aa6d 	bne.w	800509a <_dtoa_r+0x9a>
 8005bc0:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <_dtoa_r+0xbe0>)
 8005bc2:	f7ff ba92 	b.w	80050ea <_dtoa_r+0xea>
 8005bc6:	9b01      	ldr	r3, [sp, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	dcb5      	bgt.n	8005b38 <_dtoa_r+0xb38>
 8005bcc:	9b07      	ldr	r3, [sp, #28]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	f73f aeb1 	bgt.w	8005936 <_dtoa_r+0x936>
 8005bd4:	e7b0      	b.n	8005b38 <_dtoa_r+0xb38>
 8005bd6:	bf00      	nop
 8005bd8:	0801afc0 	.word	0x0801afc0
 8005bdc:	0801af20 	.word	0x0801af20
 8005be0:	0801af44 	.word	0x0801af44

08005be4 <_free_r>:
 8005be4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005be6:	2900      	cmp	r1, #0
 8005be8:	d044      	beq.n	8005c74 <_free_r+0x90>
 8005bea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bee:	9001      	str	r0, [sp, #4]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f1a1 0404 	sub.w	r4, r1, #4
 8005bf6:	bfb8      	it	lt
 8005bf8:	18e4      	addlt	r4, r4, r3
 8005bfa:	f7fe fb43 	bl	8004284 <__malloc_lock>
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	; (8005c78 <_free_r+0x94>)
 8005c00:	9801      	ldr	r0, [sp, #4]
 8005c02:	6813      	ldr	r3, [r2, #0]
 8005c04:	b933      	cbnz	r3, 8005c14 <_free_r+0x30>
 8005c06:	6063      	str	r3, [r4, #4]
 8005c08:	6014      	str	r4, [r2, #0]
 8005c0a:	b003      	add	sp, #12
 8005c0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c10:	f7fe bb3e 	b.w	8004290 <__malloc_unlock>
 8005c14:	42a3      	cmp	r3, r4
 8005c16:	d908      	bls.n	8005c2a <_free_r+0x46>
 8005c18:	6825      	ldr	r5, [r4, #0]
 8005c1a:	1961      	adds	r1, r4, r5
 8005c1c:	428b      	cmp	r3, r1
 8005c1e:	bf01      	itttt	eq
 8005c20:	6819      	ldreq	r1, [r3, #0]
 8005c22:	685b      	ldreq	r3, [r3, #4]
 8005c24:	1949      	addeq	r1, r1, r5
 8005c26:	6021      	streq	r1, [r4, #0]
 8005c28:	e7ed      	b.n	8005c06 <_free_r+0x22>
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	b10b      	cbz	r3, 8005c34 <_free_r+0x50>
 8005c30:	42a3      	cmp	r3, r4
 8005c32:	d9fa      	bls.n	8005c2a <_free_r+0x46>
 8005c34:	6811      	ldr	r1, [r2, #0]
 8005c36:	1855      	adds	r5, r2, r1
 8005c38:	42a5      	cmp	r5, r4
 8005c3a:	d10b      	bne.n	8005c54 <_free_r+0x70>
 8005c3c:	6824      	ldr	r4, [r4, #0]
 8005c3e:	4421      	add	r1, r4
 8005c40:	1854      	adds	r4, r2, r1
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	6011      	str	r1, [r2, #0]
 8005c46:	d1e0      	bne.n	8005c0a <_free_r+0x26>
 8005c48:	681c      	ldr	r4, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	6053      	str	r3, [r2, #4]
 8005c4e:	440c      	add	r4, r1
 8005c50:	6014      	str	r4, [r2, #0]
 8005c52:	e7da      	b.n	8005c0a <_free_r+0x26>
 8005c54:	d902      	bls.n	8005c5c <_free_r+0x78>
 8005c56:	230c      	movs	r3, #12
 8005c58:	6003      	str	r3, [r0, #0]
 8005c5a:	e7d6      	b.n	8005c0a <_free_r+0x26>
 8005c5c:	6825      	ldr	r5, [r4, #0]
 8005c5e:	1961      	adds	r1, r4, r5
 8005c60:	428b      	cmp	r3, r1
 8005c62:	bf04      	itt	eq
 8005c64:	6819      	ldreq	r1, [r3, #0]
 8005c66:	685b      	ldreq	r3, [r3, #4]
 8005c68:	6063      	str	r3, [r4, #4]
 8005c6a:	bf04      	itt	eq
 8005c6c:	1949      	addeq	r1, r1, r5
 8005c6e:	6021      	streq	r1, [r4, #0]
 8005c70:	6054      	str	r4, [r2, #4]
 8005c72:	e7ca      	b.n	8005c0a <_free_r+0x26>
 8005c74:	b003      	add	sp, #12
 8005c76:	bd30      	pop	{r4, r5, pc}
 8005c78:	20000208 	.word	0x20000208

08005c7c <_Balloc>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	69c6      	ldr	r6, [r0, #28]
 8005c80:	4604      	mov	r4, r0
 8005c82:	460d      	mov	r5, r1
 8005c84:	b976      	cbnz	r6, 8005ca4 <_Balloc+0x28>
 8005c86:	2010      	movs	r0, #16
 8005c88:	f7fe fa54 	bl	8004134 <malloc>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	61e0      	str	r0, [r4, #28]
 8005c90:	b920      	cbnz	r0, 8005c9c <_Balloc+0x20>
 8005c92:	4b18      	ldr	r3, [pc, #96]	; (8005cf4 <_Balloc+0x78>)
 8005c94:	4818      	ldr	r0, [pc, #96]	; (8005cf8 <_Balloc+0x7c>)
 8005c96:	216b      	movs	r1, #107	; 0x6b
 8005c98:	f000 fd8c 	bl	80067b4 <__assert_func>
 8005c9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ca0:	6006      	str	r6, [r0, #0]
 8005ca2:	60c6      	str	r6, [r0, #12]
 8005ca4:	69e6      	ldr	r6, [r4, #28]
 8005ca6:	68f3      	ldr	r3, [r6, #12]
 8005ca8:	b183      	cbz	r3, 8005ccc <_Balloc+0x50>
 8005caa:	69e3      	ldr	r3, [r4, #28]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005cb2:	b9b8      	cbnz	r0, 8005ce4 <_Balloc+0x68>
 8005cb4:	2101      	movs	r1, #1
 8005cb6:	fa01 f605 	lsl.w	r6, r1, r5
 8005cba:	1d72      	adds	r2, r6, #5
 8005cbc:	0092      	lsls	r2, r2, #2
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 fd96 	bl	80067f0 <_calloc_r>
 8005cc4:	b160      	cbz	r0, 8005ce0 <_Balloc+0x64>
 8005cc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005cca:	e00e      	b.n	8005cea <_Balloc+0x6e>
 8005ccc:	2221      	movs	r2, #33	; 0x21
 8005cce:	2104      	movs	r1, #4
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	f000 fd8d 	bl	80067f0 <_calloc_r>
 8005cd6:	69e3      	ldr	r3, [r4, #28]
 8005cd8:	60f0      	str	r0, [r6, #12]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e4      	bne.n	8005caa <_Balloc+0x2e>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	bd70      	pop	{r4, r5, r6, pc}
 8005ce4:	6802      	ldr	r2, [r0, #0]
 8005ce6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005cea:	2300      	movs	r3, #0
 8005cec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005cf0:	e7f7      	b.n	8005ce2 <_Balloc+0x66>
 8005cf2:	bf00      	nop
 8005cf4:	0801af51 	.word	0x0801af51
 8005cf8:	0801afd1 	.word	0x0801afd1

08005cfc <_Bfree>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	69c6      	ldr	r6, [r0, #28]
 8005d00:	4605      	mov	r5, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	b976      	cbnz	r6, 8005d24 <_Bfree+0x28>
 8005d06:	2010      	movs	r0, #16
 8005d08:	f7fe fa14 	bl	8004134 <malloc>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	61e8      	str	r0, [r5, #28]
 8005d10:	b920      	cbnz	r0, 8005d1c <_Bfree+0x20>
 8005d12:	4b09      	ldr	r3, [pc, #36]	; (8005d38 <_Bfree+0x3c>)
 8005d14:	4809      	ldr	r0, [pc, #36]	; (8005d3c <_Bfree+0x40>)
 8005d16:	218f      	movs	r1, #143	; 0x8f
 8005d18:	f000 fd4c 	bl	80067b4 <__assert_func>
 8005d1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d20:	6006      	str	r6, [r0, #0]
 8005d22:	60c6      	str	r6, [r0, #12]
 8005d24:	b13c      	cbz	r4, 8005d36 <_Bfree+0x3a>
 8005d26:	69eb      	ldr	r3, [r5, #28]
 8005d28:	6862      	ldr	r2, [r4, #4]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d30:	6021      	str	r1, [r4, #0]
 8005d32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	0801af51 	.word	0x0801af51
 8005d3c:	0801afd1 	.word	0x0801afd1

08005d40 <__multadd>:
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d44:	690d      	ldr	r5, [r1, #16]
 8005d46:	4607      	mov	r7, r0
 8005d48:	460c      	mov	r4, r1
 8005d4a:	461e      	mov	r6, r3
 8005d4c:	f101 0c14 	add.w	ip, r1, #20
 8005d50:	2000      	movs	r0, #0
 8005d52:	f8dc 3000 	ldr.w	r3, [ip]
 8005d56:	b299      	uxth	r1, r3
 8005d58:	fb02 6101 	mla	r1, r2, r1, r6
 8005d5c:	0c1e      	lsrs	r6, r3, #16
 8005d5e:	0c0b      	lsrs	r3, r1, #16
 8005d60:	fb02 3306 	mla	r3, r2, r6, r3
 8005d64:	b289      	uxth	r1, r1
 8005d66:	3001      	adds	r0, #1
 8005d68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005d6c:	4285      	cmp	r5, r0
 8005d6e:	f84c 1b04 	str.w	r1, [ip], #4
 8005d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005d76:	dcec      	bgt.n	8005d52 <__multadd+0x12>
 8005d78:	b30e      	cbz	r6, 8005dbe <__multadd+0x7e>
 8005d7a:	68a3      	ldr	r3, [r4, #8]
 8005d7c:	42ab      	cmp	r3, r5
 8005d7e:	dc19      	bgt.n	8005db4 <__multadd+0x74>
 8005d80:	6861      	ldr	r1, [r4, #4]
 8005d82:	4638      	mov	r0, r7
 8005d84:	3101      	adds	r1, #1
 8005d86:	f7ff ff79 	bl	8005c7c <_Balloc>
 8005d8a:	4680      	mov	r8, r0
 8005d8c:	b928      	cbnz	r0, 8005d9a <__multadd+0x5a>
 8005d8e:	4602      	mov	r2, r0
 8005d90:	4b0c      	ldr	r3, [pc, #48]	; (8005dc4 <__multadd+0x84>)
 8005d92:	480d      	ldr	r0, [pc, #52]	; (8005dc8 <__multadd+0x88>)
 8005d94:	21ba      	movs	r1, #186	; 0xba
 8005d96:	f000 fd0d 	bl	80067b4 <__assert_func>
 8005d9a:	6922      	ldr	r2, [r4, #16]
 8005d9c:	3202      	adds	r2, #2
 8005d9e:	f104 010c 	add.w	r1, r4, #12
 8005da2:	0092      	lsls	r2, r2, #2
 8005da4:	300c      	adds	r0, #12
 8005da6:	f7ff f894 	bl	8004ed2 <memcpy>
 8005daa:	4621      	mov	r1, r4
 8005dac:	4638      	mov	r0, r7
 8005dae:	f7ff ffa5 	bl	8005cfc <_Bfree>
 8005db2:	4644      	mov	r4, r8
 8005db4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005db8:	3501      	adds	r5, #1
 8005dba:	615e      	str	r6, [r3, #20]
 8005dbc:	6125      	str	r5, [r4, #16]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc4:	0801afc0 	.word	0x0801afc0
 8005dc8:	0801afd1 	.word	0x0801afd1

08005dcc <__hi0bits>:
 8005dcc:	0c03      	lsrs	r3, r0, #16
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	b9d3      	cbnz	r3, 8005e08 <__hi0bits+0x3c>
 8005dd2:	0400      	lsls	r0, r0, #16
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005dda:	bf04      	itt	eq
 8005ddc:	0200      	lsleq	r0, r0, #8
 8005dde:	3308      	addeq	r3, #8
 8005de0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005de4:	bf04      	itt	eq
 8005de6:	0100      	lsleq	r0, r0, #4
 8005de8:	3304      	addeq	r3, #4
 8005dea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005dee:	bf04      	itt	eq
 8005df0:	0080      	lsleq	r0, r0, #2
 8005df2:	3302      	addeq	r3, #2
 8005df4:	2800      	cmp	r0, #0
 8005df6:	db05      	blt.n	8005e04 <__hi0bits+0x38>
 8005df8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005dfc:	f103 0301 	add.w	r3, r3, #1
 8005e00:	bf08      	it	eq
 8005e02:	2320      	moveq	r3, #32
 8005e04:	4618      	mov	r0, r3
 8005e06:	4770      	bx	lr
 8005e08:	2300      	movs	r3, #0
 8005e0a:	e7e4      	b.n	8005dd6 <__hi0bits+0xa>

08005e0c <__lo0bits>:
 8005e0c:	6803      	ldr	r3, [r0, #0]
 8005e0e:	f013 0207 	ands.w	r2, r3, #7
 8005e12:	d00c      	beq.n	8005e2e <__lo0bits+0x22>
 8005e14:	07d9      	lsls	r1, r3, #31
 8005e16:	d422      	bmi.n	8005e5e <__lo0bits+0x52>
 8005e18:	079a      	lsls	r2, r3, #30
 8005e1a:	bf49      	itett	mi
 8005e1c:	085b      	lsrmi	r3, r3, #1
 8005e1e:	089b      	lsrpl	r3, r3, #2
 8005e20:	6003      	strmi	r3, [r0, #0]
 8005e22:	2201      	movmi	r2, #1
 8005e24:	bf5c      	itt	pl
 8005e26:	6003      	strpl	r3, [r0, #0]
 8005e28:	2202      	movpl	r2, #2
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4770      	bx	lr
 8005e2e:	b299      	uxth	r1, r3
 8005e30:	b909      	cbnz	r1, 8005e36 <__lo0bits+0x2a>
 8005e32:	0c1b      	lsrs	r3, r3, #16
 8005e34:	2210      	movs	r2, #16
 8005e36:	b2d9      	uxtb	r1, r3
 8005e38:	b909      	cbnz	r1, 8005e3e <__lo0bits+0x32>
 8005e3a:	3208      	adds	r2, #8
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	0719      	lsls	r1, r3, #28
 8005e40:	bf04      	itt	eq
 8005e42:	091b      	lsreq	r3, r3, #4
 8005e44:	3204      	addeq	r2, #4
 8005e46:	0799      	lsls	r1, r3, #30
 8005e48:	bf04      	itt	eq
 8005e4a:	089b      	lsreq	r3, r3, #2
 8005e4c:	3202      	addeq	r2, #2
 8005e4e:	07d9      	lsls	r1, r3, #31
 8005e50:	d403      	bmi.n	8005e5a <__lo0bits+0x4e>
 8005e52:	085b      	lsrs	r3, r3, #1
 8005e54:	f102 0201 	add.w	r2, r2, #1
 8005e58:	d003      	beq.n	8005e62 <__lo0bits+0x56>
 8005e5a:	6003      	str	r3, [r0, #0]
 8005e5c:	e7e5      	b.n	8005e2a <__lo0bits+0x1e>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	e7e3      	b.n	8005e2a <__lo0bits+0x1e>
 8005e62:	2220      	movs	r2, #32
 8005e64:	e7e1      	b.n	8005e2a <__lo0bits+0x1e>
	...

08005e68 <__i2b>:
 8005e68:	b510      	push	{r4, lr}
 8005e6a:	460c      	mov	r4, r1
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	f7ff ff05 	bl	8005c7c <_Balloc>
 8005e72:	4602      	mov	r2, r0
 8005e74:	b928      	cbnz	r0, 8005e82 <__i2b+0x1a>
 8005e76:	4b05      	ldr	r3, [pc, #20]	; (8005e8c <__i2b+0x24>)
 8005e78:	4805      	ldr	r0, [pc, #20]	; (8005e90 <__i2b+0x28>)
 8005e7a:	f240 1145 	movw	r1, #325	; 0x145
 8005e7e:	f000 fc99 	bl	80067b4 <__assert_func>
 8005e82:	2301      	movs	r3, #1
 8005e84:	6144      	str	r4, [r0, #20]
 8005e86:	6103      	str	r3, [r0, #16]
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0801afc0 	.word	0x0801afc0
 8005e90:	0801afd1 	.word	0x0801afd1

08005e94 <__multiply>:
 8005e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e98:	4691      	mov	r9, r2
 8005e9a:	690a      	ldr	r2, [r1, #16]
 8005e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	bfb8      	it	lt
 8005ea4:	460b      	movlt	r3, r1
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	bfbc      	itt	lt
 8005eaa:	464c      	movlt	r4, r9
 8005eac:	4699      	movlt	r9, r3
 8005eae:	6927      	ldr	r7, [r4, #16]
 8005eb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005eb4:	68a3      	ldr	r3, [r4, #8]
 8005eb6:	6861      	ldr	r1, [r4, #4]
 8005eb8:	eb07 060a 	add.w	r6, r7, sl
 8005ebc:	42b3      	cmp	r3, r6
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	bfb8      	it	lt
 8005ec2:	3101      	addlt	r1, #1
 8005ec4:	f7ff feda 	bl	8005c7c <_Balloc>
 8005ec8:	b930      	cbnz	r0, 8005ed8 <__multiply+0x44>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b44      	ldr	r3, [pc, #272]	; (8005fe0 <__multiply+0x14c>)
 8005ece:	4845      	ldr	r0, [pc, #276]	; (8005fe4 <__multiply+0x150>)
 8005ed0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005ed4:	f000 fc6e 	bl	80067b4 <__assert_func>
 8005ed8:	f100 0514 	add.w	r5, r0, #20
 8005edc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005ee0:	462b      	mov	r3, r5
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	4543      	cmp	r3, r8
 8005ee6:	d321      	bcc.n	8005f2c <__multiply+0x98>
 8005ee8:	f104 0314 	add.w	r3, r4, #20
 8005eec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005ef0:	f109 0314 	add.w	r3, r9, #20
 8005ef4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005ef8:	9202      	str	r2, [sp, #8]
 8005efa:	1b3a      	subs	r2, r7, r4
 8005efc:	3a15      	subs	r2, #21
 8005efe:	f022 0203 	bic.w	r2, r2, #3
 8005f02:	3204      	adds	r2, #4
 8005f04:	f104 0115 	add.w	r1, r4, #21
 8005f08:	428f      	cmp	r7, r1
 8005f0a:	bf38      	it	cc
 8005f0c:	2204      	movcc	r2, #4
 8005f0e:	9201      	str	r2, [sp, #4]
 8005f10:	9a02      	ldr	r2, [sp, #8]
 8005f12:	9303      	str	r3, [sp, #12]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d80c      	bhi.n	8005f32 <__multiply+0x9e>
 8005f18:	2e00      	cmp	r6, #0
 8005f1a:	dd03      	ble.n	8005f24 <__multiply+0x90>
 8005f1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d05b      	beq.n	8005fdc <__multiply+0x148>
 8005f24:	6106      	str	r6, [r0, #16]
 8005f26:	b005      	add	sp, #20
 8005f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2c:	f843 2b04 	str.w	r2, [r3], #4
 8005f30:	e7d8      	b.n	8005ee4 <__multiply+0x50>
 8005f32:	f8b3 a000 	ldrh.w	sl, [r3]
 8005f36:	f1ba 0f00 	cmp.w	sl, #0
 8005f3a:	d024      	beq.n	8005f86 <__multiply+0xf2>
 8005f3c:	f104 0e14 	add.w	lr, r4, #20
 8005f40:	46a9      	mov	r9, r5
 8005f42:	f04f 0c00 	mov.w	ip, #0
 8005f46:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f4a:	f8d9 1000 	ldr.w	r1, [r9]
 8005f4e:	fa1f fb82 	uxth.w	fp, r2
 8005f52:	b289      	uxth	r1, r1
 8005f54:	fb0a 110b 	mla	r1, sl, fp, r1
 8005f58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005f5c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f60:	4461      	add	r1, ip
 8005f62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f66:	fb0a c20b 	mla	r2, sl, fp, ip
 8005f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005f6e:	b289      	uxth	r1, r1
 8005f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005f74:	4577      	cmp	r7, lr
 8005f76:	f849 1b04 	str.w	r1, [r9], #4
 8005f7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005f7e:	d8e2      	bhi.n	8005f46 <__multiply+0xb2>
 8005f80:	9a01      	ldr	r2, [sp, #4]
 8005f82:	f845 c002 	str.w	ip, [r5, r2]
 8005f86:	9a03      	ldr	r2, [sp, #12]
 8005f88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	f1b9 0f00 	cmp.w	r9, #0
 8005f92:	d021      	beq.n	8005fd8 <__multiply+0x144>
 8005f94:	6829      	ldr	r1, [r5, #0]
 8005f96:	f104 0c14 	add.w	ip, r4, #20
 8005f9a:	46ae      	mov	lr, r5
 8005f9c:	f04f 0a00 	mov.w	sl, #0
 8005fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8005fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005fa8:	fb09 220b 	mla	r2, r9, fp, r2
 8005fac:	4452      	add	r2, sl
 8005fae:	b289      	uxth	r1, r1
 8005fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8005fb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8005fc4:	fb09 110a 	mla	r1, r9, sl, r1
 8005fc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005fcc:	4567      	cmp	r7, ip
 8005fce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005fd2:	d8e5      	bhi.n	8005fa0 <__multiply+0x10c>
 8005fd4:	9a01      	ldr	r2, [sp, #4]
 8005fd6:	50a9      	str	r1, [r5, r2]
 8005fd8:	3504      	adds	r5, #4
 8005fda:	e799      	b.n	8005f10 <__multiply+0x7c>
 8005fdc:	3e01      	subs	r6, #1
 8005fde:	e79b      	b.n	8005f18 <__multiply+0x84>
 8005fe0:	0801afc0 	.word	0x0801afc0
 8005fe4:	0801afd1 	.word	0x0801afd1

08005fe8 <__pow5mult>:
 8005fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fec:	4615      	mov	r5, r2
 8005fee:	f012 0203 	ands.w	r2, r2, #3
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	460f      	mov	r7, r1
 8005ff6:	d007      	beq.n	8006008 <__pow5mult+0x20>
 8005ff8:	4c25      	ldr	r4, [pc, #148]	; (8006090 <__pow5mult+0xa8>)
 8005ffa:	3a01      	subs	r2, #1
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006002:	f7ff fe9d 	bl	8005d40 <__multadd>
 8006006:	4607      	mov	r7, r0
 8006008:	10ad      	asrs	r5, r5, #2
 800600a:	d03d      	beq.n	8006088 <__pow5mult+0xa0>
 800600c:	69f4      	ldr	r4, [r6, #28]
 800600e:	b97c      	cbnz	r4, 8006030 <__pow5mult+0x48>
 8006010:	2010      	movs	r0, #16
 8006012:	f7fe f88f 	bl	8004134 <malloc>
 8006016:	4602      	mov	r2, r0
 8006018:	61f0      	str	r0, [r6, #28]
 800601a:	b928      	cbnz	r0, 8006028 <__pow5mult+0x40>
 800601c:	4b1d      	ldr	r3, [pc, #116]	; (8006094 <__pow5mult+0xac>)
 800601e:	481e      	ldr	r0, [pc, #120]	; (8006098 <__pow5mult+0xb0>)
 8006020:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006024:	f000 fbc6 	bl	80067b4 <__assert_func>
 8006028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800602c:	6004      	str	r4, [r0, #0]
 800602e:	60c4      	str	r4, [r0, #12]
 8006030:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006038:	b94c      	cbnz	r4, 800604e <__pow5mult+0x66>
 800603a:	f240 2171 	movw	r1, #625	; 0x271
 800603e:	4630      	mov	r0, r6
 8006040:	f7ff ff12 	bl	8005e68 <__i2b>
 8006044:	2300      	movs	r3, #0
 8006046:	f8c8 0008 	str.w	r0, [r8, #8]
 800604a:	4604      	mov	r4, r0
 800604c:	6003      	str	r3, [r0, #0]
 800604e:	f04f 0900 	mov.w	r9, #0
 8006052:	07eb      	lsls	r3, r5, #31
 8006054:	d50a      	bpl.n	800606c <__pow5mult+0x84>
 8006056:	4639      	mov	r1, r7
 8006058:	4622      	mov	r2, r4
 800605a:	4630      	mov	r0, r6
 800605c:	f7ff ff1a 	bl	8005e94 <__multiply>
 8006060:	4639      	mov	r1, r7
 8006062:	4680      	mov	r8, r0
 8006064:	4630      	mov	r0, r6
 8006066:	f7ff fe49 	bl	8005cfc <_Bfree>
 800606a:	4647      	mov	r7, r8
 800606c:	106d      	asrs	r5, r5, #1
 800606e:	d00b      	beq.n	8006088 <__pow5mult+0xa0>
 8006070:	6820      	ldr	r0, [r4, #0]
 8006072:	b938      	cbnz	r0, 8006084 <__pow5mult+0x9c>
 8006074:	4622      	mov	r2, r4
 8006076:	4621      	mov	r1, r4
 8006078:	4630      	mov	r0, r6
 800607a:	f7ff ff0b 	bl	8005e94 <__multiply>
 800607e:	6020      	str	r0, [r4, #0]
 8006080:	f8c0 9000 	str.w	r9, [r0]
 8006084:	4604      	mov	r4, r0
 8006086:	e7e4      	b.n	8006052 <__pow5mult+0x6a>
 8006088:	4638      	mov	r0, r7
 800608a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800608e:	bf00      	nop
 8006090:	0801b120 	.word	0x0801b120
 8006094:	0801af51 	.word	0x0801af51
 8006098:	0801afd1 	.word	0x0801afd1

0800609c <__lshift>:
 800609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060a0:	460c      	mov	r4, r1
 80060a2:	6849      	ldr	r1, [r1, #4]
 80060a4:	6923      	ldr	r3, [r4, #16]
 80060a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	4607      	mov	r7, r0
 80060ae:	4691      	mov	r9, r2
 80060b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80060b4:	f108 0601 	add.w	r6, r8, #1
 80060b8:	42b3      	cmp	r3, r6
 80060ba:	db0b      	blt.n	80060d4 <__lshift+0x38>
 80060bc:	4638      	mov	r0, r7
 80060be:	f7ff fddd 	bl	8005c7c <_Balloc>
 80060c2:	4605      	mov	r5, r0
 80060c4:	b948      	cbnz	r0, 80060da <__lshift+0x3e>
 80060c6:	4602      	mov	r2, r0
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <__lshift+0xd0>)
 80060ca:	4829      	ldr	r0, [pc, #164]	; (8006170 <__lshift+0xd4>)
 80060cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80060d0:	f000 fb70 	bl	80067b4 <__assert_func>
 80060d4:	3101      	adds	r1, #1
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	e7ee      	b.n	80060b8 <__lshift+0x1c>
 80060da:	2300      	movs	r3, #0
 80060dc:	f100 0114 	add.w	r1, r0, #20
 80060e0:	f100 0210 	add.w	r2, r0, #16
 80060e4:	4618      	mov	r0, r3
 80060e6:	4553      	cmp	r3, sl
 80060e8:	db33      	blt.n	8006152 <__lshift+0xb6>
 80060ea:	6920      	ldr	r0, [r4, #16]
 80060ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060f0:	f104 0314 	add.w	r3, r4, #20
 80060f4:	f019 091f 	ands.w	r9, r9, #31
 80060f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006100:	d02b      	beq.n	800615a <__lshift+0xbe>
 8006102:	f1c9 0e20 	rsb	lr, r9, #32
 8006106:	468a      	mov	sl, r1
 8006108:	2200      	movs	r2, #0
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	fa00 f009 	lsl.w	r0, r0, r9
 8006110:	4310      	orrs	r0, r2
 8006112:	f84a 0b04 	str.w	r0, [sl], #4
 8006116:	f853 2b04 	ldr.w	r2, [r3], #4
 800611a:	459c      	cmp	ip, r3
 800611c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006120:	d8f3      	bhi.n	800610a <__lshift+0x6e>
 8006122:	ebac 0304 	sub.w	r3, ip, r4
 8006126:	3b15      	subs	r3, #21
 8006128:	f023 0303 	bic.w	r3, r3, #3
 800612c:	3304      	adds	r3, #4
 800612e:	f104 0015 	add.w	r0, r4, #21
 8006132:	4584      	cmp	ip, r0
 8006134:	bf38      	it	cc
 8006136:	2304      	movcc	r3, #4
 8006138:	50ca      	str	r2, [r1, r3]
 800613a:	b10a      	cbz	r2, 8006140 <__lshift+0xa4>
 800613c:	f108 0602 	add.w	r6, r8, #2
 8006140:	3e01      	subs	r6, #1
 8006142:	4638      	mov	r0, r7
 8006144:	612e      	str	r6, [r5, #16]
 8006146:	4621      	mov	r1, r4
 8006148:	f7ff fdd8 	bl	8005cfc <_Bfree>
 800614c:	4628      	mov	r0, r5
 800614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006152:	f842 0f04 	str.w	r0, [r2, #4]!
 8006156:	3301      	adds	r3, #1
 8006158:	e7c5      	b.n	80060e6 <__lshift+0x4a>
 800615a:	3904      	subs	r1, #4
 800615c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006160:	f841 2f04 	str.w	r2, [r1, #4]!
 8006164:	459c      	cmp	ip, r3
 8006166:	d8f9      	bhi.n	800615c <__lshift+0xc0>
 8006168:	e7ea      	b.n	8006140 <__lshift+0xa4>
 800616a:	bf00      	nop
 800616c:	0801afc0 	.word	0x0801afc0
 8006170:	0801afd1 	.word	0x0801afd1

08006174 <__mcmp>:
 8006174:	b530      	push	{r4, r5, lr}
 8006176:	6902      	ldr	r2, [r0, #16]
 8006178:	690c      	ldr	r4, [r1, #16]
 800617a:	1b12      	subs	r2, r2, r4
 800617c:	d10e      	bne.n	800619c <__mcmp+0x28>
 800617e:	f100 0314 	add.w	r3, r0, #20
 8006182:	3114      	adds	r1, #20
 8006184:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006188:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800618c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006190:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006194:	42a5      	cmp	r5, r4
 8006196:	d003      	beq.n	80061a0 <__mcmp+0x2c>
 8006198:	d305      	bcc.n	80061a6 <__mcmp+0x32>
 800619a:	2201      	movs	r2, #1
 800619c:	4610      	mov	r0, r2
 800619e:	bd30      	pop	{r4, r5, pc}
 80061a0:	4283      	cmp	r3, r0
 80061a2:	d3f3      	bcc.n	800618c <__mcmp+0x18>
 80061a4:	e7fa      	b.n	800619c <__mcmp+0x28>
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	e7f7      	b.n	800619c <__mcmp+0x28>

080061ac <__mdiff>:
 80061ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b0:	460c      	mov	r4, r1
 80061b2:	4606      	mov	r6, r0
 80061b4:	4611      	mov	r1, r2
 80061b6:	4620      	mov	r0, r4
 80061b8:	4690      	mov	r8, r2
 80061ba:	f7ff ffdb 	bl	8006174 <__mcmp>
 80061be:	1e05      	subs	r5, r0, #0
 80061c0:	d110      	bne.n	80061e4 <__mdiff+0x38>
 80061c2:	4629      	mov	r1, r5
 80061c4:	4630      	mov	r0, r6
 80061c6:	f7ff fd59 	bl	8005c7c <_Balloc>
 80061ca:	b930      	cbnz	r0, 80061da <__mdiff+0x2e>
 80061cc:	4b3a      	ldr	r3, [pc, #232]	; (80062b8 <__mdiff+0x10c>)
 80061ce:	4602      	mov	r2, r0
 80061d0:	f240 2137 	movw	r1, #567	; 0x237
 80061d4:	4839      	ldr	r0, [pc, #228]	; (80062bc <__mdiff+0x110>)
 80061d6:	f000 faed 	bl	80067b4 <__assert_func>
 80061da:	2301      	movs	r3, #1
 80061dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80061e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e4:	bfa4      	itt	ge
 80061e6:	4643      	movge	r3, r8
 80061e8:	46a0      	movge	r8, r4
 80061ea:	4630      	mov	r0, r6
 80061ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80061f0:	bfa6      	itte	ge
 80061f2:	461c      	movge	r4, r3
 80061f4:	2500      	movge	r5, #0
 80061f6:	2501      	movlt	r5, #1
 80061f8:	f7ff fd40 	bl	8005c7c <_Balloc>
 80061fc:	b920      	cbnz	r0, 8006208 <__mdiff+0x5c>
 80061fe:	4b2e      	ldr	r3, [pc, #184]	; (80062b8 <__mdiff+0x10c>)
 8006200:	4602      	mov	r2, r0
 8006202:	f240 2145 	movw	r1, #581	; 0x245
 8006206:	e7e5      	b.n	80061d4 <__mdiff+0x28>
 8006208:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800620c:	6926      	ldr	r6, [r4, #16]
 800620e:	60c5      	str	r5, [r0, #12]
 8006210:	f104 0914 	add.w	r9, r4, #20
 8006214:	f108 0514 	add.w	r5, r8, #20
 8006218:	f100 0e14 	add.w	lr, r0, #20
 800621c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006220:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006224:	f108 0210 	add.w	r2, r8, #16
 8006228:	46f2      	mov	sl, lr
 800622a:	2100      	movs	r1, #0
 800622c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006230:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006234:	fa11 f88b 	uxtah	r8, r1, fp
 8006238:	b299      	uxth	r1, r3
 800623a:	0c1b      	lsrs	r3, r3, #16
 800623c:	eba8 0801 	sub.w	r8, r8, r1
 8006240:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006244:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006248:	fa1f f888 	uxth.w	r8, r8
 800624c:	1419      	asrs	r1, r3, #16
 800624e:	454e      	cmp	r6, r9
 8006250:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006254:	f84a 3b04 	str.w	r3, [sl], #4
 8006258:	d8e8      	bhi.n	800622c <__mdiff+0x80>
 800625a:	1b33      	subs	r3, r6, r4
 800625c:	3b15      	subs	r3, #21
 800625e:	f023 0303 	bic.w	r3, r3, #3
 8006262:	3304      	adds	r3, #4
 8006264:	3415      	adds	r4, #21
 8006266:	42a6      	cmp	r6, r4
 8006268:	bf38      	it	cc
 800626a:	2304      	movcc	r3, #4
 800626c:	441d      	add	r5, r3
 800626e:	4473      	add	r3, lr
 8006270:	469e      	mov	lr, r3
 8006272:	462e      	mov	r6, r5
 8006274:	4566      	cmp	r6, ip
 8006276:	d30e      	bcc.n	8006296 <__mdiff+0xea>
 8006278:	f10c 0203 	add.w	r2, ip, #3
 800627c:	1b52      	subs	r2, r2, r5
 800627e:	f022 0203 	bic.w	r2, r2, #3
 8006282:	3d03      	subs	r5, #3
 8006284:	45ac      	cmp	ip, r5
 8006286:	bf38      	it	cc
 8006288:	2200      	movcc	r2, #0
 800628a:	4413      	add	r3, r2
 800628c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006290:	b17a      	cbz	r2, 80062b2 <__mdiff+0x106>
 8006292:	6107      	str	r7, [r0, #16]
 8006294:	e7a4      	b.n	80061e0 <__mdiff+0x34>
 8006296:	f856 8b04 	ldr.w	r8, [r6], #4
 800629a:	fa11 f288 	uxtah	r2, r1, r8
 800629e:	1414      	asrs	r4, r2, #16
 80062a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80062a4:	b292      	uxth	r2, r2
 80062a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80062aa:	f84e 2b04 	str.w	r2, [lr], #4
 80062ae:	1421      	asrs	r1, r4, #16
 80062b0:	e7e0      	b.n	8006274 <__mdiff+0xc8>
 80062b2:	3f01      	subs	r7, #1
 80062b4:	e7ea      	b.n	800628c <__mdiff+0xe0>
 80062b6:	bf00      	nop
 80062b8:	0801afc0 	.word	0x0801afc0
 80062bc:	0801afd1 	.word	0x0801afd1

080062c0 <__d2b>:
 80062c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80062c4:	460f      	mov	r7, r1
 80062c6:	2101      	movs	r1, #1
 80062c8:	ec59 8b10 	vmov	r8, r9, d0
 80062cc:	4616      	mov	r6, r2
 80062ce:	f7ff fcd5 	bl	8005c7c <_Balloc>
 80062d2:	4604      	mov	r4, r0
 80062d4:	b930      	cbnz	r0, 80062e4 <__d2b+0x24>
 80062d6:	4602      	mov	r2, r0
 80062d8:	4b24      	ldr	r3, [pc, #144]	; (800636c <__d2b+0xac>)
 80062da:	4825      	ldr	r0, [pc, #148]	; (8006370 <__d2b+0xb0>)
 80062dc:	f240 310f 	movw	r1, #783	; 0x30f
 80062e0:	f000 fa68 	bl	80067b4 <__assert_func>
 80062e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80062e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80062ec:	bb2d      	cbnz	r5, 800633a <__d2b+0x7a>
 80062ee:	9301      	str	r3, [sp, #4]
 80062f0:	f1b8 0300 	subs.w	r3, r8, #0
 80062f4:	d026      	beq.n	8006344 <__d2b+0x84>
 80062f6:	4668      	mov	r0, sp
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	f7ff fd87 	bl	8005e0c <__lo0bits>
 80062fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006302:	b1e8      	cbz	r0, 8006340 <__d2b+0x80>
 8006304:	f1c0 0320 	rsb	r3, r0, #32
 8006308:	fa02 f303 	lsl.w	r3, r2, r3
 800630c:	430b      	orrs	r3, r1
 800630e:	40c2      	lsrs	r2, r0
 8006310:	6163      	str	r3, [r4, #20]
 8006312:	9201      	str	r2, [sp, #4]
 8006314:	9b01      	ldr	r3, [sp, #4]
 8006316:	61a3      	str	r3, [r4, #24]
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf14      	ite	ne
 800631c:	2202      	movne	r2, #2
 800631e:	2201      	moveq	r2, #1
 8006320:	6122      	str	r2, [r4, #16]
 8006322:	b1bd      	cbz	r5, 8006354 <__d2b+0x94>
 8006324:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006328:	4405      	add	r5, r0
 800632a:	603d      	str	r5, [r7, #0]
 800632c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006330:	6030      	str	r0, [r6, #0]
 8006332:	4620      	mov	r0, r4
 8006334:	b003      	add	sp, #12
 8006336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800633a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800633e:	e7d6      	b.n	80062ee <__d2b+0x2e>
 8006340:	6161      	str	r1, [r4, #20]
 8006342:	e7e7      	b.n	8006314 <__d2b+0x54>
 8006344:	a801      	add	r0, sp, #4
 8006346:	f7ff fd61 	bl	8005e0c <__lo0bits>
 800634a:	9b01      	ldr	r3, [sp, #4]
 800634c:	6163      	str	r3, [r4, #20]
 800634e:	3020      	adds	r0, #32
 8006350:	2201      	movs	r2, #1
 8006352:	e7e5      	b.n	8006320 <__d2b+0x60>
 8006354:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006358:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800635c:	6038      	str	r0, [r7, #0]
 800635e:	6918      	ldr	r0, [r3, #16]
 8006360:	f7ff fd34 	bl	8005dcc <__hi0bits>
 8006364:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006368:	e7e2      	b.n	8006330 <__d2b+0x70>
 800636a:	bf00      	nop
 800636c:	0801afc0 	.word	0x0801afc0
 8006370:	0801afd1 	.word	0x0801afd1

08006374 <__ssputs_r>:
 8006374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	688e      	ldr	r6, [r1, #8]
 800637a:	461f      	mov	r7, r3
 800637c:	42be      	cmp	r6, r7
 800637e:	680b      	ldr	r3, [r1, #0]
 8006380:	4682      	mov	sl, r0
 8006382:	460c      	mov	r4, r1
 8006384:	4690      	mov	r8, r2
 8006386:	d82c      	bhi.n	80063e2 <__ssputs_r+0x6e>
 8006388:	898a      	ldrh	r2, [r1, #12]
 800638a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800638e:	d026      	beq.n	80063de <__ssputs_r+0x6a>
 8006390:	6965      	ldr	r5, [r4, #20]
 8006392:	6909      	ldr	r1, [r1, #16]
 8006394:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006398:	eba3 0901 	sub.w	r9, r3, r1
 800639c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063a0:	1c7b      	adds	r3, r7, #1
 80063a2:	444b      	add	r3, r9
 80063a4:	106d      	asrs	r5, r5, #1
 80063a6:	429d      	cmp	r5, r3
 80063a8:	bf38      	it	cc
 80063aa:	461d      	movcc	r5, r3
 80063ac:	0553      	lsls	r3, r2, #21
 80063ae:	d527      	bpl.n	8006400 <__ssputs_r+0x8c>
 80063b0:	4629      	mov	r1, r5
 80063b2:	f7fd fee7 	bl	8004184 <_malloc_r>
 80063b6:	4606      	mov	r6, r0
 80063b8:	b360      	cbz	r0, 8006414 <__ssputs_r+0xa0>
 80063ba:	6921      	ldr	r1, [r4, #16]
 80063bc:	464a      	mov	r2, r9
 80063be:	f7fe fd88 	bl	8004ed2 <memcpy>
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	6126      	str	r6, [r4, #16]
 80063d0:	6165      	str	r5, [r4, #20]
 80063d2:	444e      	add	r6, r9
 80063d4:	eba5 0509 	sub.w	r5, r5, r9
 80063d8:	6026      	str	r6, [r4, #0]
 80063da:	60a5      	str	r5, [r4, #8]
 80063dc:	463e      	mov	r6, r7
 80063de:	42be      	cmp	r6, r7
 80063e0:	d900      	bls.n	80063e4 <__ssputs_r+0x70>
 80063e2:	463e      	mov	r6, r7
 80063e4:	6820      	ldr	r0, [r4, #0]
 80063e6:	4632      	mov	r2, r6
 80063e8:	4641      	mov	r1, r8
 80063ea:	f000 f9c9 	bl	8006780 <memmove>
 80063ee:	68a3      	ldr	r3, [r4, #8]
 80063f0:	1b9b      	subs	r3, r3, r6
 80063f2:	60a3      	str	r3, [r4, #8]
 80063f4:	6823      	ldr	r3, [r4, #0]
 80063f6:	4433      	add	r3, r6
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	2000      	movs	r0, #0
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	462a      	mov	r2, r5
 8006402:	f000 fa1d 	bl	8006840 <_realloc_r>
 8006406:	4606      	mov	r6, r0
 8006408:	2800      	cmp	r0, #0
 800640a:	d1e0      	bne.n	80063ce <__ssputs_r+0x5a>
 800640c:	6921      	ldr	r1, [r4, #16]
 800640e:	4650      	mov	r0, sl
 8006410:	f7ff fbe8 	bl	8005be4 <_free_r>
 8006414:	230c      	movs	r3, #12
 8006416:	f8ca 3000 	str.w	r3, [sl]
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006420:	81a3      	strh	r3, [r4, #12]
 8006422:	f04f 30ff 	mov.w	r0, #4294967295
 8006426:	e7e9      	b.n	80063fc <__ssputs_r+0x88>

08006428 <_svfiprintf_r>:
 8006428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	4698      	mov	r8, r3
 800642e:	898b      	ldrh	r3, [r1, #12]
 8006430:	061b      	lsls	r3, r3, #24
 8006432:	b09d      	sub	sp, #116	; 0x74
 8006434:	4607      	mov	r7, r0
 8006436:	460d      	mov	r5, r1
 8006438:	4614      	mov	r4, r2
 800643a:	d50e      	bpl.n	800645a <_svfiprintf_r+0x32>
 800643c:	690b      	ldr	r3, [r1, #16]
 800643e:	b963      	cbnz	r3, 800645a <_svfiprintf_r+0x32>
 8006440:	2140      	movs	r1, #64	; 0x40
 8006442:	f7fd fe9f 	bl	8004184 <_malloc_r>
 8006446:	6028      	str	r0, [r5, #0]
 8006448:	6128      	str	r0, [r5, #16]
 800644a:	b920      	cbnz	r0, 8006456 <_svfiprintf_r+0x2e>
 800644c:	230c      	movs	r3, #12
 800644e:	603b      	str	r3, [r7, #0]
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e0d0      	b.n	80065f8 <_svfiprintf_r+0x1d0>
 8006456:	2340      	movs	r3, #64	; 0x40
 8006458:	616b      	str	r3, [r5, #20]
 800645a:	2300      	movs	r3, #0
 800645c:	9309      	str	r3, [sp, #36]	; 0x24
 800645e:	2320      	movs	r3, #32
 8006460:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006464:	f8cd 800c 	str.w	r8, [sp, #12]
 8006468:	2330      	movs	r3, #48	; 0x30
 800646a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006610 <_svfiprintf_r+0x1e8>
 800646e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006472:	f04f 0901 	mov.w	r9, #1
 8006476:	4623      	mov	r3, r4
 8006478:	469a      	mov	sl, r3
 800647a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800647e:	b10a      	cbz	r2, 8006484 <_svfiprintf_r+0x5c>
 8006480:	2a25      	cmp	r2, #37	; 0x25
 8006482:	d1f9      	bne.n	8006478 <_svfiprintf_r+0x50>
 8006484:	ebba 0b04 	subs.w	fp, sl, r4
 8006488:	d00b      	beq.n	80064a2 <_svfiprintf_r+0x7a>
 800648a:	465b      	mov	r3, fp
 800648c:	4622      	mov	r2, r4
 800648e:	4629      	mov	r1, r5
 8006490:	4638      	mov	r0, r7
 8006492:	f7ff ff6f 	bl	8006374 <__ssputs_r>
 8006496:	3001      	adds	r0, #1
 8006498:	f000 80a9 	beq.w	80065ee <_svfiprintf_r+0x1c6>
 800649c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800649e:	445a      	add	r2, fp
 80064a0:	9209      	str	r2, [sp, #36]	; 0x24
 80064a2:	f89a 3000 	ldrb.w	r3, [sl]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	f000 80a1 	beq.w	80065ee <_svfiprintf_r+0x1c6>
 80064ac:	2300      	movs	r3, #0
 80064ae:	f04f 32ff 	mov.w	r2, #4294967295
 80064b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b6:	f10a 0a01 	add.w	sl, sl, #1
 80064ba:	9304      	str	r3, [sp, #16]
 80064bc:	9307      	str	r3, [sp, #28]
 80064be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064c2:	931a      	str	r3, [sp, #104]	; 0x68
 80064c4:	4654      	mov	r4, sl
 80064c6:	2205      	movs	r2, #5
 80064c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064cc:	4850      	ldr	r0, [pc, #320]	; (8006610 <_svfiprintf_r+0x1e8>)
 80064ce:	f7f9 fe87 	bl	80001e0 <memchr>
 80064d2:	9a04      	ldr	r2, [sp, #16]
 80064d4:	b9d8      	cbnz	r0, 800650e <_svfiprintf_r+0xe6>
 80064d6:	06d0      	lsls	r0, r2, #27
 80064d8:	bf44      	itt	mi
 80064da:	2320      	movmi	r3, #32
 80064dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e0:	0711      	lsls	r1, r2, #28
 80064e2:	bf44      	itt	mi
 80064e4:	232b      	movmi	r3, #43	; 0x2b
 80064e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ea:	f89a 3000 	ldrb.w	r3, [sl]
 80064ee:	2b2a      	cmp	r3, #42	; 0x2a
 80064f0:	d015      	beq.n	800651e <_svfiprintf_r+0xf6>
 80064f2:	9a07      	ldr	r2, [sp, #28]
 80064f4:	4654      	mov	r4, sl
 80064f6:	2000      	movs	r0, #0
 80064f8:	f04f 0c0a 	mov.w	ip, #10
 80064fc:	4621      	mov	r1, r4
 80064fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006502:	3b30      	subs	r3, #48	; 0x30
 8006504:	2b09      	cmp	r3, #9
 8006506:	d94d      	bls.n	80065a4 <_svfiprintf_r+0x17c>
 8006508:	b1b0      	cbz	r0, 8006538 <_svfiprintf_r+0x110>
 800650a:	9207      	str	r2, [sp, #28]
 800650c:	e014      	b.n	8006538 <_svfiprintf_r+0x110>
 800650e:	eba0 0308 	sub.w	r3, r0, r8
 8006512:	fa09 f303 	lsl.w	r3, r9, r3
 8006516:	4313      	orrs	r3, r2
 8006518:	9304      	str	r3, [sp, #16]
 800651a:	46a2      	mov	sl, r4
 800651c:	e7d2      	b.n	80064c4 <_svfiprintf_r+0x9c>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	1d19      	adds	r1, r3, #4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	9103      	str	r1, [sp, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	bfbb      	ittet	lt
 800652a:	425b      	neglt	r3, r3
 800652c:	f042 0202 	orrlt.w	r2, r2, #2
 8006530:	9307      	strge	r3, [sp, #28]
 8006532:	9307      	strlt	r3, [sp, #28]
 8006534:	bfb8      	it	lt
 8006536:	9204      	strlt	r2, [sp, #16]
 8006538:	7823      	ldrb	r3, [r4, #0]
 800653a:	2b2e      	cmp	r3, #46	; 0x2e
 800653c:	d10c      	bne.n	8006558 <_svfiprintf_r+0x130>
 800653e:	7863      	ldrb	r3, [r4, #1]
 8006540:	2b2a      	cmp	r3, #42	; 0x2a
 8006542:	d134      	bne.n	80065ae <_svfiprintf_r+0x186>
 8006544:	9b03      	ldr	r3, [sp, #12]
 8006546:	1d1a      	adds	r2, r3, #4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	9203      	str	r2, [sp, #12]
 800654c:	2b00      	cmp	r3, #0
 800654e:	bfb8      	it	lt
 8006550:	f04f 33ff 	movlt.w	r3, #4294967295
 8006554:	3402      	adds	r4, #2
 8006556:	9305      	str	r3, [sp, #20]
 8006558:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006620 <_svfiprintf_r+0x1f8>
 800655c:	7821      	ldrb	r1, [r4, #0]
 800655e:	2203      	movs	r2, #3
 8006560:	4650      	mov	r0, sl
 8006562:	f7f9 fe3d 	bl	80001e0 <memchr>
 8006566:	b138      	cbz	r0, 8006578 <_svfiprintf_r+0x150>
 8006568:	9b04      	ldr	r3, [sp, #16]
 800656a:	eba0 000a 	sub.w	r0, r0, sl
 800656e:	2240      	movs	r2, #64	; 0x40
 8006570:	4082      	lsls	r2, r0
 8006572:	4313      	orrs	r3, r2
 8006574:	3401      	adds	r4, #1
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800657c:	4825      	ldr	r0, [pc, #148]	; (8006614 <_svfiprintf_r+0x1ec>)
 800657e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006582:	2206      	movs	r2, #6
 8006584:	f7f9 fe2c 	bl	80001e0 <memchr>
 8006588:	2800      	cmp	r0, #0
 800658a:	d038      	beq.n	80065fe <_svfiprintf_r+0x1d6>
 800658c:	4b22      	ldr	r3, [pc, #136]	; (8006618 <_svfiprintf_r+0x1f0>)
 800658e:	bb1b      	cbnz	r3, 80065d8 <_svfiprintf_r+0x1b0>
 8006590:	9b03      	ldr	r3, [sp, #12]
 8006592:	3307      	adds	r3, #7
 8006594:	f023 0307 	bic.w	r3, r3, #7
 8006598:	3308      	adds	r3, #8
 800659a:	9303      	str	r3, [sp, #12]
 800659c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659e:	4433      	add	r3, r6
 80065a0:	9309      	str	r3, [sp, #36]	; 0x24
 80065a2:	e768      	b.n	8006476 <_svfiprintf_r+0x4e>
 80065a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a8:	460c      	mov	r4, r1
 80065aa:	2001      	movs	r0, #1
 80065ac:	e7a6      	b.n	80064fc <_svfiprintf_r+0xd4>
 80065ae:	2300      	movs	r3, #0
 80065b0:	3401      	adds	r4, #1
 80065b2:	9305      	str	r3, [sp, #20]
 80065b4:	4619      	mov	r1, r3
 80065b6:	f04f 0c0a 	mov.w	ip, #10
 80065ba:	4620      	mov	r0, r4
 80065bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c0:	3a30      	subs	r2, #48	; 0x30
 80065c2:	2a09      	cmp	r2, #9
 80065c4:	d903      	bls.n	80065ce <_svfiprintf_r+0x1a6>
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d0c6      	beq.n	8006558 <_svfiprintf_r+0x130>
 80065ca:	9105      	str	r1, [sp, #20]
 80065cc:	e7c4      	b.n	8006558 <_svfiprintf_r+0x130>
 80065ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d2:	4604      	mov	r4, r0
 80065d4:	2301      	movs	r3, #1
 80065d6:	e7f0      	b.n	80065ba <_svfiprintf_r+0x192>
 80065d8:	ab03      	add	r3, sp, #12
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	462a      	mov	r2, r5
 80065de:	4b0f      	ldr	r3, [pc, #60]	; (800661c <_svfiprintf_r+0x1f4>)
 80065e0:	a904      	add	r1, sp, #16
 80065e2:	4638      	mov	r0, r7
 80065e4:	f7fd fefa 	bl	80043dc <_printf_float>
 80065e8:	1c42      	adds	r2, r0, #1
 80065ea:	4606      	mov	r6, r0
 80065ec:	d1d6      	bne.n	800659c <_svfiprintf_r+0x174>
 80065ee:	89ab      	ldrh	r3, [r5, #12]
 80065f0:	065b      	lsls	r3, r3, #25
 80065f2:	f53f af2d 	bmi.w	8006450 <_svfiprintf_r+0x28>
 80065f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065f8:	b01d      	add	sp, #116	; 0x74
 80065fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fe:	ab03      	add	r3, sp, #12
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	462a      	mov	r2, r5
 8006604:	4b05      	ldr	r3, [pc, #20]	; (800661c <_svfiprintf_r+0x1f4>)
 8006606:	a904      	add	r1, sp, #16
 8006608:	4638      	mov	r0, r7
 800660a:	f7fe f98b 	bl	8004924 <_printf_i>
 800660e:	e7eb      	b.n	80065e8 <_svfiprintf_r+0x1c0>
 8006610:	0801b12c 	.word	0x0801b12c
 8006614:	0801b136 	.word	0x0801b136
 8006618:	080043dd 	.word	0x080043dd
 800661c:	08006375 	.word	0x08006375
 8006620:	0801b132 	.word	0x0801b132

08006624 <__sflush_r>:
 8006624:	898a      	ldrh	r2, [r1, #12]
 8006626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800662a:	4605      	mov	r5, r0
 800662c:	0710      	lsls	r0, r2, #28
 800662e:	460c      	mov	r4, r1
 8006630:	d458      	bmi.n	80066e4 <__sflush_r+0xc0>
 8006632:	684b      	ldr	r3, [r1, #4]
 8006634:	2b00      	cmp	r3, #0
 8006636:	dc05      	bgt.n	8006644 <__sflush_r+0x20>
 8006638:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800663a:	2b00      	cmp	r3, #0
 800663c:	dc02      	bgt.n	8006644 <__sflush_r+0x20>
 800663e:	2000      	movs	r0, #0
 8006640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006646:	2e00      	cmp	r6, #0
 8006648:	d0f9      	beq.n	800663e <__sflush_r+0x1a>
 800664a:	2300      	movs	r3, #0
 800664c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006650:	682f      	ldr	r7, [r5, #0]
 8006652:	6a21      	ldr	r1, [r4, #32]
 8006654:	602b      	str	r3, [r5, #0]
 8006656:	d032      	beq.n	80066be <__sflush_r+0x9a>
 8006658:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	075a      	lsls	r2, r3, #29
 800665e:	d505      	bpl.n	800666c <__sflush_r+0x48>
 8006660:	6863      	ldr	r3, [r4, #4]
 8006662:	1ac0      	subs	r0, r0, r3
 8006664:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006666:	b10b      	cbz	r3, 800666c <__sflush_r+0x48>
 8006668:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800666a:	1ac0      	subs	r0, r0, r3
 800666c:	2300      	movs	r3, #0
 800666e:	4602      	mov	r2, r0
 8006670:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006672:	6a21      	ldr	r1, [r4, #32]
 8006674:	4628      	mov	r0, r5
 8006676:	47b0      	blx	r6
 8006678:	1c43      	adds	r3, r0, #1
 800667a:	89a3      	ldrh	r3, [r4, #12]
 800667c:	d106      	bne.n	800668c <__sflush_r+0x68>
 800667e:	6829      	ldr	r1, [r5, #0]
 8006680:	291d      	cmp	r1, #29
 8006682:	d82b      	bhi.n	80066dc <__sflush_r+0xb8>
 8006684:	4a29      	ldr	r2, [pc, #164]	; (800672c <__sflush_r+0x108>)
 8006686:	410a      	asrs	r2, r1
 8006688:	07d6      	lsls	r6, r2, #31
 800668a:	d427      	bmi.n	80066dc <__sflush_r+0xb8>
 800668c:	2200      	movs	r2, #0
 800668e:	6062      	str	r2, [r4, #4]
 8006690:	04d9      	lsls	r1, r3, #19
 8006692:	6922      	ldr	r2, [r4, #16]
 8006694:	6022      	str	r2, [r4, #0]
 8006696:	d504      	bpl.n	80066a2 <__sflush_r+0x7e>
 8006698:	1c42      	adds	r2, r0, #1
 800669a:	d101      	bne.n	80066a0 <__sflush_r+0x7c>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	b903      	cbnz	r3, 80066a2 <__sflush_r+0x7e>
 80066a0:	6560      	str	r0, [r4, #84]	; 0x54
 80066a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066a4:	602f      	str	r7, [r5, #0]
 80066a6:	2900      	cmp	r1, #0
 80066a8:	d0c9      	beq.n	800663e <__sflush_r+0x1a>
 80066aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066ae:	4299      	cmp	r1, r3
 80066b0:	d002      	beq.n	80066b8 <__sflush_r+0x94>
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7ff fa96 	bl	8005be4 <_free_r>
 80066b8:	2000      	movs	r0, #0
 80066ba:	6360      	str	r0, [r4, #52]	; 0x34
 80066bc:	e7c0      	b.n	8006640 <__sflush_r+0x1c>
 80066be:	2301      	movs	r3, #1
 80066c0:	4628      	mov	r0, r5
 80066c2:	47b0      	blx	r6
 80066c4:	1c41      	adds	r1, r0, #1
 80066c6:	d1c8      	bne.n	800665a <__sflush_r+0x36>
 80066c8:	682b      	ldr	r3, [r5, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0c5      	beq.n	800665a <__sflush_r+0x36>
 80066ce:	2b1d      	cmp	r3, #29
 80066d0:	d001      	beq.n	80066d6 <__sflush_r+0xb2>
 80066d2:	2b16      	cmp	r3, #22
 80066d4:	d101      	bne.n	80066da <__sflush_r+0xb6>
 80066d6:	602f      	str	r7, [r5, #0]
 80066d8:	e7b1      	b.n	800663e <__sflush_r+0x1a>
 80066da:	89a3      	ldrh	r3, [r4, #12]
 80066dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066e0:	81a3      	strh	r3, [r4, #12]
 80066e2:	e7ad      	b.n	8006640 <__sflush_r+0x1c>
 80066e4:	690f      	ldr	r7, [r1, #16]
 80066e6:	2f00      	cmp	r7, #0
 80066e8:	d0a9      	beq.n	800663e <__sflush_r+0x1a>
 80066ea:	0793      	lsls	r3, r2, #30
 80066ec:	680e      	ldr	r6, [r1, #0]
 80066ee:	bf08      	it	eq
 80066f0:	694b      	ldreq	r3, [r1, #20]
 80066f2:	600f      	str	r7, [r1, #0]
 80066f4:	bf18      	it	ne
 80066f6:	2300      	movne	r3, #0
 80066f8:	eba6 0807 	sub.w	r8, r6, r7
 80066fc:	608b      	str	r3, [r1, #8]
 80066fe:	f1b8 0f00 	cmp.w	r8, #0
 8006702:	dd9c      	ble.n	800663e <__sflush_r+0x1a>
 8006704:	6a21      	ldr	r1, [r4, #32]
 8006706:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006708:	4643      	mov	r3, r8
 800670a:	463a      	mov	r2, r7
 800670c:	4628      	mov	r0, r5
 800670e:	47b0      	blx	r6
 8006710:	2800      	cmp	r0, #0
 8006712:	dc06      	bgt.n	8006722 <__sflush_r+0xfe>
 8006714:	89a3      	ldrh	r3, [r4, #12]
 8006716:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800671a:	81a3      	strh	r3, [r4, #12]
 800671c:	f04f 30ff 	mov.w	r0, #4294967295
 8006720:	e78e      	b.n	8006640 <__sflush_r+0x1c>
 8006722:	4407      	add	r7, r0
 8006724:	eba8 0800 	sub.w	r8, r8, r0
 8006728:	e7e9      	b.n	80066fe <__sflush_r+0xda>
 800672a:	bf00      	nop
 800672c:	dfbffffe 	.word	0xdfbffffe

08006730 <_fflush_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	690b      	ldr	r3, [r1, #16]
 8006734:	4605      	mov	r5, r0
 8006736:	460c      	mov	r4, r1
 8006738:	b913      	cbnz	r3, 8006740 <_fflush_r+0x10>
 800673a:	2500      	movs	r5, #0
 800673c:	4628      	mov	r0, r5
 800673e:	bd38      	pop	{r3, r4, r5, pc}
 8006740:	b118      	cbz	r0, 800674a <_fflush_r+0x1a>
 8006742:	6a03      	ldr	r3, [r0, #32]
 8006744:	b90b      	cbnz	r3, 800674a <_fflush_r+0x1a>
 8006746:	f7fe fa9b 	bl	8004c80 <__sinit>
 800674a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f3      	beq.n	800673a <_fflush_r+0xa>
 8006752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006754:	07d0      	lsls	r0, r2, #31
 8006756:	d404      	bmi.n	8006762 <_fflush_r+0x32>
 8006758:	0599      	lsls	r1, r3, #22
 800675a:	d402      	bmi.n	8006762 <_fflush_r+0x32>
 800675c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800675e:	f7fe fbb6 	bl	8004ece <__retarget_lock_acquire_recursive>
 8006762:	4628      	mov	r0, r5
 8006764:	4621      	mov	r1, r4
 8006766:	f7ff ff5d 	bl	8006624 <__sflush_r>
 800676a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800676c:	07da      	lsls	r2, r3, #31
 800676e:	4605      	mov	r5, r0
 8006770:	d4e4      	bmi.n	800673c <_fflush_r+0xc>
 8006772:	89a3      	ldrh	r3, [r4, #12]
 8006774:	059b      	lsls	r3, r3, #22
 8006776:	d4e1      	bmi.n	800673c <_fflush_r+0xc>
 8006778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800677a:	f7fe fba9 	bl	8004ed0 <__retarget_lock_release_recursive>
 800677e:	e7dd      	b.n	800673c <_fflush_r+0xc>

08006780 <memmove>:
 8006780:	4288      	cmp	r0, r1
 8006782:	b510      	push	{r4, lr}
 8006784:	eb01 0402 	add.w	r4, r1, r2
 8006788:	d902      	bls.n	8006790 <memmove+0x10>
 800678a:	4284      	cmp	r4, r0
 800678c:	4623      	mov	r3, r4
 800678e:	d807      	bhi.n	80067a0 <memmove+0x20>
 8006790:	1e43      	subs	r3, r0, #1
 8006792:	42a1      	cmp	r1, r4
 8006794:	d008      	beq.n	80067a8 <memmove+0x28>
 8006796:	f811 2b01 	ldrb.w	r2, [r1], #1
 800679a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800679e:	e7f8      	b.n	8006792 <memmove+0x12>
 80067a0:	4402      	add	r2, r0
 80067a2:	4601      	mov	r1, r0
 80067a4:	428a      	cmp	r2, r1
 80067a6:	d100      	bne.n	80067aa <memmove+0x2a>
 80067a8:	bd10      	pop	{r4, pc}
 80067aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80067b2:	e7f7      	b.n	80067a4 <memmove+0x24>

080067b4 <__assert_func>:
 80067b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067b6:	4614      	mov	r4, r2
 80067b8:	461a      	mov	r2, r3
 80067ba:	4b09      	ldr	r3, [pc, #36]	; (80067e0 <__assert_func+0x2c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4605      	mov	r5, r0
 80067c0:	68d8      	ldr	r0, [r3, #12]
 80067c2:	b14c      	cbz	r4, 80067d8 <__assert_func+0x24>
 80067c4:	4b07      	ldr	r3, [pc, #28]	; (80067e4 <__assert_func+0x30>)
 80067c6:	9100      	str	r1, [sp, #0]
 80067c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80067cc:	4906      	ldr	r1, [pc, #24]	; (80067e8 <__assert_func+0x34>)
 80067ce:	462b      	mov	r3, r5
 80067d0:	f000 f872 	bl	80068b8 <fiprintf>
 80067d4:	f000 f882 	bl	80068dc <abort>
 80067d8:	4b04      	ldr	r3, [pc, #16]	; (80067ec <__assert_func+0x38>)
 80067da:	461c      	mov	r4, r3
 80067dc:	e7f3      	b.n	80067c6 <__assert_func+0x12>
 80067de:	bf00      	nop
 80067e0:	20000068 	.word	0x20000068
 80067e4:	0801b147 	.word	0x0801b147
 80067e8:	0801b154 	.word	0x0801b154
 80067ec:	0801b182 	.word	0x0801b182

080067f0 <_calloc_r>:
 80067f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067f2:	fba1 2402 	umull	r2, r4, r1, r2
 80067f6:	b94c      	cbnz	r4, 800680c <_calloc_r+0x1c>
 80067f8:	4611      	mov	r1, r2
 80067fa:	9201      	str	r2, [sp, #4]
 80067fc:	f7fd fcc2 	bl	8004184 <_malloc_r>
 8006800:	9a01      	ldr	r2, [sp, #4]
 8006802:	4605      	mov	r5, r0
 8006804:	b930      	cbnz	r0, 8006814 <_calloc_r+0x24>
 8006806:	4628      	mov	r0, r5
 8006808:	b003      	add	sp, #12
 800680a:	bd30      	pop	{r4, r5, pc}
 800680c:	220c      	movs	r2, #12
 800680e:	6002      	str	r2, [r0, #0]
 8006810:	2500      	movs	r5, #0
 8006812:	e7f8      	b.n	8006806 <_calloc_r+0x16>
 8006814:	4621      	mov	r1, r4
 8006816:	f7fe facc 	bl	8004db2 <memset>
 800681a:	e7f4      	b.n	8006806 <_calloc_r+0x16>

0800681c <__ascii_mbtowc>:
 800681c:	b082      	sub	sp, #8
 800681e:	b901      	cbnz	r1, 8006822 <__ascii_mbtowc+0x6>
 8006820:	a901      	add	r1, sp, #4
 8006822:	b142      	cbz	r2, 8006836 <__ascii_mbtowc+0x1a>
 8006824:	b14b      	cbz	r3, 800683a <__ascii_mbtowc+0x1e>
 8006826:	7813      	ldrb	r3, [r2, #0]
 8006828:	600b      	str	r3, [r1, #0]
 800682a:	7812      	ldrb	r2, [r2, #0]
 800682c:	1e10      	subs	r0, r2, #0
 800682e:	bf18      	it	ne
 8006830:	2001      	movne	r0, #1
 8006832:	b002      	add	sp, #8
 8006834:	4770      	bx	lr
 8006836:	4610      	mov	r0, r2
 8006838:	e7fb      	b.n	8006832 <__ascii_mbtowc+0x16>
 800683a:	f06f 0001 	mvn.w	r0, #1
 800683e:	e7f8      	b.n	8006832 <__ascii_mbtowc+0x16>

08006840 <_realloc_r>:
 8006840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	4680      	mov	r8, r0
 8006846:	4614      	mov	r4, r2
 8006848:	460e      	mov	r6, r1
 800684a:	b921      	cbnz	r1, 8006856 <_realloc_r+0x16>
 800684c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006850:	4611      	mov	r1, r2
 8006852:	f7fd bc97 	b.w	8004184 <_malloc_r>
 8006856:	b92a      	cbnz	r2, 8006864 <_realloc_r+0x24>
 8006858:	f7ff f9c4 	bl	8005be4 <_free_r>
 800685c:	4625      	mov	r5, r4
 800685e:	4628      	mov	r0, r5
 8006860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006864:	f000 f841 	bl	80068ea <_malloc_usable_size_r>
 8006868:	4284      	cmp	r4, r0
 800686a:	4607      	mov	r7, r0
 800686c:	d802      	bhi.n	8006874 <_realloc_r+0x34>
 800686e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006872:	d812      	bhi.n	800689a <_realloc_r+0x5a>
 8006874:	4621      	mov	r1, r4
 8006876:	4640      	mov	r0, r8
 8006878:	f7fd fc84 	bl	8004184 <_malloc_r>
 800687c:	4605      	mov	r5, r0
 800687e:	2800      	cmp	r0, #0
 8006880:	d0ed      	beq.n	800685e <_realloc_r+0x1e>
 8006882:	42bc      	cmp	r4, r7
 8006884:	4622      	mov	r2, r4
 8006886:	4631      	mov	r1, r6
 8006888:	bf28      	it	cs
 800688a:	463a      	movcs	r2, r7
 800688c:	f7fe fb21 	bl	8004ed2 <memcpy>
 8006890:	4631      	mov	r1, r6
 8006892:	4640      	mov	r0, r8
 8006894:	f7ff f9a6 	bl	8005be4 <_free_r>
 8006898:	e7e1      	b.n	800685e <_realloc_r+0x1e>
 800689a:	4635      	mov	r5, r6
 800689c:	e7df      	b.n	800685e <_realloc_r+0x1e>

0800689e <__ascii_wctomb>:
 800689e:	b149      	cbz	r1, 80068b4 <__ascii_wctomb+0x16>
 80068a0:	2aff      	cmp	r2, #255	; 0xff
 80068a2:	bf85      	ittet	hi
 80068a4:	238a      	movhi	r3, #138	; 0x8a
 80068a6:	6003      	strhi	r3, [r0, #0]
 80068a8:	700a      	strbls	r2, [r1, #0]
 80068aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80068ae:	bf98      	it	ls
 80068b0:	2001      	movls	r0, #1
 80068b2:	4770      	bx	lr
 80068b4:	4608      	mov	r0, r1
 80068b6:	4770      	bx	lr

080068b8 <fiprintf>:
 80068b8:	b40e      	push	{r1, r2, r3}
 80068ba:	b503      	push	{r0, r1, lr}
 80068bc:	4601      	mov	r1, r0
 80068be:	ab03      	add	r3, sp, #12
 80068c0:	4805      	ldr	r0, [pc, #20]	; (80068d8 <fiprintf+0x20>)
 80068c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80068c6:	6800      	ldr	r0, [r0, #0]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	f000 f83f 	bl	800694c <_vfiprintf_r>
 80068ce:	b002      	add	sp, #8
 80068d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068d4:	b003      	add	sp, #12
 80068d6:	4770      	bx	lr
 80068d8:	20000068 	.word	0x20000068

080068dc <abort>:
 80068dc:	b508      	push	{r3, lr}
 80068de:	2006      	movs	r0, #6
 80068e0:	f000 fa0c 	bl	8006cfc <raise>
 80068e4:	2001      	movs	r0, #1
 80068e6:	f7fc fbfd 	bl	80030e4 <_exit>

080068ea <_malloc_usable_size_r>:
 80068ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ee:	1f18      	subs	r0, r3, #4
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	bfbc      	itt	lt
 80068f4:	580b      	ldrlt	r3, [r1, r0]
 80068f6:	18c0      	addlt	r0, r0, r3
 80068f8:	4770      	bx	lr

080068fa <__sfputc_r>:
 80068fa:	6893      	ldr	r3, [r2, #8]
 80068fc:	3b01      	subs	r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	b410      	push	{r4}
 8006902:	6093      	str	r3, [r2, #8]
 8006904:	da08      	bge.n	8006918 <__sfputc_r+0x1e>
 8006906:	6994      	ldr	r4, [r2, #24]
 8006908:	42a3      	cmp	r3, r4
 800690a:	db01      	blt.n	8006910 <__sfputc_r+0x16>
 800690c:	290a      	cmp	r1, #10
 800690e:	d103      	bne.n	8006918 <__sfputc_r+0x1e>
 8006910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006914:	f000 b934 	b.w	8006b80 <__swbuf_r>
 8006918:	6813      	ldr	r3, [r2, #0]
 800691a:	1c58      	adds	r0, r3, #1
 800691c:	6010      	str	r0, [r2, #0]
 800691e:	7019      	strb	r1, [r3, #0]
 8006920:	4608      	mov	r0, r1
 8006922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006926:	4770      	bx	lr

08006928 <__sfputs_r>:
 8006928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800692a:	4606      	mov	r6, r0
 800692c:	460f      	mov	r7, r1
 800692e:	4614      	mov	r4, r2
 8006930:	18d5      	adds	r5, r2, r3
 8006932:	42ac      	cmp	r4, r5
 8006934:	d101      	bne.n	800693a <__sfputs_r+0x12>
 8006936:	2000      	movs	r0, #0
 8006938:	e007      	b.n	800694a <__sfputs_r+0x22>
 800693a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693e:	463a      	mov	r2, r7
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff ffda 	bl	80068fa <__sfputc_r>
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d1f3      	bne.n	8006932 <__sfputs_r+0xa>
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800694c <_vfiprintf_r>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	460d      	mov	r5, r1
 8006952:	b09d      	sub	sp, #116	; 0x74
 8006954:	4614      	mov	r4, r2
 8006956:	4698      	mov	r8, r3
 8006958:	4606      	mov	r6, r0
 800695a:	b118      	cbz	r0, 8006964 <_vfiprintf_r+0x18>
 800695c:	6a03      	ldr	r3, [r0, #32]
 800695e:	b90b      	cbnz	r3, 8006964 <_vfiprintf_r+0x18>
 8006960:	f7fe f98e 	bl	8004c80 <__sinit>
 8006964:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006966:	07d9      	lsls	r1, r3, #31
 8006968:	d405      	bmi.n	8006976 <_vfiprintf_r+0x2a>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	059a      	lsls	r2, r3, #22
 800696e:	d402      	bmi.n	8006976 <_vfiprintf_r+0x2a>
 8006970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006972:	f7fe faac 	bl	8004ece <__retarget_lock_acquire_recursive>
 8006976:	89ab      	ldrh	r3, [r5, #12]
 8006978:	071b      	lsls	r3, r3, #28
 800697a:	d501      	bpl.n	8006980 <_vfiprintf_r+0x34>
 800697c:	692b      	ldr	r3, [r5, #16]
 800697e:	b99b      	cbnz	r3, 80069a8 <_vfiprintf_r+0x5c>
 8006980:	4629      	mov	r1, r5
 8006982:	4630      	mov	r0, r6
 8006984:	f000 f93a 	bl	8006bfc <__swsetup_r>
 8006988:	b170      	cbz	r0, 80069a8 <_vfiprintf_r+0x5c>
 800698a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800698c:	07dc      	lsls	r4, r3, #31
 800698e:	d504      	bpl.n	800699a <_vfiprintf_r+0x4e>
 8006990:	f04f 30ff 	mov.w	r0, #4294967295
 8006994:	b01d      	add	sp, #116	; 0x74
 8006996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	0598      	lsls	r0, r3, #22
 800699e:	d4f7      	bmi.n	8006990 <_vfiprintf_r+0x44>
 80069a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a2:	f7fe fa95 	bl	8004ed0 <__retarget_lock_release_recursive>
 80069a6:	e7f3      	b.n	8006990 <_vfiprintf_r+0x44>
 80069a8:	2300      	movs	r3, #0
 80069aa:	9309      	str	r3, [sp, #36]	; 0x24
 80069ac:	2320      	movs	r3, #32
 80069ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80069b6:	2330      	movs	r3, #48	; 0x30
 80069b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006b6c <_vfiprintf_r+0x220>
 80069bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069c0:	f04f 0901 	mov.w	r9, #1
 80069c4:	4623      	mov	r3, r4
 80069c6:	469a      	mov	sl, r3
 80069c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069cc:	b10a      	cbz	r2, 80069d2 <_vfiprintf_r+0x86>
 80069ce:	2a25      	cmp	r2, #37	; 0x25
 80069d0:	d1f9      	bne.n	80069c6 <_vfiprintf_r+0x7a>
 80069d2:	ebba 0b04 	subs.w	fp, sl, r4
 80069d6:	d00b      	beq.n	80069f0 <_vfiprintf_r+0xa4>
 80069d8:	465b      	mov	r3, fp
 80069da:	4622      	mov	r2, r4
 80069dc:	4629      	mov	r1, r5
 80069de:	4630      	mov	r0, r6
 80069e0:	f7ff ffa2 	bl	8006928 <__sfputs_r>
 80069e4:	3001      	adds	r0, #1
 80069e6:	f000 80a9 	beq.w	8006b3c <_vfiprintf_r+0x1f0>
 80069ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069ec:	445a      	add	r2, fp
 80069ee:	9209      	str	r2, [sp, #36]	; 0x24
 80069f0:	f89a 3000 	ldrb.w	r3, [sl]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80a1 	beq.w	8006b3c <_vfiprintf_r+0x1f0>
 80069fa:	2300      	movs	r3, #0
 80069fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a04:	f10a 0a01 	add.w	sl, sl, #1
 8006a08:	9304      	str	r3, [sp, #16]
 8006a0a:	9307      	str	r3, [sp, #28]
 8006a0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a10:	931a      	str	r3, [sp, #104]	; 0x68
 8006a12:	4654      	mov	r4, sl
 8006a14:	2205      	movs	r2, #5
 8006a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1a:	4854      	ldr	r0, [pc, #336]	; (8006b6c <_vfiprintf_r+0x220>)
 8006a1c:	f7f9 fbe0 	bl	80001e0 <memchr>
 8006a20:	9a04      	ldr	r2, [sp, #16]
 8006a22:	b9d8      	cbnz	r0, 8006a5c <_vfiprintf_r+0x110>
 8006a24:	06d1      	lsls	r1, r2, #27
 8006a26:	bf44      	itt	mi
 8006a28:	2320      	movmi	r3, #32
 8006a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a2e:	0713      	lsls	r3, r2, #28
 8006a30:	bf44      	itt	mi
 8006a32:	232b      	movmi	r3, #43	; 0x2b
 8006a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a38:	f89a 3000 	ldrb.w	r3, [sl]
 8006a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a3e:	d015      	beq.n	8006a6c <_vfiprintf_r+0x120>
 8006a40:	9a07      	ldr	r2, [sp, #28]
 8006a42:	4654      	mov	r4, sl
 8006a44:	2000      	movs	r0, #0
 8006a46:	f04f 0c0a 	mov.w	ip, #10
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a50:	3b30      	subs	r3, #48	; 0x30
 8006a52:	2b09      	cmp	r3, #9
 8006a54:	d94d      	bls.n	8006af2 <_vfiprintf_r+0x1a6>
 8006a56:	b1b0      	cbz	r0, 8006a86 <_vfiprintf_r+0x13a>
 8006a58:	9207      	str	r2, [sp, #28]
 8006a5a:	e014      	b.n	8006a86 <_vfiprintf_r+0x13a>
 8006a5c:	eba0 0308 	sub.w	r3, r0, r8
 8006a60:	fa09 f303 	lsl.w	r3, r9, r3
 8006a64:	4313      	orrs	r3, r2
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	46a2      	mov	sl, r4
 8006a6a:	e7d2      	b.n	8006a12 <_vfiprintf_r+0xc6>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	1d19      	adds	r1, r3, #4
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	9103      	str	r1, [sp, #12]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	bfbb      	ittet	lt
 8006a78:	425b      	neglt	r3, r3
 8006a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8006a7e:	9307      	strge	r3, [sp, #28]
 8006a80:	9307      	strlt	r3, [sp, #28]
 8006a82:	bfb8      	it	lt
 8006a84:	9204      	strlt	r2, [sp, #16]
 8006a86:	7823      	ldrb	r3, [r4, #0]
 8006a88:	2b2e      	cmp	r3, #46	; 0x2e
 8006a8a:	d10c      	bne.n	8006aa6 <_vfiprintf_r+0x15a>
 8006a8c:	7863      	ldrb	r3, [r4, #1]
 8006a8e:	2b2a      	cmp	r3, #42	; 0x2a
 8006a90:	d134      	bne.n	8006afc <_vfiprintf_r+0x1b0>
 8006a92:	9b03      	ldr	r3, [sp, #12]
 8006a94:	1d1a      	adds	r2, r3, #4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	9203      	str	r2, [sp, #12]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	bfb8      	it	lt
 8006a9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006aa2:	3402      	adds	r4, #2
 8006aa4:	9305      	str	r3, [sp, #20]
 8006aa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006b7c <_vfiprintf_r+0x230>
 8006aaa:	7821      	ldrb	r1, [r4, #0]
 8006aac:	2203      	movs	r2, #3
 8006aae:	4650      	mov	r0, sl
 8006ab0:	f7f9 fb96 	bl	80001e0 <memchr>
 8006ab4:	b138      	cbz	r0, 8006ac6 <_vfiprintf_r+0x17a>
 8006ab6:	9b04      	ldr	r3, [sp, #16]
 8006ab8:	eba0 000a 	sub.w	r0, r0, sl
 8006abc:	2240      	movs	r2, #64	; 0x40
 8006abe:	4082      	lsls	r2, r0
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	3401      	adds	r4, #1
 8006ac4:	9304      	str	r3, [sp, #16]
 8006ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aca:	4829      	ldr	r0, [pc, #164]	; (8006b70 <_vfiprintf_r+0x224>)
 8006acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ad0:	2206      	movs	r2, #6
 8006ad2:	f7f9 fb85 	bl	80001e0 <memchr>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d03f      	beq.n	8006b5a <_vfiprintf_r+0x20e>
 8006ada:	4b26      	ldr	r3, [pc, #152]	; (8006b74 <_vfiprintf_r+0x228>)
 8006adc:	bb1b      	cbnz	r3, 8006b26 <_vfiprintf_r+0x1da>
 8006ade:	9b03      	ldr	r3, [sp, #12]
 8006ae0:	3307      	adds	r3, #7
 8006ae2:	f023 0307 	bic.w	r3, r3, #7
 8006ae6:	3308      	adds	r3, #8
 8006ae8:	9303      	str	r3, [sp, #12]
 8006aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aec:	443b      	add	r3, r7
 8006aee:	9309      	str	r3, [sp, #36]	; 0x24
 8006af0:	e768      	b.n	80069c4 <_vfiprintf_r+0x78>
 8006af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006af6:	460c      	mov	r4, r1
 8006af8:	2001      	movs	r0, #1
 8006afa:	e7a6      	b.n	8006a4a <_vfiprintf_r+0xfe>
 8006afc:	2300      	movs	r3, #0
 8006afe:	3401      	adds	r4, #1
 8006b00:	9305      	str	r3, [sp, #20]
 8006b02:	4619      	mov	r1, r3
 8006b04:	f04f 0c0a 	mov.w	ip, #10
 8006b08:	4620      	mov	r0, r4
 8006b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b0e:	3a30      	subs	r2, #48	; 0x30
 8006b10:	2a09      	cmp	r2, #9
 8006b12:	d903      	bls.n	8006b1c <_vfiprintf_r+0x1d0>
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0c6      	beq.n	8006aa6 <_vfiprintf_r+0x15a>
 8006b18:	9105      	str	r1, [sp, #20]
 8006b1a:	e7c4      	b.n	8006aa6 <_vfiprintf_r+0x15a>
 8006b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b20:	4604      	mov	r4, r0
 8006b22:	2301      	movs	r3, #1
 8006b24:	e7f0      	b.n	8006b08 <_vfiprintf_r+0x1bc>
 8006b26:	ab03      	add	r3, sp, #12
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	4b12      	ldr	r3, [pc, #72]	; (8006b78 <_vfiprintf_r+0x22c>)
 8006b2e:	a904      	add	r1, sp, #16
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7fd fc53 	bl	80043dc <_printf_float>
 8006b36:	4607      	mov	r7, r0
 8006b38:	1c78      	adds	r0, r7, #1
 8006b3a:	d1d6      	bne.n	8006aea <_vfiprintf_r+0x19e>
 8006b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b3e:	07d9      	lsls	r1, r3, #31
 8006b40:	d405      	bmi.n	8006b4e <_vfiprintf_r+0x202>
 8006b42:	89ab      	ldrh	r3, [r5, #12]
 8006b44:	059a      	lsls	r2, r3, #22
 8006b46:	d402      	bmi.n	8006b4e <_vfiprintf_r+0x202>
 8006b48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4a:	f7fe f9c1 	bl	8004ed0 <__retarget_lock_release_recursive>
 8006b4e:	89ab      	ldrh	r3, [r5, #12]
 8006b50:	065b      	lsls	r3, r3, #25
 8006b52:	f53f af1d 	bmi.w	8006990 <_vfiprintf_r+0x44>
 8006b56:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b58:	e71c      	b.n	8006994 <_vfiprintf_r+0x48>
 8006b5a:	ab03      	add	r3, sp, #12
 8006b5c:	9300      	str	r3, [sp, #0]
 8006b5e:	462a      	mov	r2, r5
 8006b60:	4b05      	ldr	r3, [pc, #20]	; (8006b78 <_vfiprintf_r+0x22c>)
 8006b62:	a904      	add	r1, sp, #16
 8006b64:	4630      	mov	r0, r6
 8006b66:	f7fd fedd 	bl	8004924 <_printf_i>
 8006b6a:	e7e4      	b.n	8006b36 <_vfiprintf_r+0x1ea>
 8006b6c:	0801b12c 	.word	0x0801b12c
 8006b70:	0801b136 	.word	0x0801b136
 8006b74:	080043dd 	.word	0x080043dd
 8006b78:	08006929 	.word	0x08006929
 8006b7c:	0801b132 	.word	0x0801b132

08006b80 <__swbuf_r>:
 8006b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b82:	460e      	mov	r6, r1
 8006b84:	4614      	mov	r4, r2
 8006b86:	4605      	mov	r5, r0
 8006b88:	b118      	cbz	r0, 8006b92 <__swbuf_r+0x12>
 8006b8a:	6a03      	ldr	r3, [r0, #32]
 8006b8c:	b90b      	cbnz	r3, 8006b92 <__swbuf_r+0x12>
 8006b8e:	f7fe f877 	bl	8004c80 <__sinit>
 8006b92:	69a3      	ldr	r3, [r4, #24]
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	89a3      	ldrh	r3, [r4, #12]
 8006b98:	071a      	lsls	r2, r3, #28
 8006b9a:	d525      	bpl.n	8006be8 <__swbuf_r+0x68>
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	b31b      	cbz	r3, 8006be8 <__swbuf_r+0x68>
 8006ba0:	6823      	ldr	r3, [r4, #0]
 8006ba2:	6922      	ldr	r2, [r4, #16]
 8006ba4:	1a98      	subs	r0, r3, r2
 8006ba6:	6963      	ldr	r3, [r4, #20]
 8006ba8:	b2f6      	uxtb	r6, r6
 8006baa:	4283      	cmp	r3, r0
 8006bac:	4637      	mov	r7, r6
 8006bae:	dc04      	bgt.n	8006bba <__swbuf_r+0x3a>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f7ff fdbc 	bl	8006730 <_fflush_r>
 8006bb8:	b9e0      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006bba:	68a3      	ldr	r3, [r4, #8]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	60a3      	str	r3, [r4, #8]
 8006bc0:	6823      	ldr	r3, [r4, #0]
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	701e      	strb	r6, [r3, #0]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	1c43      	adds	r3, r0, #1
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d004      	beq.n	8006bda <__swbuf_r+0x5a>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	07db      	lsls	r3, r3, #31
 8006bd4:	d506      	bpl.n	8006be4 <__swbuf_r+0x64>
 8006bd6:	2e0a      	cmp	r6, #10
 8006bd8:	d104      	bne.n	8006be4 <__swbuf_r+0x64>
 8006bda:	4621      	mov	r1, r4
 8006bdc:	4628      	mov	r0, r5
 8006bde:	f7ff fda7 	bl	8006730 <_fflush_r>
 8006be2:	b938      	cbnz	r0, 8006bf4 <__swbuf_r+0x74>
 8006be4:	4638      	mov	r0, r7
 8006be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006be8:	4621      	mov	r1, r4
 8006bea:	4628      	mov	r0, r5
 8006bec:	f000 f806 	bl	8006bfc <__swsetup_r>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0d5      	beq.n	8006ba0 <__swbuf_r+0x20>
 8006bf4:	f04f 37ff 	mov.w	r7, #4294967295
 8006bf8:	e7f4      	b.n	8006be4 <__swbuf_r+0x64>
	...

08006bfc <__swsetup_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <__swsetup_r+0xac>)
 8006c00:	4605      	mov	r5, r0
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	460c      	mov	r4, r1
 8006c06:	b118      	cbz	r0, 8006c10 <__swsetup_r+0x14>
 8006c08:	6a03      	ldr	r3, [r0, #32]
 8006c0a:	b90b      	cbnz	r3, 8006c10 <__swsetup_r+0x14>
 8006c0c:	f7fe f838 	bl	8004c80 <__sinit>
 8006c10:	89a3      	ldrh	r3, [r4, #12]
 8006c12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c16:	0718      	lsls	r0, r3, #28
 8006c18:	d422      	bmi.n	8006c60 <__swsetup_r+0x64>
 8006c1a:	06d9      	lsls	r1, r3, #27
 8006c1c:	d407      	bmi.n	8006c2e <__swsetup_r+0x32>
 8006c1e:	2309      	movs	r3, #9
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006c26:	81a3      	strh	r3, [r4, #12]
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295
 8006c2c:	e034      	b.n	8006c98 <__swsetup_r+0x9c>
 8006c2e:	0758      	lsls	r0, r3, #29
 8006c30:	d512      	bpl.n	8006c58 <__swsetup_r+0x5c>
 8006c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c34:	b141      	cbz	r1, 8006c48 <__swsetup_r+0x4c>
 8006c36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c3a:	4299      	cmp	r1, r3
 8006c3c:	d002      	beq.n	8006c44 <__swsetup_r+0x48>
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f7fe ffd0 	bl	8005be4 <_free_r>
 8006c44:	2300      	movs	r3, #0
 8006c46:	6363      	str	r3, [r4, #52]	; 0x34
 8006c48:	89a3      	ldrh	r3, [r4, #12]
 8006c4a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	2300      	movs	r3, #0
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	6923      	ldr	r3, [r4, #16]
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f043 0308 	orr.w	r3, r3, #8
 8006c5e:	81a3      	strh	r3, [r4, #12]
 8006c60:	6923      	ldr	r3, [r4, #16]
 8006c62:	b94b      	cbnz	r3, 8006c78 <__swsetup_r+0x7c>
 8006c64:	89a3      	ldrh	r3, [r4, #12]
 8006c66:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d003      	beq.n	8006c78 <__swsetup_r+0x7c>
 8006c70:	4621      	mov	r1, r4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f000 f884 	bl	8006d80 <__smakebuf_r>
 8006c78:	89a0      	ldrh	r0, [r4, #12]
 8006c7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c7e:	f010 0301 	ands.w	r3, r0, #1
 8006c82:	d00a      	beq.n	8006c9a <__swsetup_r+0x9e>
 8006c84:	2300      	movs	r3, #0
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6963      	ldr	r3, [r4, #20]
 8006c8a:	425b      	negs	r3, r3
 8006c8c:	61a3      	str	r3, [r4, #24]
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b943      	cbnz	r3, 8006ca4 <__swsetup_r+0xa8>
 8006c92:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006c96:	d1c4      	bne.n	8006c22 <__swsetup_r+0x26>
 8006c98:	bd38      	pop	{r3, r4, r5, pc}
 8006c9a:	0781      	lsls	r1, r0, #30
 8006c9c:	bf58      	it	pl
 8006c9e:	6963      	ldrpl	r3, [r4, #20]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	e7f4      	b.n	8006c8e <__swsetup_r+0x92>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	e7f7      	b.n	8006c98 <__swsetup_r+0x9c>
 8006ca8:	20000068 	.word	0x20000068

08006cac <_raise_r>:
 8006cac:	291f      	cmp	r1, #31
 8006cae:	b538      	push	{r3, r4, r5, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	d904      	bls.n	8006cc0 <_raise_r+0x14>
 8006cb6:	2316      	movs	r3, #22
 8006cb8:	6003      	str	r3, [r0, #0]
 8006cba:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbe:	bd38      	pop	{r3, r4, r5, pc}
 8006cc0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006cc2:	b112      	cbz	r2, 8006cca <_raise_r+0x1e>
 8006cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006cc8:	b94b      	cbnz	r3, 8006cde <_raise_r+0x32>
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f000 f830 	bl	8006d30 <_getpid_r>
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4601      	mov	r1, r0
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cda:	f000 b817 	b.w	8006d0c <_kill_r>
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d00a      	beq.n	8006cf8 <_raise_r+0x4c>
 8006ce2:	1c59      	adds	r1, r3, #1
 8006ce4:	d103      	bne.n	8006cee <_raise_r+0x42>
 8006ce6:	2316      	movs	r3, #22
 8006ce8:	6003      	str	r3, [r0, #0]
 8006cea:	2001      	movs	r0, #1
 8006cec:	e7e7      	b.n	8006cbe <_raise_r+0x12>
 8006cee:	2400      	movs	r4, #0
 8006cf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	4798      	blx	r3
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	e7e0      	b.n	8006cbe <_raise_r+0x12>

08006cfc <raise>:
 8006cfc:	4b02      	ldr	r3, [pc, #8]	; (8006d08 <raise+0xc>)
 8006cfe:	4601      	mov	r1, r0
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	f7ff bfd3 	b.w	8006cac <_raise_r>
 8006d06:	bf00      	nop
 8006d08:	20000068 	.word	0x20000068

08006d0c <_kill_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d07      	ldr	r5, [pc, #28]	; (8006d2c <_kill_r+0x20>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	602b      	str	r3, [r5, #0]
 8006d1a:	f7fc f9d3 	bl	80030c4 <_kill>
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d102      	bne.n	8006d28 <_kill_r+0x1c>
 8006d22:	682b      	ldr	r3, [r5, #0]
 8006d24:	b103      	cbz	r3, 8006d28 <_kill_r+0x1c>
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	bd38      	pop	{r3, r4, r5, pc}
 8006d2a:	bf00      	nop
 8006d2c:	2000034c 	.word	0x2000034c

08006d30 <_getpid_r>:
 8006d30:	f7fc b9c0 	b.w	80030b4 <_getpid>

08006d34 <__swhatbuf_r>:
 8006d34:	b570      	push	{r4, r5, r6, lr}
 8006d36:	460c      	mov	r4, r1
 8006d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3c:	2900      	cmp	r1, #0
 8006d3e:	b096      	sub	sp, #88	; 0x58
 8006d40:	4615      	mov	r5, r2
 8006d42:	461e      	mov	r6, r3
 8006d44:	da0d      	bge.n	8006d62 <__swhatbuf_r+0x2e>
 8006d46:	89a3      	ldrh	r3, [r4, #12]
 8006d48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006d4c:	f04f 0100 	mov.w	r1, #0
 8006d50:	bf0c      	ite	eq
 8006d52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006d56:	2340      	movne	r3, #64	; 0x40
 8006d58:	2000      	movs	r0, #0
 8006d5a:	6031      	str	r1, [r6, #0]
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	b016      	add	sp, #88	; 0x58
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	466a      	mov	r2, sp
 8006d64:	f000 f848 	bl	8006df8 <_fstat_r>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	dbec      	blt.n	8006d46 <__swhatbuf_r+0x12>
 8006d6c:	9901      	ldr	r1, [sp, #4]
 8006d6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006d72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006d76:	4259      	negs	r1, r3
 8006d78:	4159      	adcs	r1, r3
 8006d7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d7e:	e7eb      	b.n	8006d58 <__swhatbuf_r+0x24>

08006d80 <__smakebuf_r>:
 8006d80:	898b      	ldrh	r3, [r1, #12]
 8006d82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d84:	079d      	lsls	r5, r3, #30
 8006d86:	4606      	mov	r6, r0
 8006d88:	460c      	mov	r4, r1
 8006d8a:	d507      	bpl.n	8006d9c <__smakebuf_r+0x1c>
 8006d8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	6123      	str	r3, [r4, #16]
 8006d94:	2301      	movs	r3, #1
 8006d96:	6163      	str	r3, [r4, #20]
 8006d98:	b002      	add	sp, #8
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	ab01      	add	r3, sp, #4
 8006d9e:	466a      	mov	r2, sp
 8006da0:	f7ff ffc8 	bl	8006d34 <__swhatbuf_r>
 8006da4:	9900      	ldr	r1, [sp, #0]
 8006da6:	4605      	mov	r5, r0
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7fd f9eb 	bl	8004184 <_malloc_r>
 8006dae:	b948      	cbnz	r0, 8006dc4 <__smakebuf_r+0x44>
 8006db0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006db4:	059a      	lsls	r2, r3, #22
 8006db6:	d4ef      	bmi.n	8006d98 <__smakebuf_r+0x18>
 8006db8:	f023 0303 	bic.w	r3, r3, #3
 8006dbc:	f043 0302 	orr.w	r3, r3, #2
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	e7e3      	b.n	8006d8c <__smakebuf_r+0xc>
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	6020      	str	r0, [r4, #0]
 8006dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dcc:	81a3      	strh	r3, [r4, #12]
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	6163      	str	r3, [r4, #20]
 8006dd2:	9b01      	ldr	r3, [sp, #4]
 8006dd4:	6120      	str	r0, [r4, #16]
 8006dd6:	b15b      	cbz	r3, 8006df0 <__smakebuf_r+0x70>
 8006dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f000 f81d 	bl	8006e1c <_isatty_r>
 8006de2:	b128      	cbz	r0, 8006df0 <__smakebuf_r+0x70>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	81a3      	strh	r3, [r4, #12]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	431d      	orrs	r5, r3
 8006df4:	81a5      	strh	r5, [r4, #12]
 8006df6:	e7cf      	b.n	8006d98 <__smakebuf_r+0x18>

08006df8 <_fstat_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_fstat_r+0x20>)
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	4604      	mov	r4, r0
 8006e00:	4608      	mov	r0, r1
 8006e02:	4611      	mov	r1, r2
 8006e04:	602b      	str	r3, [r5, #0]
 8006e06:	f7fc f9bc 	bl	8003182 <_fstat>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d102      	bne.n	8006e14 <_fstat_r+0x1c>
 8006e0e:	682b      	ldr	r3, [r5, #0]
 8006e10:	b103      	cbz	r3, 8006e14 <_fstat_r+0x1c>
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	bd38      	pop	{r3, r4, r5, pc}
 8006e16:	bf00      	nop
 8006e18:	2000034c 	.word	0x2000034c

08006e1c <_isatty_r>:
 8006e1c:	b538      	push	{r3, r4, r5, lr}
 8006e1e:	4d06      	ldr	r5, [pc, #24]	; (8006e38 <_isatty_r+0x1c>)
 8006e20:	2300      	movs	r3, #0
 8006e22:	4604      	mov	r4, r0
 8006e24:	4608      	mov	r0, r1
 8006e26:	602b      	str	r3, [r5, #0]
 8006e28:	f7fc f9bb 	bl	80031a2 <_isatty>
 8006e2c:	1c43      	adds	r3, r0, #1
 8006e2e:	d102      	bne.n	8006e36 <_isatty_r+0x1a>
 8006e30:	682b      	ldr	r3, [r5, #0]
 8006e32:	b103      	cbz	r3, 8006e36 <_isatty_r+0x1a>
 8006e34:	6023      	str	r3, [r4, #0]
 8006e36:	bd38      	pop	{r3, r4, r5, pc}
 8006e38:	2000034c 	.word	0x2000034c
 8006e3c:	00000000 	.word	0x00000000

08006e40 <cos>:
 8006e40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e42:	ec53 2b10 	vmov	r2, r3, d0
 8006e46:	4826      	ldr	r0, [pc, #152]	; (8006ee0 <cos+0xa0>)
 8006e48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e4c:	4281      	cmp	r1, r0
 8006e4e:	dc06      	bgt.n	8006e5e <cos+0x1e>
 8006e50:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006ed8 <cos+0x98>
 8006e54:	b005      	add	sp, #20
 8006e56:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e5a:	f000 b89d 	b.w	8006f98 <__kernel_cos>
 8006e5e:	4821      	ldr	r0, [pc, #132]	; (8006ee4 <cos+0xa4>)
 8006e60:	4281      	cmp	r1, r0
 8006e62:	dd09      	ble.n	8006e78 <cos+0x38>
 8006e64:	ee10 0a10 	vmov	r0, s0
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f7f9 fa15 	bl	8000298 <__aeabi_dsub>
 8006e6e:	ec41 0b10 	vmov	d0, r0, r1
 8006e72:	b005      	add	sp, #20
 8006e74:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e78:	4668      	mov	r0, sp
 8006e7a:	f000 fa15 	bl	80072a8 <__ieee754_rem_pio2>
 8006e7e:	f000 0003 	and.w	r0, r0, #3
 8006e82:	2801      	cmp	r0, #1
 8006e84:	d00b      	beq.n	8006e9e <cos+0x5e>
 8006e86:	2802      	cmp	r0, #2
 8006e88:	d016      	beq.n	8006eb8 <cos+0x78>
 8006e8a:	b9e0      	cbnz	r0, 8006ec6 <cos+0x86>
 8006e8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e90:	ed9d 0b00 	vldr	d0, [sp]
 8006e94:	f000 f880 	bl	8006f98 <__kernel_cos>
 8006e98:	ec51 0b10 	vmov	r0, r1, d0
 8006e9c:	e7e7      	b.n	8006e6e <cos+0x2e>
 8006e9e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ea2:	ed9d 0b00 	vldr	d0, [sp]
 8006ea6:	f000 f93f 	bl	8007128 <__kernel_sin>
 8006eaa:	ec53 2b10 	vmov	r2, r3, d0
 8006eae:	ee10 0a10 	vmov	r0, s0
 8006eb2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006eb6:	e7da      	b.n	8006e6e <cos+0x2e>
 8006eb8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ebc:	ed9d 0b00 	vldr	d0, [sp]
 8006ec0:	f000 f86a 	bl	8006f98 <__kernel_cos>
 8006ec4:	e7f1      	b.n	8006eaa <cos+0x6a>
 8006ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006eca:	ed9d 0b00 	vldr	d0, [sp]
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f000 f92a 	bl	8007128 <__kernel_sin>
 8006ed4:	e7e0      	b.n	8006e98 <cos+0x58>
 8006ed6:	bf00      	nop
	...
 8006ee0:	3fe921fb 	.word	0x3fe921fb
 8006ee4:	7fefffff 	.word	0x7fefffff

08006ee8 <sin>:
 8006ee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eea:	ec53 2b10 	vmov	r2, r3, d0
 8006eee:	4828      	ldr	r0, [pc, #160]	; (8006f90 <sin+0xa8>)
 8006ef0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ef4:	4281      	cmp	r1, r0
 8006ef6:	dc07      	bgt.n	8006f08 <sin+0x20>
 8006ef8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006f88 <sin+0xa0>
 8006efc:	2000      	movs	r0, #0
 8006efe:	b005      	add	sp, #20
 8006f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f04:	f000 b910 	b.w	8007128 <__kernel_sin>
 8006f08:	4822      	ldr	r0, [pc, #136]	; (8006f94 <sin+0xac>)
 8006f0a:	4281      	cmp	r1, r0
 8006f0c:	dd09      	ble.n	8006f22 <sin+0x3a>
 8006f0e:	ee10 0a10 	vmov	r0, s0
 8006f12:	4619      	mov	r1, r3
 8006f14:	f7f9 f9c0 	bl	8000298 <__aeabi_dsub>
 8006f18:	ec41 0b10 	vmov	d0, r0, r1
 8006f1c:	b005      	add	sp, #20
 8006f1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f22:	4668      	mov	r0, sp
 8006f24:	f000 f9c0 	bl	80072a8 <__ieee754_rem_pio2>
 8006f28:	f000 0003 	and.w	r0, r0, #3
 8006f2c:	2801      	cmp	r0, #1
 8006f2e:	d00c      	beq.n	8006f4a <sin+0x62>
 8006f30:	2802      	cmp	r0, #2
 8006f32:	d011      	beq.n	8006f58 <sin+0x70>
 8006f34:	b9f0      	cbnz	r0, 8006f74 <sin+0x8c>
 8006f36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f3a:	ed9d 0b00 	vldr	d0, [sp]
 8006f3e:	2001      	movs	r0, #1
 8006f40:	f000 f8f2 	bl	8007128 <__kernel_sin>
 8006f44:	ec51 0b10 	vmov	r0, r1, d0
 8006f48:	e7e6      	b.n	8006f18 <sin+0x30>
 8006f4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f4e:	ed9d 0b00 	vldr	d0, [sp]
 8006f52:	f000 f821 	bl	8006f98 <__kernel_cos>
 8006f56:	e7f5      	b.n	8006f44 <sin+0x5c>
 8006f58:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f5c:	ed9d 0b00 	vldr	d0, [sp]
 8006f60:	2001      	movs	r0, #1
 8006f62:	f000 f8e1 	bl	8007128 <__kernel_sin>
 8006f66:	ec53 2b10 	vmov	r2, r3, d0
 8006f6a:	ee10 0a10 	vmov	r0, s0
 8006f6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f72:	e7d1      	b.n	8006f18 <sin+0x30>
 8006f74:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f78:	ed9d 0b00 	vldr	d0, [sp]
 8006f7c:	f000 f80c 	bl	8006f98 <__kernel_cos>
 8006f80:	e7f1      	b.n	8006f66 <sin+0x7e>
 8006f82:	bf00      	nop
 8006f84:	f3af 8000 	nop.w
	...
 8006f90:	3fe921fb 	.word	0x3fe921fb
 8006f94:	7fefffff 	.word	0x7fefffff

08006f98 <__kernel_cos>:
 8006f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	ec57 6b10 	vmov	r6, r7, d0
 8006fa0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8006fa4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8006fa8:	ed8d 1b00 	vstr	d1, [sp]
 8006fac:	da07      	bge.n	8006fbe <__kernel_cos+0x26>
 8006fae:	ee10 0a10 	vmov	r0, s0
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	f7f9 fdd8 	bl	8000b68 <__aeabi_d2iz>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	f000 8088 	beq.w	80070ce <__kernel_cos+0x136>
 8006fbe:	4632      	mov	r2, r6
 8006fc0:	463b      	mov	r3, r7
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4639      	mov	r1, r7
 8006fc6:	f7f9 fb1f 	bl	8000608 <__aeabi_dmul>
 8006fca:	4b51      	ldr	r3, [pc, #324]	; (8007110 <__kernel_cos+0x178>)
 8006fcc:	2200      	movs	r2, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	f7f9 fb19 	bl	8000608 <__aeabi_dmul>
 8006fd6:	a340      	add	r3, pc, #256	; (adr r3, 80070d8 <__kernel_cos+0x140>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	4682      	mov	sl, r0
 8006fde:	468b      	mov	fp, r1
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	4629      	mov	r1, r5
 8006fe4:	f7f9 fb10 	bl	8000608 <__aeabi_dmul>
 8006fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80070e0 <__kernel_cos+0x148>)
 8006fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fee:	f7f9 f955 	bl	800029c <__adddf3>
 8006ff2:	4622      	mov	r2, r4
 8006ff4:	462b      	mov	r3, r5
 8006ff6:	f7f9 fb07 	bl	8000608 <__aeabi_dmul>
 8006ffa:	a33b      	add	r3, pc, #236	; (adr r3, 80070e8 <__kernel_cos+0x150>)
 8006ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007000:	f7f9 f94a 	bl	8000298 <__aeabi_dsub>
 8007004:	4622      	mov	r2, r4
 8007006:	462b      	mov	r3, r5
 8007008:	f7f9 fafe 	bl	8000608 <__aeabi_dmul>
 800700c:	a338      	add	r3, pc, #224	; (adr r3, 80070f0 <__kernel_cos+0x158>)
 800700e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007012:	f7f9 f943 	bl	800029c <__adddf3>
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	f7f9 faf5 	bl	8000608 <__aeabi_dmul>
 800701e:	a336      	add	r3, pc, #216	; (adr r3, 80070f8 <__kernel_cos+0x160>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 f938 	bl	8000298 <__aeabi_dsub>
 8007028:	4622      	mov	r2, r4
 800702a:	462b      	mov	r3, r5
 800702c:	f7f9 faec 	bl	8000608 <__aeabi_dmul>
 8007030:	a333      	add	r3, pc, #204	; (adr r3, 8007100 <__kernel_cos+0x168>)
 8007032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007036:	f7f9 f931 	bl	800029c <__adddf3>
 800703a:	4622      	mov	r2, r4
 800703c:	462b      	mov	r3, r5
 800703e:	f7f9 fae3 	bl	8000608 <__aeabi_dmul>
 8007042:	4622      	mov	r2, r4
 8007044:	462b      	mov	r3, r5
 8007046:	f7f9 fadf 	bl	8000608 <__aeabi_dmul>
 800704a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800704e:	4604      	mov	r4, r0
 8007050:	460d      	mov	r5, r1
 8007052:	4630      	mov	r0, r6
 8007054:	4639      	mov	r1, r7
 8007056:	f7f9 fad7 	bl	8000608 <__aeabi_dmul>
 800705a:	460b      	mov	r3, r1
 800705c:	4602      	mov	r2, r0
 800705e:	4629      	mov	r1, r5
 8007060:	4620      	mov	r0, r4
 8007062:	f7f9 f919 	bl	8000298 <__aeabi_dsub>
 8007066:	4b2b      	ldr	r3, [pc, #172]	; (8007114 <__kernel_cos+0x17c>)
 8007068:	4598      	cmp	r8, r3
 800706a:	4606      	mov	r6, r0
 800706c:	460f      	mov	r7, r1
 800706e:	dc10      	bgt.n	8007092 <__kernel_cos+0xfa>
 8007070:	4602      	mov	r2, r0
 8007072:	460b      	mov	r3, r1
 8007074:	4650      	mov	r0, sl
 8007076:	4659      	mov	r1, fp
 8007078:	f7f9 f90e 	bl	8000298 <__aeabi_dsub>
 800707c:	460b      	mov	r3, r1
 800707e:	4926      	ldr	r1, [pc, #152]	; (8007118 <__kernel_cos+0x180>)
 8007080:	4602      	mov	r2, r0
 8007082:	2000      	movs	r0, #0
 8007084:	f7f9 f908 	bl	8000298 <__aeabi_dsub>
 8007088:	ec41 0b10 	vmov	d0, r0, r1
 800708c:	b003      	add	sp, #12
 800708e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007092:	4b22      	ldr	r3, [pc, #136]	; (800711c <__kernel_cos+0x184>)
 8007094:	4920      	ldr	r1, [pc, #128]	; (8007118 <__kernel_cos+0x180>)
 8007096:	4598      	cmp	r8, r3
 8007098:	bfcc      	ite	gt
 800709a:	4d21      	ldrgt	r5, [pc, #132]	; (8007120 <__kernel_cos+0x188>)
 800709c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80070a0:	2400      	movs	r4, #0
 80070a2:	4622      	mov	r2, r4
 80070a4:	462b      	mov	r3, r5
 80070a6:	2000      	movs	r0, #0
 80070a8:	f7f9 f8f6 	bl	8000298 <__aeabi_dsub>
 80070ac:	4622      	mov	r2, r4
 80070ae:	4680      	mov	r8, r0
 80070b0:	4689      	mov	r9, r1
 80070b2:	462b      	mov	r3, r5
 80070b4:	4650      	mov	r0, sl
 80070b6:	4659      	mov	r1, fp
 80070b8:	f7f9 f8ee 	bl	8000298 <__aeabi_dsub>
 80070bc:	4632      	mov	r2, r6
 80070be:	463b      	mov	r3, r7
 80070c0:	f7f9 f8ea 	bl	8000298 <__aeabi_dsub>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4640      	mov	r0, r8
 80070ca:	4649      	mov	r1, r9
 80070cc:	e7da      	b.n	8007084 <__kernel_cos+0xec>
 80070ce:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007108 <__kernel_cos+0x170>
 80070d2:	e7db      	b.n	800708c <__kernel_cos+0xf4>
 80070d4:	f3af 8000 	nop.w
 80070d8:	be8838d4 	.word	0xbe8838d4
 80070dc:	bda8fae9 	.word	0xbda8fae9
 80070e0:	bdb4b1c4 	.word	0xbdb4b1c4
 80070e4:	3e21ee9e 	.word	0x3e21ee9e
 80070e8:	809c52ad 	.word	0x809c52ad
 80070ec:	3e927e4f 	.word	0x3e927e4f
 80070f0:	19cb1590 	.word	0x19cb1590
 80070f4:	3efa01a0 	.word	0x3efa01a0
 80070f8:	16c15177 	.word	0x16c15177
 80070fc:	3f56c16c 	.word	0x3f56c16c
 8007100:	5555554c 	.word	0x5555554c
 8007104:	3fa55555 	.word	0x3fa55555
 8007108:	00000000 	.word	0x00000000
 800710c:	3ff00000 	.word	0x3ff00000
 8007110:	3fe00000 	.word	0x3fe00000
 8007114:	3fd33332 	.word	0x3fd33332
 8007118:	3ff00000 	.word	0x3ff00000
 800711c:	3fe90000 	.word	0x3fe90000
 8007120:	3fd20000 	.word	0x3fd20000
 8007124:	00000000 	.word	0x00000000

08007128 <__kernel_sin>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	ed2d 8b04 	vpush	{d8-d9}
 8007130:	eeb0 8a41 	vmov.f32	s16, s2
 8007134:	eef0 8a61 	vmov.f32	s17, s3
 8007138:	ec55 4b10 	vmov	r4, r5, d0
 800713c:	b083      	sub	sp, #12
 800713e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007142:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007146:	9001      	str	r0, [sp, #4]
 8007148:	da06      	bge.n	8007158 <__kernel_sin+0x30>
 800714a:	ee10 0a10 	vmov	r0, s0
 800714e:	4629      	mov	r1, r5
 8007150:	f7f9 fd0a 	bl	8000b68 <__aeabi_d2iz>
 8007154:	2800      	cmp	r0, #0
 8007156:	d051      	beq.n	80071fc <__kernel_sin+0xd4>
 8007158:	4622      	mov	r2, r4
 800715a:	462b      	mov	r3, r5
 800715c:	4620      	mov	r0, r4
 800715e:	4629      	mov	r1, r5
 8007160:	f7f9 fa52 	bl	8000608 <__aeabi_dmul>
 8007164:	4682      	mov	sl, r0
 8007166:	468b      	mov	fp, r1
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4620      	mov	r0, r4
 800716e:	4629      	mov	r1, r5
 8007170:	f7f9 fa4a 	bl	8000608 <__aeabi_dmul>
 8007174:	a341      	add	r3, pc, #260	; (adr r3, 800727c <__kernel_sin+0x154>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	4680      	mov	r8, r0
 800717c:	4689      	mov	r9, r1
 800717e:	4650      	mov	r0, sl
 8007180:	4659      	mov	r1, fp
 8007182:	f7f9 fa41 	bl	8000608 <__aeabi_dmul>
 8007186:	a33f      	add	r3, pc, #252	; (adr r3, 8007284 <__kernel_sin+0x15c>)
 8007188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718c:	f7f9 f884 	bl	8000298 <__aeabi_dsub>
 8007190:	4652      	mov	r2, sl
 8007192:	465b      	mov	r3, fp
 8007194:	f7f9 fa38 	bl	8000608 <__aeabi_dmul>
 8007198:	a33c      	add	r3, pc, #240	; (adr r3, 800728c <__kernel_sin+0x164>)
 800719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800719e:	f7f9 f87d 	bl	800029c <__adddf3>
 80071a2:	4652      	mov	r2, sl
 80071a4:	465b      	mov	r3, fp
 80071a6:	f7f9 fa2f 	bl	8000608 <__aeabi_dmul>
 80071aa:	a33a      	add	r3, pc, #232	; (adr r3, 8007294 <__kernel_sin+0x16c>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 f872 	bl	8000298 <__aeabi_dsub>
 80071b4:	4652      	mov	r2, sl
 80071b6:	465b      	mov	r3, fp
 80071b8:	f7f9 fa26 	bl	8000608 <__aeabi_dmul>
 80071bc:	a337      	add	r3, pc, #220	; (adr r3, 800729c <__kernel_sin+0x174>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	f7f9 f86b 	bl	800029c <__adddf3>
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	4606      	mov	r6, r0
 80071ca:	460f      	mov	r7, r1
 80071cc:	b9eb      	cbnz	r3, 800720a <__kernel_sin+0xe2>
 80071ce:	4602      	mov	r2, r0
 80071d0:	460b      	mov	r3, r1
 80071d2:	4650      	mov	r0, sl
 80071d4:	4659      	mov	r1, fp
 80071d6:	f7f9 fa17 	bl	8000608 <__aeabi_dmul>
 80071da:	a325      	add	r3, pc, #148	; (adr r3, 8007270 <__kernel_sin+0x148>)
 80071dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e0:	f7f9 f85a 	bl	8000298 <__aeabi_dsub>
 80071e4:	4642      	mov	r2, r8
 80071e6:	464b      	mov	r3, r9
 80071e8:	f7f9 fa0e 	bl	8000608 <__aeabi_dmul>
 80071ec:	4602      	mov	r2, r0
 80071ee:	460b      	mov	r3, r1
 80071f0:	4620      	mov	r0, r4
 80071f2:	4629      	mov	r1, r5
 80071f4:	f7f9 f852 	bl	800029c <__adddf3>
 80071f8:	4604      	mov	r4, r0
 80071fa:	460d      	mov	r5, r1
 80071fc:	ec45 4b10 	vmov	d0, r4, r5
 8007200:	b003      	add	sp, #12
 8007202:	ecbd 8b04 	vpop	{d8-d9}
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800720a:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <__kernel_sin+0x150>)
 800720c:	ec51 0b18 	vmov	r0, r1, d8
 8007210:	2200      	movs	r2, #0
 8007212:	f7f9 f9f9 	bl	8000608 <__aeabi_dmul>
 8007216:	4632      	mov	r2, r6
 8007218:	ec41 0b19 	vmov	d9, r0, r1
 800721c:	463b      	mov	r3, r7
 800721e:	4640      	mov	r0, r8
 8007220:	4649      	mov	r1, r9
 8007222:	f7f9 f9f1 	bl	8000608 <__aeabi_dmul>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	ec51 0b19 	vmov	r0, r1, d9
 800722e:	f7f9 f833 	bl	8000298 <__aeabi_dsub>
 8007232:	4652      	mov	r2, sl
 8007234:	465b      	mov	r3, fp
 8007236:	f7f9 f9e7 	bl	8000608 <__aeabi_dmul>
 800723a:	ec53 2b18 	vmov	r2, r3, d8
 800723e:	f7f9 f82b 	bl	8000298 <__aeabi_dsub>
 8007242:	a30b      	add	r3, pc, #44	; (adr r3, 8007270 <__kernel_sin+0x148>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	4640      	mov	r0, r8
 800724e:	4649      	mov	r1, r9
 8007250:	f7f9 f9da 	bl	8000608 <__aeabi_dmul>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f7f9 f81e 	bl	800029c <__adddf3>
 8007260:	4602      	mov	r2, r0
 8007262:	460b      	mov	r3, r1
 8007264:	4620      	mov	r0, r4
 8007266:	4629      	mov	r1, r5
 8007268:	f7f9 f816 	bl	8000298 <__aeabi_dsub>
 800726c:	e7c4      	b.n	80071f8 <__kernel_sin+0xd0>
 800726e:	bf00      	nop
 8007270:	55555549 	.word	0x55555549
 8007274:	3fc55555 	.word	0x3fc55555
 8007278:	3fe00000 	.word	0x3fe00000
 800727c:	5acfd57c 	.word	0x5acfd57c
 8007280:	3de5d93a 	.word	0x3de5d93a
 8007284:	8a2b9ceb 	.word	0x8a2b9ceb
 8007288:	3e5ae5e6 	.word	0x3e5ae5e6
 800728c:	57b1fe7d 	.word	0x57b1fe7d
 8007290:	3ec71de3 	.word	0x3ec71de3
 8007294:	19c161d5 	.word	0x19c161d5
 8007298:	3f2a01a0 	.word	0x3f2a01a0
 800729c:	1110f8a6 	.word	0x1110f8a6
 80072a0:	3f811111 	.word	0x3f811111
 80072a4:	00000000 	.word	0x00000000

080072a8 <__ieee754_rem_pio2>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	ed2d 8b02 	vpush	{d8}
 80072b0:	ec55 4b10 	vmov	r4, r5, d0
 80072b4:	4bca      	ldr	r3, [pc, #808]	; (80075e0 <__ieee754_rem_pio2+0x338>)
 80072b6:	b08b      	sub	sp, #44	; 0x2c
 80072b8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80072bc:	4598      	cmp	r8, r3
 80072be:	4682      	mov	sl, r0
 80072c0:	9502      	str	r5, [sp, #8]
 80072c2:	dc08      	bgt.n	80072d6 <__ieee754_rem_pio2+0x2e>
 80072c4:	2200      	movs	r2, #0
 80072c6:	2300      	movs	r3, #0
 80072c8:	ed80 0b00 	vstr	d0, [r0]
 80072cc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80072d0:	f04f 0b00 	mov.w	fp, #0
 80072d4:	e028      	b.n	8007328 <__ieee754_rem_pio2+0x80>
 80072d6:	4bc3      	ldr	r3, [pc, #780]	; (80075e4 <__ieee754_rem_pio2+0x33c>)
 80072d8:	4598      	cmp	r8, r3
 80072da:	dc78      	bgt.n	80073ce <__ieee754_rem_pio2+0x126>
 80072dc:	9b02      	ldr	r3, [sp, #8]
 80072de:	4ec2      	ldr	r6, [pc, #776]	; (80075e8 <__ieee754_rem_pio2+0x340>)
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	ee10 0a10 	vmov	r0, s0
 80072e6:	a3b0      	add	r3, pc, #704	; (adr r3, 80075a8 <__ieee754_rem_pio2+0x300>)
 80072e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ec:	4629      	mov	r1, r5
 80072ee:	dd39      	ble.n	8007364 <__ieee754_rem_pio2+0xbc>
 80072f0:	f7f8 ffd2 	bl	8000298 <__aeabi_dsub>
 80072f4:	45b0      	cmp	r8, r6
 80072f6:	4604      	mov	r4, r0
 80072f8:	460d      	mov	r5, r1
 80072fa:	d01b      	beq.n	8007334 <__ieee754_rem_pio2+0x8c>
 80072fc:	a3ac      	add	r3, pc, #688	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x308>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f7f8 ffc9 	bl	8000298 <__aeabi_dsub>
 8007306:	4602      	mov	r2, r0
 8007308:	460b      	mov	r3, r1
 800730a:	e9ca 2300 	strd	r2, r3, [sl]
 800730e:	4620      	mov	r0, r4
 8007310:	4629      	mov	r1, r5
 8007312:	f7f8 ffc1 	bl	8000298 <__aeabi_dsub>
 8007316:	a3a6      	add	r3, pc, #664	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x308>)
 8007318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731c:	f7f8 ffbc 	bl	8000298 <__aeabi_dsub>
 8007320:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007324:	f04f 0b01 	mov.w	fp, #1
 8007328:	4658      	mov	r0, fp
 800732a:	b00b      	add	sp, #44	; 0x2c
 800732c:	ecbd 8b02 	vpop	{d8}
 8007330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007334:	a3a0      	add	r3, pc, #640	; (adr r3, 80075b8 <__ieee754_rem_pio2+0x310>)
 8007336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733a:	f7f8 ffad 	bl	8000298 <__aeabi_dsub>
 800733e:	a3a0      	add	r3, pc, #640	; (adr r3, 80075c0 <__ieee754_rem_pio2+0x318>)
 8007340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007344:	4604      	mov	r4, r0
 8007346:	460d      	mov	r5, r1
 8007348:	f7f8 ffa6 	bl	8000298 <__aeabi_dsub>
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	e9ca 2300 	strd	r2, r3, [sl]
 8007354:	4620      	mov	r0, r4
 8007356:	4629      	mov	r1, r5
 8007358:	f7f8 ff9e 	bl	8000298 <__aeabi_dsub>
 800735c:	a398      	add	r3, pc, #608	; (adr r3, 80075c0 <__ieee754_rem_pio2+0x318>)
 800735e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007362:	e7db      	b.n	800731c <__ieee754_rem_pio2+0x74>
 8007364:	f7f8 ff9a 	bl	800029c <__adddf3>
 8007368:	45b0      	cmp	r8, r6
 800736a:	4604      	mov	r4, r0
 800736c:	460d      	mov	r5, r1
 800736e:	d016      	beq.n	800739e <__ieee754_rem_pio2+0xf6>
 8007370:	a38f      	add	r3, pc, #572	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x308>)
 8007372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007376:	f7f8 ff91 	bl	800029c <__adddf3>
 800737a:	4602      	mov	r2, r0
 800737c:	460b      	mov	r3, r1
 800737e:	e9ca 2300 	strd	r2, r3, [sl]
 8007382:	4620      	mov	r0, r4
 8007384:	4629      	mov	r1, r5
 8007386:	f7f8 ff87 	bl	8000298 <__aeabi_dsub>
 800738a:	a389      	add	r3, pc, #548	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x308>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff84 	bl	800029c <__adddf3>
 8007394:	f04f 3bff 	mov.w	fp, #4294967295
 8007398:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800739c:	e7c4      	b.n	8007328 <__ieee754_rem_pio2+0x80>
 800739e:	a386      	add	r3, pc, #536	; (adr r3, 80075b8 <__ieee754_rem_pio2+0x310>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	f7f8 ff7a 	bl	800029c <__adddf3>
 80073a8:	a385      	add	r3, pc, #532	; (adr r3, 80075c0 <__ieee754_rem_pio2+0x318>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	4604      	mov	r4, r0
 80073b0:	460d      	mov	r5, r1
 80073b2:	f7f8 ff73 	bl	800029c <__adddf3>
 80073b6:	4602      	mov	r2, r0
 80073b8:	460b      	mov	r3, r1
 80073ba:	e9ca 2300 	strd	r2, r3, [sl]
 80073be:	4620      	mov	r0, r4
 80073c0:	4629      	mov	r1, r5
 80073c2:	f7f8 ff69 	bl	8000298 <__aeabi_dsub>
 80073c6:	a37e      	add	r3, pc, #504	; (adr r3, 80075c0 <__ieee754_rem_pio2+0x318>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	e7e0      	b.n	8007390 <__ieee754_rem_pio2+0xe8>
 80073ce:	4b87      	ldr	r3, [pc, #540]	; (80075ec <__ieee754_rem_pio2+0x344>)
 80073d0:	4598      	cmp	r8, r3
 80073d2:	f300 80d8 	bgt.w	8007586 <__ieee754_rem_pio2+0x2de>
 80073d6:	f000 f96d 	bl	80076b4 <fabs>
 80073da:	ec55 4b10 	vmov	r4, r5, d0
 80073de:	ee10 0a10 	vmov	r0, s0
 80073e2:	a379      	add	r3, pc, #484	; (adr r3, 80075c8 <__ieee754_rem_pio2+0x320>)
 80073e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e8:	4629      	mov	r1, r5
 80073ea:	f7f9 f90d 	bl	8000608 <__aeabi_dmul>
 80073ee:	4b80      	ldr	r3, [pc, #512]	; (80075f0 <__ieee754_rem_pio2+0x348>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	f7f8 ff53 	bl	800029c <__adddf3>
 80073f6:	f7f9 fbb7 	bl	8000b68 <__aeabi_d2iz>
 80073fa:	4683      	mov	fp, r0
 80073fc:	f7f9 f89a 	bl	8000534 <__aeabi_i2d>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	ec43 2b18 	vmov	d8, r2, r3
 8007408:	a367      	add	r3, pc, #412	; (adr r3, 80075a8 <__ieee754_rem_pio2+0x300>)
 800740a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740e:	f7f9 f8fb 	bl	8000608 <__aeabi_dmul>
 8007412:	4602      	mov	r2, r0
 8007414:	460b      	mov	r3, r1
 8007416:	4620      	mov	r0, r4
 8007418:	4629      	mov	r1, r5
 800741a:	f7f8 ff3d 	bl	8000298 <__aeabi_dsub>
 800741e:	a364      	add	r3, pc, #400	; (adr r3, 80075b0 <__ieee754_rem_pio2+0x308>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	4606      	mov	r6, r0
 8007426:	460f      	mov	r7, r1
 8007428:	ec51 0b18 	vmov	r0, r1, d8
 800742c:	f7f9 f8ec 	bl	8000608 <__aeabi_dmul>
 8007430:	f1bb 0f1f 	cmp.w	fp, #31
 8007434:	4604      	mov	r4, r0
 8007436:	460d      	mov	r5, r1
 8007438:	dc0d      	bgt.n	8007456 <__ieee754_rem_pio2+0x1ae>
 800743a:	4b6e      	ldr	r3, [pc, #440]	; (80075f4 <__ieee754_rem_pio2+0x34c>)
 800743c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007444:	4543      	cmp	r3, r8
 8007446:	d006      	beq.n	8007456 <__ieee754_rem_pio2+0x1ae>
 8007448:	4622      	mov	r2, r4
 800744a:	462b      	mov	r3, r5
 800744c:	4630      	mov	r0, r6
 800744e:	4639      	mov	r1, r7
 8007450:	f7f8 ff22 	bl	8000298 <__aeabi_dsub>
 8007454:	e00e      	b.n	8007474 <__ieee754_rem_pio2+0x1cc>
 8007456:	462b      	mov	r3, r5
 8007458:	4622      	mov	r2, r4
 800745a:	4630      	mov	r0, r6
 800745c:	4639      	mov	r1, r7
 800745e:	f7f8 ff1b 	bl	8000298 <__aeabi_dsub>
 8007462:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800746c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007470:	2b10      	cmp	r3, #16
 8007472:	dc02      	bgt.n	800747a <__ieee754_rem_pio2+0x1d2>
 8007474:	e9ca 0100 	strd	r0, r1, [sl]
 8007478:	e039      	b.n	80074ee <__ieee754_rem_pio2+0x246>
 800747a:	a34f      	add	r3, pc, #316	; (adr r3, 80075b8 <__ieee754_rem_pio2+0x310>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	ec51 0b18 	vmov	r0, r1, d8
 8007484:	f7f9 f8c0 	bl	8000608 <__aeabi_dmul>
 8007488:	4604      	mov	r4, r0
 800748a:	460d      	mov	r5, r1
 800748c:	4602      	mov	r2, r0
 800748e:	460b      	mov	r3, r1
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f8 ff00 	bl	8000298 <__aeabi_dsub>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4680      	mov	r8, r0
 800749e:	4689      	mov	r9, r1
 80074a0:	4630      	mov	r0, r6
 80074a2:	4639      	mov	r1, r7
 80074a4:	f7f8 fef8 	bl	8000298 <__aeabi_dsub>
 80074a8:	4622      	mov	r2, r4
 80074aa:	462b      	mov	r3, r5
 80074ac:	f7f8 fef4 	bl	8000298 <__aeabi_dsub>
 80074b0:	a343      	add	r3, pc, #268	; (adr r3, 80075c0 <__ieee754_rem_pio2+0x318>)
 80074b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b6:	4604      	mov	r4, r0
 80074b8:	460d      	mov	r5, r1
 80074ba:	ec51 0b18 	vmov	r0, r1, d8
 80074be:	f7f9 f8a3 	bl	8000608 <__aeabi_dmul>
 80074c2:	4622      	mov	r2, r4
 80074c4:	462b      	mov	r3, r5
 80074c6:	f7f8 fee7 	bl	8000298 <__aeabi_dsub>
 80074ca:	4602      	mov	r2, r0
 80074cc:	460b      	mov	r3, r1
 80074ce:	4604      	mov	r4, r0
 80074d0:	460d      	mov	r5, r1
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	f7f8 fedf 	bl	8000298 <__aeabi_dsub>
 80074da:	9a03      	ldr	r2, [sp, #12]
 80074dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b31      	cmp	r3, #49	; 0x31
 80074e4:	dc24      	bgt.n	8007530 <__ieee754_rem_pio2+0x288>
 80074e6:	e9ca 0100 	strd	r0, r1, [sl]
 80074ea:	4646      	mov	r6, r8
 80074ec:	464f      	mov	r7, r9
 80074ee:	e9da 8900 	ldrd	r8, r9, [sl]
 80074f2:	4630      	mov	r0, r6
 80074f4:	4642      	mov	r2, r8
 80074f6:	464b      	mov	r3, r9
 80074f8:	4639      	mov	r1, r7
 80074fa:	f7f8 fecd 	bl	8000298 <__aeabi_dsub>
 80074fe:	462b      	mov	r3, r5
 8007500:	4622      	mov	r2, r4
 8007502:	f7f8 fec9 	bl	8000298 <__aeabi_dsub>
 8007506:	9b02      	ldr	r3, [sp, #8]
 8007508:	2b00      	cmp	r3, #0
 800750a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800750e:	f6bf af0b 	bge.w	8007328 <__ieee754_rem_pio2+0x80>
 8007512:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007516:	f8ca 3004 	str.w	r3, [sl, #4]
 800751a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800751e:	f8ca 8000 	str.w	r8, [sl]
 8007522:	f8ca 0008 	str.w	r0, [sl, #8]
 8007526:	f8ca 300c 	str.w	r3, [sl, #12]
 800752a:	f1cb 0b00 	rsb	fp, fp, #0
 800752e:	e6fb      	b.n	8007328 <__ieee754_rem_pio2+0x80>
 8007530:	a327      	add	r3, pc, #156	; (adr r3, 80075d0 <__ieee754_rem_pio2+0x328>)
 8007532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007536:	ec51 0b18 	vmov	r0, r1, d8
 800753a:	f7f9 f865 	bl	8000608 <__aeabi_dmul>
 800753e:	4604      	mov	r4, r0
 8007540:	460d      	mov	r5, r1
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	4640      	mov	r0, r8
 8007548:	4649      	mov	r1, r9
 800754a:	f7f8 fea5 	bl	8000298 <__aeabi_dsub>
 800754e:	4602      	mov	r2, r0
 8007550:	460b      	mov	r3, r1
 8007552:	4606      	mov	r6, r0
 8007554:	460f      	mov	r7, r1
 8007556:	4640      	mov	r0, r8
 8007558:	4649      	mov	r1, r9
 800755a:	f7f8 fe9d 	bl	8000298 <__aeabi_dsub>
 800755e:	4622      	mov	r2, r4
 8007560:	462b      	mov	r3, r5
 8007562:	f7f8 fe99 	bl	8000298 <__aeabi_dsub>
 8007566:	a31c      	add	r3, pc, #112	; (adr r3, 80075d8 <__ieee754_rem_pio2+0x330>)
 8007568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756c:	4604      	mov	r4, r0
 800756e:	460d      	mov	r5, r1
 8007570:	ec51 0b18 	vmov	r0, r1, d8
 8007574:	f7f9 f848 	bl	8000608 <__aeabi_dmul>
 8007578:	4622      	mov	r2, r4
 800757a:	462b      	mov	r3, r5
 800757c:	f7f8 fe8c 	bl	8000298 <__aeabi_dsub>
 8007580:	4604      	mov	r4, r0
 8007582:	460d      	mov	r5, r1
 8007584:	e760      	b.n	8007448 <__ieee754_rem_pio2+0x1a0>
 8007586:	4b1c      	ldr	r3, [pc, #112]	; (80075f8 <__ieee754_rem_pio2+0x350>)
 8007588:	4598      	cmp	r8, r3
 800758a:	dd37      	ble.n	80075fc <__ieee754_rem_pio2+0x354>
 800758c:	ee10 2a10 	vmov	r2, s0
 8007590:	462b      	mov	r3, r5
 8007592:	4620      	mov	r0, r4
 8007594:	4629      	mov	r1, r5
 8007596:	f7f8 fe7f 	bl	8000298 <__aeabi_dsub>
 800759a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800759e:	e9ca 0100 	strd	r0, r1, [sl]
 80075a2:	e695      	b.n	80072d0 <__ieee754_rem_pio2+0x28>
 80075a4:	f3af 8000 	nop.w
 80075a8:	54400000 	.word	0x54400000
 80075ac:	3ff921fb 	.word	0x3ff921fb
 80075b0:	1a626331 	.word	0x1a626331
 80075b4:	3dd0b461 	.word	0x3dd0b461
 80075b8:	1a600000 	.word	0x1a600000
 80075bc:	3dd0b461 	.word	0x3dd0b461
 80075c0:	2e037073 	.word	0x2e037073
 80075c4:	3ba3198a 	.word	0x3ba3198a
 80075c8:	6dc9c883 	.word	0x6dc9c883
 80075cc:	3fe45f30 	.word	0x3fe45f30
 80075d0:	2e000000 	.word	0x2e000000
 80075d4:	3ba3198a 	.word	0x3ba3198a
 80075d8:	252049c1 	.word	0x252049c1
 80075dc:	397b839a 	.word	0x397b839a
 80075e0:	3fe921fb 	.word	0x3fe921fb
 80075e4:	4002d97b 	.word	0x4002d97b
 80075e8:	3ff921fb 	.word	0x3ff921fb
 80075ec:	413921fb 	.word	0x413921fb
 80075f0:	3fe00000 	.word	0x3fe00000
 80075f4:	0801b284 	.word	0x0801b284
 80075f8:	7fefffff 	.word	0x7fefffff
 80075fc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8007600:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8007604:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8007608:	4620      	mov	r0, r4
 800760a:	460d      	mov	r5, r1
 800760c:	f7f9 faac 	bl	8000b68 <__aeabi_d2iz>
 8007610:	f7f8 ff90 	bl	8000534 <__aeabi_i2d>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4620      	mov	r0, r4
 800761a:	4629      	mov	r1, r5
 800761c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007620:	f7f8 fe3a 	bl	8000298 <__aeabi_dsub>
 8007624:	4b21      	ldr	r3, [pc, #132]	; (80076ac <__ieee754_rem_pio2+0x404>)
 8007626:	2200      	movs	r2, #0
 8007628:	f7f8 ffee 	bl	8000608 <__aeabi_dmul>
 800762c:	460d      	mov	r5, r1
 800762e:	4604      	mov	r4, r0
 8007630:	f7f9 fa9a 	bl	8000b68 <__aeabi_d2iz>
 8007634:	f7f8 ff7e 	bl	8000534 <__aeabi_i2d>
 8007638:	4602      	mov	r2, r0
 800763a:	460b      	mov	r3, r1
 800763c:	4620      	mov	r0, r4
 800763e:	4629      	mov	r1, r5
 8007640:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007644:	f7f8 fe28 	bl	8000298 <__aeabi_dsub>
 8007648:	4b18      	ldr	r3, [pc, #96]	; (80076ac <__ieee754_rem_pio2+0x404>)
 800764a:	2200      	movs	r2, #0
 800764c:	f7f8 ffdc 	bl	8000608 <__aeabi_dmul>
 8007650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007654:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8007658:	2703      	movs	r7, #3
 800765a:	2400      	movs	r4, #0
 800765c:	2500      	movs	r5, #0
 800765e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8007662:	4622      	mov	r2, r4
 8007664:	462b      	mov	r3, r5
 8007666:	46b9      	mov	r9, r7
 8007668:	3f01      	subs	r7, #1
 800766a:	f7f9 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800766e:	2800      	cmp	r0, #0
 8007670:	d1f5      	bne.n	800765e <__ieee754_rem_pio2+0x3b6>
 8007672:	4b0f      	ldr	r3, [pc, #60]	; (80076b0 <__ieee754_rem_pio2+0x408>)
 8007674:	9301      	str	r3, [sp, #4]
 8007676:	2302      	movs	r3, #2
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	4632      	mov	r2, r6
 800767c:	464b      	mov	r3, r9
 800767e:	4651      	mov	r1, sl
 8007680:	a804      	add	r0, sp, #16
 8007682:	f000 f821 	bl	80076c8 <__kernel_rem_pio2>
 8007686:	9b02      	ldr	r3, [sp, #8]
 8007688:	2b00      	cmp	r3, #0
 800768a:	4683      	mov	fp, r0
 800768c:	f6bf ae4c 	bge.w	8007328 <__ieee754_rem_pio2+0x80>
 8007690:	e9da 2100 	ldrd	r2, r1, [sl]
 8007694:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007698:	e9ca 2300 	strd	r2, r3, [sl]
 800769c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80076a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80076a4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80076a8:	e73f      	b.n	800752a <__ieee754_rem_pio2+0x282>
 80076aa:	bf00      	nop
 80076ac:	41700000 	.word	0x41700000
 80076b0:	0801b304 	.word	0x0801b304

080076b4 <fabs>:
 80076b4:	ec51 0b10 	vmov	r0, r1, d0
 80076b8:	ee10 2a10 	vmov	r2, s0
 80076bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80076c0:	ec43 2b10 	vmov	d0, r2, r3
 80076c4:	4770      	bx	lr
	...

080076c8 <__kernel_rem_pio2>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	ed2d 8b02 	vpush	{d8}
 80076d0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80076d4:	f112 0f14 	cmn.w	r2, #20
 80076d8:	9306      	str	r3, [sp, #24]
 80076da:	9104      	str	r1, [sp, #16]
 80076dc:	4bc2      	ldr	r3, [pc, #776]	; (80079e8 <__kernel_rem_pio2+0x320>)
 80076de:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80076e0:	9009      	str	r0, [sp, #36]	; 0x24
 80076e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	9b06      	ldr	r3, [sp, #24]
 80076ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80076ee:	bfa8      	it	ge
 80076f0:	1ed4      	subge	r4, r2, #3
 80076f2:	9305      	str	r3, [sp, #20]
 80076f4:	bfb2      	itee	lt
 80076f6:	2400      	movlt	r4, #0
 80076f8:	2318      	movge	r3, #24
 80076fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80076fe:	f06f 0317 	mvn.w	r3, #23
 8007702:	fb04 3303 	mla	r3, r4, r3, r3
 8007706:	eb03 0a02 	add.w	sl, r3, r2
 800770a:	9b00      	ldr	r3, [sp, #0]
 800770c:	9a05      	ldr	r2, [sp, #20]
 800770e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80079d8 <__kernel_rem_pio2+0x310>
 8007712:	eb03 0802 	add.w	r8, r3, r2
 8007716:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8007718:	1aa7      	subs	r7, r4, r2
 800771a:	ae20      	add	r6, sp, #128	; 0x80
 800771c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007720:	2500      	movs	r5, #0
 8007722:	4545      	cmp	r5, r8
 8007724:	dd13      	ble.n	800774e <__kernel_rem_pio2+0x86>
 8007726:	9b06      	ldr	r3, [sp, #24]
 8007728:	aa20      	add	r2, sp, #128	; 0x80
 800772a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800772e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8007732:	f04f 0800 	mov.w	r8, #0
 8007736:	9b00      	ldr	r3, [sp, #0]
 8007738:	4598      	cmp	r8, r3
 800773a:	dc31      	bgt.n	80077a0 <__kernel_rem_pio2+0xd8>
 800773c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80079d8 <__kernel_rem_pio2+0x310>
 8007740:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007744:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007748:	462f      	mov	r7, r5
 800774a:	2600      	movs	r6, #0
 800774c:	e01b      	b.n	8007786 <__kernel_rem_pio2+0xbe>
 800774e:	42ef      	cmn	r7, r5
 8007750:	d407      	bmi.n	8007762 <__kernel_rem_pio2+0x9a>
 8007752:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007756:	f7f8 feed 	bl	8000534 <__aeabi_i2d>
 800775a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800775e:	3501      	adds	r5, #1
 8007760:	e7df      	b.n	8007722 <__kernel_rem_pio2+0x5a>
 8007762:	ec51 0b18 	vmov	r0, r1, d8
 8007766:	e7f8      	b.n	800775a <__kernel_rem_pio2+0x92>
 8007768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800776c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007770:	f7f8 ff4a 	bl	8000608 <__aeabi_dmul>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800777c:	f7f8 fd8e 	bl	800029c <__adddf3>
 8007780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007784:	3601      	adds	r6, #1
 8007786:	9b05      	ldr	r3, [sp, #20]
 8007788:	429e      	cmp	r6, r3
 800778a:	f1a7 0708 	sub.w	r7, r7, #8
 800778e:	ddeb      	ble.n	8007768 <__kernel_rem_pio2+0xa0>
 8007790:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007794:	f108 0801 	add.w	r8, r8, #1
 8007798:	ecab 7b02 	vstmia	fp!, {d7}
 800779c:	3508      	adds	r5, #8
 800779e:	e7ca      	b.n	8007736 <__kernel_rem_pio2+0x6e>
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	aa0c      	add	r2, sp, #48	; 0x30
 80077a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80077aa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80077ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80077b0:	9c00      	ldr	r4, [sp, #0]
 80077b2:	930a      	str	r3, [sp, #40]	; 0x28
 80077b4:	00e3      	lsls	r3, r4, #3
 80077b6:	9308      	str	r3, [sp, #32]
 80077b8:	ab98      	add	r3, sp, #608	; 0x260
 80077ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80077c2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80077c6:	ab70      	add	r3, sp, #448	; 0x1c0
 80077c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80077cc:	46c3      	mov	fp, r8
 80077ce:	46a1      	mov	r9, r4
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	f1a5 0508 	sub.w	r5, r5, #8
 80077d8:	dc77      	bgt.n	80078ca <__kernel_rem_pio2+0x202>
 80077da:	ec47 6b10 	vmov	d0, r6, r7
 80077de:	4650      	mov	r0, sl
 80077e0:	f000 fac2 	bl	8007d68 <scalbn>
 80077e4:	ec57 6b10 	vmov	r6, r7, d0
 80077e8:	2200      	movs	r2, #0
 80077ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80077ee:	ee10 0a10 	vmov	r0, s0
 80077f2:	4639      	mov	r1, r7
 80077f4:	f7f8 ff08 	bl	8000608 <__aeabi_dmul>
 80077f8:	ec41 0b10 	vmov	d0, r0, r1
 80077fc:	f000 fb34 	bl	8007e68 <floor>
 8007800:	4b7a      	ldr	r3, [pc, #488]	; (80079ec <__kernel_rem_pio2+0x324>)
 8007802:	ec51 0b10 	vmov	r0, r1, d0
 8007806:	2200      	movs	r2, #0
 8007808:	f7f8 fefe 	bl	8000608 <__aeabi_dmul>
 800780c:	4602      	mov	r2, r0
 800780e:	460b      	mov	r3, r1
 8007810:	4630      	mov	r0, r6
 8007812:	4639      	mov	r1, r7
 8007814:	f7f8 fd40 	bl	8000298 <__aeabi_dsub>
 8007818:	460f      	mov	r7, r1
 800781a:	4606      	mov	r6, r0
 800781c:	f7f9 f9a4 	bl	8000b68 <__aeabi_d2iz>
 8007820:	9002      	str	r0, [sp, #8]
 8007822:	f7f8 fe87 	bl	8000534 <__aeabi_i2d>
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4630      	mov	r0, r6
 800782c:	4639      	mov	r1, r7
 800782e:	f7f8 fd33 	bl	8000298 <__aeabi_dsub>
 8007832:	f1ba 0f00 	cmp.w	sl, #0
 8007836:	4606      	mov	r6, r0
 8007838:	460f      	mov	r7, r1
 800783a:	dd6d      	ble.n	8007918 <__kernel_rem_pio2+0x250>
 800783c:	1e61      	subs	r1, r4, #1
 800783e:	ab0c      	add	r3, sp, #48	; 0x30
 8007840:	9d02      	ldr	r5, [sp, #8]
 8007842:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007846:	f1ca 0018 	rsb	r0, sl, #24
 800784a:	fa43 f200 	asr.w	r2, r3, r0
 800784e:	4415      	add	r5, r2
 8007850:	4082      	lsls	r2, r0
 8007852:	1a9b      	subs	r3, r3, r2
 8007854:	aa0c      	add	r2, sp, #48	; 0x30
 8007856:	9502      	str	r5, [sp, #8]
 8007858:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800785c:	f1ca 0217 	rsb	r2, sl, #23
 8007860:	fa43 fb02 	asr.w	fp, r3, r2
 8007864:	f1bb 0f00 	cmp.w	fp, #0
 8007868:	dd65      	ble.n	8007936 <__kernel_rem_pio2+0x26e>
 800786a:	9b02      	ldr	r3, [sp, #8]
 800786c:	2200      	movs	r2, #0
 800786e:	3301      	adds	r3, #1
 8007870:	9302      	str	r3, [sp, #8]
 8007872:	4615      	mov	r5, r2
 8007874:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007878:	4294      	cmp	r4, r2
 800787a:	f300 809f 	bgt.w	80079bc <__kernel_rem_pio2+0x2f4>
 800787e:	f1ba 0f00 	cmp.w	sl, #0
 8007882:	dd07      	ble.n	8007894 <__kernel_rem_pio2+0x1cc>
 8007884:	f1ba 0f01 	cmp.w	sl, #1
 8007888:	f000 80c1 	beq.w	8007a0e <__kernel_rem_pio2+0x346>
 800788c:	f1ba 0f02 	cmp.w	sl, #2
 8007890:	f000 80c7 	beq.w	8007a22 <__kernel_rem_pio2+0x35a>
 8007894:	f1bb 0f02 	cmp.w	fp, #2
 8007898:	d14d      	bne.n	8007936 <__kernel_rem_pio2+0x26e>
 800789a:	4632      	mov	r2, r6
 800789c:	463b      	mov	r3, r7
 800789e:	4954      	ldr	r1, [pc, #336]	; (80079f0 <__kernel_rem_pio2+0x328>)
 80078a0:	2000      	movs	r0, #0
 80078a2:	f7f8 fcf9 	bl	8000298 <__aeabi_dsub>
 80078a6:	4606      	mov	r6, r0
 80078a8:	460f      	mov	r7, r1
 80078aa:	2d00      	cmp	r5, #0
 80078ac:	d043      	beq.n	8007936 <__kernel_rem_pio2+0x26e>
 80078ae:	4650      	mov	r0, sl
 80078b0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80079e0 <__kernel_rem_pio2+0x318>
 80078b4:	f000 fa58 	bl	8007d68 <scalbn>
 80078b8:	4630      	mov	r0, r6
 80078ba:	4639      	mov	r1, r7
 80078bc:	ec53 2b10 	vmov	r2, r3, d0
 80078c0:	f7f8 fcea 	bl	8000298 <__aeabi_dsub>
 80078c4:	4606      	mov	r6, r0
 80078c6:	460f      	mov	r7, r1
 80078c8:	e035      	b.n	8007936 <__kernel_rem_pio2+0x26e>
 80078ca:	4b4a      	ldr	r3, [pc, #296]	; (80079f4 <__kernel_rem_pio2+0x32c>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	4630      	mov	r0, r6
 80078d0:	4639      	mov	r1, r7
 80078d2:	f7f8 fe99 	bl	8000608 <__aeabi_dmul>
 80078d6:	f7f9 f947 	bl	8000b68 <__aeabi_d2iz>
 80078da:	f7f8 fe2b 	bl	8000534 <__aeabi_i2d>
 80078de:	4602      	mov	r2, r0
 80078e0:	460b      	mov	r3, r1
 80078e2:	ec43 2b18 	vmov	d8, r2, r3
 80078e6:	4b44      	ldr	r3, [pc, #272]	; (80079f8 <__kernel_rem_pio2+0x330>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	f7f8 fe8d 	bl	8000608 <__aeabi_dmul>
 80078ee:	4602      	mov	r2, r0
 80078f0:	460b      	mov	r3, r1
 80078f2:	4630      	mov	r0, r6
 80078f4:	4639      	mov	r1, r7
 80078f6:	f7f8 fccf 	bl	8000298 <__aeabi_dsub>
 80078fa:	f7f9 f935 	bl	8000b68 <__aeabi_d2iz>
 80078fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007902:	f84b 0b04 	str.w	r0, [fp], #4
 8007906:	ec51 0b18 	vmov	r0, r1, d8
 800790a:	f7f8 fcc7 	bl	800029c <__adddf3>
 800790e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007912:	4606      	mov	r6, r0
 8007914:	460f      	mov	r7, r1
 8007916:	e75b      	b.n	80077d0 <__kernel_rem_pio2+0x108>
 8007918:	d106      	bne.n	8007928 <__kernel_rem_pio2+0x260>
 800791a:	1e63      	subs	r3, r4, #1
 800791c:	aa0c      	add	r2, sp, #48	; 0x30
 800791e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007922:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8007926:	e79d      	b.n	8007864 <__kernel_rem_pio2+0x19c>
 8007928:	4b34      	ldr	r3, [pc, #208]	; (80079fc <__kernel_rem_pio2+0x334>)
 800792a:	2200      	movs	r2, #0
 800792c:	f7f9 f8f2 	bl	8000b14 <__aeabi_dcmpge>
 8007930:	2800      	cmp	r0, #0
 8007932:	d140      	bne.n	80079b6 <__kernel_rem_pio2+0x2ee>
 8007934:	4683      	mov	fp, r0
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	4630      	mov	r0, r6
 800793c:	4639      	mov	r1, r7
 800793e:	f7f9 f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007942:	2800      	cmp	r0, #0
 8007944:	f000 80c1 	beq.w	8007aca <__kernel_rem_pio2+0x402>
 8007948:	1e65      	subs	r5, r4, #1
 800794a:	462b      	mov	r3, r5
 800794c:	2200      	movs	r2, #0
 800794e:	9900      	ldr	r1, [sp, #0]
 8007950:	428b      	cmp	r3, r1
 8007952:	da6d      	bge.n	8007a30 <__kernel_rem_pio2+0x368>
 8007954:	2a00      	cmp	r2, #0
 8007956:	f000 808a 	beq.w	8007a6e <__kernel_rem_pio2+0x3a6>
 800795a:	ab0c      	add	r3, sp, #48	; 0x30
 800795c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007960:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80ae 	beq.w	8007ac6 <__kernel_rem_pio2+0x3fe>
 800796a:	4650      	mov	r0, sl
 800796c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80079e0 <__kernel_rem_pio2+0x318>
 8007970:	f000 f9fa 	bl	8007d68 <scalbn>
 8007974:	1c6b      	adds	r3, r5, #1
 8007976:	00da      	lsls	r2, r3, #3
 8007978:	9205      	str	r2, [sp, #20]
 800797a:	ec57 6b10 	vmov	r6, r7, d0
 800797e:	aa70      	add	r2, sp, #448	; 0x1c0
 8007980:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80079f4 <__kernel_rem_pio2+0x32c>
 8007984:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8007988:	462c      	mov	r4, r5
 800798a:	f04f 0800 	mov.w	r8, #0
 800798e:	2c00      	cmp	r4, #0
 8007990:	f280 80d4 	bge.w	8007b3c <__kernel_rem_pio2+0x474>
 8007994:	462c      	mov	r4, r5
 8007996:	2c00      	cmp	r4, #0
 8007998:	f2c0 8102 	blt.w	8007ba0 <__kernel_rem_pio2+0x4d8>
 800799c:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <__kernel_rem_pio2+0x338>)
 800799e:	461e      	mov	r6, r3
 80079a0:	ab70      	add	r3, sp, #448	; 0x1c0
 80079a2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 80079a6:	1b2b      	subs	r3, r5, r4
 80079a8:	f04f 0900 	mov.w	r9, #0
 80079ac:	f04f 0a00 	mov.w	sl, #0
 80079b0:	2700      	movs	r7, #0
 80079b2:	9306      	str	r3, [sp, #24]
 80079b4:	e0e6      	b.n	8007b84 <__kernel_rem_pio2+0x4bc>
 80079b6:	f04f 0b02 	mov.w	fp, #2
 80079ba:	e756      	b.n	800786a <__kernel_rem_pio2+0x1a2>
 80079bc:	f8d8 3000 	ldr.w	r3, [r8]
 80079c0:	bb05      	cbnz	r5, 8007a04 <__kernel_rem_pio2+0x33c>
 80079c2:	b123      	cbz	r3, 80079ce <__kernel_rem_pio2+0x306>
 80079c4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80079c8:	f8c8 3000 	str.w	r3, [r8]
 80079cc:	2301      	movs	r3, #1
 80079ce:	3201      	adds	r2, #1
 80079d0:	f108 0804 	add.w	r8, r8, #4
 80079d4:	461d      	mov	r5, r3
 80079d6:	e74f      	b.n	8007878 <__kernel_rem_pio2+0x1b0>
	...
 80079e4:	3ff00000 	.word	0x3ff00000
 80079e8:	0801b450 	.word	0x0801b450
 80079ec:	40200000 	.word	0x40200000
 80079f0:	3ff00000 	.word	0x3ff00000
 80079f4:	3e700000 	.word	0x3e700000
 80079f8:	41700000 	.word	0x41700000
 80079fc:	3fe00000 	.word	0x3fe00000
 8007a00:	0801b410 	.word	0x0801b410
 8007a04:	1acb      	subs	r3, r1, r3
 8007a06:	f8c8 3000 	str.w	r3, [r8]
 8007a0a:	462b      	mov	r3, r5
 8007a0c:	e7df      	b.n	80079ce <__kernel_rem_pio2+0x306>
 8007a0e:	1e62      	subs	r2, r4, #1
 8007a10:	ab0c      	add	r3, sp, #48	; 0x30
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007a1a:	a90c      	add	r1, sp, #48	; 0x30
 8007a1c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007a20:	e738      	b.n	8007894 <__kernel_rem_pio2+0x1cc>
 8007a22:	1e62      	subs	r2, r4, #1
 8007a24:	ab0c      	add	r3, sp, #48	; 0x30
 8007a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007a2e:	e7f4      	b.n	8007a1a <__kernel_rem_pio2+0x352>
 8007a30:	a90c      	add	r1, sp, #48	; 0x30
 8007a32:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007a36:	3b01      	subs	r3, #1
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	e788      	b.n	800794e <__kernel_rem_pio2+0x286>
 8007a3c:	3301      	adds	r3, #1
 8007a3e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007a42:	2900      	cmp	r1, #0
 8007a44:	d0fa      	beq.n	8007a3c <__kernel_rem_pio2+0x374>
 8007a46:	9a08      	ldr	r2, [sp, #32]
 8007a48:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8007a4c:	446a      	add	r2, sp
 8007a4e:	3a98      	subs	r2, #152	; 0x98
 8007a50:	9208      	str	r2, [sp, #32]
 8007a52:	9a06      	ldr	r2, [sp, #24]
 8007a54:	a920      	add	r1, sp, #128	; 0x80
 8007a56:	18a2      	adds	r2, r4, r2
 8007a58:	18e3      	adds	r3, r4, r3
 8007a5a:	f104 0801 	add.w	r8, r4, #1
 8007a5e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8007a62:	9302      	str	r3, [sp, #8]
 8007a64:	9b02      	ldr	r3, [sp, #8]
 8007a66:	4543      	cmp	r3, r8
 8007a68:	da04      	bge.n	8007a74 <__kernel_rem_pio2+0x3ac>
 8007a6a:	461c      	mov	r4, r3
 8007a6c:	e6a2      	b.n	80077b4 <__kernel_rem_pio2+0xec>
 8007a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a70:	2301      	movs	r3, #1
 8007a72:	e7e4      	b.n	8007a3e <__kernel_rem_pio2+0x376>
 8007a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a76:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007a7a:	f7f8 fd5b 	bl	8000534 <__aeabi_i2d>
 8007a7e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a84:	46ab      	mov	fp, r5
 8007a86:	461c      	mov	r4, r3
 8007a88:	f04f 0900 	mov.w	r9, #0
 8007a8c:	2600      	movs	r6, #0
 8007a8e:	2700      	movs	r7, #0
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	4599      	cmp	r9, r3
 8007a94:	dd06      	ble.n	8007aa4 <__kernel_rem_pio2+0x3dc>
 8007a96:	9b08      	ldr	r3, [sp, #32]
 8007a98:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007a9c:	f108 0801 	add.w	r8, r8, #1
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	e7df      	b.n	8007a64 <__kernel_rem_pio2+0x39c>
 8007aa4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007aa8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007aac:	f7f8 fdac 	bl	8000608 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f7f8 fbf0 	bl	800029c <__adddf3>
 8007abc:	f109 0901 	add.w	r9, r9, #1
 8007ac0:	4606      	mov	r6, r0
 8007ac2:	460f      	mov	r7, r1
 8007ac4:	e7e4      	b.n	8007a90 <__kernel_rem_pio2+0x3c8>
 8007ac6:	3d01      	subs	r5, #1
 8007ac8:	e747      	b.n	800795a <__kernel_rem_pio2+0x292>
 8007aca:	ec47 6b10 	vmov	d0, r6, r7
 8007ace:	f1ca 0000 	rsb	r0, sl, #0
 8007ad2:	f000 f949 	bl	8007d68 <scalbn>
 8007ad6:	ec57 6b10 	vmov	r6, r7, d0
 8007ada:	4ba0      	ldr	r3, [pc, #640]	; (8007d5c <__kernel_rem_pio2+0x694>)
 8007adc:	ee10 0a10 	vmov	r0, s0
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	4639      	mov	r1, r7
 8007ae4:	f7f9 f816 	bl	8000b14 <__aeabi_dcmpge>
 8007ae8:	b1f8      	cbz	r0, 8007b2a <__kernel_rem_pio2+0x462>
 8007aea:	4b9d      	ldr	r3, [pc, #628]	; (8007d60 <__kernel_rem_pio2+0x698>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	4630      	mov	r0, r6
 8007af0:	4639      	mov	r1, r7
 8007af2:	f7f8 fd89 	bl	8000608 <__aeabi_dmul>
 8007af6:	f7f9 f837 	bl	8000b68 <__aeabi_d2iz>
 8007afa:	4680      	mov	r8, r0
 8007afc:	f7f8 fd1a 	bl	8000534 <__aeabi_i2d>
 8007b00:	4b96      	ldr	r3, [pc, #600]	; (8007d5c <__kernel_rem_pio2+0x694>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	f7f8 fd80 	bl	8000608 <__aeabi_dmul>
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	4639      	mov	r1, r7
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f7f8 fbc2 	bl	8000298 <__aeabi_dsub>
 8007b14:	f7f9 f828 	bl	8000b68 <__aeabi_d2iz>
 8007b18:	1c65      	adds	r5, r4, #1
 8007b1a:	ab0c      	add	r3, sp, #48	; 0x30
 8007b1c:	f10a 0a18 	add.w	sl, sl, #24
 8007b20:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b24:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007b28:	e71f      	b.n	800796a <__kernel_rem_pio2+0x2a2>
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	4639      	mov	r1, r7
 8007b2e:	f7f9 f81b 	bl	8000b68 <__aeabi_d2iz>
 8007b32:	ab0c      	add	r3, sp, #48	; 0x30
 8007b34:	4625      	mov	r5, r4
 8007b36:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007b3a:	e716      	b.n	800796a <__kernel_rem_pio2+0x2a2>
 8007b3c:	ab0c      	add	r3, sp, #48	; 0x30
 8007b3e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007b42:	f7f8 fcf7 	bl	8000534 <__aeabi_i2d>
 8007b46:	4632      	mov	r2, r6
 8007b48:	463b      	mov	r3, r7
 8007b4a:	f7f8 fd5d 	bl	8000608 <__aeabi_dmul>
 8007b4e:	4642      	mov	r2, r8
 8007b50:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007b54:	464b      	mov	r3, r9
 8007b56:	4630      	mov	r0, r6
 8007b58:	4639      	mov	r1, r7
 8007b5a:	f7f8 fd55 	bl	8000608 <__aeabi_dmul>
 8007b5e:	3c01      	subs	r4, #1
 8007b60:	4606      	mov	r6, r0
 8007b62:	460f      	mov	r7, r1
 8007b64:	e713      	b.n	800798e <__kernel_rem_pio2+0x2c6>
 8007b66:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8007b6a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8007b6e:	f7f8 fd4b 	bl	8000608 <__aeabi_dmul>
 8007b72:	4602      	mov	r2, r0
 8007b74:	460b      	mov	r3, r1
 8007b76:	4648      	mov	r0, r9
 8007b78:	4651      	mov	r1, sl
 8007b7a:	f7f8 fb8f 	bl	800029c <__adddf3>
 8007b7e:	3701      	adds	r7, #1
 8007b80:	4681      	mov	r9, r0
 8007b82:	468a      	mov	sl, r1
 8007b84:	9b00      	ldr	r3, [sp, #0]
 8007b86:	429f      	cmp	r7, r3
 8007b88:	dc02      	bgt.n	8007b90 <__kernel_rem_pio2+0x4c8>
 8007b8a:	9b06      	ldr	r3, [sp, #24]
 8007b8c:	429f      	cmp	r7, r3
 8007b8e:	ddea      	ble.n	8007b66 <__kernel_rem_pio2+0x49e>
 8007b90:	9a06      	ldr	r2, [sp, #24]
 8007b92:	ab48      	add	r3, sp, #288	; 0x120
 8007b94:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8007b98:	e9c6 9a00 	strd	r9, sl, [r6]
 8007b9c:	3c01      	subs	r4, #1
 8007b9e:	e6fa      	b.n	8007996 <__kernel_rem_pio2+0x2ce>
 8007ba0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	dc0b      	bgt.n	8007bbe <__kernel_rem_pio2+0x4f6>
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dc39      	bgt.n	8007c1e <__kernel_rem_pio2+0x556>
 8007baa:	d05d      	beq.n	8007c68 <__kernel_rem_pio2+0x5a0>
 8007bac:	9b02      	ldr	r3, [sp, #8]
 8007bae:	f003 0007 	and.w	r0, r3, #7
 8007bb2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8007bb6:	ecbd 8b02 	vpop	{d8}
 8007bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbe:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d1f3      	bne.n	8007bac <__kernel_rem_pio2+0x4e4>
 8007bc4:	9b05      	ldr	r3, [sp, #20]
 8007bc6:	9500      	str	r5, [sp, #0]
 8007bc8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8007bcc:	eb0d 0403 	add.w	r4, sp, r3
 8007bd0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8007bd4:	46a2      	mov	sl, r4
 8007bd6:	9b00      	ldr	r3, [sp, #0]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f1aa 0a08 	sub.w	sl, sl, #8
 8007bde:	dc69      	bgt.n	8007cb4 <__kernel_rem_pio2+0x5ec>
 8007be0:	46aa      	mov	sl, r5
 8007be2:	f1ba 0f01 	cmp.w	sl, #1
 8007be6:	f1a4 0408 	sub.w	r4, r4, #8
 8007bea:	f300 8083 	bgt.w	8007cf4 <__kernel_rem_pio2+0x62c>
 8007bee:	9c05      	ldr	r4, [sp, #20]
 8007bf0:	ab48      	add	r3, sp, #288	; 0x120
 8007bf2:	441c      	add	r4, r3
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	2d01      	cmp	r5, #1
 8007bfa:	f300 809a 	bgt.w	8007d32 <__kernel_rem_pio2+0x66a>
 8007bfe:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8007c02:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	f040 8098 	bne.w	8007d3e <__kernel_rem_pio2+0x676>
 8007c0e:	9b04      	ldr	r3, [sp, #16]
 8007c10:	e9c3 7800 	strd	r7, r8, [r3]
 8007c14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007c18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007c1c:	e7c6      	b.n	8007bac <__kernel_rem_pio2+0x4e4>
 8007c1e:	9e05      	ldr	r6, [sp, #20]
 8007c20:	ab48      	add	r3, sp, #288	; 0x120
 8007c22:	441e      	add	r6, r3
 8007c24:	462c      	mov	r4, r5
 8007c26:	2000      	movs	r0, #0
 8007c28:	2100      	movs	r1, #0
 8007c2a:	2c00      	cmp	r4, #0
 8007c2c:	da33      	bge.n	8007c96 <__kernel_rem_pio2+0x5ce>
 8007c2e:	f1bb 0f00 	cmp.w	fp, #0
 8007c32:	d036      	beq.n	8007ca2 <__kernel_rem_pio2+0x5da>
 8007c34:	4602      	mov	r2, r0
 8007c36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c3a:	9c04      	ldr	r4, [sp, #16]
 8007c3c:	e9c4 2300 	strd	r2, r3, [r4]
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8007c48:	f7f8 fb26 	bl	8000298 <__aeabi_dsub>
 8007c4c:	ae4a      	add	r6, sp, #296	; 0x128
 8007c4e:	2401      	movs	r4, #1
 8007c50:	42a5      	cmp	r5, r4
 8007c52:	da29      	bge.n	8007ca8 <__kernel_rem_pio2+0x5e0>
 8007c54:	f1bb 0f00 	cmp.w	fp, #0
 8007c58:	d002      	beq.n	8007c60 <__kernel_rem_pio2+0x598>
 8007c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c5e:	4619      	mov	r1, r3
 8007c60:	9b04      	ldr	r3, [sp, #16]
 8007c62:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007c66:	e7a1      	b.n	8007bac <__kernel_rem_pio2+0x4e4>
 8007c68:	9c05      	ldr	r4, [sp, #20]
 8007c6a:	ab48      	add	r3, sp, #288	; 0x120
 8007c6c:	441c      	add	r4, r3
 8007c6e:	2000      	movs	r0, #0
 8007c70:	2100      	movs	r1, #0
 8007c72:	2d00      	cmp	r5, #0
 8007c74:	da09      	bge.n	8007c8a <__kernel_rem_pio2+0x5c2>
 8007c76:	f1bb 0f00 	cmp.w	fp, #0
 8007c7a:	d002      	beq.n	8007c82 <__kernel_rem_pio2+0x5ba>
 8007c7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c80:	4619      	mov	r1, r3
 8007c82:	9b04      	ldr	r3, [sp, #16]
 8007c84:	e9c3 0100 	strd	r0, r1, [r3]
 8007c88:	e790      	b.n	8007bac <__kernel_rem_pio2+0x4e4>
 8007c8a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007c8e:	f7f8 fb05 	bl	800029c <__adddf3>
 8007c92:	3d01      	subs	r5, #1
 8007c94:	e7ed      	b.n	8007c72 <__kernel_rem_pio2+0x5aa>
 8007c96:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007c9a:	f7f8 faff 	bl	800029c <__adddf3>
 8007c9e:	3c01      	subs	r4, #1
 8007ca0:	e7c3      	b.n	8007c2a <__kernel_rem_pio2+0x562>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	e7c8      	b.n	8007c3a <__kernel_rem_pio2+0x572>
 8007ca8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007cac:	f7f8 faf6 	bl	800029c <__adddf3>
 8007cb0:	3401      	adds	r4, #1
 8007cb2:	e7cd      	b.n	8007c50 <__kernel_rem_pio2+0x588>
 8007cb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007cb8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007cbc:	9b00      	ldr	r3, [sp, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	9300      	str	r3, [sp, #0]
 8007cc2:	4632      	mov	r2, r6
 8007cc4:	463b      	mov	r3, r7
 8007cc6:	4640      	mov	r0, r8
 8007cc8:	4649      	mov	r1, r9
 8007cca:	f7f8 fae7 	bl	800029c <__adddf3>
 8007cce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	4640      	mov	r0, r8
 8007cd8:	4649      	mov	r1, r9
 8007cda:	f7f8 fadd 	bl	8000298 <__aeabi_dsub>
 8007cde:	4632      	mov	r2, r6
 8007ce0:	463b      	mov	r3, r7
 8007ce2:	f7f8 fadb 	bl	800029c <__adddf3>
 8007ce6:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007cea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007cee:	ed8a 7b00 	vstr	d7, [sl]
 8007cf2:	e770      	b.n	8007bd6 <__kernel_rem_pio2+0x50e>
 8007cf4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007cf8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007cfc:	4640      	mov	r0, r8
 8007cfe:	4632      	mov	r2, r6
 8007d00:	463b      	mov	r3, r7
 8007d02:	4649      	mov	r1, r9
 8007d04:	f7f8 faca 	bl	800029c <__adddf3>
 8007d08:	e9cd 0100 	strd	r0, r1, [sp]
 8007d0c:	4602      	mov	r2, r0
 8007d0e:	460b      	mov	r3, r1
 8007d10:	4640      	mov	r0, r8
 8007d12:	4649      	mov	r1, r9
 8007d14:	f7f8 fac0 	bl	8000298 <__aeabi_dsub>
 8007d18:	4632      	mov	r2, r6
 8007d1a:	463b      	mov	r3, r7
 8007d1c:	f7f8 fabe 	bl	800029c <__adddf3>
 8007d20:	ed9d 7b00 	vldr	d7, [sp]
 8007d24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007d28:	ed84 7b00 	vstr	d7, [r4]
 8007d2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d30:	e757      	b.n	8007be2 <__kernel_rem_pio2+0x51a>
 8007d32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007d36:	f7f8 fab1 	bl	800029c <__adddf3>
 8007d3a:	3d01      	subs	r5, #1
 8007d3c:	e75c      	b.n	8007bf8 <__kernel_rem_pio2+0x530>
 8007d3e:	9b04      	ldr	r3, [sp, #16]
 8007d40:	9a04      	ldr	r2, [sp, #16]
 8007d42:	601f      	str	r7, [r3, #0]
 8007d44:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007d48:	605c      	str	r4, [r3, #4]
 8007d4a:	609d      	str	r5, [r3, #8]
 8007d4c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007d50:	60d3      	str	r3, [r2, #12]
 8007d52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d56:	6110      	str	r0, [r2, #16]
 8007d58:	6153      	str	r3, [r2, #20]
 8007d5a:	e727      	b.n	8007bac <__kernel_rem_pio2+0x4e4>
 8007d5c:	41700000 	.word	0x41700000
 8007d60:	3e700000 	.word	0x3e700000
 8007d64:	00000000 	.word	0x00000000

08007d68 <scalbn>:
 8007d68:	b570      	push	{r4, r5, r6, lr}
 8007d6a:	ec55 4b10 	vmov	r4, r5, d0
 8007d6e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8007d72:	4606      	mov	r6, r0
 8007d74:	462b      	mov	r3, r5
 8007d76:	b999      	cbnz	r1, 8007da0 <scalbn+0x38>
 8007d78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007d7c:	4323      	orrs	r3, r4
 8007d7e:	d03f      	beq.n	8007e00 <scalbn+0x98>
 8007d80:	4b35      	ldr	r3, [pc, #212]	; (8007e58 <scalbn+0xf0>)
 8007d82:	4629      	mov	r1, r5
 8007d84:	ee10 0a10 	vmov	r0, s0
 8007d88:	2200      	movs	r2, #0
 8007d8a:	f7f8 fc3d 	bl	8000608 <__aeabi_dmul>
 8007d8e:	4b33      	ldr	r3, [pc, #204]	; (8007e5c <scalbn+0xf4>)
 8007d90:	429e      	cmp	r6, r3
 8007d92:	4604      	mov	r4, r0
 8007d94:	460d      	mov	r5, r1
 8007d96:	da10      	bge.n	8007dba <scalbn+0x52>
 8007d98:	a327      	add	r3, pc, #156	; (adr r3, 8007e38 <scalbn+0xd0>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	e01f      	b.n	8007de0 <scalbn+0x78>
 8007da0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8007da4:	4291      	cmp	r1, r2
 8007da6:	d10c      	bne.n	8007dc2 <scalbn+0x5a>
 8007da8:	ee10 2a10 	vmov	r2, s0
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7f8 fa74 	bl	800029c <__adddf3>
 8007db4:	4604      	mov	r4, r0
 8007db6:	460d      	mov	r5, r1
 8007db8:	e022      	b.n	8007e00 <scalbn+0x98>
 8007dba:	460b      	mov	r3, r1
 8007dbc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8007dc0:	3936      	subs	r1, #54	; 0x36
 8007dc2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8007dc6:	4296      	cmp	r6, r2
 8007dc8:	dd0d      	ble.n	8007de6 <scalbn+0x7e>
 8007dca:	2d00      	cmp	r5, #0
 8007dcc:	a11c      	add	r1, pc, #112	; (adr r1, 8007e40 <scalbn+0xd8>)
 8007dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd2:	da02      	bge.n	8007dda <scalbn+0x72>
 8007dd4:	a11c      	add	r1, pc, #112	; (adr r1, 8007e48 <scalbn+0xe0>)
 8007dd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dda:	a319      	add	r3, pc, #100	; (adr r3, 8007e40 <scalbn+0xd8>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fc12 	bl	8000608 <__aeabi_dmul>
 8007de4:	e7e6      	b.n	8007db4 <scalbn+0x4c>
 8007de6:	1872      	adds	r2, r6, r1
 8007de8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007dec:	428a      	cmp	r2, r1
 8007dee:	dcec      	bgt.n	8007dca <scalbn+0x62>
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	dd08      	ble.n	8007e06 <scalbn+0x9e>
 8007df4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007df8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007dfc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e00:	ec45 4b10 	vmov	d0, r4, r5
 8007e04:	bd70      	pop	{r4, r5, r6, pc}
 8007e06:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e0a:	da08      	bge.n	8007e1e <scalbn+0xb6>
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	a10a      	add	r1, pc, #40	; (adr r1, 8007e38 <scalbn+0xd0>)
 8007e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e14:	dac0      	bge.n	8007d98 <scalbn+0x30>
 8007e16:	a10e      	add	r1, pc, #56	; (adr r1, 8007e50 <scalbn+0xe8>)
 8007e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e1c:	e7bc      	b.n	8007d98 <scalbn+0x30>
 8007e1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e22:	3236      	adds	r2, #54	; 0x36
 8007e24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	4b0c      	ldr	r3, [pc, #48]	; (8007e60 <scalbn+0xf8>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	e7d5      	b.n	8007de0 <scalbn+0x78>
 8007e34:	f3af 8000 	nop.w
 8007e38:	c2f8f359 	.word	0xc2f8f359
 8007e3c:	01a56e1f 	.word	0x01a56e1f
 8007e40:	8800759c 	.word	0x8800759c
 8007e44:	7e37e43c 	.word	0x7e37e43c
 8007e48:	8800759c 	.word	0x8800759c
 8007e4c:	fe37e43c 	.word	0xfe37e43c
 8007e50:	c2f8f359 	.word	0xc2f8f359
 8007e54:	81a56e1f 	.word	0x81a56e1f
 8007e58:	43500000 	.word	0x43500000
 8007e5c:	ffff3cb0 	.word	0xffff3cb0
 8007e60:	3c900000 	.word	0x3c900000
 8007e64:	00000000 	.word	0x00000000

08007e68 <floor>:
 8007e68:	ec51 0b10 	vmov	r0, r1, d0
 8007e6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e74:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8007e78:	2e13      	cmp	r6, #19
 8007e7a:	ee10 5a10 	vmov	r5, s0
 8007e7e:	ee10 8a10 	vmov	r8, s0
 8007e82:	460c      	mov	r4, r1
 8007e84:	dc31      	bgt.n	8007eea <floor+0x82>
 8007e86:	2e00      	cmp	r6, #0
 8007e88:	da14      	bge.n	8007eb4 <floor+0x4c>
 8007e8a:	a333      	add	r3, pc, #204	; (adr r3, 8007f58 <floor+0xf0>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 fa04 	bl	800029c <__adddf3>
 8007e94:	2200      	movs	r2, #0
 8007e96:	2300      	movs	r3, #0
 8007e98:	f7f8 fe46 	bl	8000b28 <__aeabi_dcmpgt>
 8007e9c:	b138      	cbz	r0, 8007eae <floor+0x46>
 8007e9e:	2c00      	cmp	r4, #0
 8007ea0:	da53      	bge.n	8007f4a <floor+0xe2>
 8007ea2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007ea6:	4325      	orrs	r5, r4
 8007ea8:	d052      	beq.n	8007f50 <floor+0xe8>
 8007eaa:	4c2d      	ldr	r4, [pc, #180]	; (8007f60 <floor+0xf8>)
 8007eac:	2500      	movs	r5, #0
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	e024      	b.n	8007efe <floor+0x96>
 8007eb4:	4f2b      	ldr	r7, [pc, #172]	; (8007f64 <floor+0xfc>)
 8007eb6:	4137      	asrs	r7, r6
 8007eb8:	ea01 0307 	and.w	r3, r1, r7
 8007ebc:	4303      	orrs	r3, r0
 8007ebe:	d01e      	beq.n	8007efe <floor+0x96>
 8007ec0:	a325      	add	r3, pc, #148	; (adr r3, 8007f58 <floor+0xf0>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 f9e9 	bl	800029c <__adddf3>
 8007eca:	2200      	movs	r2, #0
 8007ecc:	2300      	movs	r3, #0
 8007ece:	f7f8 fe2b 	bl	8000b28 <__aeabi_dcmpgt>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d0eb      	beq.n	8007eae <floor+0x46>
 8007ed6:	2c00      	cmp	r4, #0
 8007ed8:	bfbe      	ittt	lt
 8007eda:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007ede:	4133      	asrlt	r3, r6
 8007ee0:	18e4      	addlt	r4, r4, r3
 8007ee2:	ea24 0407 	bic.w	r4, r4, r7
 8007ee6:	2500      	movs	r5, #0
 8007ee8:	e7e1      	b.n	8007eae <floor+0x46>
 8007eea:	2e33      	cmp	r6, #51	; 0x33
 8007eec:	dd0b      	ble.n	8007f06 <floor+0x9e>
 8007eee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007ef2:	d104      	bne.n	8007efe <floor+0x96>
 8007ef4:	ee10 2a10 	vmov	r2, s0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	f7f8 f9cf 	bl	800029c <__adddf3>
 8007efe:	ec41 0b10 	vmov	d0, r0, r1
 8007f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f06:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8007f0a:	f04f 37ff 	mov.w	r7, #4294967295
 8007f0e:	40df      	lsrs	r7, r3
 8007f10:	4238      	tst	r0, r7
 8007f12:	d0f4      	beq.n	8007efe <floor+0x96>
 8007f14:	a310      	add	r3, pc, #64	; (adr r3, 8007f58 <floor+0xf0>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f9bf 	bl	800029c <__adddf3>
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2300      	movs	r3, #0
 8007f22:	f7f8 fe01 	bl	8000b28 <__aeabi_dcmpgt>
 8007f26:	2800      	cmp	r0, #0
 8007f28:	d0c1      	beq.n	8007eae <floor+0x46>
 8007f2a:	2c00      	cmp	r4, #0
 8007f2c:	da0a      	bge.n	8007f44 <floor+0xdc>
 8007f2e:	2e14      	cmp	r6, #20
 8007f30:	d101      	bne.n	8007f36 <floor+0xce>
 8007f32:	3401      	adds	r4, #1
 8007f34:	e006      	b.n	8007f44 <floor+0xdc>
 8007f36:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	40b3      	lsls	r3, r6
 8007f3e:	441d      	add	r5, r3
 8007f40:	45a8      	cmp	r8, r5
 8007f42:	d8f6      	bhi.n	8007f32 <floor+0xca>
 8007f44:	ea25 0507 	bic.w	r5, r5, r7
 8007f48:	e7b1      	b.n	8007eae <floor+0x46>
 8007f4a:	2500      	movs	r5, #0
 8007f4c:	462c      	mov	r4, r5
 8007f4e:	e7ae      	b.n	8007eae <floor+0x46>
 8007f50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f54:	e7ab      	b.n	8007eae <floor+0x46>
 8007f56:	bf00      	nop
 8007f58:	8800759c 	.word	0x8800759c
 8007f5c:	7e37e43c 	.word	0x7e37e43c
 8007f60:	bff00000 	.word	0xbff00000
 8007f64:	000fffff 	.word	0x000fffff

08007f68 <_init>:
 8007f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6a:	bf00      	nop
 8007f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f6e:	bc08      	pop	{r3}
 8007f70:	469e      	mov	lr, r3
 8007f72:	4770      	bx	lr

08007f74 <_fini>:
 8007f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f76:	bf00      	nop
 8007f78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f7a:	bc08      	pop	{r3}
 8007f7c:	469e      	mov	lr, r3
 8007f7e:	4770      	bx	lr
